/*****************************************
  Emitting Generated Code                  
*******************************************/
class decimalParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, Int], Int])) {
def apply(x0:Array[Char]): scala.Tuple2[scala.Tuple2[Int, Int], Int] = {
val x1 = (0,0)
val x2 = (x1,-1)
var x3: scala.Tuple2[scala.Tuple2[Int, Int], Int] = x2
var x4: Int = 0
var x5: Int = -1
var x6: Int = 0
val x13 = x0.length
val x34 = while ({val x7 = x5
val x8 = x6
val x9 = x7 != x8
x9}) {
val x11 = x6
x5 = x11
val x14 = x11 >= x13
val x32 = if (x14) {
()
} else {
val x15 = x0(x11)
val x16 = x15 >= '0'
val x17 = x15 <= '9'
val x18 = x16 && x17
val x30 = if (x18) {
val x24 = x4
val x21 = x15 - '0'
val x22 = x21.toInt
val x25 = x24 * 10
val x26 = x25 + x22
x4 = x26
val x19 = x11 + 1
x6 = x19
()
} else {
()
}
x30
}
x32
}
val x35 = x4
val x36 = x6
val x38 = x36 >= x13
val x82 = if (x38) {
()
} else {
val x39 = x0(x36)
val x40 = x39 == '.'
val x80 = if (x40) {
var x43: Int = 0
var x44: Int = -1
val x41 = x36 + 1
var x45: Int = x41
val x72 = while ({val x46 = x44
val x47 = x45
val x48 = x46 != x47
x48}) {
val x50 = x45
x44 = x50
val x52 = x50 >= x13
val x70 = if (x52) {
()
} else {
val x53 = x0(x50)
val x54 = x53 >= '0'
val x55 = x53 <= '9'
val x56 = x54 && x55
val x68 = if (x56) {
val x62 = x43
val x59 = x53 - '0'
val x60 = x59.toInt
val x63 = x62 * 10
val x64 = x63 + x60
x43 = x64
val x57 = x50 + 1
x45 = x57
()
} else {
()
}
x68
}
x70
}
val x73 = x43
val x74 = x45
val x76 = (x35,x73)
val x77 = (x76,x74)
x3 = x77
()
} else {
()
}
x80
}
val x83 = x3
x83
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((12,34),5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class wildRegexParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x168:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x170: scala.Tuple2[java.lang.String, Int] = x169
var x171: java.lang.String = ""
var x172: Int = -1
var x173: Int = 0
val x180 = x168.length
val x195 = while ({val x174 = x172
val x175 = x173
val x176 = x174 != x175
x176}) {
val x178 = x173
x172 = x178
val x181 = x178 >= x180
val x193 = if (x181) {
()
} else {
val x182 = x168(x178)
val x183 = x182 != '
'
val x191 = if (x183) {
val x186 = x171
val x187 = x186+x182
x171 = x187
val x184 = x178 + 1
x173 = x184
()
} else {
()
}
x191
}
x193
}
val x196 = x171
val x197 = x173
val x198 = (x196,x197)
x170 = x198
val x200 = x170
x200
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(f33l l1ke funkin' it up! (o_^) \o/ ,35)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class crlfParse extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x235:Array[Char]): scala.Tuple2[Char, Int] = {
val x236 = ('a',-1)
var x237: scala.Tuple2[Char, Int] = x236
val x238 = x235.length
val x239 = 0 >= x238
val x248 = if (x239) {
()
} else {
val x240 = x235(0)
val x241 = x240 == '
'
val x246 = if (x241) {
val x242 = 0 + 1
val x243 = (x240,x242)
x237 = x243
()
} else {
()
}
x246
}
val x249 = x237
x249
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(
,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class wildRegexCrlfParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x265:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x266: scala.Tuple2[java.lang.String, Int] = x169
var x267: java.lang.String = ""
var x268: Int = -1
var x269: Int = 0
val x276 = x265.length
val x291 = while ({val x270 = x268
val x271 = x269
val x272 = x270 != x271
x272}) {
val x274 = x269
x268 = x274
val x277 = x274 >= x276
val x289 = if (x277) {
()
} else {
val x278 = x265(x274)
val x279 = x278 != '
'
val x287 = if (x279) {
val x282 = x267
val x283 = x282+x278
x267 = x283
val x280 = x274 + 1
x269 = x280
()
} else {
()
}
x287
}
x289
}
val x292 = x267
val x293 = x269
val x295 = x293 >= x276
val x308 = if (x295) {
()
} else {
val x296 = x265(x293)
val x297 = x296 == '
'
val x306 = if (x297) {
val x298 = x293 + 1
val x302 = x292+x296
val x303 = (x302,x298)
x266 = x303
()
} else {
()
}
x306
}
val x309 = x266
x309
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(f33l l1ke funkin' it up! (o_^) \o/ 
,36)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class httpNumParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, Int], Int])) {
def apply(x357:Array[Char]): scala.Tuple2[scala.Tuple2[Int, Int], Int] = {
val x1 = (0,0)
val x2 = (x1,-1)
var x358: scala.Tuple2[scala.Tuple2[Int, Int], Int] = x2
val x359 = x357.length
val x360 = 0 >= x359
val x502 = if (x360) {
()
} else {
val x361 = x357(0)
val x362 = x361 == 'H'
val x500 = if (x362) {
val x242 = 0 + 1
val x364 = x242 >= x359
val x498 = if (x364) {
()
} else {
val x365 = x357(x242)
val x366 = x365 == 'T'
val x496 = if (x366) {
val x367 = x242 + 1
val x369 = x367 >= x359
val x494 = if (x369) {
()
} else {
val x370 = x357(x367)
val x371 = x370 == 'T'
val x492 = if (x371) {
val x372 = x367 + 1
val x374 = x372 >= x359
val x490 = if (x374) {
()
} else {
val x375 = x357(x372)
val x376 = x375 == 'P'
val x488 = if (x376) {
val x377 = x372 + 1
val x379 = x377 >= x359
val x486 = if (x379) {
()
} else {
val x380 = x357(x377)
val x381 = x380 == '/'
val x484 = if (x381) {
var x405: Int = 0
var x406: Int = -1
val x382 = x377 + 1
var x407: Int = x382
val x434 = while ({val x408 = x406
val x409 = x407
val x410 = x408 != x409
x410}) {
val x412 = x407
x406 = x412
val x414 = x412 >= x359
val x432 = if (x414) {
()
} else {
val x415 = x357(x412)
val x416 = x415 >= '0'
val x417 = x415 <= '9'
val x418 = x416 && x417
val x430 = if (x418) {
val x424 = x405
val x421 = x415 - '0'
val x422 = x421.toInt
val x425 = x424 * 10
val x426 = x425 + x422
x405 = x426
val x419 = x412 + 1
x407 = x419
()
} else {
()
}
x430
}
x432
}
val x435 = x405
val x436 = x407
val x438 = x436 >= x359
val x482 = if (x438) {
()
} else {
val x439 = x357(x436)
val x440 = x439 == '.'
val x480 = if (x440) {
var x443: Int = 0
var x444: Int = -1
val x441 = x436 + 1
var x445: Int = x441
val x472 = while ({val x446 = x444
val x447 = x445
val x448 = x446 != x447
x448}) {
val x450 = x445
x444 = x450
val x452 = x450 >= x359
val x470 = if (x452) {
()
} else {
val x453 = x357(x450)
val x454 = x453 >= '0'
val x455 = x453 <= '9'
val x456 = x454 && x455
val x468 = if (x456) {
val x462 = x443
val x459 = x453 - '0'
val x460 = x459.toInt
val x463 = x462 * 10
val x464 = x463 + x460
x443 = x464
val x457 = x450 + 1
x445 = x457
()
} else {
()
}
x468
}
x470
}
val x473 = x443
val x474 = x445
val x476 = (x435,x473)
val x477 = (x476,x474)
x358 = x477
()
} else {
()
}
x480
}
x482
} else {
()
}
x484
}
x486
} else {
()
}
x488
}
x490
} else {
()
}
x492
}
x494
} else {
()
}
x496
}
x498
} else {
()
}
x500
}
val x503 = x358
x503
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((1,1),8)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class httpNumStatusParse extends ((Array[Char])=>(scala.Tuple2[Int, Int])) {
def apply(x648:Array[Char]): scala.Tuple2[Int, Int] = {
val x649 = (0,-1)
var x650: scala.Tuple2[Int, Int] = x649
val x652 = x648.length
val x653 = 0 >= x652
val x856 = if (x653) {
()
} else {
val x654 = x648(0)
val x655 = x654 == 'H'
val x854 = if (x655) {
val x242 = 0 + 1
val x657 = x242 >= x652
val x852 = if (x657) {
()
} else {
val x658 = x648(x242)
val x659 = x658 == 'T'
val x850 = if (x659) {
val x367 = x242 + 1
val x661 = x367 >= x652
val x848 = if (x661) {
()
} else {
val x662 = x648(x367)
val x663 = x662 == 'T'
val x846 = if (x663) {
val x372 = x367 + 1
val x665 = x372 >= x652
val x844 = if (x665) {
()
} else {
val x666 = x648(x372)
val x667 = x666 == 'P'
val x842 = if (x667) {
val x377 = x372 + 1
val x669 = x377 >= x652
val x840 = if (x669) {
()
} else {
val x670 = x648(x377)
val x671 = x670 == '/'
val x838 = if (x671) {
var x693: Int = 0
var x694: Int = -1
val x382 = x377 + 1
var x695: Int = x382
val x722 = while ({val x696 = x694
val x697 = x695
val x698 = x696 != x697
x698}) {
val x700 = x695
x694 = x700
val x702 = x700 >= x652
val x720 = if (x702) {
()
} else {
val x703 = x648(x700)
val x704 = x703 >= '0'
val x705 = x703 <= '9'
val x706 = x704 && x705
val x718 = if (x706) {
val x712 = x693
val x709 = x703 - '0'
val x710 = x709.toInt
val x713 = x712 * 10
val x714 = x713 + x710
x693 = x714
val x707 = x700 + 1
x695 = x707
()
} else {
()
}
x718
}
x720
}
val x723 = x693
val x724 = x695
val x726 = x724 >= x652
val x836 = if (x726) {
()
} else {
val x727 = x648(x724)
val x728 = x727 == '.'
val x834 = if (x728) {
var x731: Int = 0
var x732: Int = -1
val x729 = x724 + 1
var x733: Int = x729
val x760 = while ({val x734 = x732
val x735 = x733
val x736 = x734 != x735
x736}) {
val x738 = x733
x732 = x738
val x740 = x738 >= x652
val x758 = if (x740) {
()
} else {
val x741 = x648(x738)
val x742 = x741 >= '0'
val x743 = x741 <= '9'
val x744 = x742 && x743
val x756 = if (x744) {
val x750 = x731
val x747 = x741 - '0'
val x748 = x747.toInt
val x751 = x750 * 10
val x752 = x751 + x748
x731 = x752
val x745 = x738 + 1
x733 = x745
()
} else {
()
}
x756
}
x758
}
val x761 = x731
val x762 = x733
val x651 = List()
var x768: scala.collection.immutable.List[Char] = x651
var x769: Int = -1
var x770: Int = x762
val x792 = while ({val x771 = x769
val x772 = x770
val x773 = x771 != x772
x773}) {
val x775 = x770
x769 = x775
val x777 = x775 >= x652
val x790 = if (x777) {
()
} else {
val x778 = x648(x775)
val x779 = x778 == ' '
val x788 = if (x779) {
val x782 = x768
val x783 = List(x778)
val x784 = x782 ::: x783
x768 = x784
val x780 = x775 + 1
x770 = x780
()
} else {
()
}
x788
}
x790
}
val x793 = x768
val x794 = x770
var x799: Int = 0
var x800: Int = -1
var x801: Int = x794
val x828 = while ({val x802 = x800
val x803 = x801
val x804 = x802 != x803
x804}) {
val x806 = x801
x800 = x806
val x808 = x806 >= x652
val x826 = if (x808) {
()
} else {
val x809 = x648(x806)
val x810 = x809 >= '0'
val x811 = x809 <= '9'
val x812 = x810 && x811
val x824 = if (x812) {
val x818 = x799
val x815 = x809 - '0'
val x816 = x815.toInt
val x819 = x818 * 10
val x820 = x819 + x816
x799 = x820
val x813 = x806 + 1
x801 = x813
()
} else {
()
}
x824
}
x826
}
val x829 = x799
val x830 = x801
val x831 = (x829,x830)
x650 = x831
()
} else {
()
}
x834
}
x836
} else {
()
}
x838
}
x840
} else {
()
}
x842
}
x844
} else {
()
}
x846
}
x848
} else {
()
}
x850
}
x852
} else {
()
}
x854
}
val x857 = x650
x857
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=1000
compilation: ok
(200,12)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParseTemp extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, java.lang.String], Int])) {
def apply(x1068:Array[Char]): scala.Tuple2[scala.Tuple2[Int, java.lang.String], Int] = {
val x1069 = (0,"")
val x1070 = (x1069,-1)
var x1071: scala.Tuple2[scala.Tuple2[Int, java.lang.String], Int] = x1070
val x1072 = x1068.length
val x1073 = 0 >= x1072
val x1315 = if (x1073) {
()
} else {
val x1074 = x1068(0)
val x1075 = x1074 == 'H'
val x1313 = if (x1075) {
val x242 = 0 + 1
val x1077 = x242 >= x1072
val x1311 = if (x1077) {
()
} else {
val x1078 = x1068(x242)
val x1079 = x1078 == 'T'
val x1309 = if (x1079) {
val x367 = x242 + 1
val x1081 = x367 >= x1072
val x1307 = if (x1081) {
()
} else {
val x1082 = x1068(x367)
val x1083 = x1082 == 'T'
val x1305 = if (x1083) {
val x372 = x367 + 1
val x1085 = x372 >= x1072
val x1303 = if (x1085) {
()
} else {
val x1086 = x1068(x372)
val x1087 = x1086 == 'P'
val x1301 = if (x1087) {
val x377 = x372 + 1
val x1089 = x377 >= x1072
val x1299 = if (x1089) {
()
} else {
val x1090 = x1068(x377)
val x1091 = x1090 == '/'
val x1297 = if (x1091) {
var x1113: Int = 0
var x1114: Int = -1
val x382 = x377 + 1
var x1115: Int = x382
val x1142 = while ({val x1116 = x1114
val x1117 = x1115
val x1118 = x1116 != x1117
x1118}) {
val x1120 = x1115
x1114 = x1120
val x1122 = x1120 >= x1072
val x1140 = if (x1122) {
()
} else {
val x1123 = x1068(x1120)
val x1124 = x1123 >= '0'
val x1125 = x1123 <= '9'
val x1126 = x1124 && x1125
val x1138 = if (x1126) {
val x1132 = x1113
val x1129 = x1123 - '0'
val x1130 = x1129.toInt
val x1133 = x1132 * 10
val x1134 = x1133 + x1130
x1113 = x1134
val x1127 = x1120 + 1
x1115 = x1127
()
} else {
()
}
x1138
}
x1140
}
val x1143 = x1113
val x1144 = x1115
val x1146 = x1144 >= x1072
val x1295 = if (x1146) {
()
} else {
val x1147 = x1068(x1144)
val x1148 = x1147 == '.'
val x1293 = if (x1148) {
var x1151: Int = 0
var x1152: Int = -1
val x1149 = x1144 + 1
var x1153: Int = x1149
val x1180 = while ({val x1154 = x1152
val x1155 = x1153
val x1156 = x1154 != x1155
x1156}) {
val x1158 = x1153
x1152 = x1158
val x1160 = x1158 >= x1072
val x1178 = if (x1160) {
()
} else {
val x1161 = x1068(x1158)
val x1162 = x1161 >= '0'
val x1163 = x1161 <= '9'
val x1164 = x1162 && x1163
val x1176 = if (x1164) {
val x1170 = x1151
val x1167 = x1161 - '0'
val x1168 = x1167.toInt
val x1171 = x1170 * 10
val x1172 = x1171 + x1168
x1151 = x1172
val x1165 = x1158 + 1
x1153 = x1165
()
} else {
()
}
x1176
}
x1178
}
val x1181 = x1151
val x1182 = x1153
val x651 = List()
var x1188: scala.collection.immutable.List[Char] = x651
var x1189: Int = -1
var x1190: Int = x1182
val x1212 = while ({val x1191 = x1189
val x1192 = x1190
val x1193 = x1191 != x1192
x1193}) {
val x1195 = x1190
x1189 = x1195
val x1197 = x1195 >= x1072
val x1210 = if (x1197) {
()
} else {
val x1198 = x1068(x1195)
val x1199 = x1198 == ' '
val x1208 = if (x1199) {
val x1202 = x1188
val x1203 = List(x1198)
val x1204 = x1202 ::: x1203
x1188 = x1204
val x1200 = x1195 + 1
x1190 = x1200
()
} else {
()
}
x1208
}
x1210
}
val x1213 = x1188
val x1214 = x1190
var x1219: Int = 0
var x1220: Int = -1
var x1221: Int = x1214
val x1248 = while ({val x1222 = x1220
val x1223 = x1221
val x1224 = x1222 != x1223
x1224}) {
val x1226 = x1221
x1220 = x1226
val x1228 = x1226 >= x1072
val x1246 = if (x1228) {
()
} else {
val x1229 = x1068(x1226)
val x1230 = x1229 >= '0'
val x1231 = x1229 <= '9'
val x1232 = x1230 && x1231
val x1244 = if (x1232) {
val x1238 = x1219
val x1235 = x1229 - '0'
val x1236 = x1235.toInt
val x1239 = x1238 * 10
val x1240 = x1239 + x1236
x1219 = x1240
val x1233 = x1226 + 1
x1221 = x1233
()
} else {
()
}
x1244
}
x1246
}
val x1249 = x1219
val x1250 = x1221
var x1252: java.lang.String = ""
var x1253: Int = -1
var x1254: Int = x1250
val x1275 = while ({val x1255 = x1253
val x1256 = x1254
val x1257 = x1255 != x1256
x1257}) {
val x1259 = x1254
x1253 = x1259
val x1261 = x1259 >= x1072
val x1273 = if (x1261) {
()
} else {
val x1262 = x1068(x1259)
val x1263 = x1262 != '
'
val x1271 = if (x1263) {
val x1266 = x1252
val x1267 = x1266+x1262
x1252 = x1267
val x1264 = x1259 + 1
x1254 = x1264
()
} else {
()
}
x1271
}
x1273
}
val x1276 = x1252
val x1277 = x1254
val x1279 = x1277 >= x1072
val x1291 = if (x1279) {
()
} else {
val x1280 = x1068(x1277)
val x1281 = x1280 == '
'
val x1289 = if (x1281) {
val x1282 = x1277 + 1
val x1285 = (x1249,x1276)
val x1286 = (x1285,x1282)
x1071 = x1286
()
} else {
()
}
x1289
}
x1291
} else {
()
}
x1293
}
x1295
} else {
()
}
x1297
}
x1299
} else {
()
}
x1301
}
x1303
} else {
()
}
x1305
}
x1307
} else {
()
}
x1309
}
x1311
} else {
()
}
x1313
}
val x1316 = x1071
x1316
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((200, ok ),17)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParse extends ((Array[Char])=>(scala.Tuple2[Int, Int])) {
def apply(x1566:Array[Char]): scala.Tuple2[Int, Int] = {
val x649 = (0,-1)
var x1567: scala.Tuple2[Int, Int] = x649
val x1568 = x1566.length
val x1569 = 0 >= x1568
val x1811 = if (x1569) {
()
} else {
val x1570 = x1566(0)
val x1571 = x1570 == 'H'
val x1809 = if (x1571) {
val x242 = 0 + 1
val x1573 = x242 >= x1568
val x1807 = if (x1573) {
()
} else {
val x1574 = x1566(x242)
val x1575 = x1574 == 'T'
val x1805 = if (x1575) {
val x367 = x242 + 1
val x1577 = x367 >= x1568
val x1803 = if (x1577) {
()
} else {
val x1578 = x1566(x367)
val x1579 = x1578 == 'T'
val x1801 = if (x1579) {
val x372 = x367 + 1
val x1581 = x372 >= x1568
val x1799 = if (x1581) {
()
} else {
val x1582 = x1566(x372)
val x1583 = x1582 == 'P'
val x1797 = if (x1583) {
val x377 = x372 + 1
val x1585 = x377 >= x1568
val x1795 = if (x1585) {
()
} else {
val x1586 = x1566(x377)
val x1587 = x1586 == '/'
val x1793 = if (x1587) {
var x1609: Int = 0
var x1610: Int = -1
val x382 = x377 + 1
var x1611: Int = x382
val x1638 = while ({val x1612 = x1610
val x1613 = x1611
val x1614 = x1612 != x1613
x1614}) {
val x1616 = x1611
x1610 = x1616
val x1618 = x1616 >= x1568
val x1636 = if (x1618) {
()
} else {
val x1619 = x1566(x1616)
val x1620 = x1619 >= '0'
val x1621 = x1619 <= '9'
val x1622 = x1620 && x1621
val x1634 = if (x1622) {
val x1628 = x1609
val x1625 = x1619 - '0'
val x1626 = x1625.toInt
val x1629 = x1628 * 10
val x1630 = x1629 + x1626
x1609 = x1630
val x1623 = x1616 + 1
x1611 = x1623
()
} else {
()
}
x1634
}
x1636
}
val x1639 = x1609
val x1640 = x1611
val x1642 = x1640 >= x1568
val x1791 = if (x1642) {
()
} else {
val x1643 = x1566(x1640)
val x1644 = x1643 == '.'
val x1789 = if (x1644) {
var x1647: Int = 0
var x1648: Int = -1
val x1645 = x1640 + 1
var x1649: Int = x1645
val x1676 = while ({val x1650 = x1648
val x1651 = x1649
val x1652 = x1650 != x1651
x1652}) {
val x1654 = x1649
x1648 = x1654
val x1656 = x1654 >= x1568
val x1674 = if (x1656) {
()
} else {
val x1657 = x1566(x1654)
val x1658 = x1657 >= '0'
val x1659 = x1657 <= '9'
val x1660 = x1658 && x1659
val x1672 = if (x1660) {
val x1666 = x1647
val x1663 = x1657 - '0'
val x1664 = x1663.toInt
val x1667 = x1666 * 10
val x1668 = x1667 + x1664
x1647 = x1668
val x1661 = x1654 + 1
x1649 = x1661
()
} else {
()
}
x1672
}
x1674
}
val x1677 = x1647
val x1678 = x1649
val x651 = List()
var x1684: scala.collection.immutable.List[Char] = x651
var x1685: Int = -1
var x1686: Int = x1678
val x1708 = while ({val x1687 = x1685
val x1688 = x1686
val x1689 = x1687 != x1688
x1689}) {
val x1691 = x1686
x1685 = x1691
val x1693 = x1691 >= x1568
val x1706 = if (x1693) {
()
} else {
val x1694 = x1566(x1691)
val x1695 = x1694 == ' '
val x1704 = if (x1695) {
val x1698 = x1684
val x1699 = List(x1694)
val x1700 = x1698 ::: x1699
x1684 = x1700
val x1696 = x1691 + 1
x1686 = x1696
()
} else {
()
}
x1704
}
x1706
}
val x1709 = x1684
val x1710 = x1686
var x1715: Int = 0
var x1716: Int = -1
var x1717: Int = x1710
val x1744 = while ({val x1718 = x1716
val x1719 = x1717
val x1720 = x1718 != x1719
x1720}) {
val x1722 = x1717
x1716 = x1722
val x1724 = x1722 >= x1568
val x1742 = if (x1724) {
()
} else {
val x1725 = x1566(x1722)
val x1726 = x1725 >= '0'
val x1727 = x1725 <= '9'
val x1728 = x1726 && x1727
val x1740 = if (x1728) {
val x1734 = x1715
val x1731 = x1725 - '0'
val x1732 = x1731.toInt
val x1735 = x1734 * 10
val x1736 = x1735 + x1732
x1715 = x1736
val x1729 = x1722 + 1
x1717 = x1729
()
} else {
()
}
x1740
}
x1742
}
val x1745 = x1715
val x1746 = x1717
var x1748: java.lang.String = ""
var x1749: Int = -1
var x1750: Int = x1746
val x1771 = while ({val x1751 = x1749
val x1752 = x1750
val x1753 = x1751 != x1752
x1753}) {
val x1755 = x1750
x1749 = x1755
val x1757 = x1755 >= x1568
val x1769 = if (x1757) {
()
} else {
val x1758 = x1566(x1755)
val x1759 = x1758 != '
'
val x1767 = if (x1759) {
val x1762 = x1748
val x1763 = x1762+x1758
x1748 = x1763
val x1760 = x1755 + 1
x1750 = x1760
()
} else {
()
}
x1767
}
x1769
}
val x1772 = x1748
val x1773 = x1750
val x1775 = x1773 >= x1568
val x1787 = if (x1775) {
()
} else {
val x1776 = x1566(x1773)
val x1777 = x1776 == '
'
val x1785 = if (x1777) {
val x1778 = x1773 + 1
val x1782 = (x1745,x1778)
x1567 = x1782
()
} else {
()
}
x1785
}
x1787
} else {
()
}
x1789
}
x1791
} else {
()
}
x1793
}
x1795
} else {
()
}
x1797
}
x1799
} else {
()
}
x1801
}
x1803
} else {
()
}
x1805
}
x1807
} else {
()
}
x1809
}
val x1812 = x1567
x1812
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=2000
compilation: ok
(200,16)
(418,26)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerNameParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x2062:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x2063: scala.Tuple2[java.lang.String, Int] = x169
val x2064 = x2062.length
val x2065 = 0 >= x2064
val x2121 = if (x2065) {
()
} else {
val x2066 = x2062(0)
val x2067 = x2066 >= 'A'
val x2068 = x2066 <= 'Z'
val x2069 = x2067 && x2068
val x2119 = if (x2069) {
var x2071: java.lang.String = ""
var x2072: Int = -1
val x242 = 0 + 1
var x2073: Int = x242
val x2109 = while ({val x2074 = x2072
val x2075 = x2073
val x2076 = x2074 != x2075
x2076}) {
val x2078 = x2073
x2072 = x2078
val x2080 = x2078 >= x2064
val x2099 = if (x2080) {
()
} else {
val x2081 = x2062(x2078)
val x2082 = x2081 >= 'a'
val x2083 = x2081 <= 'z'
val x2084 = x2082 && x2083
val x2085 = x2081 >= 'A'
val x2086 = x2081 <= 'Z'
val x2087 = x2085 && x2086
val x2088 = x2084 || x2087
val x2097 = if (x2088) {
val x2092 = x2071
val x2093 = x2092+x2081
x2071 = x2093
val x2089 = x2078 + 1
x2073 = x2089
()
} else {
()
}
x2097
}
val x2107 = if (x2080) {
()
} else {
val x2081 = x2062(x2078)
val x2091 = x2081 == '-'
val x2105 = if (x2091) {
val x2100 = x2071
val x2101 = x2100+x2081
x2071 = x2101
val x2089 = x2078 + 1
x2073 = x2089
()
} else {
()
}
x2105
}
x2107
}
val x2110 = x2071
val x2111 = x2073
val x2115 = x2066+x2110
val x2116 = (x2115,x2111)
x2063 = x2116
()
} else {
()
}
x2119
}
val x2122 = x2063
x2122
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(Date,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int])) {
def apply(x2186:Array[Char]): scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int] = {
val x2187 = ("","")
val x2188 = (x2187,-1)
var x2189: scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int] = x2188
val x2190 = x2186.length
val x2191 = 0 >= x2190
val x2332 = if (x2191) {
()
} else {
val x2192 = x2186(0)
val x2193 = x2192 >= 'A'
val x2194 = x2192 <= 'Z'
val x2195 = x2193 && x2194
val x2330 = if (x2195) {
var x2197: java.lang.String = ""
var x2198: Int = -1
val x242 = 0 + 1
var x2199: Int = x242
val x2235 = while ({val x2200 = x2198
val x2201 = x2199
val x2202 = x2200 != x2201
x2202}) {
val x2204 = x2199
x2198 = x2204
val x2206 = x2204 >= x2190
val x2225 = if (x2206) {
()
} else {
val x2207 = x2186(x2204)
val x2208 = x2207 >= 'a'
val x2209 = x2207 <= 'z'
val x2210 = x2208 && x2209
val x2211 = x2207 >= 'A'
val x2212 = x2207 <= 'Z'
val x2213 = x2211 && x2212
val x2214 = x2210 || x2213
val x2223 = if (x2214) {
val x2218 = x2197
val x2219 = x2218+x2207
x2197 = x2219
val x2215 = x2204 + 1
x2199 = x2215
()
} else {
()
}
x2223
}
val x2233 = if (x2206) {
()
} else {
val x2207 = x2186(x2204)
val x2217 = x2207 == '-'
val x2231 = if (x2217) {
val x2226 = x2197
val x2227 = x2226+x2207
x2197 = x2227
val x2215 = x2204 + 1
x2199 = x2215
()
} else {
()
}
x2231
}
x2233
}
val x2236 = x2197
val x2237 = x2199
val x651 = List()
var x2243: scala.collection.immutable.List[Char] = x651
var x2244: Int = -1
var x2245: Int = x2237
val x2267 = while ({val x2246 = x2244
val x2247 = x2245
val x2248 = x2246 != x2247
x2248}) {
val x2250 = x2245
x2244 = x2250
val x2252 = x2250 >= x2190
val x2265 = if (x2252) {
()
} else {
val x2253 = x2186(x2250)
val x2254 = x2253 == ' '
val x2263 = if (x2254) {
val x2257 = x2243
val x2258 = List(x2253)
val x2259 = x2257 ::: x2258
x2243 = x2259
val x2255 = x2250 + 1
x2245 = x2255
()
} else {
()
}
x2263
}
x2265
}
val x2268 = x2243
val x2269 = x2245
val x2272 = x2269 >= x2190
val x2328 = if (x2272) {
()
} else {
val x2273 = x2186(x2269)
val x2274 = x2273 == ':'
val x2326 = if (x2274) {
var x2285: java.lang.String = ""
var x2286: Int = -1
val x2275 = x2269 + 1
var x2287: Int = x2275
val x2308 = while ({val x2288 = x2286
val x2289 = x2287
val x2290 = x2288 != x2289
x2290}) {
val x2292 = x2287
x2286 = x2292
val x2294 = x2292 >= x2190
val x2306 = if (x2294) {
()
} else {
val x2295 = x2186(x2292)
val x2296 = x2295 != '
'
val x2304 = if (x2296) {
val x2299 = x2285
val x2300 = x2299+x2295
x2285 = x2300
val x2297 = x2292 + 1
x2287 = x2297
()
} else {
()
}
x2304
}
x2306
}
val x2309 = x2285
val x2310 = x2287
val x2312 = x2310 >= x2190
val x2324 = if (x2312) {
()
} else {
val x2313 = x2186(x2310)
val x2314 = x2313 == '
'
val x2322 = if (x2314) {
val x2315 = x2310 + 1
val x2241 = x2192+x2236
val x2318 = (x2241,x2309)
val x2319 = (x2318,x2315)
x2189 = x2319
()
} else {
()
}
x2322
}
x2324
} else {
()
}
x2326
}
x2328
} else {
()
}
x2330
}
val x2333 = x2189
x2333
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((Date, Mon, 23 May 2005 22:38:34 GMT),36)
((Server, Apache/1.3.3.7 (Unix) (Red-Hat/Linux)),46)
((Last-Modified, Wed, 08 Jan 2003 23:11:55 GMT),45)
((Etag, \"3f80f-1b6-3e1cb03b\"),29)
((Content-Type, text/html; charset=UTF-8),39)
((Content-Length, 131),20)
((,),-1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, scala.collection.immutable.List[scala.Tuple2[java.lang.String, java.lang.String]]], Int])) {
def apply(x2482:Array[Char]): scala.Tuple2[scala.Tuple2[Int, scala.collection.immutable.List[scala.Tuple2[java.lang.String, java.lang.String]]], Int] = {
val x651 = List()
val x2483 = (0,x651)
val x2484 = (x2483,-1)
var x2485: scala.Tuple2[scala.Tuple2[Int, scala.collection.immutable.List[scala.Tuple2[java.lang.String, java.lang.String]]], Int] = x2484
val x2486 = x2482.length
val x2487 = 0 >= x2486
val x2902 = if (x2487) {
()
} else {
val x2488 = x2482(0)
val x2489 = x2488 == 'H'
val x2900 = if (x2489) {
val x242 = 0 + 1
val x2491 = x242 >= x2486
val x2898 = if (x2491) {
()
} else {
val x2492 = x2482(x242)
val x2493 = x2492 == 'T'
val x2896 = if (x2493) {
val x367 = x242 + 1
val x2495 = x367 >= x2486
val x2894 = if (x2495) {
()
} else {
val x2496 = x2482(x367)
val x2497 = x2496 == 'T'
val x2892 = if (x2497) {
val x372 = x367 + 1
val x2499 = x372 >= x2486
val x2890 = if (x2499) {
()
} else {
val x2500 = x2482(x372)
val x2501 = x2500 == 'P'
val x2888 = if (x2501) {
val x377 = x372 + 1
val x2503 = x377 >= x2486
val x2886 = if (x2503) {
()
} else {
val x2504 = x2482(x377)
val x2505 = x2504 == '/'
val x2884 = if (x2505) {
var x2527: Int = 0
var x2528: Int = -1
val x382 = x377 + 1
var x2529: Int = x382
val x2556 = while ({val x2530 = x2528
val x2531 = x2529
val x2532 = x2530 != x2531
x2532}) {
val x2534 = x2529
x2528 = x2534
val x2536 = x2534 >= x2486
val x2554 = if (x2536) {
()
} else {
val x2537 = x2482(x2534)
val x2538 = x2537 >= '0'
val x2539 = x2537 <= '9'
val x2540 = x2538 && x2539
val x2552 = if (x2540) {
val x2546 = x2527
val x2543 = x2537 - '0'
val x2544 = x2543.toInt
val x2547 = x2546 * 10
val x2548 = x2547 + x2544
x2527 = x2548
val x2541 = x2534 + 1
x2529 = x2541
()
} else {
()
}
x2552
}
x2554
}
val x2557 = x2527
val x2558 = x2529
val x2560 = x2558 >= x2486
val x2882 = if (x2560) {
()
} else {
val x2561 = x2482(x2558)
val x2562 = x2561 == '.'
val x2880 = if (x2562) {
var x2565: Int = 0
var x2566: Int = -1
val x2563 = x2558 + 1
var x2567: Int = x2563
val x2594 = while ({val x2568 = x2566
val x2569 = x2567
val x2570 = x2568 != x2569
x2570}) {
val x2572 = x2567
x2566 = x2572
val x2574 = x2572 >= x2486
val x2592 = if (x2574) {
()
} else {
val x2575 = x2482(x2572)
val x2576 = x2575 >= '0'
val x2577 = x2575 <= '9'
val x2578 = x2576 && x2577
val x2590 = if (x2578) {
val x2584 = x2565
val x2581 = x2575 - '0'
val x2582 = x2581.toInt
val x2585 = x2584 * 10
val x2586 = x2585 + x2582
x2565 = x2586
val x2579 = x2572 + 1
x2567 = x2579
()
} else {
()
}
x2590
}
x2592
}
val x2595 = x2565
val x2596 = x2567
var x2602: scala.collection.immutable.List[Char] = x651
var x2603: Int = -1
var x2604: Int = x2596
val x2626 = while ({val x2605 = x2603
val x2606 = x2604
val x2607 = x2605 != x2606
x2607}) {
val x2609 = x2604
x2603 = x2609
val x2611 = x2609 >= x2486
val x2624 = if (x2611) {
()
} else {
val x2612 = x2482(x2609)
val x2613 = x2612 == ' '
val x2622 = if (x2613) {
val x2616 = x2602
val x2617 = List(x2612)
val x2618 = x2616 ::: x2617
x2602 = x2618
val x2614 = x2609 + 1
x2604 = x2614
()
} else {
()
}
x2622
}
x2624
}
val x2627 = x2602
val x2628 = x2604
var x2633: Int = 0
var x2634: Int = -1
var x2635: Int = x2628
val x2662 = while ({val x2636 = x2634
val x2637 = x2635
val x2638 = x2636 != x2637
x2638}) {
val x2640 = x2635
x2634 = x2640
val x2642 = x2640 >= x2486
val x2660 = if (x2642) {
()
} else {
val x2643 = x2482(x2640)
val x2644 = x2643 >= '0'
val x2645 = x2643 <= '9'
val x2646 = x2644 && x2645
val x2658 = if (x2646) {
val x2652 = x2633
val x2649 = x2643 - '0'
val x2650 = x2649.toInt
val x2653 = x2652 * 10
val x2654 = x2653 + x2650
x2633 = x2654
val x2647 = x2640 + 1
x2635 = x2647
()
} else {
()
}
x2658
}
x2660
}
val x2663 = x2633
val x2664 = x2635
var x2666: java.lang.String = ""
var x2667: Int = -1
var x2668: Int = x2664
val x2689 = while ({val x2669 = x2667
val x2670 = x2668
val x2671 = x2669 != x2670
x2671}) {
val x2673 = x2668
x2667 = x2673
val x2675 = x2673 >= x2486
val x2687 = if (x2675) {
()
} else {
val x2676 = x2482(x2673)
val x2677 = x2676 != '
'
val x2685 = if (x2677) {
val x2680 = x2666
val x2681 = x2680+x2676
x2666 = x2681
val x2678 = x2673 + 1
x2668 = x2678
()
} else {
()
}
x2685
}
x2687
}
val x2690 = x2666
val x2691 = x2668
val x2693 = x2691 >= x2486
val x2878 = if (x2693) {
()
} else {
val x2694 = x2482(x2691)
val x2695 = x2694 == '
'
val x2876 = if (x2695) {
var x2701: scala.collection.immutable.List[scala.Tuple2[java.lang.String, java.lang.String]] = x651
var x2702: Int = -1
val x2696 = x2691 + 1
var x2703: Int = x2696
val x2858 = while ({val x2704 = x2702
val x2705 = x2703
val x2706 = x2704 != x2705
x2706}) {
val x2708 = x2703
x2702 = x2708
val x2710 = x2708 >= x2486
val x2856 = if (x2710) {
()
} else {
val x2711 = x2482(x2708)
val x2712 = x2711 >= 'A'
val x2713 = x2711 <= 'Z'
val x2714 = x2712 && x2713
val x2854 = if (x2714) {
var x2717: java.lang.String = ""
var x2718: Int = -1
val x2715 = x2708 + 1
var x2719: Int = x2715
val x2755 = while ({val x2720 = x2718
val x2721 = x2719
val x2722 = x2720 != x2721
x2722}) {
val x2724 = x2719
x2718 = x2724
val x2726 = x2724 >= x2486
val x2745 = if (x2726) {
()
} else {
val x2727 = x2482(x2724)
val x2728 = x2727 >= 'a'
val x2729 = x2727 <= 'z'
val x2730 = x2728 && x2729
val x2731 = x2727 >= 'A'
val x2732 = x2727 <= 'Z'
val x2733 = x2731 && x2732
val x2734 = x2730 || x2733
val x2743 = if (x2734) {
val x2738 = x2717
val x2739 = x2738+x2727
x2717 = x2739
val x2735 = x2724 + 1
x2719 = x2735
()
} else {
()
}
x2743
}
val x2753 = if (x2726) {
()
} else {
val x2727 = x2482(x2724)
val x2737 = x2727 == '-'
val x2751 = if (x2737) {
val x2746 = x2717
val x2747 = x2746+x2727
x2717 = x2747
val x2735 = x2724 + 1
x2719 = x2735
()
} else {
()
}
x2751
}
x2753
}
val x2756 = x2717
val x2757 = x2719
var x2763: scala.collection.immutable.List[Char] = x651
var x2764: Int = -1
var x2765: Int = x2757
val x2787 = while ({val x2766 = x2764
val x2767 = x2765
val x2768 = x2766 != x2767
x2768}) {
val x2770 = x2765
x2764 = x2770
val x2772 = x2770 >= x2486
val x2785 = if (x2772) {
()
} else {
val x2773 = x2482(x2770)
val x2774 = x2773 == ' '
val x2783 = if (x2774) {
val x2777 = x2763
val x2778 = List(x2773)
val x2779 = x2777 ::: x2778
x2763 = x2779
val x2775 = x2770 + 1
x2765 = x2775
()
} else {
()
}
x2783
}
x2785
}
val x2788 = x2763
val x2789 = x2765
val x2792 = x2789 >= x2486
val x2852 = if (x2792) {
()
} else {
val x2793 = x2482(x2789)
val x2794 = x2793 == ':'
val x2850 = if (x2794) {
var x2805: java.lang.String = ""
var x2806: Int = -1
val x2795 = x2789 + 1
var x2807: Int = x2795
val x2828 = while ({val x2808 = x2806
val x2809 = x2807
val x2810 = x2808 != x2809
x2810}) {
val x2812 = x2807
x2806 = x2812
val x2814 = x2812 >= x2486
val x2826 = if (x2814) {
()
} else {
val x2815 = x2482(x2812)
val x2816 = x2815 != '
'
val x2824 = if (x2816) {
val x2819 = x2805
val x2820 = x2819+x2815
x2805 = x2820
val x2817 = x2812 + 1
x2807 = x2817
()
} else {
()
}
x2824
}
x2826
}
val x2829 = x2805
val x2830 = x2807
val x2832 = x2830 >= x2486
val x2848 = if (x2832) {
()
} else {
val x2833 = x2482(x2830)
val x2834 = x2833 == '
'
val x2846 = if (x2834) {
val x2840 = x2701
val x2761 = x2711+x2756
val x2838 = (x2761,x2829)
val x2841 = List(x2838)
val x2842 = x2840 ::: x2841
x2701 = x2842
val x2835 = x2830 + 1
x2703 = x2835
()
} else {
()
}
x2846
}
x2848
} else {
()
}
x2850
}
x2852
} else {
()
}
x2854
}
x2856
}
val x2859 = x2701
val x2860 = x2703
val x2864 = x2860 >= x2486
val x2874 = if (x2864) {
()
} else {
val x2865 = x2482(x2860)
val x2866 = x2865 == '
'
val x2872 = if (x2866) {
val x2862 = (x2663,x2859)
val x2867 = x2860 + 1
val x2869 = (x2862,x2867)
x2485 = x2869
()
} else {
()
}
x2872
}
x2874
} else {
()
}
x2876
}
x2878
} else {
()
}
x2880
}
x2882
} else {
()
}
x2884
}
x2886
} else {
()
}
x2888
}
x2890
} else {
()
}
x2892
}
x2894
} else {
()
}
x2896
}
x2898
} else {
()
}
x2900
}
val x2903 = x2485
x2903
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=3000
compilation: ok
((200,List((Date, Mon, 23 May 2005 22:38:34 GMT), (Server, Apache/1.3.3.7 (Unix) (Red-Hat/Linux)), (Last-Modified, Wed, 08 Jan 2003 23:11:55 GMT), (Etag, "3f80f-1b6-3e1cb03b"), (Content-Type, text/html; charset=UTF-8), (Content-Length, 131), (Connection, close))),248)
