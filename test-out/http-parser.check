/*****************************************
  Emitting Generated Code                  
*******************************************/
class decimalParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, Int], Int])) {
def apply(x0:Array[Char]): scala.Tuple2[scala.Tuple2[Int, Int], Int] = {
val x1 = (0,0)
val x2 = (x1,-1)
var x3: scala.Tuple2[scala.Tuple2[Int, Int], Int] = x2
var x4: Int = 0
var x5: Int = -1
var x6: Int = 0
val x13 = x0.length
val x34 = while ({val x7 = x5
val x8 = x6
val x9 = x7 != x8
x9}) {
val x11 = x6
x5 = x11
val x14 = x11 >= x13
val x32 = if (x14) {
()
} else {
val x15 = x0(x11)
val x16 = x15 >= '0'
val x17 = x15 <= '9'
val x18 = x16 && x17
val x30 = if (x18) {
val x24 = x4
val x21 = x15 - '0'
val x22 = x21.toInt
val x25 = x24 * 10
val x26 = x25 + x22
x4 = x26
val x19 = x11 + 1
x6 = x19
()
} else {
()
}
x30
}
x32
}
val x35 = x4
val x36 = x6
val x38 = x36 >= x13
val x82 = if (x38) {
()
} else {
val x39 = x0(x36)
val x40 = x39 == '.'
val x80 = if (x40) {
var x43: Int = 0
var x44: Int = -1
val x41 = x36 + 1
var x45: Int = x41
val x72 = while ({val x46 = x44
val x47 = x45
val x48 = x46 != x47
x48}) {
val x50 = x45
x44 = x50
val x52 = x50 >= x13
val x70 = if (x52) {
()
} else {
val x53 = x0(x50)
val x54 = x53 >= '0'
val x55 = x53 <= '9'
val x56 = x54 && x55
val x68 = if (x56) {
val x62 = x43
val x59 = x53 - '0'
val x60 = x59.toInt
val x63 = x62 * 10
val x64 = x63 + x60
x43 = x64
val x57 = x50 + 1
x45 = x57
()
} else {
()
}
x68
}
x70
}
val x73 = x43
val x74 = x45
val x76 = (x35,x73)
val x77 = (x76,x74)
x3 = x77
()
} else {
()
}
x80
}
val x83 = x3
x83
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((12,34),5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class wildRegexParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x168:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x170: scala.Tuple2[java.lang.String, Int] = x169
var x171: java.lang.String = ""
var x172: Int = -1
var x173: Int = 0
val x180 = x168.length
val x195 = while ({val x174 = x172
val x175 = x173
val x176 = x174 != x175
x176}) {
val x178 = x173
x172 = x178
val x181 = x178 >= x180
val x193 = if (x181) {
()
} else {
val x182 = x168(x178)
val x183 = x182 != '
'
val x191 = if (x183) {
val x186 = x171
val x187 = x186+x182
x171 = x187
val x184 = x178 + 1
x173 = x184
()
} else {
()
}
x191
}
x193
}
val x196 = x171
val x197 = x173
val x198 = (x196,x197)
x170 = x198
val x200 = x170
x200
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(f33l l1ke funkin' it up! (o_^) \o/ ,35)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class crlfParse extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x235:Array[Char]): scala.Tuple2[Char, Int] = {
val x236 = ('a',-1)
var x237: scala.Tuple2[Char, Int] = x236
val x238 = x235.length
val x239 = 0 >= x238
val x248 = if (x239) {
()
} else {
val x240 = x235(0)
val x241 = x240 == '
'
val x246 = if (x241) {
val x242 = 0 + 1
val x243 = (x240,x242)
x237 = x243
()
} else {
()
}
x246
}
val x249 = x237
x249
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(
,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class wildRegexCrlfParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x265:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x266: scala.Tuple2[java.lang.String, Int] = x169
var x267: java.lang.String = ""
var x268: Int = -1
var x269: Int = 0
val x276 = x265.length
val x291 = while ({val x270 = x268
val x271 = x269
val x272 = x270 != x271
x272}) {
val x274 = x269
x268 = x274
val x277 = x274 >= x276
val x289 = if (x277) {
()
} else {
val x278 = x265(x274)
val x279 = x278 != '
'
val x287 = if (x279) {
val x282 = x267
val x283 = x282+x278
x267 = x283
val x280 = x274 + 1
x269 = x280
()
} else {
()
}
x287
}
x289
}
val x292 = x267
val x293 = x269
val x295 = x293 >= x276
val x308 = if (x295) {
()
} else {
val x296 = x265(x293)
val x297 = x296 == '
'
val x306 = if (x297) {
val x298 = x293 + 1
val x302 = x292+x296
val x303 = (x302,x298)
x266 = x303
()
} else {
()
}
x306
}
val x309 = x266
x309
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(f33l l1ke funkin' it up! (o_^) \o/ 
,36)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class httpNumParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, Int], Int])) {
def apply(x357:Array[Char]): scala.Tuple2[scala.Tuple2[Int, Int], Int] = {
val x1 = (0,0)
val x2 = (x1,-1)
var x358: scala.Tuple2[scala.Tuple2[Int, Int], Int] = x2
val x359 = x357.length
val x360 = 0 >= x359
val x502 = if (x360) {
()
} else {
val x361 = x357(0)
val x362 = x361 == 'H'
val x500 = if (x362) {
val x242 = 0 + 1
val x364 = x242 >= x359
val x498 = if (x364) {
()
} else {
val x365 = x357(x242)
val x366 = x365 == 'T'
val x496 = if (x366) {
val x367 = x242 + 1
val x369 = x367 >= x359
val x494 = if (x369) {
()
} else {
val x370 = x357(x367)
val x371 = x370 == 'T'
val x492 = if (x371) {
val x372 = x367 + 1
val x374 = x372 >= x359
val x490 = if (x374) {
()
} else {
val x375 = x357(x372)
val x376 = x375 == 'P'
val x488 = if (x376) {
val x377 = x372 + 1
val x379 = x377 >= x359
val x486 = if (x379) {
()
} else {
val x380 = x357(x377)
val x381 = x380 == '/'
val x484 = if (x381) {
var x405: Int = 0
var x406: Int = -1
val x382 = x377 + 1
var x407: Int = x382
val x434 = while ({val x408 = x406
val x409 = x407
val x410 = x408 != x409
x410}) {
val x412 = x407
x406 = x412
val x414 = x412 >= x359
val x432 = if (x414) {
()
} else {
val x415 = x357(x412)
val x416 = x415 >= '0'
val x417 = x415 <= '9'
val x418 = x416 && x417
val x430 = if (x418) {
val x424 = x405
val x421 = x415 - '0'
val x422 = x421.toInt
val x425 = x424 * 10
val x426 = x425 + x422
x405 = x426
val x419 = x412 + 1
x407 = x419
()
} else {
()
}
x430
}
x432
}
val x435 = x405
val x436 = x407
val x438 = x436 >= x359
val x482 = if (x438) {
()
} else {
val x439 = x357(x436)
val x440 = x439 == '.'
val x480 = if (x440) {
var x443: Int = 0
var x444: Int = -1
val x441 = x436 + 1
var x445: Int = x441
val x472 = while ({val x446 = x444
val x447 = x445
val x448 = x446 != x447
x448}) {
val x450 = x445
x444 = x450
val x452 = x450 >= x359
val x470 = if (x452) {
()
} else {
val x453 = x357(x450)
val x454 = x453 >= '0'
val x455 = x453 <= '9'
val x456 = x454 && x455
val x468 = if (x456) {
val x462 = x443
val x459 = x453 - '0'
val x460 = x459.toInt
val x463 = x462 * 10
val x464 = x463 + x460
x443 = x464
val x457 = x450 + 1
x445 = x457
()
} else {
()
}
x468
}
x470
}
val x473 = x443
val x474 = x445
val x476 = (x435,x473)
val x477 = (x476,x474)
x358 = x477
()
} else {
()
}
x480
}
x482
} else {
()
}
x484
}
x486
} else {
()
}
x488
}
x490
} else {
()
}
x492
}
x494
} else {
()
}
x496
}
x498
} else {
()
}
x500
}
val x503 = x358
x503
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((1,1),8)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class httpNumStatusParse extends ((Array[Char])=>(scala.Tuple2[Int, Int])) {
def apply(x648:Array[Char]): scala.Tuple2[Int, Int] = {
val x649 = (0,-1)
var x650: scala.Tuple2[Int, Int] = x649
val x652 = x648.length
val x653 = 0 >= x652
val x856 = if (x653) {
()
} else {
val x654 = x648(0)
val x655 = x654 == 'H'
val x854 = if (x655) {
val x242 = 0 + 1
val x657 = x242 >= x652
val x852 = if (x657) {
()
} else {
val x658 = x648(x242)
val x659 = x658 == 'T'
val x850 = if (x659) {
val x367 = x242 + 1
val x661 = x367 >= x652
val x848 = if (x661) {
()
} else {
val x662 = x648(x367)
val x663 = x662 == 'T'
val x846 = if (x663) {
val x372 = x367 + 1
val x665 = x372 >= x652
val x844 = if (x665) {
()
} else {
val x666 = x648(x372)
val x667 = x666 == 'P'
val x842 = if (x667) {
val x377 = x372 + 1
val x669 = x377 >= x652
val x840 = if (x669) {
()
} else {
val x670 = x648(x377)
val x671 = x670 == '/'
val x838 = if (x671) {
var x693: Int = 0
var x694: Int = -1
val x382 = x377 + 1
var x695: Int = x382
val x722 = while ({val x696 = x694
val x697 = x695
val x698 = x696 != x697
x698}) {
val x700 = x695
x694 = x700
val x702 = x700 >= x652
val x720 = if (x702) {
()
} else {
val x703 = x648(x700)
val x704 = x703 >= '0'
val x705 = x703 <= '9'
val x706 = x704 && x705
val x718 = if (x706) {
val x712 = x693
val x709 = x703 - '0'
val x710 = x709.toInt
val x713 = x712 * 10
val x714 = x713 + x710
x693 = x714
val x707 = x700 + 1
x695 = x707
()
} else {
()
}
x718
}
x720
}
val x723 = x693
val x724 = x695
val x726 = x724 >= x652
val x836 = if (x726) {
()
} else {
val x727 = x648(x724)
val x728 = x727 == '.'
val x834 = if (x728) {
var x731: Int = 0
var x732: Int = -1
val x729 = x724 + 1
var x733: Int = x729
val x760 = while ({val x734 = x732
val x735 = x733
val x736 = x734 != x735
x736}) {
val x738 = x733
x732 = x738
val x740 = x738 >= x652
val x758 = if (x740) {
()
} else {
val x741 = x648(x738)
val x742 = x741 >= '0'
val x743 = x741 <= '9'
val x744 = x742 && x743
val x756 = if (x744) {
val x750 = x731
val x747 = x741 - '0'
val x748 = x747.toInt
val x751 = x750 * 10
val x752 = x751 + x748
x731 = x752
val x745 = x738 + 1
x733 = x745
()
} else {
()
}
x756
}
x758
}
val x761 = x731
val x762 = x733
val x651 = List()
var x768: scala.collection.immutable.List[Char] = x651
var x769: Int = -1
var x770: Int = x762
val x792 = while ({val x771 = x769
val x772 = x770
val x773 = x771 != x772
x773}) {
val x775 = x770
x769 = x775
val x777 = x775 >= x652
val x790 = if (x777) {
()
} else {
val x778 = x648(x775)
val x779 = x778 == ' '
val x788 = if (x779) {
val x782 = x768
val x783 = List(x778)
val x784 = x782 ::: x783
x768 = x784
val x780 = x775 + 1
x770 = x780
()
} else {
()
}
x788
}
x790
}
val x793 = x768
val x794 = x770
var x799: Int = 0
var x800: Int = -1
var x801: Int = x794
val x828 = while ({val x802 = x800
val x803 = x801
val x804 = x802 != x803
x804}) {
val x806 = x801
x800 = x806
val x808 = x806 >= x652
val x826 = if (x808) {
()
} else {
val x809 = x648(x806)
val x810 = x809 >= '0'
val x811 = x809 <= '9'
val x812 = x810 && x811
val x824 = if (x812) {
val x818 = x799
val x815 = x809 - '0'
val x816 = x815.toInt
val x819 = x818 * 10
val x820 = x819 + x816
x799 = x820
val x813 = x806 + 1
x801 = x813
()
} else {
()
}
x824
}
x826
}
val x829 = x799
val x830 = x801
val x831 = (x829,x830)
x650 = x831
()
} else {
()
}
x834
}
x836
} else {
()
}
x838
}
x840
} else {
()
}
x842
}
x844
} else {
()
}
x846
}
x848
} else {
()
}
x850
}
x852
} else {
()
}
x854
}
val x857 = x650
x857
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=1000
compilation: ok
(200,12)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParseTemp extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Int, java.lang.String], Int])) {
def apply(x1068:Array[Char]): scala.Tuple2[scala.Tuple2[Int, java.lang.String], Int] = {
val x1069 = (0,"")
val x1070 = (x1069,-1)
var x1071: scala.Tuple2[scala.Tuple2[Int, java.lang.String], Int] = x1070
val x1072 = x1068.length
val x1073 = 0 >= x1072
val x1315 = if (x1073) {
()
} else {
val x1074 = x1068(0)
val x1075 = x1074 == 'H'
val x1313 = if (x1075) {
val x242 = 0 + 1
val x1077 = x242 >= x1072
val x1311 = if (x1077) {
()
} else {
val x1078 = x1068(x242)
val x1079 = x1078 == 'T'
val x1309 = if (x1079) {
val x367 = x242 + 1
val x1081 = x367 >= x1072
val x1307 = if (x1081) {
()
} else {
val x1082 = x1068(x367)
val x1083 = x1082 == 'T'
val x1305 = if (x1083) {
val x372 = x367 + 1
val x1085 = x372 >= x1072
val x1303 = if (x1085) {
()
} else {
val x1086 = x1068(x372)
val x1087 = x1086 == 'P'
val x1301 = if (x1087) {
val x377 = x372 + 1
val x1089 = x377 >= x1072
val x1299 = if (x1089) {
()
} else {
val x1090 = x1068(x377)
val x1091 = x1090 == '/'
val x1297 = if (x1091) {
var x1113: Int = 0
var x1114: Int = -1
val x382 = x377 + 1
var x1115: Int = x382
val x1142 = while ({val x1116 = x1114
val x1117 = x1115
val x1118 = x1116 != x1117
x1118}) {
val x1120 = x1115
x1114 = x1120
val x1122 = x1120 >= x1072
val x1140 = if (x1122) {
()
} else {
val x1123 = x1068(x1120)
val x1124 = x1123 >= '0'
val x1125 = x1123 <= '9'
val x1126 = x1124 && x1125
val x1138 = if (x1126) {
val x1132 = x1113
val x1129 = x1123 - '0'
val x1130 = x1129.toInt
val x1133 = x1132 * 10
val x1134 = x1133 + x1130
x1113 = x1134
val x1127 = x1120 + 1
x1115 = x1127
()
} else {
()
}
x1138
}
x1140
}
val x1143 = x1113
val x1144 = x1115
val x1146 = x1144 >= x1072
val x1295 = if (x1146) {
()
} else {
val x1147 = x1068(x1144)
val x1148 = x1147 == '.'
val x1293 = if (x1148) {
var x1151: Int = 0
var x1152: Int = -1
val x1149 = x1144 + 1
var x1153: Int = x1149
val x1180 = while ({val x1154 = x1152
val x1155 = x1153
val x1156 = x1154 != x1155
x1156}) {
val x1158 = x1153
x1152 = x1158
val x1160 = x1158 >= x1072
val x1178 = if (x1160) {
()
} else {
val x1161 = x1068(x1158)
val x1162 = x1161 >= '0'
val x1163 = x1161 <= '9'
val x1164 = x1162 && x1163
val x1176 = if (x1164) {
val x1170 = x1151
val x1167 = x1161 - '0'
val x1168 = x1167.toInt
val x1171 = x1170 * 10
val x1172 = x1171 + x1168
x1151 = x1172
val x1165 = x1158 + 1
x1153 = x1165
()
} else {
()
}
x1176
}
x1178
}
val x1181 = x1151
val x1182 = x1153
val x651 = List()
var x1188: scala.collection.immutable.List[Char] = x651
var x1189: Int = -1
var x1190: Int = x1182
val x1212 = while ({val x1191 = x1189
val x1192 = x1190
val x1193 = x1191 != x1192
x1193}) {
val x1195 = x1190
x1189 = x1195
val x1197 = x1195 >= x1072
val x1210 = if (x1197) {
()
} else {
val x1198 = x1068(x1195)
val x1199 = x1198 == ' '
val x1208 = if (x1199) {
val x1202 = x1188
val x1203 = List(x1198)
val x1204 = x1202 ::: x1203
x1188 = x1204
val x1200 = x1195 + 1
x1190 = x1200
()
} else {
()
}
x1208
}
x1210
}
val x1213 = x1188
val x1214 = x1190
var x1219: Int = 0
var x1220: Int = -1
var x1221: Int = x1214
val x1248 = while ({val x1222 = x1220
val x1223 = x1221
val x1224 = x1222 != x1223
x1224}) {
val x1226 = x1221
x1220 = x1226
val x1228 = x1226 >= x1072
val x1246 = if (x1228) {
()
} else {
val x1229 = x1068(x1226)
val x1230 = x1229 >= '0'
val x1231 = x1229 <= '9'
val x1232 = x1230 && x1231
val x1244 = if (x1232) {
val x1238 = x1219
val x1235 = x1229 - '0'
val x1236 = x1235.toInt
val x1239 = x1238 * 10
val x1240 = x1239 + x1236
x1219 = x1240
val x1233 = x1226 + 1
x1221 = x1233
()
} else {
()
}
x1244
}
x1246
}
val x1249 = x1219
val x1250 = x1221
var x1252: java.lang.String = ""
var x1253: Int = -1
var x1254: Int = x1250
val x1275 = while ({val x1255 = x1253
val x1256 = x1254
val x1257 = x1255 != x1256
x1257}) {
val x1259 = x1254
x1253 = x1259
val x1261 = x1259 >= x1072
val x1273 = if (x1261) {
()
} else {
val x1262 = x1068(x1259)
val x1263 = x1262 != '
'
val x1271 = if (x1263) {
val x1266 = x1252
val x1267 = x1266+x1262
x1252 = x1267
val x1264 = x1259 + 1
x1254 = x1264
()
} else {
()
}
x1271
}
x1273
}
val x1276 = x1252
val x1277 = x1254
val x1279 = x1277 >= x1072
val x1291 = if (x1279) {
()
} else {
val x1280 = x1068(x1277)
val x1281 = x1280 == '
'
val x1289 = if (x1281) {
val x1282 = x1277 + 1
val x1285 = (x1249,x1276)
val x1286 = (x1285,x1282)
x1071 = x1286
()
} else {
()
}
x1289
}
x1291
} else {
()
}
x1293
}
x1295
} else {
()
}
x1297
}
x1299
} else {
()
}
x1301
}
x1303
} else {
()
}
x1305
}
x1307
} else {
()
}
x1309
}
x1311
} else {
()
}
x1313
}
val x1316 = x1071
x1316
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((200, ok ),17)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParse extends ((Array[Char])=>(scala.Tuple2[Int, Int])) {
def apply(x1566:Array[Char]): scala.Tuple2[Int, Int] = {
val x649 = (0,-1)
var x1567: scala.Tuple2[Int, Int] = x649
val x1568 = x1566.length
val x1569 = 0 >= x1568
val x1811 = if (x1569) {
()
} else {
val x1570 = x1566(0)
val x1571 = x1570 == 'H'
val x1809 = if (x1571) {
val x242 = 0 + 1
val x1573 = x242 >= x1568
val x1807 = if (x1573) {
()
} else {
val x1574 = x1566(x242)
val x1575 = x1574 == 'T'
val x1805 = if (x1575) {
val x367 = x242 + 1
val x1577 = x367 >= x1568
val x1803 = if (x1577) {
()
} else {
val x1578 = x1566(x367)
val x1579 = x1578 == 'T'
val x1801 = if (x1579) {
val x372 = x367 + 1
val x1581 = x372 >= x1568
val x1799 = if (x1581) {
()
} else {
val x1582 = x1566(x372)
val x1583 = x1582 == 'P'
val x1797 = if (x1583) {
val x377 = x372 + 1
val x1585 = x377 >= x1568
val x1795 = if (x1585) {
()
} else {
val x1586 = x1566(x377)
val x1587 = x1586 == '/'
val x1793 = if (x1587) {
var x1609: Int = 0
var x1610: Int = -1
val x382 = x377 + 1
var x1611: Int = x382
val x1638 = while ({val x1612 = x1610
val x1613 = x1611
val x1614 = x1612 != x1613
x1614}) {
val x1616 = x1611
x1610 = x1616
val x1618 = x1616 >= x1568
val x1636 = if (x1618) {
()
} else {
val x1619 = x1566(x1616)
val x1620 = x1619 >= '0'
val x1621 = x1619 <= '9'
val x1622 = x1620 && x1621
val x1634 = if (x1622) {
val x1628 = x1609
val x1625 = x1619 - '0'
val x1626 = x1625.toInt
val x1629 = x1628 * 10
val x1630 = x1629 + x1626
x1609 = x1630
val x1623 = x1616 + 1
x1611 = x1623
()
} else {
()
}
x1634
}
x1636
}
val x1639 = x1609
val x1640 = x1611
val x1642 = x1640 >= x1568
val x1791 = if (x1642) {
()
} else {
val x1643 = x1566(x1640)
val x1644 = x1643 == '.'
val x1789 = if (x1644) {
var x1647: Int = 0
var x1648: Int = -1
val x1645 = x1640 + 1
var x1649: Int = x1645
val x1676 = while ({val x1650 = x1648
val x1651 = x1649
val x1652 = x1650 != x1651
x1652}) {
val x1654 = x1649
x1648 = x1654
val x1656 = x1654 >= x1568
val x1674 = if (x1656) {
()
} else {
val x1657 = x1566(x1654)
val x1658 = x1657 >= '0'
val x1659 = x1657 <= '9'
val x1660 = x1658 && x1659
val x1672 = if (x1660) {
val x1666 = x1647
val x1663 = x1657 - '0'
val x1664 = x1663.toInt
val x1667 = x1666 * 10
val x1668 = x1667 + x1664
x1647 = x1668
val x1661 = x1654 + 1
x1649 = x1661
()
} else {
()
}
x1672
}
x1674
}
val x1677 = x1647
val x1678 = x1649
val x651 = List()
var x1684: scala.collection.immutable.List[Char] = x651
var x1685: Int = -1
var x1686: Int = x1678
val x1708 = while ({val x1687 = x1685
val x1688 = x1686
val x1689 = x1687 != x1688
x1689}) {
val x1691 = x1686
x1685 = x1691
val x1693 = x1691 >= x1568
val x1706 = if (x1693) {
()
} else {
val x1694 = x1566(x1691)
val x1695 = x1694 == ' '
val x1704 = if (x1695) {
val x1698 = x1684
val x1699 = List(x1694)
val x1700 = x1698 ::: x1699
x1684 = x1700
val x1696 = x1691 + 1
x1686 = x1696
()
} else {
()
}
x1704
}
x1706
}
val x1709 = x1684
val x1710 = x1686
var x1715: Int = 0
var x1716: Int = -1
var x1717: Int = x1710
val x1744 = while ({val x1718 = x1716
val x1719 = x1717
val x1720 = x1718 != x1719
x1720}) {
val x1722 = x1717
x1716 = x1722
val x1724 = x1722 >= x1568
val x1742 = if (x1724) {
()
} else {
val x1725 = x1566(x1722)
val x1726 = x1725 >= '0'
val x1727 = x1725 <= '9'
val x1728 = x1726 && x1727
val x1740 = if (x1728) {
val x1734 = x1715
val x1731 = x1725 - '0'
val x1732 = x1731.toInt
val x1735 = x1734 * 10
val x1736 = x1735 + x1732
x1715 = x1736
val x1729 = x1722 + 1
x1717 = x1729
()
} else {
()
}
x1740
}
x1742
}
val x1745 = x1715
val x1746 = x1717
var x1748: java.lang.String = ""
var x1749: Int = -1
var x1750: Int = x1746
val x1771 = while ({val x1751 = x1749
val x1752 = x1750
val x1753 = x1751 != x1752
x1753}) {
val x1755 = x1750
x1749 = x1755
val x1757 = x1755 >= x1568
val x1769 = if (x1757) {
()
} else {
val x1758 = x1566(x1755)
val x1759 = x1758 != '
'
val x1767 = if (x1759) {
val x1762 = x1748
val x1763 = x1762+x1758
x1748 = x1763
val x1760 = x1755 + 1
x1750 = x1760
()
} else {
()
}
x1767
}
x1769
}
val x1772 = x1748
val x1773 = x1750
val x1775 = x1773 >= x1568
val x1787 = if (x1775) {
()
} else {
val x1776 = x1566(x1773)
val x1777 = x1776 == '
'
val x1785 = if (x1777) {
val x1778 = x1773 + 1
val x1782 = (x1745,x1778)
x1567 = x1782
()
} else {
()
}
x1785
}
x1787
} else {
()
}
x1789
}
x1791
} else {
()
}
x1793
}
x1795
} else {
()
}
x1797
}
x1799
} else {
()
}
x1801
}
x1803
} else {
()
}
x1805
}
x1807
} else {
()
}
x1809
}
val x1812 = x1567
x1812
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=2000
compilation: ok
(200,16)
(418,26)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerNameParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x2062:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x2063: scala.Tuple2[java.lang.String, Int] = x169
val x2064 = x2062.length
val x2065 = 0 >= x2064
val x2121 = if (x2065) {
()
} else {
val x2066 = x2062(0)
val x2067 = x2066 >= 'A'
val x2068 = x2066 <= 'Z'
val x2069 = x2067 && x2068
val x2119 = if (x2069) {
var x2071: java.lang.String = ""
var x2072: Int = -1
val x242 = 0 + 1
var x2073: Int = x242
val x2109 = while ({val x2074 = x2072
val x2075 = x2073
val x2076 = x2074 != x2075
x2076}) {
val x2078 = x2073
x2072 = x2078
val x2080 = x2078 >= x2064
val x2099 = if (x2080) {
()
} else {
val x2081 = x2062(x2078)
val x2082 = x2081 >= 'a'
val x2083 = x2081 <= 'z'
val x2084 = x2082 && x2083
val x2085 = x2081 >= 'A'
val x2086 = x2081 <= 'Z'
val x2087 = x2085 && x2086
val x2088 = x2084 || x2087
val x2097 = if (x2088) {
val x2092 = x2071
val x2093 = x2092+x2081
x2071 = x2093
val x2089 = x2078 + 1
x2073 = x2089
()
} else {
()
}
x2097
}
val x2107 = if (x2080) {
()
} else {
val x2081 = x2062(x2078)
val x2091 = x2081 == '-'
val x2105 = if (x2091) {
val x2100 = x2071
val x2101 = x2100+x2081
x2071 = x2101
val x2089 = x2078 + 1
x2073 = x2089
()
} else {
()
}
x2105
}
x2107
}
val x2110 = x2071
val x2111 = x2073
val x2115 = x2066+x2110
val x2116 = (x2115,x2111)
x2063 = x2116
()
} else {
()
}
x2119
}
val x2122 = x2063
x2122
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(Date,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int])) {
def apply(x2186:Array[Char]): scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int] = {
val x2187 = ("","")
val x2188 = (x2187,-1)
var x2189: scala.Tuple2[scala.Tuple2[java.lang.String, java.lang.String], Int] = x2188
val x2190 = x2186.length
val x2191 = 0 >= x2190
val x2361 = if (x2191) {
()
} else {
val x2192 = x2186(0)
val x2193 = x2192 >= 'A'
val x2194 = x2192 <= 'Z'
val x2195 = x2193 && x2194
val x2359 = if (x2195) {
var x2197: java.lang.String = ""
var x2198: Int = -1
val x242 = 0 + 1
var x2199: Int = x242
val x2235 = while ({val x2200 = x2198
val x2201 = x2199
val x2202 = x2200 != x2201
x2202}) {
val x2204 = x2199
x2198 = x2204
val x2206 = x2204 >= x2190
val x2225 = if (x2206) {
()
} else {
val x2207 = x2186(x2204)
val x2208 = x2207 >= 'a'
val x2209 = x2207 <= 'z'
val x2210 = x2208 && x2209
val x2211 = x2207 >= 'A'
val x2212 = x2207 <= 'Z'
val x2213 = x2211 && x2212
val x2214 = x2210 || x2213
val x2223 = if (x2214) {
val x2218 = x2197
val x2219 = x2218+x2207
x2197 = x2219
val x2215 = x2204 + 1
x2199 = x2215
()
} else {
()
}
x2223
}
val x2233 = if (x2206) {
()
} else {
val x2207 = x2186(x2204)
val x2217 = x2207 == '-'
val x2231 = if (x2217) {
val x2226 = x2197
val x2227 = x2226+x2207
x2197 = x2227
val x2215 = x2204 + 1
x2199 = x2215
()
} else {
()
}
x2231
}
x2233
}
val x2236 = x2197
val x2237 = x2199
val x651 = List()
var x2243: scala.collection.immutable.List[Char] = x651
var x2244: Int = -1
var x2245: Int = x2237
val x2267 = while ({val x2246 = x2244
val x2247 = x2245
val x2248 = x2246 != x2247
x2248}) {
val x2250 = x2245
x2244 = x2250
val x2252 = x2250 >= x2190
val x2265 = if (x2252) {
()
} else {
val x2253 = x2186(x2250)
val x2254 = x2253 == ' '
val x2263 = if (x2254) {
val x2257 = x2243
val x2258 = List(x2253)
val x2259 = x2257 ::: x2258
x2243 = x2259
val x2255 = x2250 + 1
x2245 = x2255
()
} else {
()
}
x2263
}
x2265
}
val x2268 = x2243
val x2269 = x2245
val x2272 = x2269 >= x2190
val x2357 = if (x2272) {
()
} else {
val x2273 = x2186(x2269)
val x2274 = x2273 == ':'
val x2355 = if (x2274) {
var x2285: scala.collection.immutable.List[Char] = x651
var x2286: Int = -1
val x2275 = x2269 + 1
var x2287: Int = x2275
val x2309 = while ({val x2288 = x2286
val x2289 = x2287
val x2290 = x2288 != x2289
x2290}) {
val x2292 = x2287
x2286 = x2292
val x2294 = x2292 >= x2190
val x2307 = if (x2294) {
()
} else {
val x2295 = x2186(x2292)
val x2296 = x2295 == ' '
val x2305 = if (x2296) {
val x2299 = x2285
val x2300 = List(x2295)
val x2301 = x2299 ::: x2300
x2285 = x2301
val x2297 = x2292 + 1
x2287 = x2297
()
} else {
()
}
x2305
}
x2307
}
val x2310 = x2285
val x2311 = x2287
var x2314: java.lang.String = ""
var x2315: Int = -1
var x2316: Int = x2311
val x2337 = while ({val x2317 = x2315
val x2318 = x2316
val x2319 = x2317 != x2318
x2319}) {
val x2321 = x2316
x2315 = x2321
val x2323 = x2321 >= x2190
val x2335 = if (x2323) {
()
} else {
val x2324 = x2186(x2321)
val x2325 = x2324 != '
'
val x2333 = if (x2325) {
val x2328 = x2314
val x2329 = x2328+x2324
x2314 = x2329
val x2326 = x2321 + 1
x2316 = x2326
()
} else {
()
}
x2333
}
x2335
}
val x2338 = x2314
val x2339 = x2316
val x2341 = x2339 >= x2190
val x2353 = if (x2341) {
()
} else {
val x2342 = x2186(x2339)
val x2343 = x2342 == '
'
val x2351 = if (x2343) {
val x2344 = x2339 + 1
val x2241 = x2192+x2236
val x2347 = (x2241,x2338)
val x2348 = (x2347,x2344)
x2189 = x2348
()
} else {
()
}
x2351
}
x2353
} else {
()
}
x2355
}
x2357
} else {
()
}
x2359
}
val x2362 = x2189
x2362
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((Date,Mon, 23 May 2005 22:38:34 GMT),36)
((Server,Apache/1.3.3.7 (Unix) (Red-Hat/Linux)),46)
((Last-Modified,Wed, 08 Jan 2003 23:11:55 GMT),45)
((Etag,\"3f80f-1b6-3e1cb03b\"),29)
((Content-Type,text/html; charset=UTF-8),39)
((Content-Length,131),20)
((,),-1)
nVars=3000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse extends ((Array[Char])=>(scala.Tuple2[RecordintintStringbooleanboolean, Int])) {
def apply(x2540:Array[Char]): scala.Tuple2[RecordintintStringbooleanboolean, Int] = {
val x2541 = RecordintintStringbooleanboolean(contentLength = 0, chunked = false, status = 200, connection = "close", upgrade = false)
val x2542 = (x2541,-1)
var x2543: scala.Tuple2[RecordintintStringbooleanboolean, Int] = x2542
val x2545 = x2540.length
val x2546 = 0 >= x2545
val x3050 = if (x2546) {
()
} else {
val x2547 = x2540(0)
val x2548 = x2547 == 'H'
val x3048 = if (x2548) {
val x242 = 0 + 1
val x2550 = x242 >= x2545
val x3046 = if (x2550) {
()
} else {
val x2551 = x2540(x242)
val x2552 = x2551 == 'T'
val x3044 = if (x2552) {
val x367 = x242 + 1
val x2554 = x367 >= x2545
val x3042 = if (x2554) {
()
} else {
val x2555 = x2540(x367)
val x2556 = x2555 == 'T'
val x3040 = if (x2556) {
val x372 = x367 + 1
val x2558 = x372 >= x2545
val x3038 = if (x2558) {
()
} else {
val x2559 = x2540(x372)
val x2560 = x2559 == 'P'
val x3036 = if (x2560) {
val x377 = x372 + 1
val x2562 = x377 >= x2545
val x3034 = if (x2562) {
()
} else {
val x2563 = x2540(x377)
val x2564 = x2563 == '/'
val x3032 = if (x2564) {
var x2586: Int = 0
var x2587: Int = -1
val x382 = x377 + 1
var x2588: Int = x382
val x2615 = while ({val x2589 = x2587
val x2590 = x2588
val x2591 = x2589 != x2590
x2591}) {
val x2593 = x2588
x2587 = x2593
val x2595 = x2593 >= x2545
val x2613 = if (x2595) {
()
} else {
val x2596 = x2540(x2593)
val x2597 = x2596 >= '0'
val x2598 = x2596 <= '9'
val x2599 = x2597 && x2598
val x2611 = if (x2599) {
val x2605 = x2586
val x2602 = x2596 - '0'
val x2603 = x2602.toInt
val x2606 = x2605 * 10
val x2607 = x2606 + x2603
x2586 = x2607
val x2600 = x2593 + 1
x2588 = x2600
()
} else {
()
}
x2611
}
x2613
}
val x2616 = x2586
val x2617 = x2588
val x2619 = x2617 >= x2545
val x3030 = if (x2619) {
()
} else {
val x2620 = x2540(x2617)
val x2621 = x2620 == '.'
val x3028 = if (x2621) {
var x2624: Int = 0
var x2625: Int = -1
val x2622 = x2617 + 1
var x2626: Int = x2622
val x2653 = while ({val x2627 = x2625
val x2628 = x2626
val x2629 = x2627 != x2628
x2629}) {
val x2631 = x2626
x2625 = x2631
val x2633 = x2631 >= x2545
val x2651 = if (x2633) {
()
} else {
val x2634 = x2540(x2631)
val x2635 = x2634 >= '0'
val x2636 = x2634 <= '9'
val x2637 = x2635 && x2636
val x2649 = if (x2637) {
val x2643 = x2624
val x2640 = x2634 - '0'
val x2641 = x2640.toInt
val x2644 = x2643 * 10
val x2645 = x2644 + x2641
x2624 = x2645
val x2638 = x2631 + 1
x2626 = x2638
()
} else {
()
}
x2649
}
x2651
}
val x2654 = x2624
val x2655 = x2626
val x651 = List()
var x2661: scala.collection.immutable.List[Char] = x651
var x2662: Int = -1
var x2663: Int = x2655
val x2685 = while ({val x2664 = x2662
val x2665 = x2663
val x2666 = x2664 != x2665
x2666}) {
val x2668 = x2663
x2662 = x2668
val x2670 = x2668 >= x2545
val x2683 = if (x2670) {
()
} else {
val x2671 = x2540(x2668)
val x2672 = x2671 == ' '
val x2681 = if (x2672) {
val x2675 = x2661
val x2676 = List(x2671)
val x2677 = x2675 ::: x2676
x2661 = x2677
val x2673 = x2668 + 1
x2663 = x2673
()
} else {
()
}
x2681
}
x2683
}
val x2686 = x2661
val x2687 = x2663
var x2692: Int = 0
var x2693: Int = -1
var x2694: Int = x2687
val x2721 = while ({val x2695 = x2693
val x2696 = x2694
val x2697 = x2695 != x2696
x2697}) {
val x2699 = x2694
x2693 = x2699
val x2701 = x2699 >= x2545
val x2719 = if (x2701) {
()
} else {
val x2702 = x2540(x2699)
val x2703 = x2702 >= '0'
val x2704 = x2702 <= '9'
val x2705 = x2703 && x2704
val x2717 = if (x2705) {
val x2711 = x2692
val x2708 = x2702 - '0'
val x2709 = x2708.toInt
val x2712 = x2711 * 10
val x2713 = x2712 + x2709
x2692 = x2713
val x2706 = x2699 + 1
x2694 = x2706
()
} else {
()
}
x2717
}
x2719
}
val x2722 = x2692
val x2723 = x2694
var x2725: java.lang.String = ""
var x2726: Int = -1
var x2727: Int = x2723
val x2748 = while ({val x2728 = x2726
val x2729 = x2727
val x2730 = x2728 != x2729
x2730}) {
val x2732 = x2727
x2726 = x2732
val x2734 = x2732 >= x2545
val x2746 = if (x2734) {
()
} else {
val x2735 = x2540(x2732)
val x2736 = x2735 != '
'
val x2744 = if (x2736) {
val x2739 = x2725
val x2740 = x2739+x2735
x2725 = x2740
val x2737 = x2732 + 1
x2727 = x2737
()
} else {
()
}
x2744
}
x2746
}
val x2749 = x2725
val x2750 = x2727
val x2752 = x2750 >= x2545
val x3026 = if (x2752) {
()
} else {
val x2753 = x2540(x2750)
val x2754 = x2753 == '
'
val x3024 = if (x2754) {
var x2760: Int = 0
var x2761: Boolean = false
var x2762: Int = 200
var x2763: java.lang.String = "close"
var x2764: Boolean = false
var x2766: Int = -1
val x2755 = x2750 + 1
var x2767: Int = x2755
val x2999 = while ({val x2768 = x2766
val x2769 = x2767
val x2770 = x2768 != x2769
x2770}) {
val x2772 = x2767
x2766 = x2772
val x2774 = x2772 >= x2545
val x2997 = if (x2774) {
()
} else {
val x2775 = x2540(x2772)
val x2776 = x2775 >= 'A'
val x2777 = x2775 <= 'Z'
val x2778 = x2776 && x2777
val x2995 = if (x2778) {
var x2781: java.lang.String = ""
var x2782: Int = -1
val x2779 = x2772 + 1
var x2783: Int = x2779
val x2819 = while ({val x2784 = x2782
val x2785 = x2783
val x2786 = x2784 != x2785
x2786}) {
val x2788 = x2783
x2782 = x2788
val x2790 = x2788 >= x2545
val x2809 = if (x2790) {
()
} else {
val x2791 = x2540(x2788)
val x2792 = x2791 >= 'a'
val x2793 = x2791 <= 'z'
val x2794 = x2792 && x2793
val x2795 = x2791 >= 'A'
val x2796 = x2791 <= 'Z'
val x2797 = x2795 && x2796
val x2798 = x2794 || x2797
val x2807 = if (x2798) {
val x2802 = x2781
val x2803 = x2802+x2791
x2781 = x2803
val x2799 = x2788 + 1
x2783 = x2799
()
} else {
()
}
x2807
}
val x2817 = if (x2790) {
()
} else {
val x2791 = x2540(x2788)
val x2801 = x2791 == '-'
val x2815 = if (x2801) {
val x2810 = x2781
val x2811 = x2810+x2791
x2781 = x2811
val x2799 = x2788 + 1
x2783 = x2799
()
} else {
()
}
x2815
}
x2817
}
val x2820 = x2781
val x2821 = x2783
var x2827: scala.collection.immutable.List[Char] = x651
var x2828: Int = -1
var x2829: Int = x2821
val x2851 = while ({val x2830 = x2828
val x2831 = x2829
val x2832 = x2830 != x2831
x2832}) {
val x2834 = x2829
x2828 = x2834
val x2836 = x2834 >= x2545
val x2849 = if (x2836) {
()
} else {
val x2837 = x2540(x2834)
val x2838 = x2837 == ' '
val x2847 = if (x2838) {
val x2841 = x2827
val x2842 = List(x2837)
val x2843 = x2841 ::: x2842
x2827 = x2843
val x2839 = x2834 + 1
x2829 = x2839
()
} else {
()
}
x2847
}
x2849
}
val x2852 = x2827
val x2853 = x2829
val x2856 = x2853 >= x2545
val x2993 = if (x2856) {
()
} else {
val x2857 = x2540(x2853)
val x2858 = x2857 == ':'
val x2991 = if (x2858) {
var x2869: scala.collection.immutable.List[Char] = x651
var x2870: Int = -1
val x2859 = x2853 + 1
var x2871: Int = x2859
val x2893 = while ({val x2872 = x2870
val x2873 = x2871
val x2874 = x2872 != x2873
x2874}) {
val x2876 = x2871
x2870 = x2876
val x2878 = x2876 >= x2545
val x2891 = if (x2878) {
()
} else {
val x2879 = x2540(x2876)
val x2880 = x2879 == ' '
val x2889 = if (x2880) {
val x2883 = x2869
val x2884 = List(x2879)
val x2885 = x2883 ::: x2884
x2869 = x2885
val x2881 = x2876 + 1
x2871 = x2881
()
} else {
()
}
x2889
}
x2891
}
val x2894 = x2869
val x2895 = x2871
var x2898: java.lang.String = ""
var x2899: Int = -1
var x2900: Int = x2895
val x2921 = while ({val x2901 = x2899
val x2902 = x2900
val x2903 = x2901 != x2902
x2903}) {
val x2905 = x2900
x2899 = x2905
val x2907 = x2905 >= x2545
val x2919 = if (x2907) {
()
} else {
val x2908 = x2540(x2905)
val x2909 = x2908 != '
'
val x2917 = if (x2909) {
val x2912 = x2898
val x2913 = x2912+x2908
x2898 = x2913
val x2910 = x2905 + 1
x2900 = x2910
()
} else {
()
}
x2917
}
x2919
}
val x2922 = x2898
val x2923 = x2900
val x2925 = x2923 >= x2545
val x2989 = if (x2925) {
()
} else {
val x2926 = x2540(x2923)
val x2927 = x2926 == '
'
val x2987 = if (x2927) {
val x2933 = x2760
val x2934 = x2761
val x2935 = x2762
val x2936 = x2763
val x2937 = x2764
val x2825 = x2775+x2820
val x2939 = x2825 == "connection"
val x2940 = x2825 == "proxy-connection"
val x2941 = x2939 || x2940
val x2942 = x2922 == "keep-alive"
val x2943 = x2922 == "close"
val x2944 = x2942 || x2943
val x2945 = x2941 && x2944
val x2974 = if (x2945) {
x2933
} else {
val x2947 = x2825 == "Content-Length"
val x2968 = if (x2947) {
val x2948 = x2922.toInt
x2948
} else {
val x2950 = x2825 == "Transfer-Encoding"
val x2951 = x2922 == "chunked"
val x2952 = x2950 && x2951
val x2962 = if (x2952) {
x2933
} else {
val x2954 = x2825 == "upgrade"
val x2956 = if (x2954) {
x2933
} else {
x2933
}
x2956
}
x2962
}
x2968
}
x2760 = x2974
val x2975 = if (x2945) {
x2934
} else {
val x2947 = x2825 == "Content-Length"
val x2969 = if (x2947) {
x2934
} else {
val x2950 = x2825 == "Transfer-Encoding"
val x2951 = x2922 == "chunked"
val x2952 = x2950 && x2951
val x2963 = if (x2952) {
true
} else {
val x2954 = x2825 == "upgrade"
val x2957 = if (x2954) {
x2934
} else {
x2934
}
x2957
}
x2963
}
x2969
}
x2761 = x2975
val x2976 = if (x2945) {
x2935
} else {
val x2947 = x2825 == "Content-Length"
val x2970 = if (x2947) {
x2935
} else {
val x2950 = x2825 == "Transfer-Encoding"
val x2951 = x2922 == "chunked"
val x2952 = x2950 && x2951
val x2964 = if (x2952) {
x2935
} else {
val x2954 = x2825 == "upgrade"
val x2958 = if (x2954) {
x2935
} else {
x2935
}
x2958
}
x2964
}
x2970
}
x2762 = x2976
val x2977 = if (x2945) {
x2922
} else {
val x2947 = x2825 == "Content-Length"
val x2971 = if (x2947) {
x2936
} else {
val x2950 = x2825 == "Transfer-Encoding"
val x2951 = x2922 == "chunked"
val x2952 = x2950 && x2951
val x2965 = if (x2952) {
x2936
} else {
val x2954 = x2825 == "upgrade"
val x2959 = if (x2954) {
x2936
} else {
x2936
}
x2959
}
x2965
}
x2971
}
x2763 = x2977
val x2978 = if (x2945) {
x2937
} else {
val x2947 = x2825 == "Content-Length"
val x2972 = if (x2947) {
x2937
} else {
val x2950 = x2825 == "Transfer-Encoding"
val x2951 = x2922 == "chunked"
val x2952 = x2950 && x2951
val x2966 = if (x2952) {
x2937
} else {
val x2954 = x2825 == "upgrade"
val x2960 = if (x2954) {
true
} else {
x2937
}
x2960
}
x2966
}
x2972
}
x2764 = x2978
val x2928 = x2923 + 1
x2767 = x2928
()
} else {
()
}
x2987
}
x2989
} else {
()
}
x2991
}
x2993
} else {
()
}
x2995
}
x2997
}
val x3000 = x2760
val x3001 = x2761
val x3002 = x2762
val x3003 = x2763
val x3004 = x2764
val x3006 = x2767
val x3010 = x3006 >= x2545
val x3022 = if (x3010) {
()
} else {
val x3011 = x2540(x3006)
val x3012 = x3011 == '
'
val x3020 = if (x3012) {
val x3013 = x3006 + 1
val x3016 = RecordintintStringbooleanboolean(contentLength = x3000, chunked = x3001, status = x2722, connection = x3003, upgrade = x3004)
val x3017 = (x3016,x3013)
x2543 = x3017
()
} else {
()
}
x3020
}
x3022
} else {
()
}
x3024
}
x3026
} else {
()
}
x3028
}
x3030
} else {
()
}
x3032
}
x3034
} else {
()
}
x3036
}
x3038
} else {
()
}
x3040
}
x3042
} else {
()
}
x3044
}
x3046
} else {
()
}
x3048
}
val x3051 = x2543
x3051
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(RecordintintStringbooleanboolean(131,false,418,close,false),258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x3566:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x169 = ("",-1)
var x3567: scala.Tuple2[java.lang.String, Int] = x169
var x3568: java.lang.String = ""
var x3569: Int = -1
var x3570: Int = 0
var x3571: Int = 0
val x3584 = x3566.length
val x3596 = while ({val x3572 = x3571
val x3574 = x3569
val x3575 = x3570
val x3573 = x3572 < 14
val x3576 = x3574 != x3575
val x3577 = x3573 && x3576
x3577}) {
val x3579 = x3570
x3569 = x3579
val x3581 = x3571
val x3582 = x3581 + 1
x3571 = x3582
val x3585 = x3579 >= x3584
val x3594 = if (x3585) {
()
} else {
val x3589 = x3568
val x3586 = x3566(x3579)
val x3590 = x3589+x3586
x3568 = x3590
val x3587 = x3579 + 1
x3570 = x3587
()
}
x3594
}
val x3597 = x3568
val x3598 = x3570
val x3599 = (x3597,x3598)
x3567 = x3599
val x3601 = x3567
x3601
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(Make it funky!,14)
nVars=4000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class respAndMessageParse extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[RecordintintStringbooleanboolean, java.lang.String], Int])) {
def apply(x3640:Array[Char]): scala.Tuple2[scala.Tuple2[RecordintintStringbooleanboolean, java.lang.String], Int] = {
val x3641 = RecordintintStringbooleanboolean(contentLength = 0, chunked = false, status = 200, connection = "close", upgrade = false)
val x3642 = (x3641,"")
val x3643 = (x3642,-1)
var x3644: scala.Tuple2[scala.Tuple2[RecordintintStringbooleanboolean, java.lang.String], Int] = x3643
val x3646 = x3640.length
val x3647 = 0 >= x3646
val x4184 = if (x3647) {
()
} else {
val x3648 = x3640(0)
val x3649 = x3648 == 'H'
val x4182 = if (x3649) {
val x242 = 0 + 1
val x3651 = x242 >= x3646
val x4180 = if (x3651) {
()
} else {
val x3652 = x3640(x242)
val x3653 = x3652 == 'T'
val x4178 = if (x3653) {
val x367 = x242 + 1
val x3655 = x367 >= x3646
val x4176 = if (x3655) {
()
} else {
val x3656 = x3640(x367)
val x3657 = x3656 == 'T'
val x4174 = if (x3657) {
val x372 = x367 + 1
val x3659 = x372 >= x3646
val x4172 = if (x3659) {
()
} else {
val x3660 = x3640(x372)
val x3661 = x3660 == 'P'
val x4170 = if (x3661) {
val x377 = x372 + 1
val x3663 = x377 >= x3646
val x4168 = if (x3663) {
()
} else {
val x3664 = x3640(x377)
val x3665 = x3664 == '/'
val x4166 = if (x3665) {
var x3687: Int = 0
var x3688: Int = -1
val x382 = x377 + 1
var x3689: Int = x382
val x3716 = while ({val x3690 = x3688
val x3691 = x3689
val x3692 = x3690 != x3691
x3692}) {
val x3694 = x3689
x3688 = x3694
val x3696 = x3694 >= x3646
val x3714 = if (x3696) {
()
} else {
val x3697 = x3640(x3694)
val x3698 = x3697 >= '0'
val x3699 = x3697 <= '9'
val x3700 = x3698 && x3699
val x3712 = if (x3700) {
val x3706 = x3687
val x3703 = x3697 - '0'
val x3704 = x3703.toInt
val x3707 = x3706 * 10
val x3708 = x3707 + x3704
x3687 = x3708
val x3701 = x3694 + 1
x3689 = x3701
()
} else {
()
}
x3712
}
x3714
}
val x3717 = x3687
val x3718 = x3689
val x3720 = x3718 >= x3646
val x4164 = if (x3720) {
()
} else {
val x3721 = x3640(x3718)
val x3722 = x3721 == '.'
val x4162 = if (x3722) {
var x3725: Int = 0
var x3726: Int = -1
val x3723 = x3718 + 1
var x3727: Int = x3723
val x3754 = while ({val x3728 = x3726
val x3729 = x3727
val x3730 = x3728 != x3729
x3730}) {
val x3732 = x3727
x3726 = x3732
val x3734 = x3732 >= x3646
val x3752 = if (x3734) {
()
} else {
val x3735 = x3640(x3732)
val x3736 = x3735 >= '0'
val x3737 = x3735 <= '9'
val x3738 = x3736 && x3737
val x3750 = if (x3738) {
val x3744 = x3725
val x3741 = x3735 - '0'
val x3742 = x3741.toInt
val x3745 = x3744 * 10
val x3746 = x3745 + x3742
x3725 = x3746
val x3739 = x3732 + 1
x3727 = x3739
()
} else {
()
}
x3750
}
x3752
}
val x3755 = x3725
val x3756 = x3727
val x651 = List()
var x3762: scala.collection.immutable.List[Char] = x651
var x3763: Int = -1
var x3764: Int = x3756
val x3786 = while ({val x3765 = x3763
val x3766 = x3764
val x3767 = x3765 != x3766
x3767}) {
val x3769 = x3764
x3763 = x3769
val x3771 = x3769 >= x3646
val x3784 = if (x3771) {
()
} else {
val x3772 = x3640(x3769)
val x3773 = x3772 == ' '
val x3782 = if (x3773) {
val x3776 = x3762
val x3777 = List(x3772)
val x3778 = x3776 ::: x3777
x3762 = x3778
val x3774 = x3769 + 1
x3764 = x3774
()
} else {
()
}
x3782
}
x3784
}
val x3787 = x3762
val x3788 = x3764
var x3793: Int = 0
var x3794: Int = -1
var x3795: Int = x3788
val x3822 = while ({val x3796 = x3794
val x3797 = x3795
val x3798 = x3796 != x3797
x3798}) {
val x3800 = x3795
x3794 = x3800
val x3802 = x3800 >= x3646
val x3820 = if (x3802) {
()
} else {
val x3803 = x3640(x3800)
val x3804 = x3803 >= '0'
val x3805 = x3803 <= '9'
val x3806 = x3804 && x3805
val x3818 = if (x3806) {
val x3812 = x3793
val x3809 = x3803 - '0'
val x3810 = x3809.toInt
val x3813 = x3812 * 10
val x3814 = x3813 + x3810
x3793 = x3814
val x3807 = x3800 + 1
x3795 = x3807
()
} else {
()
}
x3818
}
x3820
}
val x3823 = x3793
val x3824 = x3795
var x3826: java.lang.String = ""
var x3827: Int = -1
var x3828: Int = x3824
val x3849 = while ({val x3829 = x3827
val x3830 = x3828
val x3831 = x3829 != x3830
x3831}) {
val x3833 = x3828
x3827 = x3833
val x3835 = x3833 >= x3646
val x3847 = if (x3835) {
()
} else {
val x3836 = x3640(x3833)
val x3837 = x3836 != '
'
val x3845 = if (x3837) {
val x3840 = x3826
val x3841 = x3840+x3836
x3826 = x3841
val x3838 = x3833 + 1
x3828 = x3838
()
} else {
()
}
x3845
}
x3847
}
val x3850 = x3826
val x3851 = x3828
val x3853 = x3851 >= x3646
val x4160 = if (x3853) {
()
} else {
val x3854 = x3640(x3851)
val x3855 = x3854 == '
'
val x4158 = if (x3855) {
var x3861: Int = 0
var x3862: Boolean = false
var x3863: Int = 200
var x3864: java.lang.String = "close"
var x3865: Boolean = false
var x3867: Int = -1
val x3856 = x3851 + 1
var x3868: Int = x3856
val x4100 = while ({val x3869 = x3867
val x3870 = x3868
val x3871 = x3869 != x3870
x3871}) {
val x3873 = x3868
x3867 = x3873
val x3875 = x3873 >= x3646
val x4098 = if (x3875) {
()
} else {
val x3876 = x3640(x3873)
val x3877 = x3876 >= 'A'
val x3878 = x3876 <= 'Z'
val x3879 = x3877 && x3878
val x4096 = if (x3879) {
var x3882: java.lang.String = ""
var x3883: Int = -1
val x3880 = x3873 + 1
var x3884: Int = x3880
val x3920 = while ({val x3885 = x3883
val x3886 = x3884
val x3887 = x3885 != x3886
x3887}) {
val x3889 = x3884
x3883 = x3889
val x3891 = x3889 >= x3646
val x3910 = if (x3891) {
()
} else {
val x3892 = x3640(x3889)
val x3893 = x3892 >= 'a'
val x3894 = x3892 <= 'z'
val x3895 = x3893 && x3894
val x3896 = x3892 >= 'A'
val x3897 = x3892 <= 'Z'
val x3898 = x3896 && x3897
val x3899 = x3895 || x3898
val x3908 = if (x3899) {
val x3903 = x3882
val x3904 = x3903+x3892
x3882 = x3904
val x3900 = x3889 + 1
x3884 = x3900
()
} else {
()
}
x3908
}
val x3918 = if (x3891) {
()
} else {
val x3892 = x3640(x3889)
val x3902 = x3892 == '-'
val x3916 = if (x3902) {
val x3911 = x3882
val x3912 = x3911+x3892
x3882 = x3912
val x3900 = x3889 + 1
x3884 = x3900
()
} else {
()
}
x3916
}
x3918
}
val x3921 = x3882
val x3922 = x3884
var x3928: scala.collection.immutable.List[Char] = x651
var x3929: Int = -1
var x3930: Int = x3922
val x3952 = while ({val x3931 = x3929
val x3932 = x3930
val x3933 = x3931 != x3932
x3933}) {
val x3935 = x3930
x3929 = x3935
val x3937 = x3935 >= x3646
val x3950 = if (x3937) {
()
} else {
val x3938 = x3640(x3935)
val x3939 = x3938 == ' '
val x3948 = if (x3939) {
val x3942 = x3928
val x3943 = List(x3938)
val x3944 = x3942 ::: x3943
x3928 = x3944
val x3940 = x3935 + 1
x3930 = x3940
()
} else {
()
}
x3948
}
x3950
}
val x3953 = x3928
val x3954 = x3930
val x3957 = x3954 >= x3646
val x4094 = if (x3957) {
()
} else {
val x3958 = x3640(x3954)
val x3959 = x3958 == ':'
val x4092 = if (x3959) {
var x3970: scala.collection.immutable.List[Char] = x651
var x3971: Int = -1
val x3960 = x3954 + 1
var x3972: Int = x3960
val x3994 = while ({val x3973 = x3971
val x3974 = x3972
val x3975 = x3973 != x3974
x3975}) {
val x3977 = x3972
x3971 = x3977
val x3979 = x3977 >= x3646
val x3992 = if (x3979) {
()
} else {
val x3980 = x3640(x3977)
val x3981 = x3980 == ' '
val x3990 = if (x3981) {
val x3984 = x3970
val x3985 = List(x3980)
val x3986 = x3984 ::: x3985
x3970 = x3986
val x3982 = x3977 + 1
x3972 = x3982
()
} else {
()
}
x3990
}
x3992
}
val x3995 = x3970
val x3996 = x3972
var x3999: java.lang.String = ""
var x4000: Int = -1
var x4001: Int = x3996
val x4022 = while ({val x4002 = x4000
val x4003 = x4001
val x4004 = x4002 != x4003
x4004}) {
val x4006 = x4001
x4000 = x4006
val x4008 = x4006 >= x3646
val x4020 = if (x4008) {
()
} else {
val x4009 = x3640(x4006)
val x4010 = x4009 != '
'
val x4018 = if (x4010) {
val x4013 = x3999
val x4014 = x4013+x4009
x3999 = x4014
val x4011 = x4006 + 1
x4001 = x4011
()
} else {
()
}
x4018
}
x4020
}
val x4023 = x3999
val x4024 = x4001
val x4026 = x4024 >= x3646
val x4090 = if (x4026) {
()
} else {
val x4027 = x3640(x4024)
val x4028 = x4027 == '
'
val x4088 = if (x4028) {
val x4034 = x3861
val x4035 = x3862
val x4036 = x3863
val x4037 = x3864
val x4038 = x3865
val x3926 = x3876+x3921
val x4040 = x3926 == "connection"
val x4041 = x3926 == "proxy-connection"
val x4042 = x4040 || x4041
val x4043 = x4023 == "keep-alive"
val x4044 = x4023 == "close"
val x4045 = x4043 || x4044
val x4046 = x4042 && x4045
val x4075 = if (x4046) {
x4034
} else {
val x4048 = x3926 == "Content-Length"
val x4069 = if (x4048) {
val x4049 = x4023.toInt
x4049
} else {
val x4051 = x3926 == "Transfer-Encoding"
val x4052 = x4023 == "chunked"
val x4053 = x4051 && x4052
val x4063 = if (x4053) {
x4034
} else {
val x4055 = x3926 == "upgrade"
val x4057 = if (x4055) {
x4034
} else {
x4034
}
x4057
}
x4063
}
x4069
}
x3861 = x4075
val x4076 = if (x4046) {
x4035
} else {
val x4048 = x3926 == "Content-Length"
val x4070 = if (x4048) {
x4035
} else {
val x4051 = x3926 == "Transfer-Encoding"
val x4052 = x4023 == "chunked"
val x4053 = x4051 && x4052
val x4064 = if (x4053) {
true
} else {
val x4055 = x3926 == "upgrade"
val x4058 = if (x4055) {
x4035
} else {
x4035
}
x4058
}
x4064
}
x4070
}
x3862 = x4076
val x4077 = if (x4046) {
x4036
} else {
val x4048 = x3926 == "Content-Length"
val x4071 = if (x4048) {
x4036
} else {
val x4051 = x3926 == "Transfer-Encoding"
val x4052 = x4023 == "chunked"
val x4053 = x4051 && x4052
val x4065 = if (x4053) {
x4036
} else {
val x4055 = x3926 == "upgrade"
val x4059 = if (x4055) {
x4036
} else {
x4036
}
x4059
}
x4065
}
x4071
}
x3863 = x4077
val x4078 = if (x4046) {
x4023
} else {
val x4048 = x3926 == "Content-Length"
val x4072 = if (x4048) {
x4037
} else {
val x4051 = x3926 == "Transfer-Encoding"
val x4052 = x4023 == "chunked"
val x4053 = x4051 && x4052
val x4066 = if (x4053) {
x4037
} else {
val x4055 = x3926 == "upgrade"
val x4060 = if (x4055) {
x4037
} else {
x4037
}
x4060
}
x4066
}
x4072
}
x3864 = x4078
val x4079 = if (x4046) {
x4038
} else {
val x4048 = x3926 == "Content-Length"
val x4073 = if (x4048) {
x4038
} else {
val x4051 = x3926 == "Transfer-Encoding"
val x4052 = x4023 == "chunked"
val x4053 = x4051 && x4052
val x4067 = if (x4053) {
x4038
} else {
val x4055 = x3926 == "upgrade"
val x4061 = if (x4055) {
true
} else {
x4038
}
x4061
}
x4067
}
x4073
}
x3865 = x4079
val x4029 = x4024 + 1
x3868 = x4029
()
} else {
()
}
x4088
}
x4090
} else {
()
}
x4092
}
x4094
} else {
()
}
x4096
}
x4098
}
val x4101 = x3861
val x4102 = x3862
val x4103 = x3863
val x4104 = x3864
val x4105 = x3865
val x4107 = x3868
val x4111 = x4107 >= x3646
val x4156 = if (x4111) {
()
} else {
val x4112 = x3640(x4107)
val x4113 = x4112 == '
'
val x4154 = if (x4113) {
var x4119: java.lang.String = ""
var x4120: Int = -1
val x4114 = x4107 + 1
var x4121: Int = x4114
var x4122: Int = 0
val x4146 = while ({val x4123 = x4122
val x4125 = x4120
val x4126 = x4121
val x4124 = x4123 < x4101
val x4127 = x4125 != x4126
val x4128 = x4124 && x4127
x4128}) {
val x4130 = x4121
x4120 = x4130
val x4132 = x4122
val x4133 = x4132 + 1
x4122 = x4133
val x4135 = x4130 >= x3646
val x4144 = if (x4135) {
()
} else {
val x4139 = x4119
val x4136 = x3640(x4130)
val x4140 = x4139+x4136
x4119 = x4140
val x4137 = x4130 + 1
x4121 = x4137
()
}
x4144
}
val x4147 = x4119
val x4148 = x4121
val x4117 = RecordintintStringbooleanboolean(contentLength = x4101, chunked = x4102, status = x3823, connection = x4104, upgrade = x4105)
val x4150 = (x4117,x4147)
val x4151 = (x4150,x4148)
x3644 = x4151
()
} else {
()
}
x4154
}
x4156
} else {
()
}
x4158
}
x4160
} else {
()
}
x4162
}
x4164
} else {
()
}
x4166
}
x4168
} else {
()
}
x4170
}
x4172
} else {
()
}
x4174
}
x4176
} else {
()
}
x4178
}
x4180
} else {
()
}
x4182
}
val x4185 = x3644
x4185
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((RecordintintStringbooleanboolean(2,false,200,close,false),AA),248)
((RecordintintStringbooleanboolean(0,true,200,close,false),),273)
((RecordintintStringbooleanboolean(129,false,200,close,false),<html>
<head>
  <title>An Example Page</title>
</head>
<body>
  Hello World, this is a very simple HTML document.
</body>
</html>),377)
