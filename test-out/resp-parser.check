compilation: ok
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse(px1352:Array[Char],px1378:Array[Char],px1405:Array[Char],px1431:Array[Char],px1477:Array[Char],px1522:Array[Char],px1548:Array[Char],px1576:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x566:Array[Char]): Unit = {
val x567 = null.asInstanceOf[Anon1323431030]
var x569: Anon1323431030 = x567
var x570: Boolean = true
var x571: Int = -1
val x585 = x566.length
val x655 = 0 >= x585
val x1794 = if (x655) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x663 = x566(0)
val x664 = x663 == 'H'
val x1792 = if (x664) {
val x26 = 0 + 1
val x666 = x26 >= x585
val x1786 = if (x666) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x671 = x566(x26)
val x672 = x671 == 'T'
val x1784 = if (x672) {
val x38 = x26 + 1
val x674 = x38 >= x585
val x1778 = if (x674) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x679 = x566(x38)
val x680 = x679 == 'T'
val x1776 = if (x680) {
val x50 = x38 + 1
val x682 = x50 >= x585
val x1770 = if (x682) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x687 = x566(x50)
val x688 = x687 == 'P'
val x1768 = if (x688) {
val x62 = x50 + 1
val x690 = x62 >= x585
val x1762 = if (x690) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x695 = x566(x62)
val x696 = x695 == '/'
val x1760 = if (x696) {
val x74 = x62 + 1
val x718 = x74 >= x585
val x1754 = if (x718) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x723 = x566(x74)
val x724 = x723 >= '0'
val x725 = x723 <= '9'
val x726 = x724 && x725
val x1752 = if (x726) {
val x728 = x723 - '0'
val x729 = x728.toInt
var x731: Int = x729
var x732: Boolean = false
val x110 = x74 + 1
var x733: Int = x110
var x735: Int = -1
var x736: Boolean = true
var x737: Int = x110
val x778 = while ({val x738 = x736
val x739 = x735
val x740 = x737
val x741 = x739 != x740
val x742 = x738 && x741
x742}) {
val x744 = x737
x735 = x744
val x746 = x744 >= x585
val x776 = if (x746) {
x736 = false
()
} else {
val x751 = x566(x744)
val x752 = x751 >= '0'
val x753 = x751 <= '9'
val x754 = x752 && x753
val x774 = if (x754) {
val x760 = x731
val x761 = x732
val x762 = x733
val x757 = x751 - '0'
val x758 = x757.toInt
val x764 = x760 * 10
val x765 = x764 + x758
x731 = x765
x732 = false
val x755 = x744 + 1
x733 = x755
x737 = x755
()
} else {
x736 = false
()
}
x774
}
x776
}
val x779 = x731
val x780 = x732
val x781 = x733
val x784 = if (x780) {
true
} else {
x780
}
val x1746 = if (x784) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x785 = if (x780) {
x74
} else {
x781
}
val x791 = x785 >= x585
val x1744 = if (x791) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x798 = x566(x785)
val x799 = x798 == '.'
val x1742 = if (x799) {
val x800 = x785 + 1
val x802 = x800 >= x585
val x1736 = if (x802) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x809 = x566(x800)
val x810 = x809 >= '0'
val x811 = x809 <= '9'
val x812 = x810 && x811
val x1734 = if (x812) {
val x815 = x809 - '0'
val x816 = x815.toInt
var x818: Int = x816
var x819: Boolean = false
val x813 = x800 + 1
var x820: Int = x813
var x822: Int = -1
var x823: Boolean = true
var x824: Int = x813
val x865 = while ({val x825 = x823
val x826 = x822
val x827 = x824
val x828 = x826 != x827
val x829 = x825 && x828
x829}) {
val x831 = x824
x822 = x831
val x833 = x831 >= x585
val x863 = if (x833) {
x823 = false
()
} else {
val x838 = x566(x831)
val x839 = x838 >= '0'
val x840 = x838 <= '9'
val x841 = x839 && x840
val x861 = if (x841) {
val x847 = x818
val x848 = x819
val x849 = x820
val x844 = x838 - '0'
val x845 = x844.toInt
val x851 = x847 * 10
val x852 = x851 + x845
x818 = x852
x819 = false
val x842 = x831 + 1
x820 = x842
x824 = x842
()
} else {
x823 = false
()
}
x861
}
x863
}
val x866 = x818
val x867 = x819
val x868 = x820
val x871 = if (x867) {
true
} else {
x867
}
val x877 = if (x871) {
true
} else {
false
}
val x883 = if (x877) {
true
} else {
false
}
val x1728 = if (x883) {
x569 = x567
x570 = true
x571 = 0
()
} else {
var x891: java.lang.String = ""
var x892: Boolean = false
val x884 = if (x877) {
0
} else {
val x878 = if (x871) {
x74
} else {
val x872 = if (x867) {
x800
} else {
x868
}
x872
}
x878
}
var x893: Int = x884
var x895: Int = -1
var x896: Boolean = true
var x897: Int = x884
val x930 = while ({val x898 = x896
val x899 = x895
val x900 = x897
val x901 = x899 != x900
val x902 = x898 && x901
x902}) {
val x904 = x897
x895 = x904
val x906 = x904 >= x585
val x928 = if (x906) {
x896 = false
()
} else {
val x910 = x566(x904)
val x911 = x910 == ' '
val x926 = if (x911) {
val x914 = x891
val x915 = x892
val x916 = x893
x891 = x914
x892 = false
val x912 = x904 + 1
x893 = x912
x897 = x912
()
} else {
x896 = false
()
}
x926
}
x928
}
val x931 = x891
val x932 = x892
val x933 = x893
val x938 = if (x932) {
true
} else {
false
}
val x1726 = if (x938) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x939 = if (x932) {
0
} else {
x933
}
val x945 = x939 >= x585
val x1724 = if (x945) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x952 = x566(x939)
val x953 = x952 >= '0'
val x954 = x952 <= '9'
val x955 = x953 && x954
val x1722 = if (x955) {
val x958 = x952 - '0'
val x959 = x958.toInt
var x961: Int = x959
var x962: Boolean = false
val x956 = x939 + 1
var x963: Int = x956
var x965: Int = -1
var x966: Boolean = true
var x967: Int = x956
val x1008 = while ({val x968 = x966
val x969 = x965
val x970 = x967
val x971 = x969 != x970
val x972 = x968 && x971
x972}) {
val x974 = x967
x965 = x974
val x976 = x974 >= x585
val x1006 = if (x976) {
x966 = false
()
} else {
val x981 = x566(x974)
val x982 = x981 >= '0'
val x983 = x981 <= '9'
val x984 = x982 && x983
val x1004 = if (x984) {
val x990 = x961
val x991 = x962
val x992 = x963
val x987 = x981 - '0'
val x988 = x987.toInt
val x994 = x990 * 10
val x995 = x994 + x988
x961 = x995
x962 = false
val x985 = x974 + 1
x963 = x985
x967 = x985
()
} else {
x966 = false
()
}
x1004
}
x1006
}
val x1009 = x961
val x1010 = x962
val x1011 = x963
val x1014 = if (x1010) {
true
} else {
x1010
}
val x1716 = if (x1014) {
x569 = x567
x570 = true
x571 = 0
()
} else {
var x1022: Int = 0
var x1023: Boolean = false
val x1015 = if (x1010) {
x939
} else {
x1011
}
var x1024: Int = x1015
var x1026: Int = -1
var x1027: Boolean = true
var x1028: Int = x1015
val x1063 = while ({val x1029 = x1027
val x1030 = x1026
val x1031 = x1028
val x1032 = x1030 != x1031
val x1033 = x1029 && x1032
x1033}) {
val x1035 = x1028
x1026 = x1035
val x1037 = x1035 >= x585
val x1061 = if (x1037) {
x1027 = false
()
} else {
val x1041 = x566(x1035)
val x1043 = x1041 == '
'
val x1059 = if (x1043) {
x1027 = false
()
} else {
val x1048 = x1022
val x1049 = x1023
val x1050 = x1024
val x1052 = x1048 + 1
x1022 = x1052
x1023 = false
val x1046 = x1035 + 1
x1024 = x1046
x1028 = x1046
()
}
x1059
}
x1061
}
val x1064 = x1022
val x1065 = x1023
val x1066 = x1024
val x1070 = x1066 >= x585
val x1714 = if (x1070) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x1077 = x566(x1066)
val x1078 = x1077 == '
'
val x1712 = if (x1078) {
var x1085: Int = 200
var x1086: Int = 0
var x1087: java.lang.String = "close"
var x1088: Boolean = false
var x1089: Boolean = false
var x1091: Boolean = false
val x1079 = x1066 + 1
var x1092: Int = x1079
var x1094: Int = -1
var x1095: Boolean = true
var x1096: Int = x1079
val x1 = null.asInstanceOf[Int]
val x617 = {x579: (Int) => 
var x581: Int = x1
var x582: Boolean = true
var x583: Int = x579
val x586 = x579 >= x585
val x611 = if (x586) {
x581 = x1
x582 = true
x583 = x579
()
} else {
val x591 = x566(x579)
val x592 = x591 >= 'a'
val x593 = x591 <= 'z'
val x594 = x592 && x593
val x595 = x591 >= 'A'
val x596 = x591 <= 'Z'
val x597 = x595 && x596
val x598 = x594 || x597
val x609 = if (x598) {
x581 = x579
x582 = false
val x599 = x579 + 1
x583 = x599
()
} else {
x581 = x1
x582 = true
x583 = x579
()
}
x609
}
val x612 = x581
val x613 = x582
val x614 = x583
val x615 = new ParseResultInt(x612,x613,x614)
x615
}
val x653 = {x573: (Int) => 
var x575: Int = x1
var x576: Boolean = true
var x577: Int = x573
val x618 = x617(x573)
val x619 = x618.empty
val x647 = if (x619) {
val x620 = x573 >= x585
val x639 = if (x620) {
x575 = x1
x576 = true
x577 = x573
()
} else {
val x625 = x566(x573)
val x626 = x625 == '-'
val x637 = if (x626) {
x575 = x573
x576 = false
val x627 = x573 + 1
x577 = x627
()
} else {
x575 = x1
x576 = true
x577 = x573
()
}
x637
}
x639
} else {
val x641 = x618.res
x575 = x641
x576 = x619
val x644 = x618.next
x577 = x644
()
}
val x648 = x575
val x649 = x576
val x650 = x577
val x651 = new ParseResultInt(x648,x649,x650)
x651
}
val x1352 = px1352 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x1353 = x1352.length
val x1378 = px1378 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x1379 = x1378.length
val x1405 = px1405 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x1406 = x1405.length
val x1431 = px1431 // static data: Array(c,l,o,s,e)
val x1432 = x1431.length
val x1477 = px1477 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x1478 = x1477.length
val x1522 = px1522 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x1523 = x1522.length
val x1548 = px1548 // static data: Array(c,h,u,n,k,e,d)
val x1549 = x1548.length
val x1576 = px1576 // static data: Array(u,p,g,r,a,d,e)
val x1577 = x1576.length
val x1654 = while ({val x1097 = x1095
val x1098 = x1094
val x1099 = x1096
val x1100 = x1098 != x1099
val x1101 = x1097 && x1100
x1101}) {
val x1103 = x1096
x1094 = x1103
val x1105 = x1103 >= x585
val x1652 = if (x1105) {
x1095 = false
()
} else {
val x1113 = x566(x1103)
val x1114 = x1113 >= 'a'
val x1115 = x1113 <= 'z'
val x1116 = x1114 && x1115
val x1117 = x1113 >= 'A'
val x1118 = x1113 <= 'Z'
val x1119 = x1117 && x1118
val x1120 = x1116 || x1119
val x1650 = if (x1120) {
var x1124: Int = 0
var x1125: Boolean = false
val x1121 = x1103 + 1
var x1126: Int = x1121
var x1128: Int = -1
var x1129: Boolean = true
var x1130: Int = x1121
val x1157 = while ({val x1131 = x1129
val x1132 = x1128
val x1133 = x1130
val x1134 = x1132 != x1133
val x1135 = x1131 && x1134
x1135}) {
val x1137 = x1130
x1128 = x1137
val x1139 = x653(x1137)
val x1140 = x1139.empty
val x1155 = if (x1140) {
x1129 = false
()
} else {
val x1143 = x1124
val x1144 = x1125
val x1145 = x1126
val x1147 = x1143 + 1
x1124 = x1147
x1125 = false
val x1148 = x1139.next
x1126 = x1148
x1130 = x1148
()
}
x1155
}
val x1158 = x1124
val x1159 = x1125
val x1160 = x1126
var x1170: java.lang.String = ""
var x1171: Boolean = false
var x1172: Int = x1160
var x1174: Int = -1
var x1175: Boolean = true
var x1176: Int = x1160
val x1209 = while ({val x1177 = x1175
val x1178 = x1174
val x1179 = x1176
val x1180 = x1178 != x1179
val x1181 = x1177 && x1180
x1181}) {
val x1183 = x1176
x1174 = x1183
val x1185 = x1183 >= x585
val x1207 = if (x1185) {
x1175 = false
()
} else {
val x1189 = x566(x1183)
val x1190 = x1189 == ' '
val x1205 = if (x1190) {
val x1193 = x1170
val x1194 = x1171
val x1195 = x1172
x1170 = x1193
x1171 = false
val x1191 = x1183 + 1
x1172 = x1191
x1176 = x1191
()
} else {
x1175 = false
()
}
x1205
}
x1207
}
val x1210 = x1170
val x1211 = x1171
val x1212 = x1172
val x1646 = if (x1211) {
x1095 = false
()
} else {
val x1218 = x1212 >= x585
val x1644 = if (x1218) {
x1095 = false
()
} else {
val x1224 = x566(x1212)
val x1225 = x1224 == ':'
val x1642 = if (x1225) {
var x1236: java.lang.String = ""
var x1237: Boolean = false
val x1226 = x1212 + 1
var x1238: Int = x1226
var x1240: Int = -1
var x1241: Boolean = true
var x1242: Int = x1226
val x1275 = while ({val x1243 = x1241
val x1244 = x1240
val x1245 = x1242
val x1246 = x1244 != x1245
val x1247 = x1243 && x1246
x1247}) {
val x1249 = x1242
x1240 = x1249
val x1251 = x1249 >= x585
val x1273 = if (x1251) {
x1241 = false
()
} else {
val x1255 = x566(x1249)
val x1256 = x1255 == ' '
val x1271 = if (x1256) {
val x1259 = x1236
val x1260 = x1237
val x1261 = x1238
x1236 = x1259
x1237 = false
val x1257 = x1249 + 1
x1238 = x1257
x1242 = x1257
()
} else {
x1241 = false
()
}
x1271
}
x1273
}
val x1276 = x1236
val x1277 = x1237
val x1278 = x1238
val x1638 = if (x1277) {
x1095 = false
()
} else {
var x1284: Int = 0
var x1285: Boolean = false
var x1286: Int = x1278
var x1288: Int = -1
var x1289: Boolean = true
var x1290: Int = x1278
val x1325 = while ({val x1291 = x1289
val x1292 = x1288
val x1293 = x1290
val x1294 = x1292 != x1293
val x1295 = x1291 && x1294
x1295}) {
val x1297 = x1290
x1288 = x1297
val x1299 = x1297 >= x585
val x1323 = if (x1299) {
x1289 = false
()
} else {
val x1303 = x566(x1297)
val x1305 = x1303 == '
'
val x1321 = if (x1305) {
x1289 = false
()
} else {
val x1310 = x1284
val x1311 = x1285
val x1312 = x1286
val x1314 = x1310 + 1
x1284 = x1314
x1285 = false
val x1308 = x1297 + 1
x1286 = x1308
x1290 = x1308
()
}
x1321
}
x1323
}
val x1326 = x1284
val x1327 = x1285
val x1328 = x1286
val x1332 = x1328 >= x585
val x1636 = if (x1332) {
x1095 = false
()
} else {
val x1336 = x566(x1328)
val x1337 = x1336 == '
'
val x1634 = if (x1337) {
val x1343 = x1085
val x1344 = x1086
val x1345 = x1087
val x1346 = x1088
val x1347 = x1089
val x1349 = x1091
val x1350 = x1092
val x1166 = x1158 + 1
val x1354 = x1166 == x1353
val x1377 = if (x1354) {
var x1355: Int = 0
var x1356: Boolean = true
val x1374 = while ({val x1357 = x1355
val x1359 = x1356
val x1358 = x1357 < x1166
val x1360 = x1358 && x1359
x1360}) {
val x1362 = x1355
val x1363 = x1362 + x1103
val x1364 = x566(x1363)
val x1365 = x1352(x1362)
val x1367 = x1364 == x1365
val x1370 = if (x1367) {
()
} else {
x1356 = false
()
}
val x1371 = x1362 + 1
x1355 = x1371
()
}
val x1375 = x1356
x1375
} else {
false
}
val x1380 = x1166 == x1379
val x1403 = if (x1380) {
var x1381: Int = 0
var x1382: Boolean = true
val x1400 = while ({val x1383 = x1381
val x1385 = x1382
val x1384 = x1383 < x1166
val x1386 = x1384 && x1385
x1386}) {
val x1388 = x1381
val x1389 = x1388 + x1103
val x1390 = x566(x1389)
val x1391 = x1378(x1388)
val x1393 = x1390 == x1391
val x1396 = if (x1393) {
()
} else {
x1382 = false
()
}
val x1397 = x1388 + 1
x1381 = x1397
()
}
val x1401 = x1382
x1401
} else {
false
}
val x1404 = x1377 || x1403
val x1407 = x1326 == x1406
val x1430 = if (x1407) {
var x1408: Int = 0
var x1409: Boolean = true
val x1427 = while ({val x1410 = x1408
val x1412 = x1409
val x1411 = x1410 < x1326
val x1413 = x1411 && x1412
x1413}) {
val x1415 = x1408
val x1416 = x1415 + x1278
val x1417 = x566(x1416)
val x1418 = x1405(x1415)
val x1420 = x1417 == x1418
val x1423 = if (x1420) {
()
} else {
x1409 = false
()
}
val x1424 = x1415 + 1
x1408 = x1424
()
}
val x1428 = x1409
x1428
} else {
false
}
val x1433 = x1326 == x1432
val x1456 = if (x1433) {
var x1434: Int = 0
var x1435: Boolean = true
val x1453 = while ({val x1436 = x1434
val x1438 = x1435
val x1437 = x1436 < x1326
val x1439 = x1437 && x1438
x1439}) {
val x1441 = x1434
val x1442 = x1441 + x1278
val x1443 = x566(x1442)
val x1444 = x1431(x1441)
val x1446 = x1443 == x1444
val x1449 = if (x1446) {
()
} else {
x1435 = false
()
}
val x1450 = x1441 + 1
x1434 = x1450
()
}
val x1454 = x1435
x1454
} else {
false
}
val x1457 = x1430 || x1456
val x1458 = x1404 && x1457
val x1616 = if (x1458) {
var x1459: java.lang.String = ""
var x1460: Int = 0
val x1473 = while ({val x1461 = x1460
val x1462 = x1461 < x1326
x1462}) {
val x1464 = x1459
val x1465 = x1460
val x1466 = x1278 + x1465
val x1467 = x566(x1466)
val x1468 = x1464+x1467
x1459 = x1468
val x1470 = x1465 + 1
x1460 = x1470
()
}
val x1474 = x1459
val x1475 = new Anon1323431030(x1343,x1344,x1474,x1346,x1347)
x1475
} else {
val x1479 = x1166 == x1478
val x1502 = if (x1479) {
var x1480: Int = 0
var x1481: Boolean = true
val x1499 = while ({val x1482 = x1480
val x1484 = x1481
val x1483 = x1482 < x1166
val x1485 = x1483 && x1484
x1485}) {
val x1487 = x1480
val x1488 = x1487 + x1103
val x1489 = x566(x1488)
val x1490 = x1477(x1487)
val x1492 = x1489 == x1490
val x1495 = if (x1492) {
()
} else {
x1481 = false
()
}
val x1496 = x1487 + 1
x1480 = x1496
()
}
val x1500 = x1481
x1500
} else {
false
}
val x1615 = if (x1502) {
var x1503: java.lang.String = ""
var x1504: Int = 0
val x1517 = while ({val x1505 = x1504
val x1506 = x1505 < x1326
x1506}) {
val x1508 = x1503
val x1509 = x1504
val x1510 = x1278 + x1509
val x1511 = x566(x1510)
val x1512 = x1508+x1511
x1503 = x1512
val x1514 = x1509 + 1
x1504 = x1514
()
}
val x1518 = x1503
val x1519 = x1518.toInt
val x1520 = new Anon1323431030(x1343,x1519,x1345,x1346,x1347)
x1520
} else {
val x1524 = x1166 == x1523
val x1547 = if (x1524) {
var x1525: Int = 0
var x1526: Boolean = true
val x1544 = while ({val x1527 = x1525
val x1529 = x1526
val x1528 = x1527 < x1166
val x1530 = x1528 && x1529
x1530}) {
val x1532 = x1525
val x1533 = x1532 + x1103
val x1534 = x566(x1533)
val x1535 = x1522(x1532)
val x1537 = x1534 == x1535
val x1540 = if (x1537) {
()
} else {
x1526 = false
()
}
val x1541 = x1532 + 1
x1525 = x1541
()
}
val x1545 = x1526
x1545
} else {
false
}
val x1550 = x1326 == x1549
val x1573 = if (x1550) {
var x1551: Int = 0
var x1552: Boolean = true
val x1570 = while ({val x1553 = x1551
val x1555 = x1552
val x1554 = x1553 < x1326
val x1556 = x1554 && x1555
x1556}) {
val x1558 = x1551
val x1559 = x1558 + x1278
val x1560 = x566(x1559)
val x1561 = x1548(x1558)
val x1563 = x1560 == x1561
val x1566 = if (x1563) {
()
} else {
x1552 = false
()
}
val x1567 = x1558 + 1
x1551 = x1567
()
}
val x1571 = x1552
x1571
} else {
false
}
val x1574 = x1547 && x1573
val x1609 = if (x1574) {
x1343
} else {
val x1578 = x1166 == x1577
val x1601 = if (x1578) {
var x1579: Int = 0
var x1580: Boolean = true
val x1598 = while ({val x1581 = x1579
val x1583 = x1580
val x1582 = x1581 < x1166
val x1584 = x1582 && x1583
x1584}) {
val x1586 = x1579
val x1587 = x1586 + x1103
val x1588 = x566(x1587)
val x1589 = x1576(x1586)
val x1591 = x1588 == x1589
val x1594 = if (x1591) {
()
} else {
x1580 = false
()
}
val x1595 = x1586 + 1
x1579 = x1595
()
}
val x1599 = x1580
x1599
} else {
false
}
val x1603 = if (x1601) {
x1343
} else {
x1343
}
x1603
}
val x1610 = if (x1574) {
x1344
} else {
val x1578 = x1166 == x1577
val x1601 = if (x1578) {
var x1579: Int = 0
var x1580: Boolean = true
val x1598 = while ({val x1581 = x1579
val x1583 = x1580
val x1582 = x1581 < x1166
val x1584 = x1582 && x1583
x1584}) {
val x1586 = x1579
val x1587 = x1586 + x1103
val x1588 = x566(x1587)
val x1589 = x1576(x1586)
val x1591 = x1588 == x1589
val x1594 = if (x1591) {
()
} else {
x1580 = false
()
}
val x1595 = x1586 + 1
x1579 = x1595
()
}
val x1599 = x1580
x1599
} else {
false
}
val x1604 = if (x1601) {
x1344
} else {
x1344
}
x1604
}
val x1611 = if (x1574) {
x1345
} else {
val x1578 = x1166 == x1577
val x1601 = if (x1578) {
var x1579: Int = 0
var x1580: Boolean = true
val x1598 = while ({val x1581 = x1579
val x1583 = x1580
val x1582 = x1581 < x1166
val x1584 = x1582 && x1583
x1584}) {
val x1586 = x1579
val x1587 = x1586 + x1103
val x1588 = x566(x1587)
val x1589 = x1576(x1586)
val x1591 = x1588 == x1589
val x1594 = if (x1591) {
()
} else {
x1580 = false
()
}
val x1595 = x1586 + 1
x1579 = x1595
()
}
val x1599 = x1580
x1599
} else {
false
}
val x1605 = if (x1601) {
x1345
} else {
x1345
}
x1605
}
val x1612 = if (x1574) {
true
} else {
val x1578 = x1166 == x1577
val x1601 = if (x1578) {
var x1579: Int = 0
var x1580: Boolean = true
val x1598 = while ({val x1581 = x1579
val x1583 = x1580
val x1582 = x1581 < x1166
val x1584 = x1582 && x1583
x1584}) {
val x1586 = x1579
val x1587 = x1586 + x1103
val x1588 = x566(x1587)
val x1589 = x1576(x1586)
val x1591 = x1588 == x1589
val x1594 = if (x1591) {
()
} else {
x1580 = false
()
}
val x1595 = x1586 + 1
x1579 = x1595
()
}
val x1599 = x1580
x1599
} else {
false
}
val x1606 = if (x1601) {
x1346
} else {
x1346
}
x1606
}
val x1613 = if (x1574) {
x1347
} else {
val x1578 = x1166 == x1577
val x1601 = if (x1578) {
var x1579: Int = 0
var x1580: Boolean = true
val x1598 = while ({val x1581 = x1579
val x1583 = x1580
val x1582 = x1581 < x1166
val x1584 = x1582 && x1583
x1584}) {
val x1586 = x1579
val x1587 = x1586 + x1103
val x1588 = x566(x1587)
val x1589 = x1576(x1586)
val x1591 = x1588 == x1589
val x1594 = if (x1591) {
()
} else {
x1580 = false
()
}
val x1595 = x1586 + 1
x1579 = x1595
()
}
val x1599 = x1580
x1599
} else {
false
}
val x1607 = if (x1601) {
true
} else {
x1347
}
x1607
}
val x1614 = new Anon1323431030(x1609,x1610,x1611,x1612,x1613)
x1614
}
x1615
}
val x1618 = x1616.status
x1085 = x1618
val x1620 = x1616.contentLength
x1086 = x1620
val x1622 = x1616.connection
x1087 = x1622
val x1624 = x1616.chunked
x1088 = x1624
val x1626 = x1616.upgrade
x1089 = x1626
x1091 = false
val x1338 = x1328 + 1
x1092 = x1338
x1096 = x1338
()
} else {
x1095 = false
()
}
x1634
}
x1636
}
x1638
} else {
x1095 = false
()
}
x1642
}
x1644
}
x1646
} else {
x1095 = false
()
}
x1650
}
x1652
}
val x1655 = x1085
val x1656 = x1086
val x1657 = x1087
val x1658 = x1088
val x1659 = x1089
val x1661 = x1091
val x1662 = x1092
val x1667 = if (x1661) {
true
} else {
false
}
val x1706 = if (x1667) {
x569 = x567
x570 = true
val x1668 = if (x1661) {
0
} else {
x1662
}
x571 = x1668
()
} else {
val x1668 = if (x1661) {
0
} else {
x1662
}
val x1675 = x1668 >= x585
val x1704 = if (x1675) {
x569 = x567
x570 = true
x571 = 0
()
} else {
val x1681 = x566(x1668)
val x1682 = x1681 == '
'
val x1702 = if (x1682) {
val x1666 = if (x1661) {
val x656 = null.asInstanceOf[Tuple2IntAnon1323431030]
x656
} else {
val x1013 = if (x1010) {
x1
} else {
x1009
}
val x1660 = new Anon1323431030(x1655,x1656,x1657,x1658,x1659)
val x1664 = new Tuple2IntAnon1323431030(x1013,x1660)
x1664
}
val x1686 = x1666._1
val x1687 = x1666._2
val x1688 = x1687.contentLength
val x1689 = x1687.connection
val x1690 = x1687.chunked
val x1691 = x1687.upgrade
val x1692 = new Anon1323431030(x1686,x1688,x1689,x1690,x1691)
x569 = x1692
x570 = false
val x1683 = x1668 + 1
x571 = x1683
()
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1702
}
x1704
}
x1706
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1712
}
x1714
}
x1716
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1722
}
x1724
}
x1726
}
x1728
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1734
}
x1736
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1742
}
x1744
}
x1746
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1752
}
x1754
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1760
}
x1762
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1768
}
x1770
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1776
}
x1778
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1784
}
x1786
} else {
x569 = x567
x570 = true
x571 = 0
()
}
x1792
}
val x1795 = x569
val x1796 = x570
val x1797 = x571
val x1798 = new ParseResultAnon1323431030(x1795,x1796,x1797)
val x1799 = println(x1798)
x1799
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=2000
nVars=3000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(418,0,close,false,false),false,258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(Unit)) {
def apply(x3028:Array[Char]): Unit = {
val x13 = null.asInstanceOf[java.lang.String]
var x3030: java.lang.String = x13
var x3031: Boolean = true
var x3032: Int = -1
var x3035: java.lang.String = ""
var x3036: Boolean = false
var x3037: Int = 0
var x3039: Int = -1
var x3040: Boolean = true
var x3041: Int = 0
var x3042: Int = 0
val x3054 = x3028.length
val x3078 = while ({val x3043 = x3042
val x3045 = x3039
val x3046 = x3041
val x3049 = x3040
val x3044 = x3043 < 14
val x3047 = x3045 != x3046
val x3048 = x3044 && x3047
val x3050 = x3048 && x3049
x3050}) {
val x3052 = x3041
x3039 = x3052
val x3055 = x3052 >= x3054
val x3076 = if (x3055) {
x3040 = false
()
} else {
val x3062 = x3035
val x3063 = x3036
val x3064 = x3037
val x3059 = x3028(x3052)
val x3066 = x3062+x3059
x3035 = x3066
x3036 = false
val x3060 = x3052 + 1
x3037 = x3060
x3041 = x3060
val x3072 = x3042
val x3073 = x3072 + 1
x3042 = x3073
()
}
x3076
}
val x3079 = x3035
val x3080 = x3036
val x3081 = x3037
x3030 = x3079
x3031 = x3080
x3032 = x3081
val x3086 = x3030
val x3087 = x3031
val x3088 = x3032
val x3089 = new ParseResultString(x3086,x3087,x3088)
val x3090 = println(x3089)
x3090
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Make it funky!,false,14)
