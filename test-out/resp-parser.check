/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Int = 0
var x3: Boolean = true
var x4: Int = -1
val x6 = x0.length
val x7 = 0 >= x6
val x551 = if (x7) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x18 = x0(0)
val x19 = x18 == 'H'
val x549 = if (x19) {
val x20 = 0 + 1
val x22 = x20 >= x6
val x543 = if (x22) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x30 = x0(x20)
val x31 = x30 == 'T'
val x541 = if (x31) {
val x32 = x20 + 1
val x34 = x32 >= x6
val x535 = if (x34) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x42 = x0(x32)
val x43 = x42 == 'T'
val x533 = if (x43) {
val x44 = x32 + 1
val x46 = x44 >= x6
val x527 = if (x46) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x54 = x0(x44)
val x55 = x54 == 'P'
val x525 = if (x55) {
val x56 = x44 + 1
val x58 = x56 >= x6
val x519 = if (x58) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x66 = x0(x56)
val x67 = x66 == '/'
val x517 = if (x67) {
val x68 = x56 + 1
val x91 = x68 >= x6
val x511 = if (x91) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x99 = x0(x68)
val x100 = x99 >= '0'
val x101 = x99 <= '9'
val x102 = x100 && x101
val x509 = if (x102) {
val x105 = x99 - '0'
val x106 = x105.toInt
var x108: Int = x106
var x109: Boolean = false
val x103 = x68 + 1
var x110: Int = x103
var x112: Int = -1
var x113: Boolean = true
var x114: Int = x103
val x155 = while ({val x115 = x113
val x116 = x112
val x117 = x114
val x118 = x116 != x117
val x119 = x115 && x118
x119}) {
val x121 = x114
x112 = x121
val x123 = x121 >= x6
val x153 = if (x123) {
x113 = false
()
} else {
val x128 = x0(x121)
val x129 = x128 >= '0'
val x130 = x128 <= '9'
val x131 = x129 && x130
val x151 = if (x131) {
val x137 = x108
val x138 = x109
val x139 = x110
val x134 = x128 - '0'
val x135 = x134.toInt
val x141 = x137 * 10
val x142 = x141 + x135
x108 = x142
x109 = false
val x132 = x121 + 1
x110 = x132
x114 = x132
()
} else {
x113 = false
()
}
x151
}
x153
}
val x156 = x108
val x157 = x109
val x158 = x110
val x161 = if (x157) {
true
} else {
x157
}
val x503 = if (x161) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x162 = if (x157) {
x68
} else {
x158
}
val x168 = x162 >= x6
val x501 = if (x168) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x175 = x0(x162)
val x176 = x175 == '.'
val x499 = if (x176) {
val x177 = x162 + 1
val x179 = x177 >= x6
val x493 = if (x179) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x186 = x0(x177)
val x187 = x186 >= '0'
val x188 = x186 <= '9'
val x189 = x187 && x188
val x491 = if (x189) {
val x192 = x186 - '0'
val x193 = x192.toInt
var x195: Int = x193
var x196: Boolean = false
val x190 = x177 + 1
var x197: Int = x190
var x199: Int = -1
var x200: Boolean = true
var x201: Int = x190
val x242 = while ({val x202 = x200
val x203 = x199
val x204 = x201
val x205 = x203 != x204
val x206 = x202 && x205
x206}) {
val x208 = x201
x199 = x208
val x210 = x208 >= x6
val x240 = if (x210) {
x200 = false
()
} else {
val x215 = x0(x208)
val x216 = x215 >= '0'
val x217 = x215 <= '9'
val x218 = x216 && x217
val x238 = if (x218) {
val x224 = x195
val x225 = x196
val x226 = x197
val x221 = x215 - '0'
val x222 = x221.toInt
val x228 = x224 * 10
val x229 = x228 + x222
x195 = x229
x196 = false
val x219 = x208 + 1
x197 = x219
x201 = x219
()
} else {
x200 = false
()
}
x238
}
x240
}
val x243 = x195
val x244 = x196
val x245 = x197
val x248 = if (x244) {
true
} else {
x244
}
val x254 = if (x248) {
true
} else {
false
}
val x260 = if (x254) {
true
} else {
false
}
val x485 = if (x260) {
x2 = 0
x3 = true
x4 = 0
()
} else {
var x268: java.lang.String = ""
var x269: Boolean = false
val x261 = if (x254) {
0
} else {
val x255 = if (x248) {
x68
} else {
val x249 = if (x244) {
x177
} else {
x245
}
x249
}
x255
}
var x270: Int = x261
var x272: Int = -1
var x273: Boolean = true
var x274: Int = x261
val x307 = while ({val x275 = x273
val x276 = x272
val x277 = x274
val x278 = x276 != x277
val x279 = x275 && x278
x279}) {
val x281 = x274
x272 = x281
val x283 = x281 >= x6
val x305 = if (x283) {
x273 = false
()
} else {
val x287 = x0(x281)
val x288 = x287 == ' '
val x303 = if (x288) {
val x291 = x268
val x292 = x269
val x293 = x270
x268 = x291
x269 = false
val x289 = x281 + 1
x270 = x289
x274 = x289
()
} else {
x273 = false
()
}
x303
}
x305
}
val x308 = x268
val x309 = x269
val x310 = x270
val x315 = if (x309) {
true
} else {
false
}
val x483 = if (x315) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x316 = if (x309) {
0
} else {
x310
}
val x322 = x316 >= x6
val x481 = if (x322) {
x2 = 0
x3 = true
x4 = x316
()
} else {
val x329 = x0(x316)
val x330 = x329 >= '0'
val x331 = x329 <= '9'
val x332 = x330 && x331
val x479 = if (x332) {
val x335 = x329 - '0'
val x336 = x335.toInt
var x338: Int = x336
var x339: Boolean = false
val x333 = x316 + 1
var x340: Int = x333
var x342: Int = -1
var x343: Boolean = true
var x344: Int = x333
val x385 = while ({val x345 = x343
val x346 = x342
val x347 = x344
val x348 = x346 != x347
val x349 = x345 && x348
x349}) {
val x351 = x344
x342 = x351
val x353 = x351 >= x6
val x383 = if (x353) {
x343 = false
()
} else {
val x358 = x0(x351)
val x359 = x358 >= '0'
val x360 = x358 <= '9'
val x361 = x359 && x360
val x381 = if (x361) {
val x367 = x338
val x368 = x339
val x369 = x340
val x364 = x358 - '0'
val x365 = x364.toInt
val x371 = x367 * 10
val x372 = x371 + x365
x338 = x372
x339 = false
val x362 = x351 + 1
x340 = x362
x344 = x362
()
} else {
x343 = false
()
}
x381
}
x383
}
val x386 = x338
val x387 = x339
val x388 = x340
val x391 = if (x387) {
true
} else {
x387
}
val x473 = if (x391) {
val x390 = if (x387) {
0
} else {
x386
}
x2 = x390
x3 = x391
val x392 = if (x387) {
x316
} else {
x388
}
x4 = x392
()
} else {
var x399: Int = 0
var x400: Boolean = false
val x392 = if (x387) {
x316
} else {
x388
}
var x401: Int = x392
var x403: Int = -1
var x404: Boolean = true
var x405: Int = x392
val x440 = while ({val x406 = x404
val x407 = x403
val x408 = x405
val x409 = x407 != x408
val x410 = x406 && x409
x410}) {
val x412 = x405
x403 = x412
val x414 = x412 >= x6
val x438 = if (x414) {
x404 = false
()
} else {
val x418 = x0(x412)
val x420 = x418 == '\n'
val x436 = if (x420) {
x404 = false
()
} else {
val x425 = x399
val x426 = x400
val x427 = x401
val x429 = x425 + 1
x399 = x429
x400 = false
val x423 = x412 + 1
x401 = x423
x405 = x423
()
}
x436
}
x438
}
val x441 = x399
val x442 = x400
val x443 = x401
val x447 = x443 >= x6
val x471 = if (x447) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x454 = x0(x443)
val x455 = x454 == '\n'
val x469 = if (x455) {
val x390 = if (x387) {
0
} else {
x386
}
x2 = x390
x3 = false
val x456 = x443 + 1
x4 = x456
()
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x469
}
x471
}
x473
} else {
x2 = 0
x3 = true
x4 = x316
()
}
x479
}
x481
}
x483
}
x485
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x491
}
x493
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x499
}
x501
}
x503
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x509
}
x511
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x517
}
x519
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x525
}
x527
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x533
}
x535
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x541
}
x543
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x549
}
val x552 = x2
val x553 = x3
val x554 = x4
val x555 = new ParseResultInt(x552,x553,x554)
val x556 = println(x555)
x556
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultInt(200,false,16)
ParseResultInt(418,false,26)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerNameParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Anon1680061013 = null
var x3: Boolean = true
var x4: Int = -1
val x18 = x0.length
val x87 = 0 >= x18
val x95 = x0(0)
val x96 = x95 >= 'a'
val x97 = x95 <= 'z'
val x98 = x96 && x97
val x99 = x95 >= 'A'
val x100 = x95 <= 'Z'
val x101 = x99 && x100
val x102 = x98 || x101
val x103 = 0 + 1
val x50 = {x12: (Int) => 
var x14: Int = 0
var x15: Boolean = true
var x16: Int = x12
val x19 = x12 >= x18
val x44 = if (x19) {
x14 = 0
x15 = true
x16 = x12
()
} else {
val x24 = x0(x12)
val x25 = x24 >= 'a'
val x26 = x24 <= 'z'
val x27 = x25 && x26
val x28 = x24 >= 'A'
val x29 = x24 <= 'Z'
val x30 = x28 && x29
val x31 = x27 || x30
val x42 = if (x31) {
x14 = x12
x15 = false
val x32 = x12 + 1
x16 = x32
()
} else {
x14 = 0
x15 = true
x16 = x12
()
}
x42
}
val x45 = x14
val x46 = x15
val x47 = x16
val x48 = new ParseResultInt(x45,x46,x47)
x48: ParseResultInt
}
val x86 = {x6: (Int) => 
var x8: Int = 0
var x9: Boolean = true
var x10: Int = x6
val x51 = x50(x6)
val x52 = x51.empty
val x80 = if (x52) {
val x53 = x6 >= x18
val x72 = if (x53) {
x8 = 0
x9 = true
x10 = x6
()
} else {
val x58 = x0(x6)
val x59 = x58 == '-'
val x70 = if (x59) {
x8 = x6
x9 = false
val x60 = x6 + 1
x10 = x60
()
} else {
x8 = 0
x9 = true
x10 = x6
()
}
x70
}
x72
} else {
val x74 = x51.res
x8 = x74
x9 = x52
val x77 = x51.next
x10 = x77
()
}
val x81 = x8
val x82 = x9
val x83 = x10
val x84 = new ParseResultInt(x81,x82,x83)
x84: ParseResultInt
}
val x160 = if (x87) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x158 = if (x102) {
var x105: Int = 0
var x106: Boolean = false
var x107: Int = x103
var x109: Int = -1
var x110: Boolean = true
var x111: Int = x103
val x138 = while ({val x112 = x110
val x113 = x109
val x114 = x111
val x115 = x113 != x114
val x116 = x112 && x115
x116}) {
val x118 = x111
x109 = x118
val x120 = x86(x118)
val x121 = x120.empty
val x136 = if (x121) {
x110 = false
()
} else {
val x124 = x105
val x125 = x106
val x126 = x107
val x128 = x124 + 1
x105 = x128
x106 = false
val x129 = x120.next
x107 = x129
x111 = x129
()
}
x136
}
val x139 = x105
val x140 = x106
val x141 = x107
val x147 = x139 + 1
val x148 = new Anon1680061013(x0,0,x147)
x2 = x148
x3 = false
x4 = x141
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x158
}
val x161 = x2
val x162 = x3
val x163 = x4
var x165: java.lang.String = ""
var x166: Int = 0
val x168 = x161.length
val x172 = x161.input
val x173 = x161.start
val x182 = while ({val x167 = x166
val x169 = x167 < x168
x169}) {
val x171 = x165
val x174 = x166
val x175 = x173 + x174
val x176 = x172(x175)
val x177 = x171+x176
x165 = x177
val x179 = x174 + 1
x166 = x179
()
}
val x183 = x165
val x184 = println(x183)
x184
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
Date
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Tuple2Anon1680061013Anon1680061013 = null
var x3: Boolean = true
var x4: Int = -1
val x18 = x0.length
val x87 = 0 >= x18
val x362 = if (x87) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x96 = x0(0)
val x97 = x96 >= 'a'
val x98 = x96 <= 'z'
val x99 = x97 && x98
val x100 = x96 >= 'A'
val x101 = x96 <= 'Z'
val x102 = x100 && x101
val x103 = x99 || x102
val x360 = if (x103) {
var x106: Int = 0
var x107: Boolean = false
val x104 = 0 + 1
var x108: Int = x104
var x110: Int = -1
var x111: Boolean = true
var x112: Int = x104
val x50 = {x12: (Int) => 
var x14: Int = 0
var x15: Boolean = true
var x16: Int = x12
val x19 = x12 >= x18
val x44 = if (x19) {
x14 = 0
x15 = true
x16 = x12
()
} else {
val x24 = x0(x12)
val x25 = x24 >= 'a'
val x26 = x24 <= 'z'
val x27 = x25 && x26
val x28 = x24 >= 'A'
val x29 = x24 <= 'Z'
val x30 = x28 && x29
val x31 = x27 || x30
val x42 = if (x31) {
x14 = x12
x15 = false
val x32 = x12 + 1
x16 = x32
()
} else {
x14 = 0
x15 = true
x16 = x12
()
}
x42
}
val x45 = x14
val x46 = x15
val x47 = x16
val x48 = new ParseResultInt(x45,x46,x47)
x48: ParseResultInt
}
val x86 = {x6: (Int) => 
var x8: Int = 0
var x9: Boolean = true
var x10: Int = x6
val x51 = x50(x6)
val x52 = x51.empty
val x80 = if (x52) {
val x53 = x6 >= x18
val x72 = if (x53) {
x8 = 0
x9 = true
x10 = x6
()
} else {
val x58 = x0(x6)
val x59 = x58 == '-'
val x70 = if (x59) {
x8 = x6
x9 = false
val x60 = x6 + 1
x10 = x60
()
} else {
x8 = 0
x9 = true
x10 = x6
()
}
x70
}
x72
} else {
val x74 = x51.res
x8 = x74
x9 = x52
val x77 = x51.next
x10 = x77
()
}
val x81 = x8
val x82 = x9
val x83 = x10
val x84 = new ParseResultInt(x81,x82,x83)
x84: ParseResultInt
}
val x139 = while ({val x113 = x111
val x114 = x110
val x115 = x112
val x116 = x114 != x115
val x117 = x113 && x116
x117}) {
val x119 = x112
x110 = x119
val x121 = x86(x119)
val x122 = x121.empty
val x137 = if (x122) {
x111 = false
()
} else {
val x125 = x106
val x126 = x107
val x127 = x108
val x129 = x125 + 1
x106 = x129
x107 = false
val x130 = x121.next
x108 = x130
x112 = x130
()
}
x137
}
val x140 = x106
val x141 = x107
val x142 = x108
var x152: java.lang.String = ""
var x153: Boolean = false
var x154: Int = x142
var x156: Int = -1
var x157: Boolean = true
var x158: Int = x142
val x191 = while ({val x159 = x157
val x160 = x156
val x161 = x158
val x162 = x160 != x161
val x163 = x159 && x162
x163}) {
val x165 = x158
x156 = x165
val x167 = x165 >= x18
val x189 = if (x167) {
x157 = false
()
} else {
val x171 = x0(x165)
val x172 = x171 == ' '
val x187 = if (x172) {
val x175 = x152
val x176 = x153
val x177 = x154
x152 = x175
x153 = false
val x173 = x165 + 1
x154 = x173
x158 = x173
()
} else {
x157 = false
()
}
x187
}
x189
}
val x192 = x152
val x193 = x153
val x194 = x154
val x354 = if (x193) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x201 = x194 >= x18
val x352 = if (x201) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x209 = x0(x194)
val x210 = x209 == ':'
val x350 = if (x210) {
var x221: java.lang.String = ""
var x222: Boolean = false
val x211 = x194 + 1
var x223: Int = x211
var x225: Int = -1
var x226: Boolean = true
var x227: Int = x211
val x260 = while ({val x228 = x226
val x229 = x225
val x230 = x227
val x231 = x229 != x230
val x232 = x228 && x231
x232}) {
val x234 = x227
x225 = x234
val x236 = x234 >= x18
val x258 = if (x236) {
x226 = false
()
} else {
val x240 = x0(x234)
val x241 = x240 == ' '
val x256 = if (x241) {
val x244 = x221
val x245 = x222
val x246 = x223
x221 = x244
x222 = false
val x242 = x234 + 1
x223 = x242
x227 = x242
()
} else {
x226 = false
()
}
x256
}
x258
}
val x261 = x221
val x262 = x222
val x263 = x223
val x344 = if (x262) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x271: Int = 0
var x272: Boolean = false
var x273: Int = x263
var x275: Int = -1
var x276: Boolean = true
var x277: Int = x263
val x312 = while ({val x278 = x276
val x279 = x275
val x280 = x277
val x281 = x279 != x280
val x282 = x278 && x281
x282}) {
val x284 = x277
x275 = x284
val x286 = x284 >= x18
val x310 = if (x286) {
x276 = false
()
} else {
val x290 = x0(x284)
val x292 = x290 == '\n'
val x308 = if (x292) {
x276 = false
()
} else {
val x297 = x271
val x298 = x272
val x299 = x273
val x301 = x297 + 1
x271 = x301
x272 = false
val x295 = x284 + 1
x273 = x295
x277 = x295
()
}
x308
}
x310
}
val x313 = x271
val x314 = x272
val x315 = x273
val x319 = x315 >= x18
val x342 = if (x319) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x325 = x0(x315)
val x326 = x325 == '\n'
val x340 = if (x326) {
val x148 = x140 + 1
val x149 = new Anon1680061013(x0,0,x148)
val x317 = new Anon1680061013(x0,x263,x313)
val x330 = new Tuple2Anon1680061013Anon1680061013(x149,x317)
x2 = x330
x3 = false
val x327 = x315 + 1
x4 = x327
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x340
}
x342
}
x344
} else {
x2 = null
x3 = true
x4 = 0
()
}
x350
}
x352
}
x354
} else {
x2 = null
x3 = true
x4 = 0
()
}
x360
}
val x363 = x2
val x364 = x3
val x365 = x4
val x415 = if (x364) {
val x367 = println("No parse result")
x367
} else {
var x371: java.lang.String = ""
var x372: Int = 0
val x369 = x363._1
val x374 = x369.length
val x378 = x369.input
val x379 = x369.start
val x388 = while ({val x373 = x372
val x375 = x373 < x374
x375}) {
val x377 = x371
val x380 = x372
val x381 = x379 + x380
val x382 = x378(x381)
val x383 = x377+x382
x371 = x383
val x385 = x380 + 1
x372 = x385
()
}
val x389 = x371
var x392: java.lang.String = ""
var x393: Int = 0
val x370 = x363._2
val x395 = x370.length
val x399 = x370.input
val x400 = x370.start
val x409 = while ({val x394 = x393
val x396 = x394 < x395
x396}) {
val x398 = x392
val x401 = x393
val x402 = x400 + x401
val x403 = x399(x402)
val x404 = x398+x403
x392 = x404
val x406 = x401 + 1
x393 = x406
()
}
val x410 = x392
val x390 = "("+x389
val x391 = x390+":"
val x411 = x391+x410
val x412 = x411+")"
val x413 = println(x412)
x413
}
x415
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(Date:Mon, 23 May 2005 22:38:34 GMT)
(Server:Apache/1.3.3.7 (Unix) (Red-Hat/Linux))
(Last-Modified:Wed, 08 Jan 2003 23:11:55 GMT)
(Etag:\"3f80f-1b6-3e1cb03b\")
(Content-Type:text/html; charset=UTF-8)
(Content-Length:131)
No parse result
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headersParse(px354:Array[Char],px383:Array[Char],px413:Array[Char],px442:Array[Char],px491:Array[Char],px539:Array[Char],px568:Array[Char],px599:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Anon1323431030 = null
var x3: Boolean = true
var x4: Int = -1
var x8: Int = 200
var x9: Int = 0
var x10: java.lang.String = "close"
var x11: Boolean = false
var x12: Boolean = false
var x14: Boolean = false
var x15: Int = 0
var x17: Int = -1
var x18: Boolean = true
var x19: Int = 0
val x40 = x0.length
val x72 = {x34: (Int) => 
var x36: Int = 0
var x37: Boolean = true
var x38: Int = x34
val x41 = x34 >= x40
val x66 = if (x41) {
x36 = 0
x37 = true
x38 = x34
()
} else {
val x46 = x0(x34)
val x47 = x46 >= 'a'
val x48 = x46 <= 'z'
val x49 = x47 && x48
val x50 = x46 >= 'A'
val x51 = x46 <= 'Z'
val x52 = x50 && x51
val x53 = x49 || x52
val x64 = if (x53) {
x36 = x34
x37 = false
val x54 = x34 + 1
x38 = x54
()
} else {
x36 = 0
x37 = true
x38 = x34
()
}
x64
}
val x67 = x36
val x68 = x37
val x69 = x38
val x70 = new ParseResultInt(x67,x68,x69)
x70: ParseResultInt
}
val x108 = {x28: (Int) => 
var x30: Int = 0
var x31: Boolean = true
var x32: Int = x28
val x73 = x72(x28)
val x74 = x73.empty
val x102 = if (x74) {
val x75 = x28 >= x40
val x94 = if (x75) {
x30 = 0
x31 = true
x32 = x28
()
} else {
val x80 = x0(x28)
val x81 = x80 == '-'
val x92 = if (x81) {
x30 = x28
x31 = false
val x82 = x28 + 1
x32 = x82
()
} else {
x30 = 0
x31 = true
x32 = x28
()
}
x92
}
x94
} else {
val x96 = x73.res
x30 = x96
x31 = x74
val x99 = x73.next
x32 = x99
()
}
val x103 = x30
val x104 = x31
val x105 = x32
val x106 = new ParseResultInt(x103,x104,x105)
x106: ParseResultInt
}
val x354 = px354 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x355 = x354.length
val x383 = px383 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x384 = x383.length
val x413 = px413 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x414 = x413.length
val x442 = px442 // static data: Array(c,l,o,s,e)
val x443 = x442.length
val x491 = px491 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x492 = x491.length
val x539 = px539 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x540 = x539.length
val x568 = px568 // static data: Array(c,h,u,n,k,e,d)
val x569 = x568.length
val x599 = px599 // static data: Array(u,p,g,r,a,d,e)
val x600 = x599.length
val x680 = while ({val x20 = x18
val x21 = x17
val x22 = x19
val x23 = x21 != x22
val x24 = x20 && x23
x24}) {
val x26 = x19
x17 = x26
val x109 = x26 >= x40
val x678 = if (x109) {
x18 = false
()
} else {
val x116 = x0(x26)
val x117 = x116 >= 'a'
val x118 = x116 <= 'z'
val x119 = x117 && x118
val x120 = x116 >= 'A'
val x121 = x116 <= 'Z'
val x122 = x120 && x121
val x123 = x119 || x122
val x676 = if (x123) {
var x127: Int = 0
var x128: Boolean = false
val x124 = x26 + 1
var x129: Int = x124
var x131: Int = -1
var x132: Boolean = true
var x133: Int = x124
val x160 = while ({val x134 = x132
val x135 = x131
val x136 = x133
val x137 = x135 != x136
val x138 = x134 && x137
x138}) {
val x140 = x133
x131 = x140
val x142 = x108(x140)
val x143 = x142.empty
val x158 = if (x143) {
x132 = false
()
} else {
val x146 = x127
val x147 = x128
val x148 = x129
val x150 = x146 + 1
x127 = x150
x128 = false
val x151 = x142.next
x129 = x151
x133 = x151
()
}
x158
}
val x161 = x127
val x162 = x128
val x163 = x129
var x173: java.lang.String = ""
var x174: Boolean = false
var x175: Int = x163
var x177: Int = -1
var x178: Boolean = true
var x179: Int = x163
val x212 = while ({val x180 = x178
val x181 = x177
val x182 = x179
val x183 = x181 != x182
val x184 = x180 && x183
x184}) {
val x186 = x179
x177 = x186
val x188 = x186 >= x40
val x210 = if (x188) {
x178 = false
()
} else {
val x192 = x0(x186)
val x193 = x192 == ' '
val x208 = if (x193) {
val x196 = x173
val x197 = x174
val x198 = x175
x173 = x196
x174 = false
val x194 = x186 + 1
x175 = x194
x179 = x194
()
} else {
x178 = false
()
}
x208
}
x210
}
val x213 = x173
val x214 = x174
val x215 = x175
val x672 = if (x214) {
x18 = false
()
} else {
val x220 = x215 >= x40
val x670 = if (x220) {
x18 = false
()
} else {
val x226 = x0(x215)
val x227 = x226 == ':'
val x668 = if (x227) {
var x238: java.lang.String = ""
var x239: Boolean = false
val x228 = x215 + 1
var x240: Int = x228
var x242: Int = -1
var x243: Boolean = true
var x244: Int = x228
val x277 = while ({val x245 = x243
val x246 = x242
val x247 = x244
val x248 = x246 != x247
val x249 = x245 && x248
x249}) {
val x251 = x244
x242 = x251
val x253 = x251 >= x40
val x275 = if (x253) {
x243 = false
()
} else {
val x257 = x0(x251)
val x258 = x257 == ' '
val x273 = if (x258) {
val x261 = x238
val x262 = x239
val x263 = x240
x238 = x261
x239 = false
val x259 = x251 + 1
x240 = x259
x244 = x259
()
} else {
x243 = false
()
}
x273
}
x275
}
val x278 = x238
val x279 = x239
val x280 = x240
val x664 = if (x279) {
x18 = false
()
} else {
var x286: Int = 0
var x287: Boolean = false
var x288: Int = x280
var x290: Int = -1
var x291: Boolean = true
var x292: Int = x280
val x327 = while ({val x293 = x291
val x294 = x290
val x295 = x292
val x296 = x294 != x295
val x297 = x293 && x296
x297}) {
val x299 = x292
x290 = x299
val x301 = x299 >= x40
val x325 = if (x301) {
x291 = false
()
} else {
val x305 = x0(x299)
val x307 = x305 == '\n'
val x323 = if (x307) {
x291 = false
()
} else {
val x312 = x286
val x313 = x287
val x314 = x288
val x316 = x312 + 1
x286 = x316
x287 = false
val x310 = x299 + 1
x288 = x310
x292 = x310
()
}
x323
}
x325
}
val x328 = x286
val x329 = x287
val x330 = x288
val x334 = x330 >= x40
val x662 = if (x334) {
x18 = false
()
} else {
val x338 = x0(x330)
val x339 = x338 == '\n'
val x660 = if (x339) {
val x345 = x8
val x346 = x9
val x347 = x10
val x348 = x11
val x349 = x12
val x351 = x14
val x352 = x15
val x169 = x161 + 1
val x356 = x169 == x355
val x382 = if (x356) {
var x357: Int = 0
var x358: Boolean = true
val x379 = while ({val x359 = x357
val x361 = x358
val x360 = x359 < x169
val x362 = x360 && x361
x362}) {
val x364 = x357
val x365 = x364 + x26
val x366 = x0(x365)
val x367 = x366.toInt
val x368 = x367 | 32
val x369 = x368.toChar
val x370 = x354(x364)
val x372 = x369 == x370
val x375 = if (x372) {
()
} else {
x358 = false
()
}
val x376 = x364 + 1
x357 = x376
()
}
val x380 = x358
x380
} else {
false
}
val x385 = x169 == x384
val x411 = if (x385) {
var x386: Int = 0
var x387: Boolean = true
val x408 = while ({val x388 = x386
val x390 = x387
val x389 = x388 < x169
val x391 = x389 && x390
x391}) {
val x393 = x386
val x394 = x393 + x26
val x395 = x0(x394)
val x396 = x395.toInt
val x397 = x396 | 32
val x398 = x397.toChar
val x399 = x383(x393)
val x401 = x398 == x399
val x404 = if (x401) {
()
} else {
x387 = false
()
}
val x405 = x393 + 1
x386 = x405
()
}
val x409 = x387
x409
} else {
false
}
val x412 = x382 || x411
val x415 = x328 == x414
val x441 = if (x415) {
var x416: Int = 0
var x417: Boolean = true
val x438 = while ({val x418 = x416
val x420 = x417
val x419 = x418 < x328
val x421 = x419 && x420
x421}) {
val x423 = x416
val x424 = x423 + x280
val x425 = x0(x424)
val x426 = x425.toInt
val x427 = x426 | 32
val x428 = x427.toChar
val x429 = x413(x423)
val x431 = x428 == x429
val x434 = if (x431) {
()
} else {
x417 = false
()
}
val x435 = x423 + 1
x416 = x435
()
}
val x439 = x417
x439
} else {
false
}
val x444 = x328 == x443
val x470 = if (x444) {
var x445: Int = 0
var x446: Boolean = true
val x467 = while ({val x447 = x445
val x449 = x446
val x448 = x447 < x328
val x450 = x448 && x449
x450}) {
val x452 = x445
val x453 = x452 + x280
val x454 = x0(x453)
val x455 = x454.toInt
val x456 = x455 | 32
val x457 = x456.toChar
val x458 = x442(x452)
val x460 = x457 == x458
val x463 = if (x460) {
()
} else {
x446 = false
()
}
val x464 = x452 + 1
x445 = x464
()
}
val x468 = x446
x468
} else {
false
}
val x471 = x441 || x470
val x472 = x412 && x471
val x642 = if (x472) {
var x473: java.lang.String = ""
var x474: Int = 0
val x487 = while ({val x475 = x474
val x476 = x475 < x328
x476}) {
val x478 = x473
val x479 = x474
val x480 = x280 + x479
val x481 = x0(x480)
val x482 = x478+x481
x473 = x482
val x484 = x479 + 1
x474 = x484
()
}
val x488 = x473
val x489 = new Anon1323431030(x345,x346,x488,x348,x349)
x489
} else {
val x493 = x169 == x492
val x519 = if (x493) {
var x494: Int = 0
var x495: Boolean = true
val x516 = while ({val x496 = x494
val x498 = x495
val x497 = x496 < x169
val x499 = x497 && x498
x499}) {
val x501 = x494
val x502 = x501 + x26
val x503 = x0(x502)
val x504 = x503.toInt
val x505 = x504 | 32
val x506 = x505.toChar
val x507 = x491(x501)
val x509 = x506 == x507
val x512 = if (x509) {
()
} else {
x495 = false
()
}
val x513 = x501 + 1
x494 = x513
()
}
val x517 = x495
x517
} else {
false
}
val x641 = if (x519) {
var x520: java.lang.String = ""
var x521: Int = 0
val x534 = while ({val x522 = x521
val x523 = x522 < x328
x523}) {
val x525 = x520
val x526 = x521
val x527 = x280 + x526
val x528 = x0(x527)
val x529 = x525+x528
x520 = x529
val x531 = x526 + 1
x521 = x531
()
}
val x535 = x520
val x536 = x535.toInt
val x537 = new Anon1323431030(x345,x536,x347,x348,x349)
x537
} else {
val x541 = x169 == x540
val x567 = if (x541) {
var x542: Int = 0
var x543: Boolean = true
val x564 = while ({val x544 = x542
val x546 = x543
val x545 = x544 < x169
val x547 = x545 && x546
x547}) {
val x549 = x542
val x550 = x549 + x26
val x551 = x0(x550)
val x552 = x551.toInt
val x553 = x552 | 32
val x554 = x553.toChar
val x555 = x539(x549)
val x557 = x554 == x555
val x560 = if (x557) {
()
} else {
x543 = false
()
}
val x561 = x549 + 1
x542 = x561
()
}
val x565 = x543
x565
} else {
false
}
val x570 = x328 == x569
val x596 = if (x570) {
var x571: Int = 0
var x572: Boolean = true
val x593 = while ({val x573 = x571
val x575 = x572
val x574 = x573 < x328
val x576 = x574 && x575
x576}) {
val x578 = x571
val x579 = x578 + x280
val x580 = x0(x579)
val x581 = x580.toInt
val x582 = x581 | 32
val x583 = x582.toChar
val x584 = x568(x578)
val x586 = x583 == x584
val x589 = if (x586) {
()
} else {
x572 = false
()
}
val x590 = x578 + 1
x571 = x590
()
}
val x594 = x572
x594
} else {
false
}
val x597 = x567 && x596
val x635 = if (x597) {
x345
} else {
val x601 = x169 == x600
val x627 = if (x601) {
var x602: Int = 0
var x603: Boolean = true
val x624 = while ({val x604 = x602
val x606 = x603
val x605 = x604 < x169
val x607 = x605 && x606
x607}) {
val x609 = x602
val x610 = x609 + x26
val x611 = x0(x610)
val x612 = x611.toInt
val x613 = x612 | 32
val x614 = x613.toChar
val x615 = x599(x609)
val x617 = x614 == x615
val x620 = if (x617) {
()
} else {
x603 = false
()
}
val x621 = x609 + 1
x602 = x621
()
}
val x625 = x603
x625
} else {
false
}
val x629 = if (x627) {
x345
} else {
x345
}
x629
}
val x636 = if (x597) {
x346
} else {
val x601 = x169 == x600
val x627 = if (x601) {
var x602: Int = 0
var x603: Boolean = true
val x624 = while ({val x604 = x602
val x606 = x603
val x605 = x604 < x169
val x607 = x605 && x606
x607}) {
val x609 = x602
val x610 = x609 + x26
val x611 = x0(x610)
val x612 = x611.toInt
val x613 = x612 | 32
val x614 = x613.toChar
val x615 = x599(x609)
val x617 = x614 == x615
val x620 = if (x617) {
()
} else {
x603 = false
()
}
val x621 = x609 + 1
x602 = x621
()
}
val x625 = x603
x625
} else {
false
}
val x630 = if (x627) {
x346
} else {
x346
}
x630
}
val x637 = if (x597) {
x347
} else {
val x601 = x169 == x600
val x627 = if (x601) {
var x602: Int = 0
var x603: Boolean = true
val x624 = while ({val x604 = x602
val x606 = x603
val x605 = x604 < x169
val x607 = x605 && x606
x607}) {
val x609 = x602
val x610 = x609 + x26
val x611 = x0(x610)
val x612 = x611.toInt
val x613 = x612 | 32
val x614 = x613.toChar
val x615 = x599(x609)
val x617 = x614 == x615
val x620 = if (x617) {
()
} else {
x603 = false
()
}
val x621 = x609 + 1
x602 = x621
()
}
val x625 = x603
x625
} else {
false
}
val x631 = if (x627) {
x347
} else {
x347
}
x631
}
val x638 = if (x597) {
true
} else {
val x601 = x169 == x600
val x627 = if (x601) {
var x602: Int = 0
var x603: Boolean = true
val x624 = while ({val x604 = x602
val x606 = x603
val x605 = x604 < x169
val x607 = x605 && x606
x607}) {
val x609 = x602
val x610 = x609 + x26
val x611 = x0(x610)
val x612 = x611.toInt
val x613 = x612 | 32
val x614 = x613.toChar
val x615 = x599(x609)
val x617 = x614 == x615
val x620 = if (x617) {
()
} else {
x603 = false
()
}
val x621 = x609 + 1
x602 = x621
()
}
val x625 = x603
x625
} else {
false
}
val x632 = if (x627) {
x348
} else {
x348
}
x632
}
val x639 = if (x597) {
x349
} else {
val x601 = x169 == x600
val x627 = if (x601) {
var x602: Int = 0
var x603: Boolean = true
val x624 = while ({val x604 = x602
val x606 = x603
val x605 = x604 < x169
val x607 = x605 && x606
x607}) {
val x609 = x602
val x610 = x609 + x26
val x611 = x0(x610)
val x612 = x611.toInt
val x613 = x612 | 32
val x614 = x613.toChar
val x615 = x599(x609)
val x617 = x614 == x615
val x620 = if (x617) {
()
} else {
x603 = false
()
}
val x621 = x609 + 1
x602 = x621
()
}
val x625 = x603
x625
} else {
false
}
val x633 = if (x627) {
true
} else {
x349
}
x633
}
val x640 = new Anon1323431030(x635,x636,x637,x638,x639)
x640
}
x641
}
val x644 = x642.status
x8 = x644
val x646 = x642.contentLength
x9 = x646
val x648 = x642.connection
x10 = x648
val x650 = x642.chunked
x11 = x650
val x652 = x642.upgrade
x12 = x652
x14 = false
val x340 = x330 + 1
x15 = x340
x19 = x340
()
} else {
x18 = false
()
}
x660
}
x662
}
x664
} else {
x18 = false
()
}
x668
}
x670
}
x672
} else {
x18 = false
()
}
x676
}
x678
}
val x681 = x8
val x682 = x9
val x683 = x10
val x684 = x11
val x685 = x12
val x687 = x14
val x688 = x15
val x686 = new Anon1323431030(x681,x682,x683,x684,x685)
x2 = x686
x3 = x687
x4 = x688
val x693 = x2
val x694 = x3
val x695 = x4
val x696 = new ParseResultAnon1323431030(x693,x694,x695)
val x697 = println(x696)
x697
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultAnon1323431030(Anon1323431030(200,131,close,false,false),false,215)
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse(px810:Array[Char],px839:Array[Char],px869:Array[Char],px898:Array[Char],px947:Array[Char],px995:Array[Char],px1024:Array[Char],px1055:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Anon1323431030 = null
var x3: Boolean = true
var x4: Int = -1
val x7 = x0.length
val x8 = 0 >= x7
val x1276 = if (x8) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x21 = x0(0)
val x22 = x21 == 'H'
val x1274 = if (x22) {
val x23 = 0 + 1
val x25 = x23 >= x7
val x1268 = if (x25) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x33 = x0(x23)
val x34 = x33 == 'T'
val x1266 = if (x34) {
val x35 = x23 + 1
val x37 = x35 >= x7
val x1260 = if (x37) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x45 = x0(x35)
val x46 = x45 == 'T'
val x1258 = if (x46) {
val x47 = x35 + 1
val x49 = x47 >= x7
val x1252 = if (x49) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x57 = x0(x47)
val x58 = x57 == 'P'
val x1250 = if (x58) {
val x59 = x47 + 1
val x61 = x59 >= x7
val x1244 = if (x61) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x69 = x0(x59)
val x70 = x69 == '/'
val x1242 = if (x70) {
val x71 = x59 + 1
val x94 = x71 >= x7
val x1236 = if (x94) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x102 = x0(x71)
val x103 = x102 >= '0'
val x104 = x102 <= '9'
val x105 = x103 && x104
val x1234 = if (x105) {
val x108 = x102 - '0'
val x109 = x108.toInt
var x111: Int = x109
var x112: Boolean = false
val x106 = x71 + 1
var x113: Int = x106
var x115: Int = -1
var x116: Boolean = true
var x117: Int = x106
val x158 = while ({val x118 = x116
val x119 = x115
val x120 = x117
val x121 = x119 != x120
val x122 = x118 && x121
x122}) {
val x124 = x117
x115 = x124
val x126 = x124 >= x7
val x156 = if (x126) {
x116 = false
()
} else {
val x131 = x0(x124)
val x132 = x131 >= '0'
val x133 = x131 <= '9'
val x134 = x132 && x133
val x154 = if (x134) {
val x140 = x111
val x141 = x112
val x142 = x113
val x137 = x131 - '0'
val x138 = x137.toInt
val x144 = x140 * 10
val x145 = x144 + x138
x111 = x145
x112 = false
val x135 = x124 + 1
x113 = x135
x117 = x135
()
} else {
x116 = false
()
}
x154
}
x156
}
val x159 = x111
val x160 = x112
val x161 = x113
val x164 = if (x160) {
true
} else {
x160
}
val x1228 = if (x164) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x165 = if (x160) {
x71
} else {
x161
}
val x171 = x165 >= x7
val x1226 = if (x171) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x178 = x0(x165)
val x179 = x178 == '.'
val x1224 = if (x179) {
val x180 = x165 + 1
val x182 = x180 >= x7
val x1218 = if (x182) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x189 = x0(x180)
val x190 = x189 >= '0'
val x191 = x189 <= '9'
val x192 = x190 && x191
val x1216 = if (x192) {
val x195 = x189 - '0'
val x196 = x195.toInt
var x198: Int = x196
var x199: Boolean = false
val x193 = x180 + 1
var x200: Int = x193
var x202: Int = -1
var x203: Boolean = true
var x204: Int = x193
val x245 = while ({val x205 = x203
val x206 = x202
val x207 = x204
val x208 = x206 != x207
val x209 = x205 && x208
x209}) {
val x211 = x204
x202 = x211
val x213 = x211 >= x7
val x243 = if (x213) {
x203 = false
()
} else {
val x218 = x0(x211)
val x219 = x218 >= '0'
val x220 = x218 <= '9'
val x221 = x219 && x220
val x241 = if (x221) {
val x227 = x198
val x228 = x199
val x229 = x200
val x224 = x218 - '0'
val x225 = x224.toInt
val x231 = x227 * 10
val x232 = x231 + x225
x198 = x232
x199 = false
val x222 = x211 + 1
x200 = x222
x204 = x222
()
} else {
x203 = false
()
}
x241
}
x243
}
val x246 = x198
val x247 = x199
val x248 = x200
val x251 = if (x247) {
true
} else {
x247
}
val x257 = if (x251) {
true
} else {
false
}
val x263 = if (x257) {
true
} else {
false
}
val x1210 = if (x263) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x271: java.lang.String = ""
var x272: Boolean = false
val x264 = if (x257) {
0
} else {
val x258 = if (x251) {
x71
} else {
val x252 = if (x247) {
x180
} else {
x248
}
x252
}
x258
}
var x273: Int = x264
var x275: Int = -1
var x276: Boolean = true
var x277: Int = x264
val x310 = while ({val x278 = x276
val x279 = x275
val x280 = x277
val x281 = x279 != x280
val x282 = x278 && x281
x282}) {
val x284 = x277
x275 = x284
val x286 = x284 >= x7
val x308 = if (x286) {
x276 = false
()
} else {
val x290 = x0(x284)
val x291 = x290 == ' '
val x306 = if (x291) {
val x294 = x271
val x295 = x272
val x296 = x273
x271 = x294
x272 = false
val x292 = x284 + 1
x273 = x292
x277 = x292
()
} else {
x276 = false
()
}
x306
}
x308
}
val x311 = x271
val x312 = x272
val x313 = x273
val x318 = if (x312) {
true
} else {
false
}
val x1208 = if (x318) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x319 = if (x312) {
0
} else {
x313
}
val x325 = x319 >= x7
val x1206 = if (x325) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x332 = x0(x319)
val x333 = x332 >= '0'
val x334 = x332 <= '9'
val x335 = x333 && x334
val x1204 = if (x335) {
val x338 = x332 - '0'
val x339 = x338.toInt
var x341: Int = x339
var x342: Boolean = false
val x336 = x319 + 1
var x343: Int = x336
var x345: Int = -1
var x346: Boolean = true
var x347: Int = x336
val x388 = while ({val x348 = x346
val x349 = x345
val x350 = x347
val x351 = x349 != x350
val x352 = x348 && x351
x352}) {
val x354 = x347
x345 = x354
val x356 = x354 >= x7
val x386 = if (x356) {
x346 = false
()
} else {
val x361 = x0(x354)
val x362 = x361 >= '0'
val x363 = x361 <= '9'
val x364 = x362 && x363
val x384 = if (x364) {
val x370 = x341
val x371 = x342
val x372 = x343
val x367 = x361 - '0'
val x368 = x367.toInt
val x374 = x370 * 10
val x375 = x374 + x368
x341 = x375
x342 = false
val x365 = x354 + 1
x343 = x365
x347 = x365
()
} else {
x346 = false
()
}
x384
}
x386
}
val x389 = x341
val x390 = x342
val x391 = x343
val x394 = if (x390) {
true
} else {
x390
}
val x1198 = if (x394) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x402: Int = 0
var x403: Boolean = false
val x395 = if (x390) {
x319
} else {
x391
}
var x404: Int = x395
var x406: Int = -1
var x407: Boolean = true
var x408: Int = x395
val x443 = while ({val x409 = x407
val x410 = x406
val x411 = x408
val x412 = x410 != x411
val x413 = x409 && x412
x413}) {
val x415 = x408
x406 = x415
val x417 = x415 >= x7
val x441 = if (x417) {
x407 = false
()
} else {
val x421 = x0(x415)
val x423 = x421 == '\n'
val x439 = if (x423) {
x407 = false
()
} else {
val x428 = x402
val x429 = x403
val x430 = x404
val x432 = x428 + 1
x402 = x432
x403 = false
val x426 = x415 + 1
x404 = x426
x408 = x426
()
}
x439
}
x441
}
val x444 = x402
val x445 = x403
val x446 = x404
val x450 = x446 >= x7
val x1196 = if (x450) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x457 = x0(x446)
val x458 = x457 == '\n'
val x1194 = if (x458) {
var x465: Int = 200
var x466: Int = 0
var x467: java.lang.String = "close"
var x468: Boolean = false
var x469: Boolean = false
var x471: Boolean = false
val x459 = x446 + 1
var x472: Int = x459
var x474: Int = -1
var x475: Boolean = true
var x476: Int = x459
val x528 = {x491: (Int) => 
var x493: Int = 0
var x494: Boolean = true
var x495: Int = x491
val x497 = x491 >= x7
val x522 = if (x497) {
x493 = 0
x494 = true
x495 = x491
()
} else {
val x502 = x0(x491)
val x503 = x502 >= 'a'
val x504 = x502 <= 'z'
val x505 = x503 && x504
val x506 = x502 >= 'A'
val x507 = x502 <= 'Z'
val x508 = x506 && x507
val x509 = x505 || x508
val x520 = if (x509) {
x493 = x491
x494 = false
val x510 = x491 + 1
x495 = x510
()
} else {
x493 = 0
x494 = true
x495 = x491
()
}
x520
}
val x523 = x493
val x524 = x494
val x525 = x495
val x526 = new ParseResultInt(x523,x524,x525)
x526: ParseResultInt
}
val x564 = {x485: (Int) => 
var x487: Int = 0
var x488: Boolean = true
var x489: Int = x485
val x529 = x528(x485)
val x530 = x529.empty
val x558 = if (x530) {
val x531 = x485 >= x7
val x550 = if (x531) {
x487 = 0
x488 = true
x489 = x485
()
} else {
val x536 = x0(x485)
val x537 = x536 == '-'
val x548 = if (x537) {
x487 = x485
x488 = false
val x538 = x485 + 1
x489 = x538
()
} else {
x487 = 0
x488 = true
x489 = x485
()
}
x548
}
x550
} else {
val x552 = x529.res
x487 = x552
x488 = x530
val x555 = x529.next
x489 = x555
()
}
val x559 = x487
val x560 = x488
val x561 = x489
val x562 = new ParseResultInt(x559,x560,x561)
x562: ParseResultInt
}
val x810 = px810 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x811 = x810.length
val x839 = px839 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x840 = x839.length
val x869 = px869 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x870 = x869.length
val x898 = px898 // static data: Array(c,l,o,s,e)
val x899 = x898.length
val x947 = px947 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x948 = x947.length
val x995 = px995 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x996 = x995.length
val x1024 = px1024 // static data: Array(c,h,u,n,k,e,d)
val x1025 = x1024.length
val x1055 = px1055 // static data: Array(u,p,g,r,a,d,e)
val x1056 = x1055.length
val x1136 = while ({val x477 = x475
val x478 = x474
val x479 = x476
val x480 = x478 != x479
val x481 = x477 && x480
x481}) {
val x483 = x476
x474 = x483
val x565 = x483 >= x7
val x1134 = if (x565) {
x475 = false
()
} else {
val x572 = x0(x483)
val x573 = x572 >= 'a'
val x574 = x572 <= 'z'
val x575 = x573 && x574
val x576 = x572 >= 'A'
val x577 = x572 <= 'Z'
val x578 = x576 && x577
val x579 = x575 || x578
val x1132 = if (x579) {
var x583: Int = 0
var x584: Boolean = false
val x580 = x483 + 1
var x585: Int = x580
var x587: Int = -1
var x588: Boolean = true
var x589: Int = x580
val x616 = while ({val x590 = x588
val x591 = x587
val x592 = x589
val x593 = x591 != x592
val x594 = x590 && x593
x594}) {
val x596 = x589
x587 = x596
val x598 = x564(x596)
val x599 = x598.empty
val x614 = if (x599) {
x588 = false
()
} else {
val x602 = x583
val x603 = x584
val x604 = x585
val x606 = x602 + 1
x583 = x606
x584 = false
val x607 = x598.next
x585 = x607
x589 = x607
()
}
x614
}
val x617 = x583
val x618 = x584
val x619 = x585
var x629: java.lang.String = ""
var x630: Boolean = false
var x631: Int = x619
var x633: Int = -1
var x634: Boolean = true
var x635: Int = x619
val x668 = while ({val x636 = x634
val x637 = x633
val x638 = x635
val x639 = x637 != x638
val x640 = x636 && x639
x640}) {
val x642 = x635
x633 = x642
val x644 = x642 >= x7
val x666 = if (x644) {
x634 = false
()
} else {
val x648 = x0(x642)
val x649 = x648 == ' '
val x664 = if (x649) {
val x652 = x629
val x653 = x630
val x654 = x631
x629 = x652
x630 = false
val x650 = x642 + 1
x631 = x650
x635 = x650
()
} else {
x634 = false
()
}
x664
}
x666
}
val x669 = x629
val x670 = x630
val x671 = x631
val x1128 = if (x670) {
x475 = false
()
} else {
val x676 = x671 >= x7
val x1126 = if (x676) {
x475 = false
()
} else {
val x682 = x0(x671)
val x683 = x682 == ':'
val x1124 = if (x683) {
var x694: java.lang.String = ""
var x695: Boolean = false
val x684 = x671 + 1
var x696: Int = x684
var x698: Int = -1
var x699: Boolean = true
var x700: Int = x684
val x733 = while ({val x701 = x699
val x702 = x698
val x703 = x700
val x704 = x702 != x703
val x705 = x701 && x704
x705}) {
val x707 = x700
x698 = x707
val x709 = x707 >= x7
val x731 = if (x709) {
x699 = false
()
} else {
val x713 = x0(x707)
val x714 = x713 == ' '
val x729 = if (x714) {
val x717 = x694
val x718 = x695
val x719 = x696
x694 = x717
x695 = false
val x715 = x707 + 1
x696 = x715
x700 = x715
()
} else {
x699 = false
()
}
x729
}
x731
}
val x734 = x694
val x735 = x695
val x736 = x696
val x1120 = if (x735) {
x475 = false
()
} else {
var x742: Int = 0
var x743: Boolean = false
var x744: Int = x736
var x746: Int = -1
var x747: Boolean = true
var x748: Int = x736
val x783 = while ({val x749 = x747
val x750 = x746
val x751 = x748
val x752 = x750 != x751
val x753 = x749 && x752
x753}) {
val x755 = x748
x746 = x755
val x757 = x755 >= x7
val x781 = if (x757) {
x747 = false
()
} else {
val x761 = x0(x755)
val x763 = x761 == '\n'
val x779 = if (x763) {
x747 = false
()
} else {
val x768 = x742
val x769 = x743
val x770 = x744
val x772 = x768 + 1
x742 = x772
x743 = false
val x766 = x755 + 1
x744 = x766
x748 = x766
()
}
x779
}
x781
}
val x784 = x742
val x785 = x743
val x786 = x744
val x790 = x786 >= x7
val x1118 = if (x790) {
x475 = false
()
} else {
val x794 = x0(x786)
val x795 = x794 == '\n'
val x1116 = if (x795) {
val x801 = x465
val x802 = x466
val x803 = x467
val x804 = x468
val x805 = x469
val x807 = x471
val x808 = x472
val x625 = x617 + 1
val x812 = x625 == x811
val x838 = if (x812) {
var x813: Int = 0
var x814: Boolean = true
val x835 = while ({val x815 = x813
val x817 = x814
val x816 = x815 < x625
val x818 = x816 && x817
x818}) {
val x820 = x813
val x821 = x820 + x483
val x822 = x0(x821)
val x823 = x822.toInt
val x824 = x823 | 32
val x825 = x824.toChar
val x826 = x810(x820)
val x828 = x825 == x826
val x831 = if (x828) {
()
} else {
x814 = false
()
}
val x832 = x820 + 1
x813 = x832
()
}
val x836 = x814
x836
} else {
false
}
val x841 = x625 == x840
val x867 = if (x841) {
var x842: Int = 0
var x843: Boolean = true
val x864 = while ({val x844 = x842
val x846 = x843
val x845 = x844 < x625
val x847 = x845 && x846
x847}) {
val x849 = x842
val x850 = x849 + x483
val x851 = x0(x850)
val x852 = x851.toInt
val x853 = x852 | 32
val x854 = x853.toChar
val x855 = x839(x849)
val x857 = x854 == x855
val x860 = if (x857) {
()
} else {
x843 = false
()
}
val x861 = x849 + 1
x842 = x861
()
}
val x865 = x843
x865
} else {
false
}
val x868 = x838 || x867
val x871 = x784 == x870
val x897 = if (x871) {
var x872: Int = 0
var x873: Boolean = true
val x894 = while ({val x874 = x872
val x876 = x873
val x875 = x874 < x784
val x877 = x875 && x876
x877}) {
val x879 = x872
val x880 = x879 + x736
val x881 = x0(x880)
val x882 = x881.toInt
val x883 = x882 | 32
val x884 = x883.toChar
val x885 = x869(x879)
val x887 = x884 == x885
val x890 = if (x887) {
()
} else {
x873 = false
()
}
val x891 = x879 + 1
x872 = x891
()
}
val x895 = x873
x895
} else {
false
}
val x900 = x784 == x899
val x926 = if (x900) {
var x901: Int = 0
var x902: Boolean = true
val x923 = while ({val x903 = x901
val x905 = x902
val x904 = x903 < x784
val x906 = x904 && x905
x906}) {
val x908 = x901
val x909 = x908 + x736
val x910 = x0(x909)
val x911 = x910.toInt
val x912 = x911 | 32
val x913 = x912.toChar
val x914 = x898(x908)
val x916 = x913 == x914
val x919 = if (x916) {
()
} else {
x902 = false
()
}
val x920 = x908 + 1
x901 = x920
()
}
val x924 = x902
x924
} else {
false
}
val x927 = x897 || x926
val x928 = x868 && x927
val x1098 = if (x928) {
var x929: java.lang.String = ""
var x930: Int = 0
val x943 = while ({val x931 = x930
val x932 = x931 < x784
x932}) {
val x934 = x929
val x935 = x930
val x936 = x736 + x935
val x937 = x0(x936)
val x938 = x934+x937
x929 = x938
val x940 = x935 + 1
x930 = x940
()
}
val x944 = x929
val x945 = new Anon1323431030(x801,x802,x944,x804,x805)
x945
} else {
val x949 = x625 == x948
val x975 = if (x949) {
var x950: Int = 0
var x951: Boolean = true
val x972 = while ({val x952 = x950
val x954 = x951
val x953 = x952 < x625
val x955 = x953 && x954
x955}) {
val x957 = x950
val x958 = x957 + x483
val x959 = x0(x958)
val x960 = x959.toInt
val x961 = x960 | 32
val x962 = x961.toChar
val x963 = x947(x957)
val x965 = x962 == x963
val x968 = if (x965) {
()
} else {
x951 = false
()
}
val x969 = x957 + 1
x950 = x969
()
}
val x973 = x951
x973
} else {
false
}
val x1097 = if (x975) {
var x976: java.lang.String = ""
var x977: Int = 0
val x990 = while ({val x978 = x977
val x979 = x978 < x784
x979}) {
val x981 = x976
val x982 = x977
val x983 = x736 + x982
val x984 = x0(x983)
val x985 = x981+x984
x976 = x985
val x987 = x982 + 1
x977 = x987
()
}
val x991 = x976
val x992 = x991.toInt
val x993 = new Anon1323431030(x801,x992,x803,x804,x805)
x993
} else {
val x997 = x625 == x996
val x1023 = if (x997) {
var x998: Int = 0
var x999: Boolean = true
val x1020 = while ({val x1000 = x998
val x1002 = x999
val x1001 = x1000 < x625
val x1003 = x1001 && x1002
x1003}) {
val x1005 = x998
val x1006 = x1005 + x483
val x1007 = x0(x1006)
val x1008 = x1007.toInt
val x1009 = x1008 | 32
val x1010 = x1009.toChar
val x1011 = x995(x1005)
val x1013 = x1010 == x1011
val x1016 = if (x1013) {
()
} else {
x999 = false
()
}
val x1017 = x1005 + 1
x998 = x1017
()
}
val x1021 = x999
x1021
} else {
false
}
val x1026 = x784 == x1025
val x1052 = if (x1026) {
var x1027: Int = 0
var x1028: Boolean = true
val x1049 = while ({val x1029 = x1027
val x1031 = x1028
val x1030 = x1029 < x784
val x1032 = x1030 && x1031
x1032}) {
val x1034 = x1027
val x1035 = x1034 + x736
val x1036 = x0(x1035)
val x1037 = x1036.toInt
val x1038 = x1037 | 32
val x1039 = x1038.toChar
val x1040 = x1024(x1034)
val x1042 = x1039 == x1040
val x1045 = if (x1042) {
()
} else {
x1028 = false
()
}
val x1046 = x1034 + 1
x1027 = x1046
()
}
val x1050 = x1028
x1050
} else {
false
}
val x1053 = x1023 && x1052
val x1091 = if (x1053) {
x801
} else {
val x1057 = x625 == x1056
val x1083 = if (x1057) {
var x1058: Int = 0
var x1059: Boolean = true
val x1080 = while ({val x1060 = x1058
val x1062 = x1059
val x1061 = x1060 < x625
val x1063 = x1061 && x1062
x1063}) {
val x1065 = x1058
val x1066 = x1065 + x483
val x1067 = x0(x1066)
val x1068 = x1067.toInt
val x1069 = x1068 | 32
val x1070 = x1069.toChar
val x1071 = x1055(x1065)
val x1073 = x1070 == x1071
val x1076 = if (x1073) {
()
} else {
x1059 = false
()
}
val x1077 = x1065 + 1
x1058 = x1077
()
}
val x1081 = x1059
x1081
} else {
false
}
val x1085 = if (x1083) {
x801
} else {
x801
}
x1085
}
val x1092 = if (x1053) {
x802
} else {
val x1057 = x625 == x1056
val x1083 = if (x1057) {
var x1058: Int = 0
var x1059: Boolean = true
val x1080 = while ({val x1060 = x1058
val x1062 = x1059
val x1061 = x1060 < x625
val x1063 = x1061 && x1062
x1063}) {
val x1065 = x1058
val x1066 = x1065 + x483
val x1067 = x0(x1066)
val x1068 = x1067.toInt
val x1069 = x1068 | 32
val x1070 = x1069.toChar
val x1071 = x1055(x1065)
val x1073 = x1070 == x1071
val x1076 = if (x1073) {
()
} else {
x1059 = false
()
}
val x1077 = x1065 + 1
x1058 = x1077
()
}
val x1081 = x1059
x1081
} else {
false
}
val x1086 = if (x1083) {
x802
} else {
x802
}
x1086
}
val x1093 = if (x1053) {
x803
} else {
val x1057 = x625 == x1056
val x1083 = if (x1057) {
var x1058: Int = 0
var x1059: Boolean = true
val x1080 = while ({val x1060 = x1058
val x1062 = x1059
val x1061 = x1060 < x625
val x1063 = x1061 && x1062
x1063}) {
val x1065 = x1058
val x1066 = x1065 + x483
val x1067 = x0(x1066)
val x1068 = x1067.toInt
val x1069 = x1068 | 32
val x1070 = x1069.toChar
val x1071 = x1055(x1065)
val x1073 = x1070 == x1071
val x1076 = if (x1073) {
()
} else {
x1059 = false
()
}
val x1077 = x1065 + 1
x1058 = x1077
()
}
val x1081 = x1059
x1081
} else {
false
}
val x1087 = if (x1083) {
x803
} else {
x803
}
x1087
}
val x1094 = if (x1053) {
true
} else {
val x1057 = x625 == x1056
val x1083 = if (x1057) {
var x1058: Int = 0
var x1059: Boolean = true
val x1080 = while ({val x1060 = x1058
val x1062 = x1059
val x1061 = x1060 < x625
val x1063 = x1061 && x1062
x1063}) {
val x1065 = x1058
val x1066 = x1065 + x483
val x1067 = x0(x1066)
val x1068 = x1067.toInt
val x1069 = x1068 | 32
val x1070 = x1069.toChar
val x1071 = x1055(x1065)
val x1073 = x1070 == x1071
val x1076 = if (x1073) {
()
} else {
x1059 = false
()
}
val x1077 = x1065 + 1
x1058 = x1077
()
}
val x1081 = x1059
x1081
} else {
false
}
val x1088 = if (x1083) {
x804
} else {
x804
}
x1088
}
val x1095 = if (x1053) {
x805
} else {
val x1057 = x625 == x1056
val x1083 = if (x1057) {
var x1058: Int = 0
var x1059: Boolean = true
val x1080 = while ({val x1060 = x1058
val x1062 = x1059
val x1061 = x1060 < x625
val x1063 = x1061 && x1062
x1063}) {
val x1065 = x1058
val x1066 = x1065 + x483
val x1067 = x0(x1066)
val x1068 = x1067.toInt
val x1069 = x1068 | 32
val x1070 = x1069.toChar
val x1071 = x1055(x1065)
val x1073 = x1070 == x1071
val x1076 = if (x1073) {
()
} else {
x1059 = false
()
}
val x1077 = x1065 + 1
x1058 = x1077
()
}
val x1081 = x1059
x1081
} else {
false
}
val x1089 = if (x1083) {
true
} else {
x805
}
x1089
}
val x1096 = new Anon1323431030(x1091,x1092,x1093,x1094,x1095)
x1096
}
x1097
}
val x1100 = x1098.status
x465 = x1100
val x1102 = x1098.contentLength
x466 = x1102
val x1104 = x1098.connection
x467 = x1104
val x1106 = x1098.chunked
x468 = x1106
val x1108 = x1098.upgrade
x469 = x1108
x471 = false
val x796 = x786 + 1
x472 = x796
x476 = x796
()
} else {
x475 = false
()
}
x1116
}
x1118
}
x1120
} else {
x475 = false
()
}
x1124
}
x1126
}
x1128
} else {
x475 = false
()
}
x1132
}
x1134
}
val x1137 = x465
val x1138 = x466
val x1139 = x467
val x1140 = x468
val x1141 = x469
val x1143 = x471
val x1144 = x472
val x1149 = if (x1143) {
true
} else {
false
}
val x1188 = if (x1149) {
x2 = null
x3 = true
val x1150 = if (x1143) {
0
} else {
x1144
}
x4 = x1150
()
} else {
val x1150 = if (x1143) {
0
} else {
x1144
}
val x1157 = x1150 >= x7
val x1186 = if (x1157) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x1163 = x0(x1150)
val x1164 = x1163 == '\n'
val x1184 = if (x1164) {
val x1148 = if (x1143) {
null
} else {
val x393 = if (x390) {
0
} else {
x389
}
val x1142 = new Anon1323431030(x1137,x1138,x1139,x1140,x1141)
val x1146 = new Tuple2IntAnon1323431030(x393,x1142)
x1146
}
val x1168 = x1148._1
val x1169 = x1148._2
val x1170 = x1169.contentLength
val x1171 = x1169.connection
val x1172 = x1169.chunked
val x1173 = x1169.upgrade
val x1174 = new Anon1323431030(x1168,x1170,x1171,x1172,x1173)
x2 = x1174
x3 = false
val x1165 = x1150 + 1
x4 = x1165
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1184
}
x1186
}
x1188
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1194
}
x1196
}
x1198
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1204
}
x1206
}
x1208
}
x1210
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1216
}
x1218
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1224
}
x1226
}
x1228
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1234
}
x1236
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1242
}
x1244
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1250
}
x1252
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1258
}
x1260
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1266
}
x1268
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1274
}
val x1277 = x2
val x1278 = x3
val x1279 = x4
val x1280 = new ParseResultAnon1323431030(x1277,x1278,x1279)
val x1281 = println(x1280)
x1281
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=1000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(418,131,close,false,false),false,258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: java.lang.String = null
var x3: Boolean = true
var x4: Int = -1
val x6 = 0 + 0
val x7 = x0.length
val x8 = x6 < x7
val x21 = if (x8) {
val x9 = new Anon1680061013(x0,0,0)
val x10 = x9.input.slice(x9.start,x9.start+x9.length).mkString
x2 = x10
x3 = false
x4 = x6
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
val x22 = x2
val x23 = x3
val x24 = x4
val x25 = new ParseResultString(x22,x23,x24)
val x26 = println(x25)
x26
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(,false,0)
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class respAndMessageParse(px811:Array[Char],px840:Array[Char],px870:Array[Char],px899:Array[Char],px948:Array[Char],px996:Array[Char],px1025:Array[Char],px1056:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Tuple2Anon1323431030String = null
var x3: Boolean = true
var x4: Int = -1
val x7 = x0.length
val x8 = 0 >= x7
val x1292 = if (x8) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x22 = x0(0)
val x23 = x22 == 'H'
val x1290 = if (x23) {
val x24 = 0 + 1
val x26 = x24 >= x7
val x1284 = if (x26) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x34 = x0(x24)
val x35 = x34 == 'T'
val x1282 = if (x35) {
val x36 = x24 + 1
val x38 = x36 >= x7
val x1276 = if (x38) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x46 = x0(x36)
val x47 = x46 == 'T'
val x1274 = if (x47) {
val x48 = x36 + 1
val x50 = x48 >= x7
val x1268 = if (x50) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x58 = x0(x48)
val x59 = x58 == 'P'
val x1266 = if (x59) {
val x60 = x48 + 1
val x62 = x60 >= x7
val x1260 = if (x62) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x70 = x0(x60)
val x71 = x70 == '/'
val x1258 = if (x71) {
val x72 = x60 + 1
val x95 = x72 >= x7
val x1252 = if (x95) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x103 = x0(x72)
val x104 = x103 >= '0'
val x105 = x103 <= '9'
val x106 = x104 && x105
val x1250 = if (x106) {
val x109 = x103 - '0'
val x110 = x109.toInt
var x112: Int = x110
var x113: Boolean = false
val x107 = x72 + 1
var x114: Int = x107
var x116: Int = -1
var x117: Boolean = true
var x118: Int = x107
val x159 = while ({val x119 = x117
val x120 = x116
val x121 = x118
val x122 = x120 != x121
val x123 = x119 && x122
x123}) {
val x125 = x118
x116 = x125
val x127 = x125 >= x7
val x157 = if (x127) {
x117 = false
()
} else {
val x132 = x0(x125)
val x133 = x132 >= '0'
val x134 = x132 <= '9'
val x135 = x133 && x134
val x155 = if (x135) {
val x141 = x112
val x142 = x113
val x143 = x114
val x138 = x132 - '0'
val x139 = x138.toInt
val x145 = x141 * 10
val x146 = x145 + x139
x112 = x146
x113 = false
val x136 = x125 + 1
x114 = x136
x118 = x136
()
} else {
x117 = false
()
}
x155
}
x157
}
val x160 = x112
val x161 = x113
val x162 = x114
val x165 = if (x161) {
true
} else {
x161
}
val x1244 = if (x165) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x166 = if (x161) {
x72
} else {
x162
}
val x172 = x166 >= x7
val x1242 = if (x172) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x179 = x0(x166)
val x180 = x179 == '.'
val x1240 = if (x180) {
val x181 = x166 + 1
val x183 = x181 >= x7
val x1234 = if (x183) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x190 = x0(x181)
val x191 = x190 >= '0'
val x192 = x190 <= '9'
val x193 = x191 && x192
val x1232 = if (x193) {
val x196 = x190 - '0'
val x197 = x196.toInt
var x199: Int = x197
var x200: Boolean = false
val x194 = x181 + 1
var x201: Int = x194
var x203: Int = -1
var x204: Boolean = true
var x205: Int = x194
val x246 = while ({val x206 = x204
val x207 = x203
val x208 = x205
val x209 = x207 != x208
val x210 = x206 && x209
x210}) {
val x212 = x205
x203 = x212
val x214 = x212 >= x7
val x244 = if (x214) {
x204 = false
()
} else {
val x219 = x0(x212)
val x220 = x219 >= '0'
val x221 = x219 <= '9'
val x222 = x220 && x221
val x242 = if (x222) {
val x228 = x199
val x229 = x200
val x230 = x201
val x225 = x219 - '0'
val x226 = x225.toInt
val x232 = x228 * 10
val x233 = x232 + x226
x199 = x233
x200 = false
val x223 = x212 + 1
x201 = x223
x205 = x223
()
} else {
x204 = false
()
}
x242
}
x244
}
val x247 = x199
val x248 = x200
val x249 = x201
val x252 = if (x248) {
true
} else {
x248
}
val x258 = if (x252) {
true
} else {
false
}
val x264 = if (x258) {
true
} else {
false
}
val x1226 = if (x264) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x272: java.lang.String = ""
var x273: Boolean = false
val x265 = if (x258) {
0
} else {
val x259 = if (x252) {
x72
} else {
val x253 = if (x248) {
x181
} else {
x249
}
x253
}
x259
}
var x274: Int = x265
var x276: Int = -1
var x277: Boolean = true
var x278: Int = x265
val x311 = while ({val x279 = x277
val x280 = x276
val x281 = x278
val x282 = x280 != x281
val x283 = x279 && x282
x283}) {
val x285 = x278
x276 = x285
val x287 = x285 >= x7
val x309 = if (x287) {
x277 = false
()
} else {
val x291 = x0(x285)
val x292 = x291 == ' '
val x307 = if (x292) {
val x295 = x272
val x296 = x273
val x297 = x274
x272 = x295
x273 = false
val x293 = x285 + 1
x274 = x293
x278 = x293
()
} else {
x277 = false
()
}
x307
}
x309
}
val x312 = x272
val x313 = x273
val x314 = x274
val x319 = if (x313) {
true
} else {
false
}
val x1224 = if (x319) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x320 = if (x313) {
0
} else {
x314
}
val x326 = x320 >= x7
val x1222 = if (x326) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x333 = x0(x320)
val x334 = x333 >= '0'
val x335 = x333 <= '9'
val x336 = x334 && x335
val x1220 = if (x336) {
val x339 = x333 - '0'
val x340 = x339.toInt
var x342: Int = x340
var x343: Boolean = false
val x337 = x320 + 1
var x344: Int = x337
var x346: Int = -1
var x347: Boolean = true
var x348: Int = x337
val x389 = while ({val x349 = x347
val x350 = x346
val x351 = x348
val x352 = x350 != x351
val x353 = x349 && x352
x353}) {
val x355 = x348
x346 = x355
val x357 = x355 >= x7
val x387 = if (x357) {
x347 = false
()
} else {
val x362 = x0(x355)
val x363 = x362 >= '0'
val x364 = x362 <= '9'
val x365 = x363 && x364
val x385 = if (x365) {
val x371 = x342
val x372 = x343
val x373 = x344
val x368 = x362 - '0'
val x369 = x368.toInt
val x375 = x371 * 10
val x376 = x375 + x369
x342 = x376
x343 = false
val x366 = x355 + 1
x344 = x366
x348 = x366
()
} else {
x347 = false
()
}
x385
}
x387
}
val x390 = x342
val x391 = x343
val x392 = x344
val x395 = if (x391) {
true
} else {
x391
}
val x1214 = if (x395) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x403: Int = 0
var x404: Boolean = false
val x396 = if (x391) {
x320
} else {
x392
}
var x405: Int = x396
var x407: Int = -1
var x408: Boolean = true
var x409: Int = x396
val x444 = while ({val x410 = x408
val x411 = x407
val x412 = x409
val x413 = x411 != x412
val x414 = x410 && x413
x414}) {
val x416 = x409
x407 = x416
val x418 = x416 >= x7
val x442 = if (x418) {
x408 = false
()
} else {
val x422 = x0(x416)
val x424 = x422 == '\n'
val x440 = if (x424) {
x408 = false
()
} else {
val x429 = x403
val x430 = x404
val x431 = x405
val x433 = x429 + 1
x403 = x433
x404 = false
val x427 = x416 + 1
x405 = x427
x409 = x427
()
}
x440
}
x442
}
val x445 = x403
val x446 = x404
val x447 = x405
val x451 = x447 >= x7
val x1212 = if (x451) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x458 = x0(x447)
val x459 = x458 == '\n'
val x1210 = if (x459) {
var x466: Int = 200
var x467: Int = 0
var x468: java.lang.String = "close"
var x469: Boolean = false
var x470: Boolean = false
var x472: Boolean = false
val x460 = x447 + 1
var x473: Int = x460
var x475: Int = -1
var x476: Boolean = true
var x477: Int = x460
val x529 = {x492: (Int) => 
var x494: Int = 0
var x495: Boolean = true
var x496: Int = x492
val x498 = x492 >= x7
val x523 = if (x498) {
x494 = 0
x495 = true
x496 = x492
()
} else {
val x503 = x0(x492)
val x504 = x503 >= 'a'
val x505 = x503 <= 'z'
val x506 = x504 && x505
val x507 = x503 >= 'A'
val x508 = x503 <= 'Z'
val x509 = x507 && x508
val x510 = x506 || x509
val x521 = if (x510) {
x494 = x492
x495 = false
val x511 = x492 + 1
x496 = x511
()
} else {
x494 = 0
x495 = true
x496 = x492
()
}
x521
}
val x524 = x494
val x525 = x495
val x526 = x496
val x527 = new ParseResultInt(x524,x525,x526)
x527: ParseResultInt
}
val x565 = {x486: (Int) => 
var x488: Int = 0
var x489: Boolean = true
var x490: Int = x486
val x530 = x529(x486)
val x531 = x530.empty
val x559 = if (x531) {
val x532 = x486 >= x7
val x551 = if (x532) {
x488 = 0
x489 = true
x490 = x486
()
} else {
val x537 = x0(x486)
val x538 = x537 == '-'
val x549 = if (x538) {
x488 = x486
x489 = false
val x539 = x486 + 1
x490 = x539
()
} else {
x488 = 0
x489 = true
x490 = x486
()
}
x549
}
x551
} else {
val x553 = x530.res
x488 = x553
x489 = x531
val x556 = x530.next
x490 = x556
()
}
val x560 = x488
val x561 = x489
val x562 = x490
val x563 = new ParseResultInt(x560,x561,x562)
x563: ParseResultInt
}
val x811 = px811 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x812 = x811.length
val x840 = px840 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x841 = x840.length
val x870 = px870 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x871 = x870.length
val x899 = px899 // static data: Array(c,l,o,s,e)
val x900 = x899.length
val x948 = px948 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x949 = x948.length
val x996 = px996 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x997 = x996.length
val x1025 = px1025 // static data: Array(c,h,u,n,k,e,d)
val x1026 = x1025.length
val x1056 = px1056 // static data: Array(u,p,g,r,a,d,e)
val x1057 = x1056.length
val x1137 = while ({val x478 = x476
val x479 = x475
val x480 = x477
val x481 = x479 != x480
val x482 = x478 && x481
x482}) {
val x484 = x477
x475 = x484
val x566 = x484 >= x7
val x1135 = if (x566) {
x476 = false
()
} else {
val x573 = x0(x484)
val x574 = x573 >= 'a'
val x575 = x573 <= 'z'
val x576 = x574 && x575
val x577 = x573 >= 'A'
val x578 = x573 <= 'Z'
val x579 = x577 && x578
val x580 = x576 || x579
val x1133 = if (x580) {
var x584: Int = 0
var x585: Boolean = false
val x581 = x484 + 1
var x586: Int = x581
var x588: Int = -1
var x589: Boolean = true
var x590: Int = x581
val x617 = while ({val x591 = x589
val x592 = x588
val x593 = x590
val x594 = x592 != x593
val x595 = x591 && x594
x595}) {
val x597 = x590
x588 = x597
val x599 = x565(x597)
val x600 = x599.empty
val x615 = if (x600) {
x589 = false
()
} else {
val x603 = x584
val x604 = x585
val x605 = x586
val x607 = x603 + 1
x584 = x607
x585 = false
val x608 = x599.next
x586 = x608
x590 = x608
()
}
x615
}
val x618 = x584
val x619 = x585
val x620 = x586
var x630: java.lang.String = ""
var x631: Boolean = false
var x632: Int = x620
var x634: Int = -1
var x635: Boolean = true
var x636: Int = x620
val x669 = while ({val x637 = x635
val x638 = x634
val x639 = x636
val x640 = x638 != x639
val x641 = x637 && x640
x641}) {
val x643 = x636
x634 = x643
val x645 = x643 >= x7
val x667 = if (x645) {
x635 = false
()
} else {
val x649 = x0(x643)
val x650 = x649 == ' '
val x665 = if (x650) {
val x653 = x630
val x654 = x631
val x655 = x632
x630 = x653
x631 = false
val x651 = x643 + 1
x632 = x651
x636 = x651
()
} else {
x635 = false
()
}
x665
}
x667
}
val x670 = x630
val x671 = x631
val x672 = x632
val x1129 = if (x671) {
x476 = false
()
} else {
val x677 = x672 >= x7
val x1127 = if (x677) {
x476 = false
()
} else {
val x683 = x0(x672)
val x684 = x683 == ':'
val x1125 = if (x684) {
var x695: java.lang.String = ""
var x696: Boolean = false
val x685 = x672 + 1
var x697: Int = x685
var x699: Int = -1
var x700: Boolean = true
var x701: Int = x685
val x734 = while ({val x702 = x700
val x703 = x699
val x704 = x701
val x705 = x703 != x704
val x706 = x702 && x705
x706}) {
val x708 = x701
x699 = x708
val x710 = x708 >= x7
val x732 = if (x710) {
x700 = false
()
} else {
val x714 = x0(x708)
val x715 = x714 == ' '
val x730 = if (x715) {
val x718 = x695
val x719 = x696
val x720 = x697
x695 = x718
x696 = false
val x716 = x708 + 1
x697 = x716
x701 = x716
()
} else {
x700 = false
()
}
x730
}
x732
}
val x735 = x695
val x736 = x696
val x737 = x697
val x1121 = if (x736) {
x476 = false
()
} else {
var x743: Int = 0
var x744: Boolean = false
var x745: Int = x737
var x747: Int = -1
var x748: Boolean = true
var x749: Int = x737
val x784 = while ({val x750 = x748
val x751 = x747
val x752 = x749
val x753 = x751 != x752
val x754 = x750 && x753
x754}) {
val x756 = x749
x747 = x756
val x758 = x756 >= x7
val x782 = if (x758) {
x748 = false
()
} else {
val x762 = x0(x756)
val x764 = x762 == '\n'
val x780 = if (x764) {
x748 = false
()
} else {
val x769 = x743
val x770 = x744
val x771 = x745
val x773 = x769 + 1
x743 = x773
x744 = false
val x767 = x756 + 1
x745 = x767
x749 = x767
()
}
x780
}
x782
}
val x785 = x743
val x786 = x744
val x787 = x745
val x791 = x787 >= x7
val x1119 = if (x791) {
x476 = false
()
} else {
val x795 = x0(x787)
val x796 = x795 == '\n'
val x1117 = if (x796) {
val x802 = x466
val x803 = x467
val x804 = x468
val x805 = x469
val x806 = x470
val x808 = x472
val x809 = x473
val x626 = x618 + 1
val x813 = x626 == x812
val x839 = if (x813) {
var x814: Int = 0
var x815: Boolean = true
val x836 = while ({val x816 = x814
val x818 = x815
val x817 = x816 < x626
val x819 = x817 && x818
x819}) {
val x821 = x814
val x822 = x821 + x484
val x823 = x0(x822)
val x824 = x823.toInt
val x825 = x824 | 32
val x826 = x825.toChar
val x827 = x811(x821)
val x829 = x826 == x827
val x832 = if (x829) {
()
} else {
x815 = false
()
}
val x833 = x821 + 1
x814 = x833
()
}
val x837 = x815
x837
} else {
false
}
val x842 = x626 == x841
val x868 = if (x842) {
var x843: Int = 0
var x844: Boolean = true
val x865 = while ({val x845 = x843
val x847 = x844
val x846 = x845 < x626
val x848 = x846 && x847
x848}) {
val x850 = x843
val x851 = x850 + x484
val x852 = x0(x851)
val x853 = x852.toInt
val x854 = x853 | 32
val x855 = x854.toChar
val x856 = x840(x850)
val x858 = x855 == x856
val x861 = if (x858) {
()
} else {
x844 = false
()
}
val x862 = x850 + 1
x843 = x862
()
}
val x866 = x844
x866
} else {
false
}
val x869 = x839 || x868
val x872 = x785 == x871
val x898 = if (x872) {
var x873: Int = 0
var x874: Boolean = true
val x895 = while ({val x875 = x873
val x877 = x874
val x876 = x875 < x785
val x878 = x876 && x877
x878}) {
val x880 = x873
val x881 = x880 + x737
val x882 = x0(x881)
val x883 = x882.toInt
val x884 = x883 | 32
val x885 = x884.toChar
val x886 = x870(x880)
val x888 = x885 == x886
val x891 = if (x888) {
()
} else {
x874 = false
()
}
val x892 = x880 + 1
x873 = x892
()
}
val x896 = x874
x896
} else {
false
}
val x901 = x785 == x900
val x927 = if (x901) {
var x902: Int = 0
var x903: Boolean = true
val x924 = while ({val x904 = x902
val x906 = x903
val x905 = x904 < x785
val x907 = x905 && x906
x907}) {
val x909 = x902
val x910 = x909 + x737
val x911 = x0(x910)
val x912 = x911.toInt
val x913 = x912 | 32
val x914 = x913.toChar
val x915 = x899(x909)
val x917 = x914 == x915
val x920 = if (x917) {
()
} else {
x903 = false
()
}
val x921 = x909 + 1
x902 = x921
()
}
val x925 = x903
x925
} else {
false
}
val x928 = x898 || x927
val x929 = x869 && x928
val x1099 = if (x929) {
var x930: java.lang.String = ""
var x931: Int = 0
val x944 = while ({val x932 = x931
val x933 = x932 < x785
x933}) {
val x935 = x930
val x936 = x931
val x937 = x737 + x936
val x938 = x0(x937)
val x939 = x935+x938
x930 = x939
val x941 = x936 + 1
x931 = x941
()
}
val x945 = x930
val x946 = new Anon1323431030(x802,x803,x945,x805,x806)
x946
} else {
val x950 = x626 == x949
val x976 = if (x950) {
var x951: Int = 0
var x952: Boolean = true
val x973 = while ({val x953 = x951
val x955 = x952
val x954 = x953 < x626
val x956 = x954 && x955
x956}) {
val x958 = x951
val x959 = x958 + x484
val x960 = x0(x959)
val x961 = x960.toInt
val x962 = x961 | 32
val x963 = x962.toChar
val x964 = x948(x958)
val x966 = x963 == x964
val x969 = if (x966) {
()
} else {
x952 = false
()
}
val x970 = x958 + 1
x951 = x970
()
}
val x974 = x952
x974
} else {
false
}
val x1098 = if (x976) {
var x977: java.lang.String = ""
var x978: Int = 0
val x991 = while ({val x979 = x978
val x980 = x979 < x785
x980}) {
val x982 = x977
val x983 = x978
val x984 = x737 + x983
val x985 = x0(x984)
val x986 = x982+x985
x977 = x986
val x988 = x983 + 1
x978 = x988
()
}
val x992 = x977
val x993 = x992.toInt
val x994 = new Anon1323431030(x802,x993,x804,x805,x806)
x994
} else {
val x998 = x626 == x997
val x1024 = if (x998) {
var x999: Int = 0
var x1000: Boolean = true
val x1021 = while ({val x1001 = x999
val x1003 = x1000
val x1002 = x1001 < x626
val x1004 = x1002 && x1003
x1004}) {
val x1006 = x999
val x1007 = x1006 + x484
val x1008 = x0(x1007)
val x1009 = x1008.toInt
val x1010 = x1009 | 32
val x1011 = x1010.toChar
val x1012 = x996(x1006)
val x1014 = x1011 == x1012
val x1017 = if (x1014) {
()
} else {
x1000 = false
()
}
val x1018 = x1006 + 1
x999 = x1018
()
}
val x1022 = x1000
x1022
} else {
false
}
val x1027 = x785 == x1026
val x1053 = if (x1027) {
var x1028: Int = 0
var x1029: Boolean = true
val x1050 = while ({val x1030 = x1028
val x1032 = x1029
val x1031 = x1030 < x785
val x1033 = x1031 && x1032
x1033}) {
val x1035 = x1028
val x1036 = x1035 + x737
val x1037 = x0(x1036)
val x1038 = x1037.toInt
val x1039 = x1038 | 32
val x1040 = x1039.toChar
val x1041 = x1025(x1035)
val x1043 = x1040 == x1041
val x1046 = if (x1043) {
()
} else {
x1029 = false
()
}
val x1047 = x1035 + 1
x1028 = x1047
()
}
val x1051 = x1029
x1051
} else {
false
}
val x1054 = x1024 && x1053
val x1092 = if (x1054) {
x802
} else {
val x1058 = x626 == x1057
val x1084 = if (x1058) {
var x1059: Int = 0
var x1060: Boolean = true
val x1081 = while ({val x1061 = x1059
val x1063 = x1060
val x1062 = x1061 < x626
val x1064 = x1062 && x1063
x1064}) {
val x1066 = x1059
val x1067 = x1066 + x484
val x1068 = x0(x1067)
val x1069 = x1068.toInt
val x1070 = x1069 | 32
val x1071 = x1070.toChar
val x1072 = x1056(x1066)
val x1074 = x1071 == x1072
val x1077 = if (x1074) {
()
} else {
x1060 = false
()
}
val x1078 = x1066 + 1
x1059 = x1078
()
}
val x1082 = x1060
x1082
} else {
false
}
val x1086 = if (x1084) {
x802
} else {
x802
}
x1086
}
val x1093 = if (x1054) {
x803
} else {
val x1058 = x626 == x1057
val x1084 = if (x1058) {
var x1059: Int = 0
var x1060: Boolean = true
val x1081 = while ({val x1061 = x1059
val x1063 = x1060
val x1062 = x1061 < x626
val x1064 = x1062 && x1063
x1064}) {
val x1066 = x1059
val x1067 = x1066 + x484
val x1068 = x0(x1067)
val x1069 = x1068.toInt
val x1070 = x1069 | 32
val x1071 = x1070.toChar
val x1072 = x1056(x1066)
val x1074 = x1071 == x1072
val x1077 = if (x1074) {
()
} else {
x1060 = false
()
}
val x1078 = x1066 + 1
x1059 = x1078
()
}
val x1082 = x1060
x1082
} else {
false
}
val x1087 = if (x1084) {
x803
} else {
x803
}
x1087
}
val x1094 = if (x1054) {
x804
} else {
val x1058 = x626 == x1057
val x1084 = if (x1058) {
var x1059: Int = 0
var x1060: Boolean = true
val x1081 = while ({val x1061 = x1059
val x1063 = x1060
val x1062 = x1061 < x626
val x1064 = x1062 && x1063
x1064}) {
val x1066 = x1059
val x1067 = x1066 + x484
val x1068 = x0(x1067)
val x1069 = x1068.toInt
val x1070 = x1069 | 32
val x1071 = x1070.toChar
val x1072 = x1056(x1066)
val x1074 = x1071 == x1072
val x1077 = if (x1074) {
()
} else {
x1060 = false
()
}
val x1078 = x1066 + 1
x1059 = x1078
()
}
val x1082 = x1060
x1082
} else {
false
}
val x1088 = if (x1084) {
x804
} else {
x804
}
x1088
}
val x1095 = if (x1054) {
true
} else {
val x1058 = x626 == x1057
val x1084 = if (x1058) {
var x1059: Int = 0
var x1060: Boolean = true
val x1081 = while ({val x1061 = x1059
val x1063 = x1060
val x1062 = x1061 < x626
val x1064 = x1062 && x1063
x1064}) {
val x1066 = x1059
val x1067 = x1066 + x484
val x1068 = x0(x1067)
val x1069 = x1068.toInt
val x1070 = x1069 | 32
val x1071 = x1070.toChar
val x1072 = x1056(x1066)
val x1074 = x1071 == x1072
val x1077 = if (x1074) {
()
} else {
x1060 = false
()
}
val x1078 = x1066 + 1
x1059 = x1078
()
}
val x1082 = x1060
x1082
} else {
false
}
val x1089 = if (x1084) {
x805
} else {
x805
}
x1089
}
val x1096 = if (x1054) {
x806
} else {
val x1058 = x626 == x1057
val x1084 = if (x1058) {
var x1059: Int = 0
var x1060: Boolean = true
val x1081 = while ({val x1061 = x1059
val x1063 = x1060
val x1062 = x1061 < x626
val x1064 = x1062 && x1063
x1064}) {
val x1066 = x1059
val x1067 = x1066 + x484
val x1068 = x0(x1067)
val x1069 = x1068.toInt
val x1070 = x1069 | 32
val x1071 = x1070.toChar
val x1072 = x1056(x1066)
val x1074 = x1071 == x1072
val x1077 = if (x1074) {
()
} else {
x1060 = false
()
}
val x1078 = x1066 + 1
x1059 = x1078
()
}
val x1082 = x1060
x1082
} else {
false
}
val x1090 = if (x1084) {
true
} else {
x806
}
x1090
}
val x1097 = new Anon1323431030(x1092,x1093,x1094,x1095,x1096)
x1097
}
x1098
}
val x1101 = x1099.status
x466 = x1101
val x1103 = x1099.contentLength
x467 = x1103
val x1105 = x1099.connection
x468 = x1105
val x1107 = x1099.chunked
x469 = x1107
val x1109 = x1099.upgrade
x470 = x1109
x472 = false
val x797 = x787 + 1
x473 = x797
x477 = x797
()
} else {
x476 = false
()
}
x1117
}
x1119
}
x1121
} else {
x476 = false
()
}
x1125
}
x1127
}
x1129
} else {
x476 = false
()
}
x1133
}
x1135
}
val x1138 = x466
val x1139 = x467
val x1140 = x468
val x1141 = x469
val x1142 = x470
val x1144 = x472
val x1145 = x473
val x1150 = if (x1144) {
true
} else {
false
}
val x1204 = if (x1150) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x1151 = if (x1144) {
0
} else {
x1145
}
val x1158 = x1151 >= x7
val x1202 = if (x1158) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x1164 = x0(x1151)
val x1165 = x1164 == '\n'
val x1200 = if (x1165) {
val x1166 = x1151 + 1
val x1149 = if (x1144) {
null
} else {
val x394 = if (x391) {
0
} else {
x390
}
val x1143 = new Anon1323431030(x1138,x1139,x1140,x1141,x1142)
val x1147 = new Tuple2IntAnon1323431030(x394,x1143)
x1147
}
val x1170 = x1149._2
val x1171 = x1170.contentLength
val x1177 = x1166 + x1171
val x1178 = x1177 < x7
val x1194 = if (x1178) {
val x1169 = x1149._1
val x1172 = x1170.connection
val x1173 = x1170.chunked
val x1174 = x1170.upgrade
val x1175 = new Anon1323431030(x1169,x1171,x1172,x1173,x1174)
val x1179 = new Anon1680061013(x0,x1166,x1171)
val x1180 = x1179.input.slice(x1179.start,x1179.start+x1179.length).mkString
val x1182 = new Tuple2Anon1323431030String(x1175,x1180)
x2 = x1182
x3 = false
x4 = x1177
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1194
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1200
}
x1202
}
x1204
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1210
}
x1212
}
x1214
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1220
}
x1222
}
x1224
}
x1226
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1232
}
x1234
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1240
}
x1242
}
x1244
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1250
}
x1252
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1258
}
x1260
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1266
}
x1268
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1274
}
x1276
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1282
}
x1284
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1290
}
val x1293 = x2
val x1294 = x3
val x1295 = x4
val x1296 = new ParseResultTuple2Anon1323431030String(x1293,x1294,x1295)
val x1297 = println(x1296)
x1297
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Anon1323431030(status: Int, contentLength: Int, connection: java.lang.String, chunked: Boolean, upgrade: Boolean)

case class Anon1680061013(input: Array[Char], start: Int, length: Int)

case class Tuple2Anon1323431030String(_1: Anon1323431030, _2: java.lang.String)

case class ParseResultInt(res: Int, empty: Boolean, next: Int)

case class ParseResultTuple2Anon1323431030String(res: Tuple2Anon1323431030String, empty: Boolean, next: Int)

case class Tuple2Anon1680061013Anon1680061013(_1: Anon1680061013, _2: Anon1680061013)

case class ParseResultAnon1323431030(res: Anon1323431030, empty: Boolean, next: Int)

case class Tuple2IntAnon1323431030(_1: Int, _2: Anon1323431030)

case class ParseResultString(res: java.lang.String, empty: Boolean, next: Int)
nVars=1000
compilation: ok
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,2,close,false,false),AA),false,248)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,0,close,true,false),),false,273)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,129,close,false,false),<html>
<head>
  <title>An Example Page</title>
</head>
<body>
  Hello World, this is a very simple HTML document.
</body>
</html>),false,377)
