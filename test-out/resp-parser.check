compilation: ok
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse(px1340:Array[Char],px1366:Array[Char],px1393:Array[Char],px1419:Array[Char],px1465:Array[Char],px1510:Array[Char],px1536:Array[Char],px1564:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x558:Array[Char]): Unit = {
var x560: Anon1323431030 = null
var x561: Boolean = true
var x562: Int = -1
val x565 = x558.length
val x566 = 0 >= x565
val x1782 = if (x566) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x573 = x558(0)
val x574 = x573 == 'H'
val x1780 = if (x574) {
val x20 = 0 + 1
val x576 = x20 >= x565
val x1774 = if (x576) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x581 = x558(x20)
val x582 = x581 == 'T'
val x1772 = if (x582) {
val x32 = x20 + 1
val x584 = x32 >= x565
val x1766 = if (x584) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x589 = x558(x32)
val x590 = x589 == 'T'
val x1764 = if (x590) {
val x44 = x32 + 1
val x592 = x44 >= x565
val x1758 = if (x592) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x597 = x558(x44)
val x598 = x597 == 'P'
val x1756 = if (x598) {
val x56 = x44 + 1
val x600 = x56 >= x565
val x1750 = if (x600) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x605 = x558(x56)
val x606 = x605 == '/'
val x1748 = if (x606) {
val x68 = x56 + 1
val x628 = x68 >= x565
val x1742 = if (x628) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x633 = x558(x68)
val x634 = x633 >= '0'
val x635 = x633 <= '9'
val x636 = x634 && x635
val x1740 = if (x636) {
val x638 = x633 - '0'
val x639 = x638.toInt
var x641: Int = x639
var x642: Boolean = false
val x103 = x68 + 1
var x643: Int = x103
var x645: Int = -1
var x646: Boolean = true
var x647: Int = x103
val x688 = while ({val x648 = x646
val x649 = x645
val x650 = x647
val x651 = x649 != x650
val x652 = x648 && x651
x652}) {
val x654 = x647
x645 = x654
val x656 = x654 >= x565
val x686 = if (x656) {
x646 = false
()
} else {
val x661 = x558(x654)
val x662 = x661 >= '0'
val x663 = x661 <= '9'
val x664 = x662 && x663
val x684 = if (x664) {
val x670 = x641
val x671 = x642
val x672 = x643
val x667 = x661 - '0'
val x668 = x667.toInt
val x674 = x670 * 10
val x675 = x674 + x668
x641 = x675
x642 = false
val x665 = x654 + 1
x643 = x665
x647 = x665
()
} else {
x646 = false
()
}
x684
}
x686
}
val x689 = x641
val x690 = x642
val x691 = x643
val x694 = if (x690) {
true
} else {
x690
}
val x1734 = if (x694) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x695 = if (x690) {
x68
} else {
x691
}
val x701 = x695 >= x565
val x1732 = if (x701) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x708 = x558(x695)
val x709 = x708 == '.'
val x1730 = if (x709) {
val x710 = x695 + 1
val x712 = x710 >= x565
val x1724 = if (x712) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x719 = x558(x710)
val x720 = x719 >= '0'
val x721 = x719 <= '9'
val x722 = x720 && x721
val x1722 = if (x722) {
val x725 = x719 - '0'
val x726 = x725.toInt
var x728: Int = x726
var x729: Boolean = false
val x723 = x710 + 1
var x730: Int = x723
var x732: Int = -1
var x733: Boolean = true
var x734: Int = x723
val x775 = while ({val x735 = x733
val x736 = x732
val x737 = x734
val x738 = x736 != x737
val x739 = x735 && x738
x739}) {
val x741 = x734
x732 = x741
val x743 = x741 >= x565
val x773 = if (x743) {
x733 = false
()
} else {
val x748 = x558(x741)
val x749 = x748 >= '0'
val x750 = x748 <= '9'
val x751 = x749 && x750
val x771 = if (x751) {
val x757 = x728
val x758 = x729
val x759 = x730
val x754 = x748 - '0'
val x755 = x754.toInt
val x761 = x757 * 10
val x762 = x761 + x755
x728 = x762
x729 = false
val x752 = x741 + 1
x730 = x752
x734 = x752
()
} else {
x733 = false
()
}
x771
}
x773
}
val x776 = x728
val x777 = x729
val x778 = x730
val x781 = if (x777) {
true
} else {
x777
}
val x787 = if (x781) {
true
} else {
false
}
val x793 = if (x787) {
true
} else {
false
}
val x1716 = if (x793) {
x560 = null
x561 = true
x562 = 0
()
} else {
var x801: java.lang.String = ""
var x802: Boolean = false
val x794 = if (x787) {
0
} else {
val x788 = if (x781) {
x68
} else {
val x782 = if (x777) {
x710
} else {
x778
}
x782
}
x788
}
var x803: Int = x794
var x805: Int = -1
var x806: Boolean = true
var x807: Int = x794
val x840 = while ({val x808 = x806
val x809 = x805
val x810 = x807
val x811 = x809 != x810
val x812 = x808 && x811
x812}) {
val x814 = x807
x805 = x814
val x816 = x814 >= x565
val x838 = if (x816) {
x806 = false
()
} else {
val x820 = x558(x814)
val x821 = x820 == ' '
val x836 = if (x821) {
val x824 = x801
val x825 = x802
val x826 = x803
x801 = x824
x802 = false
val x822 = x814 + 1
x803 = x822
x807 = x822
()
} else {
x806 = false
()
}
x836
}
x838
}
val x841 = x801
val x842 = x802
val x843 = x803
val x848 = if (x842) {
true
} else {
false
}
val x1714 = if (x848) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x849 = if (x842) {
0
} else {
x843
}
val x855 = x849 >= x565
val x1712 = if (x855) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x862 = x558(x849)
val x863 = x862 >= '0'
val x864 = x862 <= '9'
val x865 = x863 && x864
val x1710 = if (x865) {
val x868 = x862 - '0'
val x869 = x868.toInt
var x871: Int = x869
var x872: Boolean = false
val x866 = x849 + 1
var x873: Int = x866
var x875: Int = -1
var x876: Boolean = true
var x877: Int = x866
val x918 = while ({val x878 = x876
val x879 = x875
val x880 = x877
val x881 = x879 != x880
val x882 = x878 && x881
x882}) {
val x884 = x877
x875 = x884
val x886 = x884 >= x565
val x916 = if (x886) {
x876 = false
()
} else {
val x891 = x558(x884)
val x892 = x891 >= '0'
val x893 = x891 <= '9'
val x894 = x892 && x893
val x914 = if (x894) {
val x900 = x871
val x901 = x872
val x902 = x873
val x897 = x891 - '0'
val x898 = x897.toInt
val x904 = x900 * 10
val x905 = x904 + x898
x871 = x905
x872 = false
val x895 = x884 + 1
x873 = x895
x877 = x895
()
} else {
x876 = false
()
}
x914
}
x916
}
val x919 = x871
val x920 = x872
val x921 = x873
val x924 = if (x920) {
true
} else {
x920
}
val x1704 = if (x924) {
x560 = null
x561 = true
x562 = 0
()
} else {
var x932: Int = 0
var x933: Boolean = false
val x925 = if (x920) {
x849
} else {
x921
}
var x934: Int = x925
var x936: Int = -1
var x937: Boolean = true
var x938: Int = x925
val x973 = while ({val x939 = x937
val x940 = x936
val x941 = x938
val x942 = x940 != x941
val x943 = x939 && x942
x943}) {
val x945 = x938
x936 = x945
val x947 = x945 >= x565
val x971 = if (x947) {
x937 = false
()
} else {
val x951 = x558(x945)
val x953 = x951 == '\n'
val x969 = if (x953) {
x937 = false
()
} else {
val x958 = x932
val x959 = x933
val x960 = x934
val x962 = x958 + 1
x932 = x962
x933 = false
val x956 = x945 + 1
x934 = x956
x938 = x956
()
}
x969
}
x971
}
val x974 = x932
val x975 = x933
val x976 = x934
val x980 = x976 >= x565
val x1702 = if (x980) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x987 = x558(x976)
val x988 = x987 == '\n'
val x1700 = if (x988) {
var x995: Int = 200
var x996: Int = 0
var x997: java.lang.String = "close"
var x998: Boolean = false
var x999: Boolean = false
var x1001: Boolean = false
val x989 = x976 + 1
var x1002: Int = x989
var x1004: Int = -1
var x1005: Boolean = true
var x1006: Int = x989
val x1058 = {x1021: (Int) => 
var x1023: Int = 0
var x1024: Boolean = true
var x1025: Int = x1021
val x1027 = x1021 >= x565
val x1052 = if (x1027) {
x1023 = 0
x1024 = true
x1025 = x1021
()
} else {
val x1032 = x558(x1021)
val x1033 = x1032 >= 'a'
val x1034 = x1032 <= 'z'
val x1035 = x1033 && x1034
val x1036 = x1032 >= 'A'
val x1037 = x1032 <= 'Z'
val x1038 = x1036 && x1037
val x1039 = x1035 || x1038
val x1050 = if (x1039) {
x1023 = x1021
x1024 = false
val x1040 = x1021 + 1
x1025 = x1040
()
} else {
x1023 = 0
x1024 = true
x1025 = x1021
()
}
x1050
}
val x1053 = x1023
val x1054 = x1024
val x1055 = x1025
val x1056 = new ParseResultInt(x1053,x1054,x1055)
x1056: ParseResultInt
}
val x1094 = {x1015: (Int) => 
var x1017: Int = 0
var x1018: Boolean = true
var x1019: Int = x1015
val x1059 = x1058(x1015)
val x1060 = x1059.empty
val x1088 = if (x1060) {
val x1061 = x1015 >= x565
val x1080 = if (x1061) {
x1017 = 0
x1018 = true
x1019 = x1015
()
} else {
val x1066 = x558(x1015)
val x1067 = x1066 == '-'
val x1078 = if (x1067) {
x1017 = x1015
x1018 = false
val x1068 = x1015 + 1
x1019 = x1068
()
} else {
x1017 = 0
x1018 = true
x1019 = x1015
()
}
x1078
}
x1080
} else {
val x1082 = x1059.res
x1017 = x1082
x1018 = x1060
val x1085 = x1059.next
x1019 = x1085
()
}
val x1089 = x1017
val x1090 = x1018
val x1091 = x1019
val x1092 = new ParseResultInt(x1089,x1090,x1091)
x1092: ParseResultInt
}
val x1340 = px1340 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x1341 = x1340.length
val x1366 = px1366 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x1367 = x1366.length
val x1393 = px1393 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x1394 = x1393.length
val x1419 = px1419 // static data: Array(c,l,o,s,e)
val x1420 = x1419.length
val x1465 = px1465 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x1466 = x1465.length
val x1510 = px1510 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x1511 = x1510.length
val x1536 = px1536 // static data: Array(c,h,u,n,k,e,d)
val x1537 = x1536.length
val x1564 = px1564 // static data: Array(u,p,g,r,a,d,e)
val x1565 = x1564.length
val x1642 = while ({val x1007 = x1005
val x1008 = x1004
val x1009 = x1006
val x1010 = x1008 != x1009
val x1011 = x1007 && x1010
x1011}) {
val x1013 = x1006
x1004 = x1013
val x1095 = x1013 >= x565
val x1640 = if (x1095) {
x1005 = false
()
} else {
val x1102 = x558(x1013)
val x1103 = x1102 >= 'a'
val x1104 = x1102 <= 'z'
val x1105 = x1103 && x1104
val x1106 = x1102 >= 'A'
val x1107 = x1102 <= 'Z'
val x1108 = x1106 && x1107
val x1109 = x1105 || x1108
val x1638 = if (x1109) {
var x1113: Int = 0
var x1114: Boolean = false
val x1110 = x1013 + 1
var x1115: Int = x1110
var x1117: Int = -1
var x1118: Boolean = true
var x1119: Int = x1110
val x1146 = while ({val x1120 = x1118
val x1121 = x1117
val x1122 = x1119
val x1123 = x1121 != x1122
val x1124 = x1120 && x1123
x1124}) {
val x1126 = x1119
x1117 = x1126
val x1128 = x1094(x1126)
val x1129 = x1128.empty
val x1144 = if (x1129) {
x1118 = false
()
} else {
val x1132 = x1113
val x1133 = x1114
val x1134 = x1115
val x1136 = x1132 + 1
x1113 = x1136
x1114 = false
val x1137 = x1128.next
x1115 = x1137
x1119 = x1137
()
}
x1144
}
val x1147 = x1113
val x1148 = x1114
val x1149 = x1115
var x1159: java.lang.String = ""
var x1160: Boolean = false
var x1161: Int = x1149
var x1163: Int = -1
var x1164: Boolean = true
var x1165: Int = x1149
val x1198 = while ({val x1166 = x1164
val x1167 = x1163
val x1168 = x1165
val x1169 = x1167 != x1168
val x1170 = x1166 && x1169
x1170}) {
val x1172 = x1165
x1163 = x1172
val x1174 = x1172 >= x565
val x1196 = if (x1174) {
x1164 = false
()
} else {
val x1178 = x558(x1172)
val x1179 = x1178 == ' '
val x1194 = if (x1179) {
val x1182 = x1159
val x1183 = x1160
val x1184 = x1161
x1159 = x1182
x1160 = false
val x1180 = x1172 + 1
x1161 = x1180
x1165 = x1180
()
} else {
x1164 = false
()
}
x1194
}
x1196
}
val x1199 = x1159
val x1200 = x1160
val x1201 = x1161
val x1634 = if (x1200) {
x1005 = false
()
} else {
val x1206 = x1201 >= x565
val x1632 = if (x1206) {
x1005 = false
()
} else {
val x1212 = x558(x1201)
val x1213 = x1212 == ':'
val x1630 = if (x1213) {
var x1224: java.lang.String = ""
var x1225: Boolean = false
val x1214 = x1201 + 1
var x1226: Int = x1214
var x1228: Int = -1
var x1229: Boolean = true
var x1230: Int = x1214
val x1263 = while ({val x1231 = x1229
val x1232 = x1228
val x1233 = x1230
val x1234 = x1232 != x1233
val x1235 = x1231 && x1234
x1235}) {
val x1237 = x1230
x1228 = x1237
val x1239 = x1237 >= x565
val x1261 = if (x1239) {
x1229 = false
()
} else {
val x1243 = x558(x1237)
val x1244 = x1243 == ' '
val x1259 = if (x1244) {
val x1247 = x1224
val x1248 = x1225
val x1249 = x1226
x1224 = x1247
x1225 = false
val x1245 = x1237 + 1
x1226 = x1245
x1230 = x1245
()
} else {
x1229 = false
()
}
x1259
}
x1261
}
val x1264 = x1224
val x1265 = x1225
val x1266 = x1226
val x1626 = if (x1265) {
x1005 = false
()
} else {
var x1272: Int = 0
var x1273: Boolean = false
var x1274: Int = x1266
var x1276: Int = -1
var x1277: Boolean = true
var x1278: Int = x1266
val x1313 = while ({val x1279 = x1277
val x1280 = x1276
val x1281 = x1278
val x1282 = x1280 != x1281
val x1283 = x1279 && x1282
x1283}) {
val x1285 = x1278
x1276 = x1285
val x1287 = x1285 >= x565
val x1311 = if (x1287) {
x1277 = false
()
} else {
val x1291 = x558(x1285)
val x1293 = x1291 == '\n'
val x1309 = if (x1293) {
x1277 = false
()
} else {
val x1298 = x1272
val x1299 = x1273
val x1300 = x1274
val x1302 = x1298 + 1
x1272 = x1302
x1273 = false
val x1296 = x1285 + 1
x1274 = x1296
x1278 = x1296
()
}
x1309
}
x1311
}
val x1314 = x1272
val x1315 = x1273
val x1316 = x1274
val x1320 = x1316 >= x565
val x1624 = if (x1320) {
x1005 = false
()
} else {
val x1324 = x558(x1316)
val x1325 = x1324 == '\n'
val x1622 = if (x1325) {
val x1331 = x995
val x1332 = x996
val x1333 = x997
val x1334 = x998
val x1335 = x999
val x1337 = x1001
val x1338 = x1002
val x1155 = x1147 + 1
val x1342 = x1155 == x1341
val x1365 = if (x1342) {
var x1343: Int = 0
var x1344: Boolean = true
val x1362 = while ({val x1345 = x1343
val x1347 = x1344
val x1346 = x1345 < x1155
val x1348 = x1346 && x1347
x1348}) {
val x1350 = x1343
val x1351 = x1350 + x1013
val x1352 = x558(x1351)
val x1353 = x1340(x1350)
val x1355 = x1352 == x1353
val x1358 = if (x1355) {
()
} else {
x1344 = false
()
}
val x1359 = x1350 + 1
x1343 = x1359
()
}
val x1363 = x1344
x1363
} else {
false
}
val x1368 = x1155 == x1367
val x1391 = if (x1368) {
var x1369: Int = 0
var x1370: Boolean = true
val x1388 = while ({val x1371 = x1369
val x1373 = x1370
val x1372 = x1371 < x1155
val x1374 = x1372 && x1373
x1374}) {
val x1376 = x1369
val x1377 = x1376 + x1013
val x1378 = x558(x1377)
val x1379 = x1366(x1376)
val x1381 = x1378 == x1379
val x1384 = if (x1381) {
()
} else {
x1370 = false
()
}
val x1385 = x1376 + 1
x1369 = x1385
()
}
val x1389 = x1370
x1389
} else {
false
}
val x1392 = x1365 || x1391
val x1395 = x1314 == x1394
val x1418 = if (x1395) {
var x1396: Int = 0
var x1397: Boolean = true
val x1415 = while ({val x1398 = x1396
val x1400 = x1397
val x1399 = x1398 < x1314
val x1401 = x1399 && x1400
x1401}) {
val x1403 = x1396
val x1404 = x1403 + x1266
val x1405 = x558(x1404)
val x1406 = x1393(x1403)
val x1408 = x1405 == x1406
val x1411 = if (x1408) {
()
} else {
x1397 = false
()
}
val x1412 = x1403 + 1
x1396 = x1412
()
}
val x1416 = x1397
x1416
} else {
false
}
val x1421 = x1314 == x1420
val x1444 = if (x1421) {
var x1422: Int = 0
var x1423: Boolean = true
val x1441 = while ({val x1424 = x1422
val x1426 = x1423
val x1425 = x1424 < x1314
val x1427 = x1425 && x1426
x1427}) {
val x1429 = x1422
val x1430 = x1429 + x1266
val x1431 = x558(x1430)
val x1432 = x1419(x1429)
val x1434 = x1431 == x1432
val x1437 = if (x1434) {
()
} else {
x1423 = false
()
}
val x1438 = x1429 + 1
x1422 = x1438
()
}
val x1442 = x1423
x1442
} else {
false
}
val x1445 = x1418 || x1444
val x1446 = x1392 && x1445
val x1604 = if (x1446) {
var x1447: java.lang.String = ""
var x1448: Int = 0
val x1461 = while ({val x1449 = x1448
val x1450 = x1449 < x1314
x1450}) {
val x1452 = x1447
val x1453 = x1448
val x1454 = x1266 + x1453
val x1455 = x558(x1454)
val x1456 = x1452+x1455
x1447 = x1456
val x1458 = x1453 + 1
x1448 = x1458
()
}
val x1462 = x1447
val x1463 = new Anon1323431030(x1331,x1332,x1462,x1334,x1335)
x1463
} else {
val x1467 = x1155 == x1466
val x1490 = if (x1467) {
var x1468: Int = 0
var x1469: Boolean = true
val x1487 = while ({val x1470 = x1468
val x1472 = x1469
val x1471 = x1470 < x1155
val x1473 = x1471 && x1472
x1473}) {
val x1475 = x1468
val x1476 = x1475 + x1013
val x1477 = x558(x1476)
val x1478 = x1465(x1475)
val x1480 = x1477 == x1478
val x1483 = if (x1480) {
()
} else {
x1469 = false
()
}
val x1484 = x1475 + 1
x1468 = x1484
()
}
val x1488 = x1469
x1488
} else {
false
}
val x1603 = if (x1490) {
var x1491: java.lang.String = ""
var x1492: Int = 0
val x1505 = while ({val x1493 = x1492
val x1494 = x1493 < x1314
x1494}) {
val x1496 = x1491
val x1497 = x1492
val x1498 = x1266 + x1497
val x1499 = x558(x1498)
val x1500 = x1496+x1499
x1491 = x1500
val x1502 = x1497 + 1
x1492 = x1502
()
}
val x1506 = x1491
val x1507 = x1506.toInt
val x1508 = new Anon1323431030(x1331,x1507,x1333,x1334,x1335)
x1508
} else {
val x1512 = x1155 == x1511
val x1535 = if (x1512) {
var x1513: Int = 0
var x1514: Boolean = true
val x1532 = while ({val x1515 = x1513
val x1517 = x1514
val x1516 = x1515 < x1155
val x1518 = x1516 && x1517
x1518}) {
val x1520 = x1513
val x1521 = x1520 + x1013
val x1522 = x558(x1521)
val x1523 = x1510(x1520)
val x1525 = x1522 == x1523
val x1528 = if (x1525) {
()
} else {
x1514 = false
()
}
val x1529 = x1520 + 1
x1513 = x1529
()
}
val x1533 = x1514
x1533
} else {
false
}
val x1538 = x1314 == x1537
val x1561 = if (x1538) {
var x1539: Int = 0
var x1540: Boolean = true
val x1558 = while ({val x1541 = x1539
val x1543 = x1540
val x1542 = x1541 < x1314
val x1544 = x1542 && x1543
x1544}) {
val x1546 = x1539
val x1547 = x1546 + x1266
val x1548 = x558(x1547)
val x1549 = x1536(x1546)
val x1551 = x1548 == x1549
val x1554 = if (x1551) {
()
} else {
x1540 = false
()
}
val x1555 = x1546 + 1
x1539 = x1555
()
}
val x1559 = x1540
x1559
} else {
false
}
val x1562 = x1535 && x1561
val x1597 = if (x1562) {
x1331
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1591 = if (x1589) {
x1331
} else {
x1331
}
x1591
}
val x1598 = if (x1562) {
x1332
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1592 = if (x1589) {
x1332
} else {
x1332
}
x1592
}
val x1599 = if (x1562) {
x1333
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1593 = if (x1589) {
x1333
} else {
x1333
}
x1593
}
val x1600 = if (x1562) {
true
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1594 = if (x1589) {
x1334
} else {
x1334
}
x1594
}
val x1601 = if (x1562) {
x1335
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1595 = if (x1589) {
true
} else {
x1335
}
x1595
}
val x1602 = new Anon1323431030(x1597,x1598,x1599,x1600,x1601)
x1602
}
x1603
}
val x1606 = x1604.status
x995 = x1606
val x1608 = x1604.contentLength
x996 = x1608
val x1610 = x1604.connection
x997 = x1610
val x1612 = x1604.chunked
x998 = x1612
val x1614 = x1604.upgrade
x999 = x1614
x1001 = false
val x1326 = x1316 + 1
x1002 = x1326
x1006 = x1326
()
} else {
x1005 = false
()
}
x1622
}
x1624
}
x1626
} else {
x1005 = false
()
}
x1630
}
x1632
}
x1634
} else {
x1005 = false
()
}
x1638
}
x1640
}
val x1643 = x995
val x1644 = x996
val x1645 = x997
val x1646 = x998
val x1647 = x999
val x1649 = x1001
val x1650 = x1002
val x1655 = if (x1649) {
true
} else {
false
}
val x1694 = if (x1655) {
x560 = null
x561 = true
val x1656 = if (x1649) {
0
} else {
x1650
}
x562 = x1656
()
} else {
val x1656 = if (x1649) {
0
} else {
x1650
}
val x1663 = x1656 >= x565
val x1692 = if (x1663) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x1669 = x558(x1656)
val x1670 = x1669 == '\n'
val x1690 = if (x1670) {
val x1654 = if (x1649) {
null
} else {
val x923 = if (x920) {
0
} else {
x919
}
val x1648 = new Anon1323431030(x1643,x1644,x1645,x1646,x1647)
val x1652 = new Tuple2IntAnon1323431030(x923,x1648)
x1652
}
val x1674 = x1654._1
val x1675 = x1654._2
val x1676 = x1675.contentLength
val x1677 = x1675.connection
val x1678 = x1675.chunked
val x1679 = x1675.upgrade
val x1680 = new Anon1323431030(x1674,x1676,x1677,x1678,x1679)
x560 = x1680
x561 = false
val x1671 = x1656 + 1
x562 = x1671
()
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1690
}
x1692
}
x1694
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1700
}
x1702
}
x1704
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1710
}
x1712
}
x1714
}
x1716
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1722
}
x1724
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1730
}
x1732
}
x1734
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1740
}
x1742
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1748
}
x1750
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1756
}
x1758
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1764
}
x1766
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1772
}
x1774
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1780
}
val x1783 = x560
val x1784 = x561
val x1785 = x562
val x1786 = new ParseResultAnon1323431030(x1783,x1784,x1785)
val x1787 = println(x1786)
x1787
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=2000
nVars=3000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(418,0,close,false,false),false,258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(Unit)) {
def apply(x3016:Array[Char]): Unit = {
var x3018: java.lang.String = null
var x3019: Boolean = true
var x3020: Int = -1
val x3022 = 0 + 14
val x3023 = x3016.length
val x3024 = x3022 < x3023
val x3036 = if (x3024) {
val x3025 = new Anon1680061013(x3016,0,x3022)
val x3026 = x3025.input.slice(x3025.start,x3025.start+x3025.length).mkString
x3018 = x3026
x3019 = false
x3020 = 14
()
} else {
x3018 = null
x3019 = true
x3020 = 0
()
}
val x3037 = x3018
val x3038 = x3019
val x3039 = x3020
val x3040 = new ParseResultString(x3037,x3038,x3039)
val x3041 = println(x3040)
x3041
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Make it funky!,false,14)
