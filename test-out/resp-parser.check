/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
val x1 = null.asInstanceOf[Int]
var x3: Int = x1
var x4: Boolean = true
var x5: Int = -1
val x8 = x0.length
val x9 = 0 >= x8
val x495 = if (x9) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x12 = x0(0)
val x13 = x12 == 'H'
val x493 = if (x13) {
val x14 = 0 + 1
val x30 = x14 >= x8
val x487 = if (x30) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x32 = x0(x14)
val x33 = x32 == 'T'
val x485 = if (x33) {
val x34 = x14 + 1
val x42 = x34 >= x8
val x479 = if (x42) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x44 = x0(x34)
val x45 = x44 == 'T'
val x477 = if (x45) {
val x46 = x34 + 1
val x55 = x46 >= x8
val x471 = if (x55) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x57 = x0(x46)
val x58 = x57 == 'P'
val x469 = if (x58) {
val x59 = x46 + 1
val x68 = x59 >= x8
val x463 = if (x68) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x70 = x0(x59)
val x71 = x70 == '/'
val x461 = if (x71) {
var x103: Int = 0
var x104: Boolean = false
val x72 = x59 + 1
var x105: Int = x72
var x107: Int = -1
var x108: Boolean = true
var x109: Int = x72
val x150 = while ({val x110 = x108
val x111 = x107
val x112 = x109
val x113 = x111 != x112
val x114 = x110 && x113
x114}) {
val x116 = x109
x107 = x116
val x118 = x116 >= x8
val x148 = if (x118) {
x108 = false
()
} else {
val x120 = x0(x116)
val x121 = x120 >= '0'
val x122 = x120 <= '9'
val x123 = x121 && x122
val x146 = if (x123) {
val x132 = x103
val x133 = x104
val x134 = x105
val x129 = x120 - '0'
val x130 = x129.toInt
val x136 = x132 * 10
val x137 = x136 + x130
x103 = x137
x104 = false
val x124 = x116 + 1
x105 = x124
x109 = x124
()
} else {
x108 = false
()
}
x146
}
x148
}
val x151 = x103
val x152 = x104
val x153 = x105
val x455 = if (x152) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x157 = x153 >= x8
val x453 = if (x157) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x159 = x0(x153)
val x160 = x159 == '.'
val x451 = if (x160) {
var x173: Int = 0
var x174: Boolean = false
val x161 = x153 + 1
var x175: Int = x161
var x177: Int = -1
var x178: Boolean = true
var x179: Int = x161
val x220 = while ({val x180 = x178
val x181 = x177
val x182 = x179
val x183 = x181 != x182
val x184 = x180 && x183
x184}) {
val x186 = x179
x177 = x186
val x188 = x186 >= x8
val x218 = if (x188) {
x178 = false
()
} else {
val x190 = x0(x186)
val x191 = x190 >= '0'
val x192 = x190 <= '9'
val x193 = x191 && x192
val x216 = if (x193) {
val x202 = x173
val x203 = x174
val x204 = x175
val x199 = x190 - '0'
val x200 = x199.toInt
val x206 = x202 * 10
val x207 = x206 + x200
x173 = x207
x174 = false
val x194 = x186 + 1
x175 = x194
x179 = x194
()
} else {
x178 = false
()
}
x216
}
x218
}
val x221 = x173
val x222 = x174
val x223 = x175
val x228 = if (x222) {
true
} else {
false
}
val x234 = if (x228) {
true
} else {
false
}
val x445 = if (x234) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x7 = List()
var x242: scala.collection.immutable.List[Char] = x7
var x243: Boolean = false
val x235 = if (x228) {
0
} else {
val x229 = if (x222) {
x72
} else {
x223
}
x229
}
var x244: Int = x235
var x246: Int = -1
var x247: Boolean = true
var x248: Int = x235
val x283 = while ({val x249 = x247
val x250 = x246
val x251 = x248
val x252 = x250 != x251
val x253 = x249 && x252
x253}) {
val x255 = x248
x246 = x255
val x257 = x255 >= x8
val x281 = if (x257) {
x247 = false
()
} else {
val x259 = x0(x255)
val x260 = x259 == ' '
val x279 = if (x260) {
val x265 = x242
val x266 = x243
val x267 = x244
val x269 = List(x259)
val x270 = x265 ::: x269
x242 = x270
x243 = false
val x261 = x255 + 1
x244 = x261
x248 = x261
()
} else {
x247 = false
()
}
x279
}
x281
}
val x284 = x242
val x285 = x243
val x286 = x244
val x291 = if (x285) {
true
} else {
false
}
val x297 = if (x291) {
true
} else {
false
}
val x443 = if (x297) {
x3 = x1
x4 = true
x5 = 0
()
} else {
var x305: Int = 0
var x306: Boolean = false
val x298 = if (x291) {
0
} else {
val x292 = if (x285) {
x286
} else {
x286
}
x292
}
var x307: Int = x298
var x309: Int = -1
var x310: Boolean = true
var x311: Int = x298
val x352 = while ({val x312 = x310
val x313 = x309
val x314 = x311
val x315 = x313 != x314
val x316 = x312 && x315
x316}) {
val x318 = x311
x309 = x318
val x320 = x318 >= x8
val x350 = if (x320) {
x310 = false
()
} else {
val x322 = x0(x318)
val x323 = x322 >= '0'
val x324 = x322 <= '9'
val x325 = x323 && x324
val x348 = if (x325) {
val x334 = x305
val x335 = x306
val x336 = x307
val x331 = x322 - '0'
val x332 = x331.toInt
val x338 = x334 * 10
val x339 = x338 + x332
x305 = x339
x306 = false
val x326 = x318 + 1
x307 = x326
x311 = x326
()
} else {
x310 = false
()
}
x348
}
x350
}
val x353 = x305
val x354 = x306
val x355 = x307
val x441 = if (x354) {
x3 = x353
x4 = x354
x5 = x355
()
} else {
var x362: java.lang.String = ""
var x363: Boolean = false
var x364: Int = x355
var x366: Int = -1
var x367: Boolean = true
var x368: Int = x355
val x403 = while ({val x369 = x367
val x370 = x366
val x371 = x368
val x372 = x370 != x371
val x373 = x369 && x372
x373}) {
val x375 = x368
x366 = x375
val x377 = x375 >= x8
val x401 = if (x377) {
x367 = false
()
} else {
val x379 = x0(x375)
val x385 = x379 == '
'
val x399 = if (x385) {
x367 = false
()
} else {
val x388 = x362
val x389 = x363
val x390 = x364
val x392 = x388+x379
x362 = x392
x363 = false
val x381 = x375 + 1
x364 = x381
x368 = x381
()
}
x399
}
x401
}
val x404 = x362
val x405 = x363
val x406 = x364
val x439 = if (x405) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x410 = x406 >= x8
val x437 = if (x410) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x412 = x0(x406)
val x413 = x412 == '
'
val x435 = if (x413) {
x3 = x353
x4 = false
val x414 = x406 + 1
x5 = x414
()
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x435
}
x437
}
x439
}
x441
}
x443
}
x445
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x451
}
x453
}
x455
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x461
}
x463
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x469
}
x471
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x477
}
x479
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x485
}
x487
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x493
}
val x496 = x3
val x497 = x4
val x498 = x5
val x499 = new ParseResultInt(x496,x497,x498)
val x500 = println(x499)
x500
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultInt(200,false,16)
ParseResultInt(418,false,26)
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerNameParse extends ((Array[Char])=>(Unit)) {
def apply(x967:Array[Char]): Unit = {
val x19 = null.asInstanceOf[java.lang.String]
var x969: java.lang.String = x19
var x970: Boolean = true
var x971: Int = -1
val x985 = x967.length
val x1054 = 0 >= x985
val x1139 = if (x1054) {
x969 = x19
x970 = true
x971 = 0
()
} else {
val x1055 = x967(0)
val x1056 = x1055 >= 'a'
val x1057 = x1055 <= 'z'
val x1058 = x1056 && x1057
val x1059 = x1055 >= 'A'
val x1060 = x1055 <= 'Z'
val x1061 = x1059 && x1060
val x1062 = x1058 || x1061
val x1137 = if (x1062) {
var x1069: java.lang.String = ""
var x1070: Boolean = false
val x14 = 0 + 1
var x1071: Int = x14
var x1073: Int = -1
var x1074: Boolean = true
var x1075: Int = x14
val x10 = null.asInstanceOf[Char]
val x1017 = {x979: (Int) => 
var x981: Char = x10
var x982: Boolean = true
var x983: Int = x979
val x986 = x979 >= x985
val x1011 = if (x986) {
x981 = x10
x982 = true
x983 = x979
()
} else {
val x987 = x967(x979)
val x988 = x987 >= 'a'
val x989 = x987 <= 'z'
val x990 = x988 && x989
val x991 = x987 >= 'A'
val x992 = x987 <= 'Z'
val x993 = x991 && x992
val x994 = x990 || x993
val x1009 = if (x994) {
x981 = x987
x982 = false
val x995 = x979 + 1
x983 = x995
()
} else {
x981 = x10
x982 = true
x983 = x979
()
}
x1009
}
val x1012 = x981
val x1013 = x982
val x1014 = x983
val x1015 = new ParseResultChar(x1012,x1013,x1014)
x1015
}
val x1053 = {x973: (Int) => 
var x975: Char = x10
var x976: Boolean = true
var x977: Int = x973
val x1018 = x1017(x973)
val x1019 = x1018.empty
val x1047 = if (x1019) {
val x1020 = x973 >= x985
val x1039 = if (x1020) {
x975 = x10
x976 = true
x977 = x973
()
} else {
val x1021 = x967(x973)
val x1022 = x1021 == '-'
val x1037 = if (x1022) {
x975 = x1021
x976 = false
val x1023 = x973 + 1
x977 = x1023
()
} else {
x975 = x10
x976 = true
x977 = x973
()
}
x1037
}
x1039
} else {
val x1041 = x1018.res
x975 = x1041
x976 = x1019
val x1044 = x1018.next
x977 = x1044
()
}
val x1048 = x975
val x1049 = x976
val x1050 = x977
val x1051 = new ParseResultChar(x1048,x1049,x1050)
x1051
}
val x1106 = while ({val x1076 = x1074
val x1077 = x1073
val x1078 = x1075
val x1079 = x1077 != x1078
val x1080 = x1076 && x1079
x1080}) {
val x1082 = x1075
x1073 = x1082
val x1084 = x1053(x1082)
val x1085 = x1084.empty
val x1104 = if (x1085) {
x1074 = false
()
} else {
val x1088 = x1069
val x1089 = x1070
val x1090 = x1071
val x1092 = x1084.res
val x1093 = x1092.toInt
val x1094 = x1093 | 32
val x1095 = x1094.toChar
val x1096 = x1088+x1095
x1069 = x1096
x1070 = false
val x1097 = x1084.next
x1071 = x1097
x1075 = x1097
()
}
x1104
}
val x1107 = x1069
val x1108 = x1070
val x1109 = x1071
val x1114 = if (x1108) {
true
} else {
false
}
val x1125 = if (x1114) {
x19
} else {
val x1113 = if (x1108) {
val x16 = null.asInstanceOf[Tuple2CharString]
x16
} else {
val x1111 = new Tuple2CharString(x1055,x1107)
x1111
}
val x1119 = x1113._2
val x1118 = x1113._1
val x1120 = x1118.toInt
val x1121 = x1120 | 32
val x1122 = x1121.toChar
val x1123 = x1122+x1119
x1123
}
x969 = x1125
val x1126 = if (x1114) {
true
} else {
false
}
x970 = x1126
val x1115 = if (x1108) {
0
} else {
x1109
}
val x1127 = if (x1114) {
x1115
} else {
x1115
}
x971 = x1127
()
} else {
x969 = x19
x970 = true
x971 = 0
()
}
x1137
}
val x1140 = x969
val x1141 = x970
val x1142 = x971
val x1143 = new ParseResultString(x1140,x1141,x1142)
val x1144 = println(x1143)
x1144
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(date,false,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerParse extends ((Array[Char])=>(Unit)) {
def apply(x1323:Array[Char]): Unit = {
val x1324 = null.asInstanceOf[Tuple2StringString]
var x1326: Tuple2StringString = x1324
var x1327: Boolean = true
var x1328: Int = -1
val x1342 = x1323.length
val x1411 = 0 >= x1342
val x1731 = if (x1411) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
val x1412 = x1323(0)
val x1413 = x1412 >= 'a'
val x1414 = x1412 <= 'z'
val x1415 = x1413 && x1414
val x1416 = x1412 >= 'A'
val x1417 = x1412 <= 'Z'
val x1418 = x1416 && x1417
val x1419 = x1415 || x1418
val x1729 = if (x1419) {
var x1426: java.lang.String = ""
var x1427: Boolean = false
val x14 = 0 + 1
var x1428: Int = x14
var x1430: Int = -1
var x1431: Boolean = true
var x1432: Int = x14
val x10 = null.asInstanceOf[Char]
val x1374 = {x1336: (Int) => 
var x1338: Char = x10
var x1339: Boolean = true
var x1340: Int = x1336
val x1343 = x1336 >= x1342
val x1368 = if (x1343) {
x1338 = x10
x1339 = true
x1340 = x1336
()
} else {
val x1344 = x1323(x1336)
val x1345 = x1344 >= 'a'
val x1346 = x1344 <= 'z'
val x1347 = x1345 && x1346
val x1348 = x1344 >= 'A'
val x1349 = x1344 <= 'Z'
val x1350 = x1348 && x1349
val x1351 = x1347 || x1350
val x1366 = if (x1351) {
x1338 = x1344
x1339 = false
val x1352 = x1336 + 1
x1340 = x1352
()
} else {
x1338 = x10
x1339 = true
x1340 = x1336
()
}
x1366
}
val x1369 = x1338
val x1370 = x1339
val x1371 = x1340
val x1372 = new ParseResultChar(x1369,x1370,x1371)
x1372
}
val x1410 = {x1330: (Int) => 
var x1332: Char = x10
var x1333: Boolean = true
var x1334: Int = x1330
val x1375 = x1374(x1330)
val x1376 = x1375.empty
val x1404 = if (x1376) {
val x1377 = x1330 >= x1342
val x1396 = if (x1377) {
x1332 = x10
x1333 = true
x1334 = x1330
()
} else {
val x1378 = x1323(x1330)
val x1379 = x1378 == '-'
val x1394 = if (x1379) {
x1332 = x1378
x1333 = false
val x1380 = x1330 + 1
x1334 = x1380
()
} else {
x1332 = x10
x1333 = true
x1334 = x1330
()
}
x1394
}
x1396
} else {
val x1398 = x1375.res
x1332 = x1398
x1333 = x1376
val x1401 = x1375.next
x1334 = x1401
()
}
val x1405 = x1332
val x1406 = x1333
val x1407 = x1334
val x1408 = new ParseResultChar(x1405,x1406,x1407)
x1408
}
val x1463 = while ({val x1433 = x1431
val x1434 = x1430
val x1435 = x1432
val x1436 = x1434 != x1435
val x1437 = x1433 && x1436
x1437}) {
val x1439 = x1432
x1430 = x1439
val x1441 = x1410(x1439)
val x1442 = x1441.empty
val x1461 = if (x1442) {
x1431 = false
()
} else {
val x1445 = x1426
val x1446 = x1427
val x1447 = x1428
val x1449 = x1441.res
val x1450 = x1449.toInt
val x1451 = x1450 | 32
val x1452 = x1451.toChar
val x1453 = x1445+x1452
x1426 = x1453
x1427 = false
val x1454 = x1441.next
x1428 = x1454
x1432 = x1454
()
}
x1461
}
val x1464 = x1426
val x1465 = x1427
val x1466 = x1428
val x1471 = if (x1465) {
true
} else {
false
}
val x1483 = if (x1471) {
true
} else {
false
}
val x1723 = if (x1483) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
val x7 = List()
var x1491: scala.collection.immutable.List[Char] = x7
var x1492: Boolean = false
val x1472 = if (x1465) {
0
} else {
x1466
}
val x1484 = if (x1471) {
x1472
} else {
x1472
}
var x1493: Int = x1484
var x1495: Int = -1
var x1496: Boolean = true
var x1497: Int = x1484
val x1532 = while ({val x1498 = x1496
val x1499 = x1495
val x1500 = x1497
val x1501 = x1499 != x1500
val x1502 = x1498 && x1501
x1502}) {
val x1504 = x1497
x1495 = x1504
val x1506 = x1504 >= x1342
val x1530 = if (x1506) {
x1496 = false
()
} else {
val x1508 = x1323(x1504)
val x1509 = x1508 == ' '
val x1528 = if (x1509) {
val x1514 = x1491
val x1515 = x1492
val x1516 = x1493
val x1518 = List(x1508)
val x1519 = x1514 ::: x1518
x1491 = x1519
x1492 = false
val x1510 = x1504 + 1
x1493 = x1510
x1497 = x1510
()
} else {
x1496 = false
()
}
x1528
}
x1530
}
val x1533 = x1491
val x1534 = x1492
val x1535 = x1493
val x1540 = if (x1534) {
true
} else {
false
}
val x1721 = if (x1540) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
val x1541 = if (x1534) {
x1535
} else {
x1535
}
val x1544 = x1541 >= x1342
val x1719 = if (x1544) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
val x1546 = x1323(x1541)
val x1547 = x1546 == ':'
val x1717 = if (x1547) {
var x1570: scala.collection.immutable.List[Char] = x7
var x1571: Boolean = false
val x1548 = x1541 + 1
var x1572: Int = x1548
var x1574: Int = -1
var x1575: Boolean = true
var x1576: Int = x1548
val x1611 = while ({val x1577 = x1575
val x1578 = x1574
val x1579 = x1576
val x1580 = x1578 != x1579
val x1581 = x1577 && x1580
x1581}) {
val x1583 = x1576
x1574 = x1583
val x1585 = x1583 >= x1342
val x1609 = if (x1585) {
x1575 = false
()
} else {
val x1587 = x1323(x1583)
val x1588 = x1587 == ' '
val x1607 = if (x1588) {
val x1593 = x1570
val x1594 = x1571
val x1595 = x1572
val x1597 = List(x1587)
val x1598 = x1593 ::: x1597
x1570 = x1598
x1571 = false
val x1589 = x1583 + 1
x1572 = x1589
x1576 = x1589
()
} else {
x1575 = false
()
}
x1607
}
x1609
}
val x1612 = x1570
val x1613 = x1571
val x1614 = x1572
val x1619 = if (x1613) {
true
} else {
false
}
val x1711 = if (x1619) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
var x1634: java.lang.String = ""
var x1635: Boolean = false
val x1620 = if (x1613) {
x1614
} else {
x1614
}
var x1636: Int = x1620
var x1638: Int = -1
var x1639: Boolean = true
var x1640: Int = x1620
val x1675 = while ({val x1641 = x1639
val x1642 = x1638
val x1643 = x1640
val x1644 = x1642 != x1643
val x1645 = x1641 && x1644
x1645}) {
val x1647 = x1640
x1638 = x1647
val x1649 = x1647 >= x1342
val x1673 = if (x1649) {
x1639 = false
()
} else {
val x1651 = x1323(x1647)
val x1657 = x1651 == '
'
val x1671 = if (x1657) {
x1639 = false
()
} else {
val x1660 = x1634
val x1661 = x1635
val x1662 = x1636
val x1664 = x1660+x1651
x1634 = x1664
x1635 = false
val x1653 = x1647 + 1
x1636 = x1653
x1640 = x1653
()
}
x1671
}
x1673
}
val x1676 = x1634
val x1677 = x1635
val x1678 = x1636
val x1709 = if (x1677) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
val x1680 = x1678 >= x1342
val x1707 = if (x1680) {
x1326 = x1324
x1327 = true
x1328 = 0
()
} else {
val x1682 = x1323(x1678)
val x1683 = x1682 == '
'
val x1705 = if (x1683) {
val x1482 = if (x1471) {
val x19 = null.asInstanceOf[java.lang.String]
x19
} else {
val x1470 = if (x1465) {
val x16 = null.asInstanceOf[Tuple2CharString]
x16
} else {
val x1468 = new Tuple2CharString(x1412,x1464)
x1468
}
val x1476 = x1470._2
val x1475 = x1470._1
val x1477 = x1475.toInt
val x1478 = x1477 | 32
val x1479 = x1478.toChar
val x1480 = x1479+x1476
x1480
}
val x1695 = new Tuple2StringString(x1482,x1676)
x1326 = x1695
x1327 = false
val x1684 = x1678 + 1
x1328 = x1684
()
} else {
x1326 = x1324
x1327 = true
x1328 = 0
()
}
x1705
}
x1707
}
x1709
}
x1711
} else {
x1326 = x1324
x1327 = true
x1328 = 0
()
}
x1717
}
x1719
}
x1721
}
x1723
} else {
x1326 = x1324
x1327 = true
x1328 = 0
()
}
x1729
}
val x1732 = x1326
val x1733 = x1327
val x1734 = x1328
val x1735 = new ParseResultTuple2StringString(x1732,x1733,x1734)
val x1736 = println(x1735)
x1736
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=2000
compilation: ok
ParseResultTuple2StringString(Tuple2StringString(date,Mon, 23 May 2005 22:38:34 GMT),false,36)
ParseResultTuple2StringString(Tuple2StringString(server,Apache/1.3.3.7 (Unix) (Red-Hat/Linux)),false,46)
ParseResultTuple2StringString(Tuple2StringString(last-modified,Wed, 08 Jan 2003 23:11:55 GMT),false,45)
ParseResultTuple2StringString(Tuple2StringString(etag,\"3f80f-1b6-3e1cb03b\"),false,29)
ParseResultTuple2StringString(Tuple2StringString(content-type,text/html; charset=UTF-8),false,39)
ParseResultTuple2StringString(Tuple2StringString(content-length,131),false,20)
ParseResultTuple2StringString(null,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headersParse extends ((Array[Char])=>(Unit)) {
def apply(x2150:Array[Char]): Unit = {
val x2151 = null.asInstanceOf[Anon1323431030]
var x2153: Anon1323431030 = x2151
var x2154: Boolean = true
var x2155: Int = -1
var x2240: Int = 200
var x2241: Int = 0
var x2242: java.lang.String = "close"
var x2243: Boolean = false
var x2244: Boolean = false
var x2246: Boolean = false
var x2247: Int = 0
var x2249: Int = -1
var x2250: Boolean = true
var x2251: Int = 0
val x2169 = x2150.length
val x10 = null.asInstanceOf[Char]
val x2201 = {x2163: (Int) => 
var x2165: Char = x10
var x2166: Boolean = true
var x2167: Int = x2163
val x2170 = x2163 >= x2169
val x2195 = if (x2170) {
x2165 = x10
x2166 = true
x2167 = x2163
()
} else {
val x2171 = x2150(x2163)
val x2172 = x2171 >= 'a'
val x2173 = x2171 <= 'z'
val x2174 = x2172 && x2173
val x2175 = x2171 >= 'A'
val x2176 = x2171 <= 'Z'
val x2177 = x2175 && x2176
val x2178 = x2174 || x2177
val x2193 = if (x2178) {
x2165 = x2171
x2166 = false
val x2179 = x2163 + 1
x2167 = x2179
()
} else {
x2165 = x10
x2166 = true
x2167 = x2163
()
}
x2193
}
val x2196 = x2165
val x2197 = x2166
val x2198 = x2167
val x2199 = new ParseResultChar(x2196,x2197,x2198)
x2199
}
val x2237 = {x2157: (Int) => 
var x2159: Char = x10
var x2160: Boolean = true
var x2161: Int = x2157
val x2202 = x2201(x2157)
val x2203 = x2202.empty
val x2231 = if (x2203) {
val x2204 = x2157 >= x2169
val x2223 = if (x2204) {
x2159 = x10
x2160 = true
x2161 = x2157
()
} else {
val x2205 = x2150(x2157)
val x2206 = x2205 == '-'
val x2221 = if (x2206) {
x2159 = x2205
x2160 = false
val x2207 = x2157 + 1
x2161 = x2207
()
} else {
x2159 = x10
x2160 = true
x2161 = x2157
()
}
x2221
}
x2223
} else {
val x2225 = x2202.res
x2159 = x2225
x2160 = x2203
val x2228 = x2202.next
x2161 = x2228
()
}
val x2232 = x2159
val x2233 = x2160
val x2234 = x2161
val x2235 = new ParseResultChar(x2232,x2233,x2234)
x2235
}
val x7 = List()
val x19 = null.asInstanceOf[java.lang.String]
val x16 = null.asInstanceOf[Tuple2CharString]
val x2623 = while ({val x2252 = x2250
val x2253 = x2249
val x2254 = x2251
val x2255 = x2253 != x2254
val x2256 = x2252 && x2255
x2256}) {
val x2258 = x2251
x2249 = x2258
val x2260 = x2258 >= x2169
val x2621 = if (x2260) {
x2250 = false
()
} else {
val x2262 = x2150(x2258)
val x2263 = x2262 >= 'a'
val x2264 = x2262 <= 'z'
val x2265 = x2263 && x2264
val x2266 = x2262 >= 'A'
val x2267 = x2262 <= 'Z'
val x2268 = x2266 && x2267
val x2269 = x2265 || x2268
val x2619 = if (x2269) {
var x2278: java.lang.String = ""
var x2279: Boolean = false
val x2270 = x2258 + 1
var x2280: Int = x2270
var x2282: Int = -1
var x2283: Boolean = true
var x2284: Int = x2270
val x2315 = while ({val x2285 = x2283
val x2286 = x2282
val x2287 = x2284
val x2288 = x2286 != x2287
val x2289 = x2285 && x2288
x2289}) {
val x2291 = x2284
x2282 = x2291
val x2293 = x2237(x2291)
val x2294 = x2293.empty
val x2313 = if (x2294) {
x2283 = false
()
} else {
val x2297 = x2278
val x2298 = x2279
val x2299 = x2280
val x2301 = x2293.res
val x2302 = x2301.toInt
val x2303 = x2302 | 32
val x2304 = x2303.toChar
val x2305 = x2297+x2304
x2278 = x2305
x2279 = false
val x2306 = x2293.next
x2280 = x2306
x2284 = x2306
()
}
x2313
}
val x2316 = x2278
val x2317 = x2279
val x2318 = x2280
val x2323 = if (x2317) {
true
} else {
false
}
val x2335 = if (x2323) {
true
} else {
false
}
val x2615 = if (x2335) {
x2250 = false
()
} else {
var x2341: scala.collection.immutable.List[Char] = x7
var x2342: Boolean = false
val x2324 = if (x2317) {
x2258
} else {
x2318
}
val x2336 = if (x2323) {
x2324
} else {
x2324
}
var x2343: Int = x2336
var x2345: Int = -1
var x2346: Boolean = true
var x2347: Int = x2336
val x2382 = while ({val x2348 = x2346
val x2349 = x2345
val x2350 = x2347
val x2351 = x2349 != x2350
val x2352 = x2348 && x2351
x2352}) {
val x2354 = x2347
x2345 = x2354
val x2356 = x2354 >= x2169
val x2380 = if (x2356) {
x2346 = false
()
} else {
val x2358 = x2150(x2354)
val x2359 = x2358 == ' '
val x2378 = if (x2359) {
val x2364 = x2341
val x2365 = x2342
val x2366 = x2343
val x2368 = List(x2358)
val x2369 = x2364 ::: x2368
x2341 = x2369
x2342 = false
val x2360 = x2354 + 1
x2343 = x2360
x2347 = x2360
()
} else {
x2346 = false
()
}
x2378
}
x2380
}
val x2383 = x2341
val x2384 = x2342
val x2385 = x2343
val x2390 = if (x2384) {
true
} else {
false
}
val x2613 = if (x2390) {
x2250 = false
()
} else {
val x2391 = if (x2384) {
x2385
} else {
x2385
}
val x2394 = x2391 >= x2169
val x2611 = if (x2394) {
x2250 = false
()
} else {
val x2396 = x2150(x2391)
val x2397 = x2396 == ':'
val x2609 = if (x2397) {
var x2416: scala.collection.immutable.List[Char] = x7
var x2417: Boolean = false
val x2398 = x2391 + 1
var x2418: Int = x2398
var x2420: Int = -1
var x2421: Boolean = true
var x2422: Int = x2398
val x2457 = while ({val x2423 = x2421
val x2424 = x2420
val x2425 = x2422
val x2426 = x2424 != x2425
val x2427 = x2423 && x2426
x2427}) {
val x2429 = x2422
x2420 = x2429
val x2431 = x2429 >= x2169
val x2455 = if (x2431) {
x2421 = false
()
} else {
val x2433 = x2150(x2429)
val x2434 = x2433 == ' '
val x2453 = if (x2434) {
val x2439 = x2416
val x2440 = x2417
val x2441 = x2418
val x2443 = List(x2433)
val x2444 = x2439 ::: x2443
x2416 = x2444
x2417 = false
val x2435 = x2429 + 1
x2418 = x2435
x2422 = x2435
()
} else {
x2421 = false
()
}
x2453
}
x2455
}
val x2458 = x2416
val x2459 = x2417
val x2460 = x2418
val x2465 = if (x2459) {
true
} else {
false
}
val x2605 = if (x2465) {
x2250 = false
()
} else {
var x2478: java.lang.String = ""
var x2479: Boolean = false
val x2466 = if (x2459) {
x2460
} else {
x2460
}
var x2480: Int = x2466
var x2482: Int = -1
var x2483: Boolean = true
var x2484: Int = x2466
val x2519 = while ({val x2485 = x2483
val x2486 = x2482
val x2487 = x2484
val x2488 = x2486 != x2487
val x2489 = x2485 && x2488
x2489}) {
val x2491 = x2484
x2482 = x2491
val x2493 = x2491 >= x2169
val x2517 = if (x2493) {
x2483 = false
()
} else {
val x2495 = x2150(x2491)
val x2501 = x2495 == '
'
val x2515 = if (x2501) {
x2483 = false
()
} else {
val x2504 = x2478
val x2505 = x2479
val x2506 = x2480
val x2508 = x2504+x2495
x2478 = x2508
x2479 = false
val x2497 = x2491 + 1
x2480 = x2497
x2484 = x2497
()
}
x2515
}
x2517
}
val x2520 = x2478
val x2521 = x2479
val x2522 = x2480
val x2603 = if (x2521) {
x2250 = false
()
} else {
val x2524 = x2522 >= x2169
val x2601 = if (x2524) {
x2250 = false
()
} else {
val x2526 = x2150(x2522)
val x2527 = x2526 == '
'
val x2599 = if (x2527) {
val x2537 = x2240
val x2538 = x2241
val x2539 = x2242
val x2540 = x2243
val x2541 = x2244
val x2543 = x2246
val x2544 = x2247
val x2334 = if (x2323) {
x19
} else {
val x2322 = if (x2317) {
x16
} else {
val x2320 = new Tuple2CharString(x2262,x2316)
x2320
}
val x2328 = x2322._2
val x2327 = x2322._1
val x2329 = x2327.toInt
val x2330 = x2329 | 32
val x2331 = x2330.toChar
val x2332 = x2331+x2328
x2332
}
val x2546 = x2334 == "connection"
val x2547 = x2334 == "proxy-connection"
val x2548 = x2546 || x2547
val x2549 = x2520 == "keep-alive"
val x2550 = x2520 == "close"
val x2551 = x2549 || x2550
val x2552 = x2548 && x2551
val x2581 = if (x2552) {
x2537
} else {
val x2554 = x2334 == "content-length"
val x2575 = if (x2554) {
x2537
} else {
val x2557 = x2334 == "transfer-encoding"
val x2558 = x2520 == "chunked"
val x2559 = x2557 && x2558
val x2569 = if (x2559) {
x2537
} else {
val x2561 = x2334 == "upgrade"
val x2563 = if (x2561) {
x2537
} else {
x2537
}
x2563
}
x2569
}
x2575
}
x2240 = x2581
val x2582 = if (x2552) {
x2538
} else {
val x2554 = x2334 == "content-length"
val x2576 = if (x2554) {
val x2555 = x2520.toInt
x2555
} else {
val x2557 = x2334 == "transfer-encoding"
val x2558 = x2520 == "chunked"
val x2559 = x2557 && x2558
val x2570 = if (x2559) {
x2538
} else {
val x2561 = x2334 == "upgrade"
val x2564 = if (x2561) {
x2538
} else {
x2538
}
x2564
}
x2570
}
x2576
}
x2241 = x2582
val x2583 = if (x2552) {
x2520
} else {
val x2554 = x2334 == "content-length"
val x2577 = if (x2554) {
x2539
} else {
val x2557 = x2334 == "transfer-encoding"
val x2558 = x2520 == "chunked"
val x2559 = x2557 && x2558
val x2571 = if (x2559) {
x2539
} else {
val x2561 = x2334 == "upgrade"
val x2565 = if (x2561) {
x2539
} else {
x2539
}
x2565
}
x2571
}
x2577
}
x2242 = x2583
val x2584 = if (x2552) {
x2540
} else {
val x2554 = x2334 == "content-length"
val x2578 = if (x2554) {
x2540
} else {
val x2557 = x2334 == "transfer-encoding"
val x2558 = x2520 == "chunked"
val x2559 = x2557 && x2558
val x2572 = if (x2559) {
true
} else {
val x2561 = x2334 == "upgrade"
val x2566 = if (x2561) {
x2540
} else {
x2540
}
x2566
}
x2572
}
x2578
}
x2243 = x2584
val x2585 = if (x2552) {
x2541
} else {
val x2554 = x2334 == "content-length"
val x2579 = if (x2554) {
x2541
} else {
val x2557 = x2334 == "transfer-encoding"
val x2558 = x2520 == "chunked"
val x2559 = x2557 && x2558
val x2573 = if (x2559) {
x2541
} else {
val x2561 = x2334 == "upgrade"
val x2567 = if (x2561) {
true
} else {
x2541
}
x2567
}
x2573
}
x2579
}
x2244 = x2585
x2246 = false
val x2528 = x2522 + 1
x2247 = x2528
x2251 = x2528
()
} else {
x2250 = false
()
}
x2599
}
x2601
}
x2603
}
x2605
} else {
x2250 = false
()
}
x2609
}
x2611
}
x2613
}
x2615
} else {
x2250 = false
()
}
x2619
}
x2621
}
val x2624 = x2240
val x2625 = x2241
val x2626 = x2242
val x2627 = x2243
val x2628 = x2244
val x2630 = x2246
val x2631 = x2247
val x2629 = new Anon1323431030(x2624,x2625,x2626,x2627,x2628)
x2153 = x2629
x2154 = x2630
x2155 = x2631
val x2636 = x2153
val x2637 = x2154
val x2638 = x2155
val x2639 = new ParseResultAnon1323431030(x2636,x2637,x2638)
val x2640 = println(x2639)
x2640
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=3000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(200,131,close,false,false),false,215)
nVars=4000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse extends ((Array[Char])=>(Unit)) {
def apply(x3130:Array[Char]): Unit = {
val x2151 = null.asInstanceOf[Anon1323431030]
var x3131: Anon1323431030 = x2151
var x3132: Boolean = true
var x3133: Int = -1
val x3147 = x3130.length
val x3216 = 0 >= x3147
val x4106 = if (x3216) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3217 = x3130(0)
val x3218 = x3217 == 'H'
val x4104 = if (x3218) {
val x14 = 0 + 1
val x3229 = x14 >= x3147
val x4098 = if (x3229) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3230 = x3130(x14)
val x3231 = x3230 == 'T'
val x4096 = if (x3231) {
val x34 = x14 + 1
val x3237 = x34 >= x3147
val x4090 = if (x3237) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3238 = x3130(x34)
val x3239 = x3238 == 'T'
val x4088 = if (x3239) {
val x46 = x34 + 1
val x3246 = x46 >= x3147
val x4082 = if (x3246) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3247 = x3130(x46)
val x3248 = x3247 == 'P'
val x4080 = if (x3248) {
val x59 = x46 + 1
val x3255 = x59 >= x3147
val x4074 = if (x3255) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3256 = x3130(x59)
val x3257 = x3256 == '/'
val x4072 = if (x3257) {
var x3283: Int = 0
var x3284: Boolean = false
val x72 = x59 + 1
var x3285: Int = x72
var x3287: Int = -1
var x3288: Boolean = true
var x3289: Int = x72
val x3330 = while ({val x3290 = x3288
val x3291 = x3287
val x3292 = x3289
val x3293 = x3291 != x3292
val x3294 = x3290 && x3293
x3294}) {
val x3296 = x3289
x3287 = x3296
val x3298 = x3296 >= x3147
val x3328 = if (x3298) {
x3288 = false
()
} else {
val x3300 = x3130(x3296)
val x3301 = x3300 >= '0'
val x3302 = x3300 <= '9'
val x3303 = x3301 && x3302
val x3326 = if (x3303) {
val x3312 = x3283
val x3313 = x3284
val x3314 = x3285
val x3309 = x3300 - '0'
val x3310 = x3309.toInt
val x3316 = x3312 * 10
val x3317 = x3316 + x3310
x3283 = x3317
x3284 = false
val x3304 = x3296 + 1
x3285 = x3304
x3289 = x3304
()
} else {
x3288 = false
()
}
x3326
}
x3328
}
val x3331 = x3283
val x3332 = x3284
val x3333 = x3285
val x4066 = if (x3332) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3335 = x3333 >= x3147
val x4064 = if (x3335) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3337 = x3130(x3333)
val x3338 = x3337 == '.'
val x4062 = if (x3338) {
var x3351: Int = 0
var x3352: Boolean = false
val x3339 = x3333 + 1
var x3353: Int = x3339
var x3355: Int = -1
var x3356: Boolean = true
var x3357: Int = x3339
val x3398 = while ({val x3358 = x3356
val x3359 = x3355
val x3360 = x3357
val x3361 = x3359 != x3360
val x3362 = x3358 && x3361
x3362}) {
val x3364 = x3357
x3355 = x3364
val x3366 = x3364 >= x3147
val x3396 = if (x3366) {
x3356 = false
()
} else {
val x3368 = x3130(x3364)
val x3369 = x3368 >= '0'
val x3370 = x3368 <= '9'
val x3371 = x3369 && x3370
val x3394 = if (x3371) {
val x3380 = x3351
val x3381 = x3352
val x3382 = x3353
val x3377 = x3368 - '0'
val x3378 = x3377.toInt
val x3384 = x3380 * 10
val x3385 = x3384 + x3378
x3351 = x3385
x3352 = false
val x3372 = x3364 + 1
x3353 = x3372
x3357 = x3372
()
} else {
x3356 = false
()
}
x3394
}
x3396
}
val x3399 = x3351
val x3400 = x3352
val x3401 = x3353
val x3406 = if (x3400) {
true
} else {
false
}
val x3412 = if (x3406) {
true
} else {
false
}
val x4056 = if (x3412) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x7 = List()
var x3420: scala.collection.immutable.List[Char] = x7
var x3421: Boolean = false
val x3413 = if (x3406) {
0
} else {
val x3407 = if (x3400) {
x72
} else {
x3401
}
x3407
}
var x3422: Int = x3413
var x3424: Int = -1
var x3425: Boolean = true
var x3426: Int = x3413
val x3461 = while ({val x3427 = x3425
val x3428 = x3424
val x3429 = x3426
val x3430 = x3428 != x3429
val x3431 = x3427 && x3430
x3431}) {
val x3433 = x3426
x3424 = x3433
val x3435 = x3433 >= x3147
val x3459 = if (x3435) {
x3425 = false
()
} else {
val x3437 = x3130(x3433)
val x3438 = x3437 == ' '
val x3457 = if (x3438) {
val x3443 = x3420
val x3444 = x3421
val x3445 = x3422
val x3447 = List(x3437)
val x3448 = x3443 ::: x3447
x3420 = x3448
x3421 = false
val x3439 = x3433 + 1
x3422 = x3439
x3426 = x3439
()
} else {
x3425 = false
()
}
x3457
}
x3459
}
val x3462 = x3420
val x3463 = x3421
val x3464 = x3422
val x3469 = if (x3463) {
true
} else {
false
}
val x3475 = if (x3469) {
true
} else {
false
}
val x4054 = if (x3475) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
var x3483: Int = 0
var x3484: Boolean = false
val x3476 = if (x3469) {
0
} else {
val x3470 = if (x3463) {
x3464
} else {
x3464
}
x3470
}
var x3485: Int = x3476
var x3487: Int = -1
var x3488: Boolean = true
var x3489: Int = x3476
val x3530 = while ({val x3490 = x3488
val x3491 = x3487
val x3492 = x3489
val x3493 = x3491 != x3492
val x3494 = x3490 && x3493
x3494}) {
val x3496 = x3489
x3487 = x3496
val x3498 = x3496 >= x3147
val x3528 = if (x3498) {
x3488 = false
()
} else {
val x3500 = x3130(x3496)
val x3501 = x3500 >= '0'
val x3502 = x3500 <= '9'
val x3503 = x3501 && x3502
val x3526 = if (x3503) {
val x3512 = x3483
val x3513 = x3484
val x3514 = x3485
val x3509 = x3500 - '0'
val x3510 = x3509.toInt
val x3516 = x3512 * 10
val x3517 = x3516 + x3510
x3483 = x3517
x3484 = false
val x3504 = x3496 + 1
x3485 = x3504
x3489 = x3504
()
} else {
x3488 = false
()
}
x3526
}
x3528
}
val x3531 = x3483
val x3532 = x3484
val x3533 = x3485
val x4052 = if (x3532) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
var x3540: java.lang.String = ""
var x3541: Boolean = false
var x3542: Int = x3533
var x3544: Int = -1
var x3545: Boolean = true
var x3546: Int = x3533
val x3581 = while ({val x3547 = x3545
val x3548 = x3544
val x3549 = x3546
val x3550 = x3548 != x3549
val x3551 = x3547 && x3550
x3551}) {
val x3553 = x3546
x3544 = x3553
val x3555 = x3553 >= x3147
val x3579 = if (x3555) {
x3545 = false
()
} else {
val x3557 = x3130(x3553)
val x3563 = x3557 == '
'
val x3577 = if (x3563) {
x3545 = false
()
} else {
val x3566 = x3540
val x3567 = x3541
val x3568 = x3542
val x3570 = x3566+x3557
x3540 = x3570
x3541 = false
val x3559 = x3553 + 1
x3542 = x3559
x3546 = x3559
()
}
x3577
}
x3579
}
val x3582 = x3540
val x3583 = x3541
val x3584 = x3542
val x4050 = if (x3583) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3587 = x3584 >= x3147
val x4048 = if (x3587) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x3589 = x3130(x3584)
val x3590 = x3589 == '
'
val x4046 = if (x3590) {
var x3605: Int = 200
var x3606: Int = 0
var x3607: java.lang.String = "close"
var x3608: Boolean = false
var x3609: Boolean = false
var x3611: Boolean = false
val x3591 = x3584 + 1
var x3612: Int = x3591
var x3614: Int = -1
var x3615: Boolean = true
var x3616: Int = x3591
val x10 = null.asInstanceOf[Char]
val x3179 = {x3141: (Int) => 
var x3143: Char = x10
var x3144: Boolean = true
var x3145: Int = x3141
val x3148 = x3141 >= x3147
val x3173 = if (x3148) {
x3143 = x10
x3144 = true
x3145 = x3141
()
} else {
val x3149 = x3130(x3141)
val x3150 = x3149 >= 'a'
val x3151 = x3149 <= 'z'
val x3152 = x3150 && x3151
val x3153 = x3149 >= 'A'
val x3154 = x3149 <= 'Z'
val x3155 = x3153 && x3154
val x3156 = x3152 || x3155
val x3171 = if (x3156) {
x3143 = x3149
x3144 = false
val x3157 = x3141 + 1
x3145 = x3157
()
} else {
x3143 = x10
x3144 = true
x3145 = x3141
()
}
x3171
}
val x3174 = x3143
val x3175 = x3144
val x3176 = x3145
val x3177 = new ParseResultChar(x3174,x3175,x3176)
x3177
}
val x3215 = {x3135: (Int) => 
var x3137: Char = x10
var x3138: Boolean = true
var x3139: Int = x3135
val x3180 = x3179(x3135)
val x3181 = x3180.empty
val x3209 = if (x3181) {
val x3182 = x3135 >= x3147
val x3201 = if (x3182) {
x3137 = x10
x3138 = true
x3139 = x3135
()
} else {
val x3183 = x3130(x3135)
val x3184 = x3183 == '-'
val x3199 = if (x3184) {
x3137 = x3183
x3138 = false
val x3185 = x3135 + 1
x3139 = x3185
()
} else {
x3137 = x10
x3138 = true
x3139 = x3135
()
}
x3199
}
x3201
} else {
val x3203 = x3180.res
x3137 = x3203
x3138 = x3181
val x3206 = x3180.next
x3139 = x3206
()
}
val x3210 = x3137
val x3211 = x3138
val x3212 = x3139
val x3213 = new ParseResultChar(x3210,x3211,x3212)
x3213
}
val x19 = null.asInstanceOf[java.lang.String]
val x16 = null.asInstanceOf[Tuple2CharString]
val x3988 = while ({val x3617 = x3615
val x3618 = x3614
val x3619 = x3616
val x3620 = x3618 != x3619
val x3621 = x3617 && x3620
x3621}) {
val x3623 = x3616
x3614 = x3623
val x3625 = x3623 >= x3147
val x3986 = if (x3625) {
x3615 = false
()
} else {
val x3627 = x3130(x3623)
val x3628 = x3627 >= 'a'
val x3629 = x3627 <= 'z'
val x3630 = x3628 && x3629
val x3631 = x3627 >= 'A'
val x3632 = x3627 <= 'Z'
val x3633 = x3631 && x3632
val x3634 = x3630 || x3633
val x3984 = if (x3634) {
var x3643: java.lang.String = ""
var x3644: Boolean = false
val x3635 = x3623 + 1
var x3645: Int = x3635
var x3647: Int = -1
var x3648: Boolean = true
var x3649: Int = x3635
val x3680 = while ({val x3650 = x3648
val x3651 = x3647
val x3652 = x3649
val x3653 = x3651 != x3652
val x3654 = x3650 && x3653
x3654}) {
val x3656 = x3649
x3647 = x3656
val x3658 = x3215(x3656)
val x3659 = x3658.empty
val x3678 = if (x3659) {
x3648 = false
()
} else {
val x3662 = x3643
val x3663 = x3644
val x3664 = x3645
val x3666 = x3658.res
val x3667 = x3666.toInt
val x3668 = x3667 | 32
val x3669 = x3668.toChar
val x3670 = x3662+x3669
x3643 = x3670
x3644 = false
val x3671 = x3658.next
x3645 = x3671
x3649 = x3671
()
}
x3678
}
val x3681 = x3643
val x3682 = x3644
val x3683 = x3645
val x3688 = if (x3682) {
true
} else {
false
}
val x3700 = if (x3688) {
true
} else {
false
}
val x3980 = if (x3700) {
x3615 = false
()
} else {
var x3706: scala.collection.immutable.List[Char] = x7
var x3707: Boolean = false
val x3689 = if (x3682) {
x3623
} else {
x3683
}
val x3701 = if (x3688) {
x3689
} else {
x3689
}
var x3708: Int = x3701
var x3710: Int = -1
var x3711: Boolean = true
var x3712: Int = x3701
val x3747 = while ({val x3713 = x3711
val x3714 = x3710
val x3715 = x3712
val x3716 = x3714 != x3715
val x3717 = x3713 && x3716
x3717}) {
val x3719 = x3712
x3710 = x3719
val x3721 = x3719 >= x3147
val x3745 = if (x3721) {
x3711 = false
()
} else {
val x3723 = x3130(x3719)
val x3724 = x3723 == ' '
val x3743 = if (x3724) {
val x3729 = x3706
val x3730 = x3707
val x3731 = x3708
val x3733 = List(x3723)
val x3734 = x3729 ::: x3733
x3706 = x3734
x3707 = false
val x3725 = x3719 + 1
x3708 = x3725
x3712 = x3725
()
} else {
x3711 = false
()
}
x3743
}
x3745
}
val x3748 = x3706
val x3749 = x3707
val x3750 = x3708
val x3755 = if (x3749) {
true
} else {
false
}
val x3978 = if (x3755) {
x3615 = false
()
} else {
val x3756 = if (x3749) {
x3750
} else {
x3750
}
val x3759 = x3756 >= x3147
val x3976 = if (x3759) {
x3615 = false
()
} else {
val x3761 = x3130(x3756)
val x3762 = x3761 == ':'
val x3974 = if (x3762) {
var x3781: scala.collection.immutable.List[Char] = x7
var x3782: Boolean = false
val x3763 = x3756 + 1
var x3783: Int = x3763
var x3785: Int = -1
var x3786: Boolean = true
var x3787: Int = x3763
val x3822 = while ({val x3788 = x3786
val x3789 = x3785
val x3790 = x3787
val x3791 = x3789 != x3790
val x3792 = x3788 && x3791
x3792}) {
val x3794 = x3787
x3785 = x3794
val x3796 = x3794 >= x3147
val x3820 = if (x3796) {
x3786 = false
()
} else {
val x3798 = x3130(x3794)
val x3799 = x3798 == ' '
val x3818 = if (x3799) {
val x3804 = x3781
val x3805 = x3782
val x3806 = x3783
val x3808 = List(x3798)
val x3809 = x3804 ::: x3808
x3781 = x3809
x3782 = false
val x3800 = x3794 + 1
x3783 = x3800
x3787 = x3800
()
} else {
x3786 = false
()
}
x3818
}
x3820
}
val x3823 = x3781
val x3824 = x3782
val x3825 = x3783
val x3830 = if (x3824) {
true
} else {
false
}
val x3970 = if (x3830) {
x3615 = false
()
} else {
var x3843: java.lang.String = ""
var x3844: Boolean = false
val x3831 = if (x3824) {
x3825
} else {
x3825
}
var x3845: Int = x3831
var x3847: Int = -1
var x3848: Boolean = true
var x3849: Int = x3831
val x3884 = while ({val x3850 = x3848
val x3851 = x3847
val x3852 = x3849
val x3853 = x3851 != x3852
val x3854 = x3850 && x3853
x3854}) {
val x3856 = x3849
x3847 = x3856
val x3858 = x3856 >= x3147
val x3882 = if (x3858) {
x3848 = false
()
} else {
val x3860 = x3130(x3856)
val x3866 = x3860 == '
'
val x3880 = if (x3866) {
x3848 = false
()
} else {
val x3869 = x3843
val x3870 = x3844
val x3871 = x3845
val x3873 = x3869+x3860
x3843 = x3873
x3844 = false
val x3862 = x3856 + 1
x3845 = x3862
x3849 = x3862
()
}
x3880
}
x3882
}
val x3885 = x3843
val x3886 = x3844
val x3887 = x3845
val x3968 = if (x3886) {
x3615 = false
()
} else {
val x3889 = x3887 >= x3147
val x3966 = if (x3889) {
x3615 = false
()
} else {
val x3891 = x3130(x3887)
val x3892 = x3891 == '
'
val x3964 = if (x3892) {
val x3902 = x3605
val x3903 = x3606
val x3904 = x3607
val x3905 = x3608
val x3906 = x3609
val x3908 = x3611
val x3909 = x3612
val x3699 = if (x3688) {
x19
} else {
val x3687 = if (x3682) {
x16
} else {
val x3685 = new Tuple2CharString(x3627,x3681)
x3685
}
val x3693 = x3687._2
val x3692 = x3687._1
val x3694 = x3692.toInt
val x3695 = x3694 | 32
val x3696 = x3695.toChar
val x3697 = x3696+x3693
x3697
}
val x3911 = x3699 == "connection"
val x3912 = x3699 == "proxy-connection"
val x3913 = x3911 || x3912
val x3914 = x3885 == "keep-alive"
val x3915 = x3885 == "close"
val x3916 = x3914 || x3915
val x3917 = x3913 && x3916
val x3946 = if (x3917) {
x3902
} else {
val x3919 = x3699 == "content-length"
val x3940 = if (x3919) {
x3902
} else {
val x3922 = x3699 == "transfer-encoding"
val x3923 = x3885 == "chunked"
val x3924 = x3922 && x3923
val x3934 = if (x3924) {
x3902
} else {
val x3926 = x3699 == "upgrade"
val x3928 = if (x3926) {
x3902
} else {
x3902
}
x3928
}
x3934
}
x3940
}
x3605 = x3946
val x3947 = if (x3917) {
x3903
} else {
val x3919 = x3699 == "content-length"
val x3941 = if (x3919) {
val x3920 = x3885.toInt
x3920
} else {
val x3922 = x3699 == "transfer-encoding"
val x3923 = x3885 == "chunked"
val x3924 = x3922 && x3923
val x3935 = if (x3924) {
x3903
} else {
val x3926 = x3699 == "upgrade"
val x3929 = if (x3926) {
x3903
} else {
x3903
}
x3929
}
x3935
}
x3941
}
x3606 = x3947
val x3948 = if (x3917) {
x3885
} else {
val x3919 = x3699 == "content-length"
val x3942 = if (x3919) {
x3904
} else {
val x3922 = x3699 == "transfer-encoding"
val x3923 = x3885 == "chunked"
val x3924 = x3922 && x3923
val x3936 = if (x3924) {
x3904
} else {
val x3926 = x3699 == "upgrade"
val x3930 = if (x3926) {
x3904
} else {
x3904
}
x3930
}
x3936
}
x3942
}
x3607 = x3948
val x3949 = if (x3917) {
x3905
} else {
val x3919 = x3699 == "content-length"
val x3943 = if (x3919) {
x3905
} else {
val x3922 = x3699 == "transfer-encoding"
val x3923 = x3885 == "chunked"
val x3924 = x3922 && x3923
val x3937 = if (x3924) {
true
} else {
val x3926 = x3699 == "upgrade"
val x3931 = if (x3926) {
x3905
} else {
x3905
}
x3931
}
x3937
}
x3943
}
x3608 = x3949
val x3950 = if (x3917) {
x3906
} else {
val x3919 = x3699 == "content-length"
val x3944 = if (x3919) {
x3906
} else {
val x3922 = x3699 == "transfer-encoding"
val x3923 = x3885 == "chunked"
val x3924 = x3922 && x3923
val x3938 = if (x3924) {
x3906
} else {
val x3926 = x3699 == "upgrade"
val x3932 = if (x3926) {
true
} else {
x3906
}
x3932
}
x3938
}
x3944
}
x3609 = x3950
x3611 = false
val x3893 = x3887 + 1
x3612 = x3893
x3616 = x3893
()
} else {
x3615 = false
()
}
x3964
}
x3966
}
x3968
}
x3970
} else {
x3615 = false
()
}
x3974
}
x3976
}
x3978
}
x3980
} else {
x3615 = false
()
}
x3984
}
x3986
}
val x3989 = x3605
val x3990 = x3606
val x3991 = x3607
val x3992 = x3608
val x3993 = x3609
val x3995 = x3611
val x3996 = x3612
val x4001 = if (x3995) {
true
} else {
false
}
val x4040 = if (x4001) {
x3131 = x2151
x3132 = true
val x4002 = if (x3995) {
0
} else {
x3996
}
x3133 = x4002
()
} else {
val x4002 = if (x3995) {
0
} else {
x3996
}
val x4004 = x4002 >= x3147
val x4038 = if (x4004) {
x3131 = x2151
x3132 = true
x3133 = 0
()
} else {
val x4006 = x3130(x4002)
val x4007 = x4006 == '
'
val x4036 = if (x4007) {
val x4000 = if (x3995) {
val x3221 = null.asInstanceOf[Tuple2IntAnon1323431030]
x3221
} else {
val x3994 = new Anon1323431030(x3989,x3990,x3991,x3992,x3993)
val x3998 = new Tuple2IntAnon1323431030(x3531,x3994)
x3998
}
val x4020 = x4000._1
val x4021 = x4000._2
val x4022 = x4021.contentLength
val x4023 = x4021.connection
val x4024 = x4021.chunked
val x4025 = x4021.upgrade
val x4026 = new Anon1323431030(x4020,x4022,x4023,x4024,x4025)
x3131 = x4026
x3132 = false
val x4008 = x4002 + 1
x3133 = x4008
()
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4036
}
x4038
}
x4040
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4046
}
x4048
}
x4050
}
x4052
}
x4054
}
x4056
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4062
}
x4064
}
x4066
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4072
}
x4074
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4080
}
x4082
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4088
}
x4090
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4096
}
x4098
} else {
x3131 = x2151
x3132 = true
x3133 = 0
()
}
x4104
}
val x4107 = x3131
val x4108 = x3132
val x4109 = x3133
val x4110 = new ParseResultAnon1323431030(x4107,x4108,x4109)
val x4111 = println(x4110)
x4111
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=5000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(418,131,close,false,false),false,258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(Unit)) {
def apply(x5093:Array[Char]): Unit = {
val x19 = null.asInstanceOf[java.lang.String]
var x5094: java.lang.String = x19
var x5095: Boolean = true
var x5096: Int = -1
var x5099: java.lang.String = ""
var x5100: Boolean = false
var x5101: Int = 0
var x5103: Int = -1
var x5104: Boolean = true
var x5105: Int = 0
var x5106: Int = 0
val x5118 = x5093.length
val x5142 = while ({val x5107 = x5106
val x5109 = x5103
val x5110 = x5105
val x5113 = x5104
val x5108 = x5107 < 14
val x5111 = x5109 != x5110
val x5112 = x5108 && x5111
val x5114 = x5112 && x5113
x5114}) {
val x5116 = x5105
x5103 = x5116
val x5119 = x5116 >= x5118
val x5140 = if (x5119) {
x5104 = false
()
} else {
val x5126 = x5099
val x5127 = x5100
val x5128 = x5101
val x5121 = x5093(x5116)
val x5130 = x5126+x5121
x5099 = x5130
x5100 = false
val x5122 = x5116 + 1
x5101 = x5122
x5105 = x5122
val x5136 = x5106
val x5137 = x5136 + 1
x5106 = x5137
()
}
x5140
}
val x5143 = x5099
val x5144 = x5100
val x5145 = x5101
x5094 = x5143
x5095 = x5144
x5096 = x5145
val x5150 = x5094
val x5151 = x5095
val x5152 = x5096
val x5153 = new ParseResultString(x5150,x5151,x5152)
val x5154 = println(x5153)
x5154
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Make it funky!,false,14)
nVars=6000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class respAndMessageParse extends ((Array[Char])=>(Unit)) {
def apply(x5218:Array[Char]): Unit = {
val x5219 = null.asInstanceOf[Tuple2Anon1323431030String]
var x5221: Tuple2Anon1323431030String = x5219
var x5222: Boolean = true
var x5223: Int = -1
val x5237 = x5218.length
val x5306 = 0 >= x5237
val x6254 = if (x5306) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5307 = x5218(0)
val x5308 = x5307 == 'H'
val x6252 = if (x5308) {
val x14 = 0 + 1
val x5318 = x14 >= x5237
val x6246 = if (x5318) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5319 = x5218(x14)
val x5320 = x5319 == 'T'
val x6244 = if (x5320) {
val x34 = x14 + 1
val x5326 = x34 >= x5237
val x6238 = if (x5326) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5327 = x5218(x34)
val x5328 = x5327 == 'T'
val x6236 = if (x5328) {
val x46 = x34 + 1
val x5335 = x46 >= x5237
val x6230 = if (x5335) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5336 = x5218(x46)
val x5337 = x5336 == 'P'
val x6228 = if (x5337) {
val x59 = x46 + 1
val x5344 = x59 >= x5237
val x6222 = if (x5344) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5345 = x5218(x59)
val x5346 = x5345 == '/'
val x6220 = if (x5346) {
var x5372: Int = 0
var x5373: Boolean = false
val x72 = x59 + 1
var x5374: Int = x72
var x5376: Int = -1
var x5377: Boolean = true
var x5378: Int = x72
val x5419 = while ({val x5379 = x5377
val x5380 = x5376
val x5381 = x5378
val x5382 = x5380 != x5381
val x5383 = x5379 && x5382
x5383}) {
val x5385 = x5378
x5376 = x5385
val x5387 = x5385 >= x5237
val x5417 = if (x5387) {
x5377 = false
()
} else {
val x5389 = x5218(x5385)
val x5390 = x5389 >= '0'
val x5391 = x5389 <= '9'
val x5392 = x5390 && x5391
val x5415 = if (x5392) {
val x5401 = x5372
val x5402 = x5373
val x5403 = x5374
val x5398 = x5389 - '0'
val x5399 = x5398.toInt
val x5405 = x5401 * 10
val x5406 = x5405 + x5399
x5372 = x5406
x5373 = false
val x5393 = x5385 + 1
x5374 = x5393
x5378 = x5393
()
} else {
x5377 = false
()
}
x5415
}
x5417
}
val x5420 = x5372
val x5421 = x5373
val x5422 = x5374
val x6214 = if (x5421) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5424 = x5422 >= x5237
val x6212 = if (x5424) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5426 = x5218(x5422)
val x5427 = x5426 == '.'
val x6210 = if (x5427) {
var x5440: Int = 0
var x5441: Boolean = false
val x5428 = x5422 + 1
var x5442: Int = x5428
var x5444: Int = -1
var x5445: Boolean = true
var x5446: Int = x5428
val x5487 = while ({val x5447 = x5445
val x5448 = x5444
val x5449 = x5446
val x5450 = x5448 != x5449
val x5451 = x5447 && x5450
x5451}) {
val x5453 = x5446
x5444 = x5453
val x5455 = x5453 >= x5237
val x5485 = if (x5455) {
x5445 = false
()
} else {
val x5457 = x5218(x5453)
val x5458 = x5457 >= '0'
val x5459 = x5457 <= '9'
val x5460 = x5458 && x5459
val x5483 = if (x5460) {
val x5469 = x5440
val x5470 = x5441
val x5471 = x5442
val x5466 = x5457 - '0'
val x5467 = x5466.toInt
val x5473 = x5469 * 10
val x5474 = x5473 + x5467
x5440 = x5474
x5441 = false
val x5461 = x5453 + 1
x5442 = x5461
x5446 = x5461
()
} else {
x5445 = false
()
}
x5483
}
x5485
}
val x5488 = x5440
val x5489 = x5441
val x5490 = x5442
val x5495 = if (x5489) {
true
} else {
false
}
val x5501 = if (x5495) {
true
} else {
false
}
val x6204 = if (x5501) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x7 = List()
var x5509: scala.collection.immutable.List[Char] = x7
var x5510: Boolean = false
val x5502 = if (x5495) {
0
} else {
val x5496 = if (x5489) {
x72
} else {
x5490
}
x5496
}
var x5511: Int = x5502
var x5513: Int = -1
var x5514: Boolean = true
var x5515: Int = x5502
val x5550 = while ({val x5516 = x5514
val x5517 = x5513
val x5518 = x5515
val x5519 = x5517 != x5518
val x5520 = x5516 && x5519
x5520}) {
val x5522 = x5515
x5513 = x5522
val x5524 = x5522 >= x5237
val x5548 = if (x5524) {
x5514 = false
()
} else {
val x5526 = x5218(x5522)
val x5527 = x5526 == ' '
val x5546 = if (x5527) {
val x5532 = x5509
val x5533 = x5510
val x5534 = x5511
val x5536 = List(x5526)
val x5537 = x5532 ::: x5536
x5509 = x5537
x5510 = false
val x5528 = x5522 + 1
x5511 = x5528
x5515 = x5528
()
} else {
x5514 = false
()
}
x5546
}
x5548
}
val x5551 = x5509
val x5552 = x5510
val x5553 = x5511
val x5558 = if (x5552) {
true
} else {
false
}
val x5564 = if (x5558) {
true
} else {
false
}
val x6202 = if (x5564) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
var x5572: Int = 0
var x5573: Boolean = false
val x5565 = if (x5558) {
0
} else {
val x5559 = if (x5552) {
x5553
} else {
x5553
}
x5559
}
var x5574: Int = x5565
var x5576: Int = -1
var x5577: Boolean = true
var x5578: Int = x5565
val x5619 = while ({val x5579 = x5577
val x5580 = x5576
val x5581 = x5578
val x5582 = x5580 != x5581
val x5583 = x5579 && x5582
x5583}) {
val x5585 = x5578
x5576 = x5585
val x5587 = x5585 >= x5237
val x5617 = if (x5587) {
x5577 = false
()
} else {
val x5589 = x5218(x5585)
val x5590 = x5589 >= '0'
val x5591 = x5589 <= '9'
val x5592 = x5590 && x5591
val x5615 = if (x5592) {
val x5601 = x5572
val x5602 = x5573
val x5603 = x5574
val x5598 = x5589 - '0'
val x5599 = x5598.toInt
val x5605 = x5601 * 10
val x5606 = x5605 + x5599
x5572 = x5606
x5573 = false
val x5593 = x5585 + 1
x5574 = x5593
x5578 = x5593
()
} else {
x5577 = false
()
}
x5615
}
x5617
}
val x5620 = x5572
val x5621 = x5573
val x5622 = x5574
val x6200 = if (x5621) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
var x5629: java.lang.String = ""
var x5630: Boolean = false
var x5631: Int = x5622
var x5633: Int = -1
var x5634: Boolean = true
var x5635: Int = x5622
val x5670 = while ({val x5636 = x5634
val x5637 = x5633
val x5638 = x5635
val x5639 = x5637 != x5638
val x5640 = x5636 && x5639
x5640}) {
val x5642 = x5635
x5633 = x5642
val x5644 = x5642 >= x5237
val x5668 = if (x5644) {
x5634 = false
()
} else {
val x5646 = x5218(x5642)
val x5652 = x5646 == '
'
val x5666 = if (x5652) {
x5634 = false
()
} else {
val x5655 = x5629
val x5656 = x5630
val x5657 = x5631
val x5659 = x5655+x5646
x5629 = x5659
x5630 = false
val x5648 = x5642 + 1
x5631 = x5648
x5635 = x5648
()
}
x5666
}
x5668
}
val x5671 = x5629
val x5672 = x5630
val x5673 = x5631
val x6198 = if (x5672) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5676 = x5673 >= x5237
val x6196 = if (x5676) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x5678 = x5218(x5673)
val x5679 = x5678 == '
'
val x6194 = if (x5679) {
var x5694: Int = 200
var x5695: Int = 0
var x5696: java.lang.String = "close"
var x5697: Boolean = false
var x5698: Boolean = false
var x5700: Boolean = false
val x5680 = x5673 + 1
var x5701: Int = x5680
var x5703: Int = -1
var x5704: Boolean = true
var x5705: Int = x5680
val x10 = null.asInstanceOf[Char]
val x5269 = {x5231: (Int) => 
var x5233: Char = x10
var x5234: Boolean = true
var x5235: Int = x5231
val x5238 = x5231 >= x5237
val x5263 = if (x5238) {
x5233 = x10
x5234 = true
x5235 = x5231
()
} else {
val x5239 = x5218(x5231)
val x5240 = x5239 >= 'a'
val x5241 = x5239 <= 'z'
val x5242 = x5240 && x5241
val x5243 = x5239 >= 'A'
val x5244 = x5239 <= 'Z'
val x5245 = x5243 && x5244
val x5246 = x5242 || x5245
val x5261 = if (x5246) {
x5233 = x5239
x5234 = false
val x5247 = x5231 + 1
x5235 = x5247
()
} else {
x5233 = x10
x5234 = true
x5235 = x5231
()
}
x5261
}
val x5264 = x5233
val x5265 = x5234
val x5266 = x5235
val x5267 = new ParseResultChar(x5264,x5265,x5266)
x5267
}
val x5305 = {x5225: (Int) => 
var x5227: Char = x10
var x5228: Boolean = true
var x5229: Int = x5225
val x5270 = x5269(x5225)
val x5271 = x5270.empty
val x5299 = if (x5271) {
val x5272 = x5225 >= x5237
val x5291 = if (x5272) {
x5227 = x10
x5228 = true
x5229 = x5225
()
} else {
val x5273 = x5218(x5225)
val x5274 = x5273 == '-'
val x5289 = if (x5274) {
x5227 = x5273
x5228 = false
val x5275 = x5225 + 1
x5229 = x5275
()
} else {
x5227 = x10
x5228 = true
x5229 = x5225
()
}
x5289
}
x5291
} else {
val x5293 = x5270.res
x5227 = x5293
x5228 = x5271
val x5296 = x5270.next
x5229 = x5296
()
}
val x5300 = x5227
val x5301 = x5228
val x5302 = x5229
val x5303 = new ParseResultChar(x5300,x5301,x5302)
x5303
}
val x19 = null.asInstanceOf[java.lang.String]
val x16 = null.asInstanceOf[Tuple2CharString]
val x6077 = while ({val x5706 = x5704
val x5707 = x5703
val x5708 = x5705
val x5709 = x5707 != x5708
val x5710 = x5706 && x5709
x5710}) {
val x5712 = x5705
x5703 = x5712
val x5714 = x5712 >= x5237
val x6075 = if (x5714) {
x5704 = false
()
} else {
val x5716 = x5218(x5712)
val x5717 = x5716 >= 'a'
val x5718 = x5716 <= 'z'
val x5719 = x5717 && x5718
val x5720 = x5716 >= 'A'
val x5721 = x5716 <= 'Z'
val x5722 = x5720 && x5721
val x5723 = x5719 || x5722
val x6073 = if (x5723) {
var x5732: java.lang.String = ""
var x5733: Boolean = false
val x5724 = x5712 + 1
var x5734: Int = x5724
var x5736: Int = -1
var x5737: Boolean = true
var x5738: Int = x5724
val x5769 = while ({val x5739 = x5737
val x5740 = x5736
val x5741 = x5738
val x5742 = x5740 != x5741
val x5743 = x5739 && x5742
x5743}) {
val x5745 = x5738
x5736 = x5745
val x5747 = x5305(x5745)
val x5748 = x5747.empty
val x5767 = if (x5748) {
x5737 = false
()
} else {
val x5751 = x5732
val x5752 = x5733
val x5753 = x5734
val x5755 = x5747.res
val x5756 = x5755.toInt
val x5757 = x5756 | 32
val x5758 = x5757.toChar
val x5759 = x5751+x5758
x5732 = x5759
x5733 = false
val x5760 = x5747.next
x5734 = x5760
x5738 = x5760
()
}
x5767
}
val x5770 = x5732
val x5771 = x5733
val x5772 = x5734
val x5777 = if (x5771) {
true
} else {
false
}
val x5789 = if (x5777) {
true
} else {
false
}
val x6069 = if (x5789) {
x5704 = false
()
} else {
var x5795: scala.collection.immutable.List[Char] = x7
var x5796: Boolean = false
val x5778 = if (x5771) {
x5712
} else {
x5772
}
val x5790 = if (x5777) {
x5778
} else {
x5778
}
var x5797: Int = x5790
var x5799: Int = -1
var x5800: Boolean = true
var x5801: Int = x5790
val x5836 = while ({val x5802 = x5800
val x5803 = x5799
val x5804 = x5801
val x5805 = x5803 != x5804
val x5806 = x5802 && x5805
x5806}) {
val x5808 = x5801
x5799 = x5808
val x5810 = x5808 >= x5237
val x5834 = if (x5810) {
x5800 = false
()
} else {
val x5812 = x5218(x5808)
val x5813 = x5812 == ' '
val x5832 = if (x5813) {
val x5818 = x5795
val x5819 = x5796
val x5820 = x5797
val x5822 = List(x5812)
val x5823 = x5818 ::: x5822
x5795 = x5823
x5796 = false
val x5814 = x5808 + 1
x5797 = x5814
x5801 = x5814
()
} else {
x5800 = false
()
}
x5832
}
x5834
}
val x5837 = x5795
val x5838 = x5796
val x5839 = x5797
val x5844 = if (x5838) {
true
} else {
false
}
val x6067 = if (x5844) {
x5704 = false
()
} else {
val x5845 = if (x5838) {
x5839
} else {
x5839
}
val x5848 = x5845 >= x5237
val x6065 = if (x5848) {
x5704 = false
()
} else {
val x5850 = x5218(x5845)
val x5851 = x5850 == ':'
val x6063 = if (x5851) {
var x5870: scala.collection.immutable.List[Char] = x7
var x5871: Boolean = false
val x5852 = x5845 + 1
var x5872: Int = x5852
var x5874: Int = -1
var x5875: Boolean = true
var x5876: Int = x5852
val x5911 = while ({val x5877 = x5875
val x5878 = x5874
val x5879 = x5876
val x5880 = x5878 != x5879
val x5881 = x5877 && x5880
x5881}) {
val x5883 = x5876
x5874 = x5883
val x5885 = x5883 >= x5237
val x5909 = if (x5885) {
x5875 = false
()
} else {
val x5887 = x5218(x5883)
val x5888 = x5887 == ' '
val x5907 = if (x5888) {
val x5893 = x5870
val x5894 = x5871
val x5895 = x5872
val x5897 = List(x5887)
val x5898 = x5893 ::: x5897
x5870 = x5898
x5871 = false
val x5889 = x5883 + 1
x5872 = x5889
x5876 = x5889
()
} else {
x5875 = false
()
}
x5907
}
x5909
}
val x5912 = x5870
val x5913 = x5871
val x5914 = x5872
val x5919 = if (x5913) {
true
} else {
false
}
val x6059 = if (x5919) {
x5704 = false
()
} else {
var x5932: java.lang.String = ""
var x5933: Boolean = false
val x5920 = if (x5913) {
x5914
} else {
x5914
}
var x5934: Int = x5920
var x5936: Int = -1
var x5937: Boolean = true
var x5938: Int = x5920
val x5973 = while ({val x5939 = x5937
val x5940 = x5936
val x5941 = x5938
val x5942 = x5940 != x5941
val x5943 = x5939 && x5942
x5943}) {
val x5945 = x5938
x5936 = x5945
val x5947 = x5945 >= x5237
val x5971 = if (x5947) {
x5937 = false
()
} else {
val x5949 = x5218(x5945)
val x5955 = x5949 == '
'
val x5969 = if (x5955) {
x5937 = false
()
} else {
val x5958 = x5932
val x5959 = x5933
val x5960 = x5934
val x5962 = x5958+x5949
x5932 = x5962
x5933 = false
val x5951 = x5945 + 1
x5934 = x5951
x5938 = x5951
()
}
x5969
}
x5971
}
val x5974 = x5932
val x5975 = x5933
val x5976 = x5934
val x6057 = if (x5975) {
x5704 = false
()
} else {
val x5978 = x5976 >= x5237
val x6055 = if (x5978) {
x5704 = false
()
} else {
val x5980 = x5218(x5976)
val x5981 = x5980 == '
'
val x6053 = if (x5981) {
val x5991 = x5694
val x5992 = x5695
val x5993 = x5696
val x5994 = x5697
val x5995 = x5698
val x5997 = x5700
val x5998 = x5701
val x5788 = if (x5777) {
x19
} else {
val x5776 = if (x5771) {
x16
} else {
val x5774 = new Tuple2CharString(x5716,x5770)
x5774
}
val x5782 = x5776._2
val x5781 = x5776._1
val x5783 = x5781.toInt
val x5784 = x5783 | 32
val x5785 = x5784.toChar
val x5786 = x5785+x5782
x5786
}
val x6000 = x5788 == "connection"
val x6001 = x5788 == "proxy-connection"
val x6002 = x6000 || x6001
val x6003 = x5974 == "keep-alive"
val x6004 = x5974 == "close"
val x6005 = x6003 || x6004
val x6006 = x6002 && x6005
val x6035 = if (x6006) {
x5991
} else {
val x6008 = x5788 == "content-length"
val x6029 = if (x6008) {
x5991
} else {
val x6011 = x5788 == "transfer-encoding"
val x6012 = x5974 == "chunked"
val x6013 = x6011 && x6012
val x6023 = if (x6013) {
x5991
} else {
val x6015 = x5788 == "upgrade"
val x6017 = if (x6015) {
x5991
} else {
x5991
}
x6017
}
x6023
}
x6029
}
x5694 = x6035
val x6036 = if (x6006) {
x5992
} else {
val x6008 = x5788 == "content-length"
val x6030 = if (x6008) {
val x6009 = x5974.toInt
x6009
} else {
val x6011 = x5788 == "transfer-encoding"
val x6012 = x5974 == "chunked"
val x6013 = x6011 && x6012
val x6024 = if (x6013) {
x5992
} else {
val x6015 = x5788 == "upgrade"
val x6018 = if (x6015) {
x5992
} else {
x5992
}
x6018
}
x6024
}
x6030
}
x5695 = x6036
val x6037 = if (x6006) {
x5974
} else {
val x6008 = x5788 == "content-length"
val x6031 = if (x6008) {
x5993
} else {
val x6011 = x5788 == "transfer-encoding"
val x6012 = x5974 == "chunked"
val x6013 = x6011 && x6012
val x6025 = if (x6013) {
x5993
} else {
val x6015 = x5788 == "upgrade"
val x6019 = if (x6015) {
x5993
} else {
x5993
}
x6019
}
x6025
}
x6031
}
x5696 = x6037
val x6038 = if (x6006) {
x5994
} else {
val x6008 = x5788 == "content-length"
val x6032 = if (x6008) {
x5994
} else {
val x6011 = x5788 == "transfer-encoding"
val x6012 = x5974 == "chunked"
val x6013 = x6011 && x6012
val x6026 = if (x6013) {
true
} else {
val x6015 = x5788 == "upgrade"
val x6020 = if (x6015) {
x5994
} else {
x5994
}
x6020
}
x6026
}
x6032
}
x5697 = x6038
val x6039 = if (x6006) {
x5995
} else {
val x6008 = x5788 == "content-length"
val x6033 = if (x6008) {
x5995
} else {
val x6011 = x5788 == "transfer-encoding"
val x6012 = x5974 == "chunked"
val x6013 = x6011 && x6012
val x6027 = if (x6013) {
x5995
} else {
val x6015 = x5788 == "upgrade"
val x6021 = if (x6015) {
true
} else {
x5995
}
x6021
}
x6027
}
x6033
}
x5698 = x6039
x5700 = false
val x5982 = x5976 + 1
x5701 = x5982
x5705 = x5982
()
} else {
x5704 = false
()
}
x6053
}
x6055
}
x6057
}
x6059
} else {
x5704 = false
()
}
x6063
}
x6065
}
x6067
}
x6069
} else {
x5704 = false
()
}
x6073
}
x6075
}
val x6078 = x5694
val x6079 = x5695
val x6080 = x5696
val x6081 = x5697
val x6082 = x5698
val x6084 = x5700
val x6085 = x5701
val x6090 = if (x6084) {
true
} else {
false
}
val x6188 = if (x6090) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x6091 = if (x6084) {
0
} else {
x6085
}
val x6093 = x6091 >= x5237
val x6186 = if (x6093) {
x5221 = x5219
x5222 = true
x5223 = 0
()
} else {
val x6095 = x5218(x6091)
val x6096 = x6095 == '
'
val x6184 = if (x6096) {
var x6118: java.lang.String = ""
var x6119: Boolean = false
val x6097 = x6091 + 1
var x6120: Int = x6097
var x6122: Int = -1
var x6123: Boolean = true
var x6124: Int = x6097
var x6125: Int = 0
val x6089 = if (x6084) {
val x3221 = null.asInstanceOf[Tuple2IntAnon1323431030]
x3221
} else {
val x6083 = new Anon1323431030(x6078,x6079,x6080,x6081,x6082)
val x6087 = new Tuple2IntAnon1323431030(x5620,x6083)
x6087
}
val x6110 = x6089._2
val x6111 = x6110.contentLength
val x6160 = while ({val x6126 = x6125
val x6128 = x6122
val x6129 = x6124
val x6132 = x6123
val x6127 = x6126 < x6111
val x6130 = x6128 != x6129
val x6131 = x6127 && x6130
val x6133 = x6131 && x6132
x6133}) {
val x6135 = x6124
x6122 = x6135
val x6137 = x6135 >= x5237
val x6158 = if (x6137) {
x6123 = false
()
} else {
val x6144 = x6118
val x6145 = x6119
val x6146 = x6120
val x6139 = x5218(x6135)
val x6148 = x6144+x6139
x6118 = x6148
x6119 = false
val x6140 = x6135 + 1
x6120 = x6140
x6124 = x6140
val x6154 = x6125
val x6155 = x6154 + 1
x6125 = x6155
()
}
x6158
}
val x6161 = x6118
val x6162 = x6119
val x6163 = x6120
val x6169 = if (x6162) {
true
} else {
false
}
val x6172 = if (x6169) {
x5219
} else {
val x6168 = if (x6162) {
x5219
} else {
val x6109 = x6089._1
val x6112 = x6110.connection
val x6113 = x6110.chunked
val x6114 = x6110.upgrade
val x6115 = new Anon1323431030(x6109,x6111,x6112,x6113,x6114)
val x6166 = new Tuple2Anon1323431030String(x6115,x6161)
x6166
}
x6168
}
x5221 = x6172
val x6173 = if (x6169) {
true
} else {
x6169
}
x5222 = x6173
val x6174 = if (x6169) {
0
} else {
val x6170 = if (x6162) {
x6163
} else {
x6163
}
x6170
}
x5223 = x6174
()
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6184
}
x6186
}
x6188
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6194
}
x6196
}
x6198
}
x6200
}
x6202
}
x6204
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6210
}
x6212
}
x6214
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6220
}
x6222
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6228
}
x6230
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6236
}
x6238
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6244
}
x6246
} else {
x5221 = x5219
x5222 = true
x5223 = 0
()
}
x6252
}
val x6255 = x5221
val x6256 = x5222
val x6257 = x5223
val x6258 = new ParseResultTuple2Anon1323431030String(x6255,x6256,x6257)
val x6259 = println(x6258)
x6259
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Tuple2StringString(_1: java.lang.String, _2: java.lang.String)

case class Anon1323431030(status: Int, contentLength: Int, connection: java.lang.String, chunked: Boolean, upgrade: Boolean)

case class ParseResultTuple2StringString(res: Tuple2StringString, empty: Boolean, next: Int)

case class Tuple2Anon1323431030String(_1: Anon1323431030, _2: java.lang.String)

case class Tuple2CharString(_1: Char, _2: java.lang.String)

case class ParseResultInt(res: Int, empty: Boolean, next: Int)

case class ParseResultTuple2Anon1323431030String(res: Tuple2Anon1323431030String, empty: Boolean, next: Int)

case class ParseResultChar(res: Char, empty: Boolean, next: Int)

case class ParseResultAnon1323431030(res: Anon1323431030, empty: Boolean, next: Int)

case class Tuple2IntAnon1323431030(_1: Int, _2: Anon1323431030)

case class ParseResultString(res: java.lang.String, empty: Boolean, next: Int)
nVars=7000
compilation: ok
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,2,close,false,false),AA),false,248)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,0,close,true,false),),false,273)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,129,close,false,false),<html>
<head>
  <title>An Example Page</title>
</head>
<body>
  Hello World, this is a very simple HTML document.
</body>
</html>),false,377)
