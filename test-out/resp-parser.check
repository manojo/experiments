/*****************************************
  Emitting Generated Code                  
*******************************************/
class statusParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
val x1 = null.asInstanceOf[Int]
var x3: Int = x1
var x4: Boolean = true
var x5: Int = -1
val x8 = x0.length
val x9 = 0 >= x8
val x495 = if (x9) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x12 = x0(0)
val x13 = x12 == 'H'
val x493 = if (x13) {
val x14 = 0 + 1
val x30 = x14 >= x8
val x487 = if (x30) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x32 = x0(x14)
val x33 = x32 == 'T'
val x485 = if (x33) {
val x34 = x14 + 1
val x42 = x34 >= x8
val x479 = if (x42) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x44 = x0(x34)
val x45 = x44 == 'T'
val x477 = if (x45) {
val x46 = x34 + 1
val x55 = x46 >= x8
val x471 = if (x55) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x57 = x0(x46)
val x58 = x57 == 'P'
val x469 = if (x58) {
val x59 = x46 + 1
val x68 = x59 >= x8
val x463 = if (x68) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x70 = x0(x59)
val x71 = x70 == '/'
val x461 = if (x71) {
var x103: Int = 0
var x104: Boolean = false
val x72 = x59 + 1
var x105: Int = x72
var x107: Int = -1
var x108: Boolean = true
var x109: Int = x72
val x150 = while ({val x110 = x108
val x111 = x107
val x112 = x109
val x113 = x111 != x112
val x114 = x110 && x113
x114}) {
val x116 = x109
x107 = x116
val x118 = x116 >= x8
val x148 = if (x118) {
x108 = false
()
} else {
val x120 = x0(x116)
val x121 = x120 >= '0'
val x122 = x120 <= '9'
val x123 = x121 && x122
val x146 = if (x123) {
val x132 = x103
val x133 = x104
val x134 = x105
val x129 = x120 - '0'
val x130 = x129.toInt
val x136 = x132 * 10
val x137 = x136 + x130
x103 = x137
x104 = false
val x124 = x116 + 1
x105 = x124
x109 = x124
()
} else {
x108 = false
()
}
x146
}
x148
}
val x151 = x103
val x152 = x104
val x153 = x105
val x455 = if (x152) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x157 = x153 >= x8
val x453 = if (x157) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x159 = x0(x153)
val x160 = x159 == '.'
val x451 = if (x160) {
var x173: Int = 0
var x174: Boolean = false
val x161 = x153 + 1
var x175: Int = x161
var x177: Int = -1
var x178: Boolean = true
var x179: Int = x161
val x220 = while ({val x180 = x178
val x181 = x177
val x182 = x179
val x183 = x181 != x182
val x184 = x180 && x183
x184}) {
val x186 = x179
x177 = x186
val x188 = x186 >= x8
val x218 = if (x188) {
x178 = false
()
} else {
val x190 = x0(x186)
val x191 = x190 >= '0'
val x192 = x190 <= '9'
val x193 = x191 && x192
val x216 = if (x193) {
val x202 = x173
val x203 = x174
val x204 = x175
val x199 = x190 - '0'
val x200 = x199.toInt
val x206 = x202 * 10
val x207 = x206 + x200
x173 = x207
x174 = false
val x194 = x186 + 1
x175 = x194
x179 = x194
()
} else {
x178 = false
()
}
x216
}
x218
}
val x221 = x173
val x222 = x174
val x223 = x175
val x228 = if (x222) {
true
} else {
false
}
val x234 = if (x228) {
true
} else {
false
}
val x445 = if (x234) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x7 = List()
var x242: scala.collection.immutable.List[Char] = x7
var x243: Boolean = false
val x235 = if (x228) {
0
} else {
val x229 = if (x222) {
x72
} else {
x223
}
x229
}
var x244: Int = x235
var x246: Int = -1
var x247: Boolean = true
var x248: Int = x235
val x283 = while ({val x249 = x247
val x250 = x246
val x251 = x248
val x252 = x250 != x251
val x253 = x249 && x252
x253}) {
val x255 = x248
x246 = x255
val x257 = x255 >= x8
val x281 = if (x257) {
x247 = false
()
} else {
val x259 = x0(x255)
val x260 = x259 == ' '
val x279 = if (x260) {
val x265 = x242
val x266 = x243
val x267 = x244
val x269 = List(x259)
val x270 = x265 ::: x269
x242 = x270
x243 = false
val x261 = x255 + 1
x244 = x261
x248 = x261
()
} else {
x247 = false
()
}
x279
}
x281
}
val x284 = x242
val x285 = x243
val x286 = x244
val x291 = if (x285) {
true
} else {
false
}
val x297 = if (x291) {
true
} else {
false
}
val x443 = if (x297) {
x3 = x1
x4 = true
x5 = 0
()
} else {
var x305: Int = 0
var x306: Boolean = false
val x298 = if (x291) {
0
} else {
val x292 = if (x285) {
x286
} else {
x286
}
x292
}
var x307: Int = x298
var x309: Int = -1
var x310: Boolean = true
var x311: Int = x298
val x352 = while ({val x312 = x310
val x313 = x309
val x314 = x311
val x315 = x313 != x314
val x316 = x312 && x315
x316}) {
val x318 = x311
x309 = x318
val x320 = x318 >= x8
val x350 = if (x320) {
x310 = false
()
} else {
val x322 = x0(x318)
val x323 = x322 >= '0'
val x324 = x322 <= '9'
val x325 = x323 && x324
val x348 = if (x325) {
val x334 = x305
val x335 = x306
val x336 = x307
val x331 = x322 - '0'
val x332 = x331.toInt
val x338 = x334 * 10
val x339 = x338 + x332
x305 = x339
x306 = false
val x326 = x318 + 1
x307 = x326
x311 = x326
()
} else {
x310 = false
()
}
x348
}
x350
}
val x353 = x305
val x354 = x306
val x355 = x307
val x441 = if (x354) {
x3 = x353
x4 = x354
x5 = x355
()
} else {
var x362: java.lang.String = ""
var x363: Boolean = false
var x364: Int = x355
var x366: Int = -1
var x367: Boolean = true
var x368: Int = x355
val x403 = while ({val x369 = x367
val x370 = x366
val x371 = x368
val x372 = x370 != x371
val x373 = x369 && x372
x373}) {
val x375 = x368
x366 = x375
val x377 = x375 >= x8
val x401 = if (x377) {
x367 = false
()
} else {
val x379 = x0(x375)
val x385 = x379 == '
'
val x399 = if (x385) {
x367 = false
()
} else {
val x388 = x362
val x389 = x363
val x390 = x364
val x392 = x388+x379
x362 = x392
x363 = false
val x381 = x375 + 1
x364 = x381
x368 = x381
()
}
x399
}
x401
}
val x404 = x362
val x405 = x363
val x406 = x364
val x439 = if (x405) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x410 = x406 >= x8
val x437 = if (x410) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x412 = x0(x406)
val x413 = x412 == '
'
val x435 = if (x413) {
x3 = x353
x4 = false
val x414 = x406 + 1
x5 = x414
()
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x435
}
x437
}
x439
}
x441
}
x443
}
x445
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x451
}
x453
}
x455
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x461
}
x463
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x469
}
x471
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x477
}
x479
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x485
}
x487
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x493
}
val x496 = x3
val x497 = x4
val x498 = x5
val x499 = new ParseResultInt(x496,x497,x498)
val x500 = println(x499)
x500
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultInt(200,false,16)
ParseResultInt(418,false,26)
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerNameParse extends ((Array[Char])=>(Unit)) {
def apply(x967:Array[Char]): Unit = {
val x19 = null.asInstanceOf[java.lang.String]
var x969: java.lang.String = x19
var x970: Boolean = true
var x971: Int = -1
val x985 = x967.length
val x1054 = 0 >= x985
val x1129 = if (x1054) {
x969 = x19
x970 = true
x971 = 0
()
} else {
val x1055 = x967(0)
val x1056 = x1055 >= 'A'
val x1057 = x1055 <= 'Z'
val x1058 = x1056 && x1057
val x1127 = if (x1058) {
var x1065: java.lang.String = ""
var x1066: Boolean = false
val x14 = 0 + 1
var x1067: Int = x14
var x1069: Int = -1
var x1070: Boolean = true
var x1071: Int = x14
val x10 = null.asInstanceOf[Char]
val x1017 = {x979: (Int) => 
var x981: Char = x10
var x982: Boolean = true
var x983: Int = x979
val x986 = x979 >= x985
val x1011 = if (x986) {
x981 = x10
x982 = true
x983 = x979
()
} else {
val x987 = x967(x979)
val x988 = x987 >= 'a'
val x989 = x987 <= 'z'
val x990 = x988 && x989
val x991 = x987 >= 'A'
val x992 = x987 <= 'Z'
val x993 = x991 && x992
val x994 = x990 || x993
val x1009 = if (x994) {
x981 = x987
x982 = false
val x995 = x979 + 1
x983 = x995
()
} else {
x981 = x10
x982 = true
x983 = x979
()
}
x1009
}
val x1012 = x981
val x1013 = x982
val x1014 = x983
val x1015 = new ParseResultChar(x1012,x1013,x1014)
x1015
}
val x1053 = {x973: (Int) => 
var x975: Char = x10
var x976: Boolean = true
var x977: Int = x973
val x1018 = x1017(x973)
val x1019 = x1018.empty
val x1047 = if (x1019) {
val x1020 = x973 >= x985
val x1039 = if (x1020) {
x975 = x10
x976 = true
x977 = x973
()
} else {
val x1021 = x967(x973)
val x1022 = x1021 == '-'
val x1037 = if (x1022) {
x975 = x1021
x976 = false
val x1023 = x973 + 1
x977 = x1023
()
} else {
x975 = x10
x976 = true
x977 = x973
()
}
x1037
}
x1039
} else {
val x1041 = x1018.res
x975 = x1041
x976 = x1019
val x1044 = x1018.next
x977 = x1044
()
}
val x1048 = x975
val x1049 = x976
val x1050 = x977
val x1051 = new ParseResultChar(x1048,x1049,x1050)
x1051
}
val x1099 = while ({val x1072 = x1070
val x1073 = x1069
val x1074 = x1071
val x1075 = x1073 != x1074
val x1076 = x1072 && x1075
x1076}) {
val x1078 = x1071
x1069 = x1078
val x1080 = x1053(x1078)
val x1081 = x1080.empty
val x1097 = if (x1081) {
x1070 = false
()
} else {
val x1084 = x1065
val x1085 = x1066
val x1086 = x1067
val x1088 = x1080.res
val x1089 = x1084+x1088
x1065 = x1089
x1066 = false
val x1090 = x1080.next
x1067 = x1090
x1071 = x1090
()
}
x1097
}
val x1100 = x1065
val x1101 = x1066
val x1102 = x1067
val x1107 = if (x1101) {
true
} else {
false
}
val x1115 = if (x1107) {
x19
} else {
val x1106 = if (x1101) {
val x16 = null.asInstanceOf[Tuple2CharString]
x16
} else {
val x1104 = new Tuple2CharString(x1055,x1100)
x1104
}
val x1111 = x1106._1
val x1112 = x1106._2
val x1113 = x1111+x1112
x1113
}
x969 = x1115
val x1116 = if (x1107) {
true
} else {
false
}
x970 = x1116
val x1108 = if (x1101) {
0
} else {
x1102
}
val x1117 = if (x1107) {
x1108
} else {
x1108
}
x971 = x1117
()
} else {
x969 = x19
x970 = true
x971 = 0
()
}
x1127
}
val x1130 = x969
val x1131 = x970
val x1132 = x971
val x1133 = new ParseResultString(x1130,x1131,x1132)
val x1134 = println(x1133)
x1134
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Date,false,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headerParse extends ((Array[Char])=>(Unit)) {
def apply(x1303:Array[Char]): Unit = {
val x1304 = null.asInstanceOf[Tuple2StringString]
var x1306: Tuple2StringString = x1304
var x1307: Boolean = true
var x1308: Int = -1
val x1322 = x1303.length
val x1391 = 0 >= x1322
val x1701 = if (x1391) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
val x1392 = x1303(0)
val x1393 = x1392 >= 'A'
val x1394 = x1392 <= 'Z'
val x1395 = x1393 && x1394
val x1699 = if (x1395) {
var x1402: java.lang.String = ""
var x1403: Boolean = false
val x14 = 0 + 1
var x1404: Int = x14
var x1406: Int = -1
var x1407: Boolean = true
var x1408: Int = x14
val x10 = null.asInstanceOf[Char]
val x1354 = {x1316: (Int) => 
var x1318: Char = x10
var x1319: Boolean = true
var x1320: Int = x1316
val x1323 = x1316 >= x1322
val x1348 = if (x1323) {
x1318 = x10
x1319 = true
x1320 = x1316
()
} else {
val x1324 = x1303(x1316)
val x1325 = x1324 >= 'a'
val x1326 = x1324 <= 'z'
val x1327 = x1325 && x1326
val x1328 = x1324 >= 'A'
val x1329 = x1324 <= 'Z'
val x1330 = x1328 && x1329
val x1331 = x1327 || x1330
val x1346 = if (x1331) {
x1318 = x1324
x1319 = false
val x1332 = x1316 + 1
x1320 = x1332
()
} else {
x1318 = x10
x1319 = true
x1320 = x1316
()
}
x1346
}
val x1349 = x1318
val x1350 = x1319
val x1351 = x1320
val x1352 = new ParseResultChar(x1349,x1350,x1351)
x1352
}
val x1390 = {x1310: (Int) => 
var x1312: Char = x10
var x1313: Boolean = true
var x1314: Int = x1310
val x1355 = x1354(x1310)
val x1356 = x1355.empty
val x1384 = if (x1356) {
val x1357 = x1310 >= x1322
val x1376 = if (x1357) {
x1312 = x10
x1313 = true
x1314 = x1310
()
} else {
val x1358 = x1303(x1310)
val x1359 = x1358 == '-'
val x1374 = if (x1359) {
x1312 = x1358
x1313 = false
val x1360 = x1310 + 1
x1314 = x1360
()
} else {
x1312 = x10
x1313 = true
x1314 = x1310
()
}
x1374
}
x1376
} else {
val x1378 = x1355.res
x1312 = x1378
x1313 = x1356
val x1381 = x1355.next
x1314 = x1381
()
}
val x1385 = x1312
val x1386 = x1313
val x1387 = x1314
val x1388 = new ParseResultChar(x1385,x1386,x1387)
x1388
}
val x1436 = while ({val x1409 = x1407
val x1410 = x1406
val x1411 = x1408
val x1412 = x1410 != x1411
val x1413 = x1409 && x1412
x1413}) {
val x1415 = x1408
x1406 = x1415
val x1417 = x1390(x1415)
val x1418 = x1417.empty
val x1434 = if (x1418) {
x1407 = false
()
} else {
val x1421 = x1402
val x1422 = x1403
val x1423 = x1404
val x1425 = x1417.res
val x1426 = x1421+x1425
x1402 = x1426
x1403 = false
val x1427 = x1417.next
x1404 = x1427
x1408 = x1427
()
}
x1434
}
val x1437 = x1402
val x1438 = x1403
val x1439 = x1404
val x1444 = if (x1438) {
true
} else {
false
}
val x1453 = if (x1444) {
true
} else {
false
}
val x1693 = if (x1453) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
val x7 = List()
var x1461: scala.collection.immutable.List[Char] = x7
var x1462: Boolean = false
val x1445 = if (x1438) {
0
} else {
x1439
}
val x1454 = if (x1444) {
x1445
} else {
x1445
}
var x1463: Int = x1454
var x1465: Int = -1
var x1466: Boolean = true
var x1467: Int = x1454
val x1502 = while ({val x1468 = x1466
val x1469 = x1465
val x1470 = x1467
val x1471 = x1469 != x1470
val x1472 = x1468 && x1471
x1472}) {
val x1474 = x1467
x1465 = x1474
val x1476 = x1474 >= x1322
val x1500 = if (x1476) {
x1466 = false
()
} else {
val x1478 = x1303(x1474)
val x1479 = x1478 == ' '
val x1498 = if (x1479) {
val x1484 = x1461
val x1485 = x1462
val x1486 = x1463
val x1488 = List(x1478)
val x1489 = x1484 ::: x1488
x1461 = x1489
x1462 = false
val x1480 = x1474 + 1
x1463 = x1480
x1467 = x1480
()
} else {
x1466 = false
()
}
x1498
}
x1500
}
val x1503 = x1461
val x1504 = x1462
val x1505 = x1463
val x1510 = if (x1504) {
true
} else {
false
}
val x1691 = if (x1510) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
val x1511 = if (x1504) {
x1505
} else {
x1505
}
val x1514 = x1511 >= x1322
val x1689 = if (x1514) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
val x1516 = x1303(x1511)
val x1517 = x1516 == ':'
val x1687 = if (x1517) {
var x1540: scala.collection.immutable.List[Char] = x7
var x1541: Boolean = false
val x1518 = x1511 + 1
var x1542: Int = x1518
var x1544: Int = -1
var x1545: Boolean = true
var x1546: Int = x1518
val x1581 = while ({val x1547 = x1545
val x1548 = x1544
val x1549 = x1546
val x1550 = x1548 != x1549
val x1551 = x1547 && x1550
x1551}) {
val x1553 = x1546
x1544 = x1553
val x1555 = x1553 >= x1322
val x1579 = if (x1555) {
x1545 = false
()
} else {
val x1557 = x1303(x1553)
val x1558 = x1557 == ' '
val x1577 = if (x1558) {
val x1563 = x1540
val x1564 = x1541
val x1565 = x1542
val x1567 = List(x1557)
val x1568 = x1563 ::: x1567
x1540 = x1568
x1541 = false
val x1559 = x1553 + 1
x1542 = x1559
x1546 = x1559
()
} else {
x1545 = false
()
}
x1577
}
x1579
}
val x1582 = x1540
val x1583 = x1541
val x1584 = x1542
val x1589 = if (x1583) {
true
} else {
false
}
val x1681 = if (x1589) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
var x1604: java.lang.String = ""
var x1605: Boolean = false
val x1590 = if (x1583) {
x1584
} else {
x1584
}
var x1606: Int = x1590
var x1608: Int = -1
var x1609: Boolean = true
var x1610: Int = x1590
val x1645 = while ({val x1611 = x1609
val x1612 = x1608
val x1613 = x1610
val x1614 = x1612 != x1613
val x1615 = x1611 && x1614
x1615}) {
val x1617 = x1610
x1608 = x1617
val x1619 = x1617 >= x1322
val x1643 = if (x1619) {
x1609 = false
()
} else {
val x1621 = x1303(x1617)
val x1627 = x1621 == '
'
val x1641 = if (x1627) {
x1609 = false
()
} else {
val x1630 = x1604
val x1631 = x1605
val x1632 = x1606
val x1634 = x1630+x1621
x1604 = x1634
x1605 = false
val x1623 = x1617 + 1
x1606 = x1623
x1610 = x1623
()
}
x1641
}
x1643
}
val x1646 = x1604
val x1647 = x1605
val x1648 = x1606
val x1679 = if (x1647) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
val x1650 = x1648 >= x1322
val x1677 = if (x1650) {
x1306 = x1304
x1307 = true
x1308 = 0
()
} else {
val x1652 = x1303(x1648)
val x1653 = x1652 == '
'
val x1675 = if (x1653) {
val x1452 = if (x1444) {
val x19 = null.asInstanceOf[java.lang.String]
x19
} else {
val x1443 = if (x1438) {
val x16 = null.asInstanceOf[Tuple2CharString]
x16
} else {
val x1441 = new Tuple2CharString(x1392,x1437)
x1441
}
val x1448 = x1443._1
val x1449 = x1443._2
val x1450 = x1448+x1449
x1450
}
val x1665 = new Tuple2StringString(x1452,x1646)
x1306 = x1665
x1307 = false
val x1654 = x1648 + 1
x1308 = x1654
()
} else {
x1306 = x1304
x1307 = true
x1308 = 0
()
}
x1675
}
x1677
}
x1679
}
x1681
} else {
x1306 = x1304
x1307 = true
x1308 = 0
()
}
x1687
}
x1689
}
x1691
}
x1693
} else {
x1306 = x1304
x1307 = true
x1308 = 0
()
}
x1699
}
val x1702 = x1306
val x1703 = x1307
val x1704 = x1308
val x1705 = new ParseResultTuple2StringString(x1702,x1703,x1704)
val x1706 = println(x1705)
x1706
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=2000
compilation: ok
ParseResultTuple2StringString(Tuple2StringString(Date,Mon, 23 May 2005 22:38:34 GMT),false,36)
ParseResultTuple2StringString(Tuple2StringString(Server,Apache/1.3.3.7 (Unix) (Red-Hat/Linux)),false,46)
ParseResultTuple2StringString(Tuple2StringString(Last-Modified,Wed, 08 Jan 2003 23:11:55 GMT),false,45)
ParseResultTuple2StringString(Tuple2StringString(Etag,\"3f80f-1b6-3e1cb03b\"),false,29)
ParseResultTuple2StringString(Tuple2StringString(Content-Type,text/html; charset=UTF-8),false,39)
ParseResultTuple2StringString(Tuple2StringString(Content-Length,131),false,20)
ParseResultTuple2StringString(null,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class headersParse extends ((Array[Char])=>(Unit)) {
def apply(x2110:Array[Char]): Unit = {
val x2111 = null.asInstanceOf[Anon1323431030]
var x2113: Anon1323431030 = x2111
var x2114: Boolean = true
var x2115: Int = -1
var x2200: Int = 200
var x2201: Int = 0
var x2202: java.lang.String = "close"
var x2203: Boolean = false
var x2204: Boolean = false
var x2206: Boolean = false
var x2207: Int = 0
var x2209: Int = -1
var x2210: Boolean = true
var x2211: Int = 0
val x2129 = x2110.length
val x10 = null.asInstanceOf[Char]
val x2161 = {x2123: (Int) => 
var x2125: Char = x10
var x2126: Boolean = true
var x2127: Int = x2123
val x2130 = x2123 >= x2129
val x2155 = if (x2130) {
x2125 = x10
x2126 = true
x2127 = x2123
()
} else {
val x2131 = x2110(x2123)
val x2132 = x2131 >= 'a'
val x2133 = x2131 <= 'z'
val x2134 = x2132 && x2133
val x2135 = x2131 >= 'A'
val x2136 = x2131 <= 'Z'
val x2137 = x2135 && x2136
val x2138 = x2134 || x2137
val x2153 = if (x2138) {
x2125 = x2131
x2126 = false
val x2139 = x2123 + 1
x2127 = x2139
()
} else {
x2125 = x10
x2126 = true
x2127 = x2123
()
}
x2153
}
val x2156 = x2125
val x2157 = x2126
val x2158 = x2127
val x2159 = new ParseResultChar(x2156,x2157,x2158)
x2159
}
val x2197 = {x2117: (Int) => 
var x2119: Char = x10
var x2120: Boolean = true
var x2121: Int = x2117
val x2162 = x2161(x2117)
val x2163 = x2162.empty
val x2191 = if (x2163) {
val x2164 = x2117 >= x2129
val x2183 = if (x2164) {
x2119 = x10
x2120 = true
x2121 = x2117
()
} else {
val x2165 = x2110(x2117)
val x2166 = x2165 == '-'
val x2181 = if (x2166) {
x2119 = x2165
x2120 = false
val x2167 = x2117 + 1
x2121 = x2167
()
} else {
x2119 = x10
x2120 = true
x2121 = x2117
()
}
x2181
}
x2183
} else {
val x2185 = x2162.res
x2119 = x2185
x2120 = x2163
val x2188 = x2162.next
x2121 = x2188
()
}
val x2192 = x2119
val x2193 = x2120
val x2194 = x2121
val x2195 = new ParseResultChar(x2192,x2193,x2194)
x2195
}
val x7 = List()
val x19 = null.asInstanceOf[java.lang.String]
val x16 = null.asInstanceOf[Tuple2CharString]
val x2573 = while ({val x2212 = x2210
val x2213 = x2209
val x2214 = x2211
val x2215 = x2213 != x2214
val x2216 = x2212 && x2215
x2216}) {
val x2218 = x2211
x2209 = x2218
val x2220 = x2218 >= x2129
val x2571 = if (x2220) {
x2210 = false
()
} else {
val x2222 = x2110(x2218)
val x2223 = x2222 >= 'A'
val x2224 = x2222 <= 'Z'
val x2225 = x2223 && x2224
val x2569 = if (x2225) {
var x2234: java.lang.String = ""
var x2235: Boolean = false
val x2226 = x2218 + 1
var x2236: Int = x2226
var x2238: Int = -1
var x2239: Boolean = true
var x2240: Int = x2226
val x2268 = while ({val x2241 = x2239
val x2242 = x2238
val x2243 = x2240
val x2244 = x2242 != x2243
val x2245 = x2241 && x2244
x2245}) {
val x2247 = x2240
x2238 = x2247
val x2249 = x2197(x2247)
val x2250 = x2249.empty
val x2266 = if (x2250) {
x2239 = false
()
} else {
val x2253 = x2234
val x2254 = x2235
val x2255 = x2236
val x2257 = x2249.res
val x2258 = x2253+x2257
x2234 = x2258
x2235 = false
val x2259 = x2249.next
x2236 = x2259
x2240 = x2259
()
}
x2266
}
val x2269 = x2234
val x2270 = x2235
val x2271 = x2236
val x2276 = if (x2270) {
true
} else {
false
}
val x2285 = if (x2276) {
true
} else {
false
}
val x2565 = if (x2285) {
x2210 = false
()
} else {
var x2291: scala.collection.immutable.List[Char] = x7
var x2292: Boolean = false
val x2277 = if (x2270) {
x2218
} else {
x2271
}
val x2286 = if (x2276) {
x2277
} else {
x2277
}
var x2293: Int = x2286
var x2295: Int = -1
var x2296: Boolean = true
var x2297: Int = x2286
val x2332 = while ({val x2298 = x2296
val x2299 = x2295
val x2300 = x2297
val x2301 = x2299 != x2300
val x2302 = x2298 && x2301
x2302}) {
val x2304 = x2297
x2295 = x2304
val x2306 = x2304 >= x2129
val x2330 = if (x2306) {
x2296 = false
()
} else {
val x2308 = x2110(x2304)
val x2309 = x2308 == ' '
val x2328 = if (x2309) {
val x2314 = x2291
val x2315 = x2292
val x2316 = x2293
val x2318 = List(x2308)
val x2319 = x2314 ::: x2318
x2291 = x2319
x2292 = false
val x2310 = x2304 + 1
x2293 = x2310
x2297 = x2310
()
} else {
x2296 = false
()
}
x2328
}
x2330
}
val x2333 = x2291
val x2334 = x2292
val x2335 = x2293
val x2340 = if (x2334) {
true
} else {
false
}
val x2563 = if (x2340) {
x2210 = false
()
} else {
val x2341 = if (x2334) {
x2335
} else {
x2335
}
val x2344 = x2341 >= x2129
val x2561 = if (x2344) {
x2210 = false
()
} else {
val x2346 = x2110(x2341)
val x2347 = x2346 == ':'
val x2559 = if (x2347) {
var x2366: scala.collection.immutable.List[Char] = x7
var x2367: Boolean = false
val x2348 = x2341 + 1
var x2368: Int = x2348
var x2370: Int = -1
var x2371: Boolean = true
var x2372: Int = x2348
val x2407 = while ({val x2373 = x2371
val x2374 = x2370
val x2375 = x2372
val x2376 = x2374 != x2375
val x2377 = x2373 && x2376
x2377}) {
val x2379 = x2372
x2370 = x2379
val x2381 = x2379 >= x2129
val x2405 = if (x2381) {
x2371 = false
()
} else {
val x2383 = x2110(x2379)
val x2384 = x2383 == ' '
val x2403 = if (x2384) {
val x2389 = x2366
val x2390 = x2367
val x2391 = x2368
val x2393 = List(x2383)
val x2394 = x2389 ::: x2393
x2366 = x2394
x2367 = false
val x2385 = x2379 + 1
x2368 = x2385
x2372 = x2385
()
} else {
x2371 = false
()
}
x2403
}
x2405
}
val x2408 = x2366
val x2409 = x2367
val x2410 = x2368
val x2415 = if (x2409) {
true
} else {
false
}
val x2555 = if (x2415) {
x2210 = false
()
} else {
var x2428: java.lang.String = ""
var x2429: Boolean = false
val x2416 = if (x2409) {
x2410
} else {
x2410
}
var x2430: Int = x2416
var x2432: Int = -1
var x2433: Boolean = true
var x2434: Int = x2416
val x2469 = while ({val x2435 = x2433
val x2436 = x2432
val x2437 = x2434
val x2438 = x2436 != x2437
val x2439 = x2435 && x2438
x2439}) {
val x2441 = x2434
x2432 = x2441
val x2443 = x2441 >= x2129
val x2467 = if (x2443) {
x2433 = false
()
} else {
val x2445 = x2110(x2441)
val x2451 = x2445 == '
'
val x2465 = if (x2451) {
x2433 = false
()
} else {
val x2454 = x2428
val x2455 = x2429
val x2456 = x2430
val x2458 = x2454+x2445
x2428 = x2458
x2429 = false
val x2447 = x2441 + 1
x2430 = x2447
x2434 = x2447
()
}
x2465
}
x2467
}
val x2470 = x2428
val x2471 = x2429
val x2472 = x2430
val x2553 = if (x2471) {
x2210 = false
()
} else {
val x2474 = x2472 >= x2129
val x2551 = if (x2474) {
x2210 = false
()
} else {
val x2476 = x2110(x2472)
val x2477 = x2476 == '
'
val x2549 = if (x2477) {
val x2487 = x2200
val x2488 = x2201
val x2489 = x2202
val x2490 = x2203
val x2491 = x2204
val x2493 = x2206
val x2494 = x2207
val x2284 = if (x2276) {
x19
} else {
val x2275 = if (x2270) {
x16
} else {
val x2273 = new Tuple2CharString(x2222,x2269)
x2273
}
val x2280 = x2275._1
val x2281 = x2275._2
val x2282 = x2280+x2281
x2282
}
val x2496 = x2284 == "connection"
val x2497 = x2284 == "proxy-connection"
val x2498 = x2496 || x2497
val x2499 = x2470 == "keep-alive"
val x2500 = x2470 == "close"
val x2501 = x2499 || x2500
val x2502 = x2498 && x2501
val x2531 = if (x2502) {
x2487
} else {
val x2504 = x2284 == "Content-Length"
val x2525 = if (x2504) {
x2487
} else {
val x2507 = x2284 == "Transfer-Encoding"
val x2508 = x2470 == "chunked"
val x2509 = x2507 && x2508
val x2519 = if (x2509) {
x2487
} else {
val x2511 = x2284 == "upgrade"
val x2513 = if (x2511) {
x2487
} else {
x2487
}
x2513
}
x2519
}
x2525
}
x2200 = x2531
val x2532 = if (x2502) {
x2488
} else {
val x2504 = x2284 == "Content-Length"
val x2526 = if (x2504) {
val x2505 = x2470.toInt
x2505
} else {
val x2507 = x2284 == "Transfer-Encoding"
val x2508 = x2470 == "chunked"
val x2509 = x2507 && x2508
val x2520 = if (x2509) {
x2488
} else {
val x2511 = x2284 == "upgrade"
val x2514 = if (x2511) {
x2488
} else {
x2488
}
x2514
}
x2520
}
x2526
}
x2201 = x2532
val x2533 = if (x2502) {
x2470
} else {
val x2504 = x2284 == "Content-Length"
val x2527 = if (x2504) {
x2489
} else {
val x2507 = x2284 == "Transfer-Encoding"
val x2508 = x2470 == "chunked"
val x2509 = x2507 && x2508
val x2521 = if (x2509) {
x2489
} else {
val x2511 = x2284 == "upgrade"
val x2515 = if (x2511) {
x2489
} else {
x2489
}
x2515
}
x2521
}
x2527
}
x2202 = x2533
val x2534 = if (x2502) {
x2490
} else {
val x2504 = x2284 == "Content-Length"
val x2528 = if (x2504) {
x2490
} else {
val x2507 = x2284 == "Transfer-Encoding"
val x2508 = x2470 == "chunked"
val x2509 = x2507 && x2508
val x2522 = if (x2509) {
true
} else {
val x2511 = x2284 == "upgrade"
val x2516 = if (x2511) {
x2490
} else {
x2490
}
x2516
}
x2522
}
x2528
}
x2203 = x2534
val x2535 = if (x2502) {
x2491
} else {
val x2504 = x2284 == "Content-Length"
val x2529 = if (x2504) {
x2491
} else {
val x2507 = x2284 == "Transfer-Encoding"
val x2508 = x2470 == "chunked"
val x2509 = x2507 && x2508
val x2523 = if (x2509) {
x2491
} else {
val x2511 = x2284 == "upgrade"
val x2517 = if (x2511) {
true
} else {
x2491
}
x2517
}
x2523
}
x2529
}
x2204 = x2535
x2206 = false
val x2478 = x2472 + 1
x2207 = x2478
x2211 = x2478
()
} else {
x2210 = false
()
}
x2549
}
x2551
}
x2553
}
x2555
} else {
x2210 = false
()
}
x2559
}
x2561
}
x2563
}
x2565
} else {
x2210 = false
()
}
x2569
}
x2571
}
val x2574 = x2200
val x2575 = x2201
val x2576 = x2202
val x2577 = x2203
val x2578 = x2204
val x2580 = x2206
val x2581 = x2207
val x2579 = new Anon1323431030(x2574,x2575,x2576,x2577,x2578)
x2113 = x2579
x2114 = x2580
x2115 = x2581
val x2586 = x2113
val x2587 = x2114
val x2588 = x2115
val x2589 = new ParseResultAnon1323431030(x2586,x2587,x2588)
val x2590 = println(x2589)
x2590
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=3000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(200,131,close,false,false),false,215)
nVars=4000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse extends ((Array[Char])=>(Unit)) {
def apply(x3070:Array[Char]): Unit = {
val x2111 = null.asInstanceOf[Anon1323431030]
var x3071: Anon1323431030 = x2111
var x3072: Boolean = true
var x3073: Int = -1
val x3087 = x3070.length
val x3156 = 0 >= x3087
val x4036 = if (x3156) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3157 = x3070(0)
val x3158 = x3157 == 'H'
val x4034 = if (x3158) {
val x14 = 0 + 1
val x3169 = x14 >= x3087
val x4028 = if (x3169) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3170 = x3070(x14)
val x3171 = x3170 == 'T'
val x4026 = if (x3171) {
val x34 = x14 + 1
val x3177 = x34 >= x3087
val x4020 = if (x3177) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3178 = x3070(x34)
val x3179 = x3178 == 'T'
val x4018 = if (x3179) {
val x46 = x34 + 1
val x3186 = x46 >= x3087
val x4012 = if (x3186) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3187 = x3070(x46)
val x3188 = x3187 == 'P'
val x4010 = if (x3188) {
val x59 = x46 + 1
val x3195 = x59 >= x3087
val x4004 = if (x3195) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3196 = x3070(x59)
val x3197 = x3196 == '/'
val x4002 = if (x3197) {
var x3223: Int = 0
var x3224: Boolean = false
val x72 = x59 + 1
var x3225: Int = x72
var x3227: Int = -1
var x3228: Boolean = true
var x3229: Int = x72
val x3270 = while ({val x3230 = x3228
val x3231 = x3227
val x3232 = x3229
val x3233 = x3231 != x3232
val x3234 = x3230 && x3233
x3234}) {
val x3236 = x3229
x3227 = x3236
val x3238 = x3236 >= x3087
val x3268 = if (x3238) {
x3228 = false
()
} else {
val x3240 = x3070(x3236)
val x3241 = x3240 >= '0'
val x3242 = x3240 <= '9'
val x3243 = x3241 && x3242
val x3266 = if (x3243) {
val x3252 = x3223
val x3253 = x3224
val x3254 = x3225
val x3249 = x3240 - '0'
val x3250 = x3249.toInt
val x3256 = x3252 * 10
val x3257 = x3256 + x3250
x3223 = x3257
x3224 = false
val x3244 = x3236 + 1
x3225 = x3244
x3229 = x3244
()
} else {
x3228 = false
()
}
x3266
}
x3268
}
val x3271 = x3223
val x3272 = x3224
val x3273 = x3225
val x3996 = if (x3272) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3275 = x3273 >= x3087
val x3994 = if (x3275) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3277 = x3070(x3273)
val x3278 = x3277 == '.'
val x3992 = if (x3278) {
var x3291: Int = 0
var x3292: Boolean = false
val x3279 = x3273 + 1
var x3293: Int = x3279
var x3295: Int = -1
var x3296: Boolean = true
var x3297: Int = x3279
val x3338 = while ({val x3298 = x3296
val x3299 = x3295
val x3300 = x3297
val x3301 = x3299 != x3300
val x3302 = x3298 && x3301
x3302}) {
val x3304 = x3297
x3295 = x3304
val x3306 = x3304 >= x3087
val x3336 = if (x3306) {
x3296 = false
()
} else {
val x3308 = x3070(x3304)
val x3309 = x3308 >= '0'
val x3310 = x3308 <= '9'
val x3311 = x3309 && x3310
val x3334 = if (x3311) {
val x3320 = x3291
val x3321 = x3292
val x3322 = x3293
val x3317 = x3308 - '0'
val x3318 = x3317.toInt
val x3324 = x3320 * 10
val x3325 = x3324 + x3318
x3291 = x3325
x3292 = false
val x3312 = x3304 + 1
x3293 = x3312
x3297 = x3312
()
} else {
x3296 = false
()
}
x3334
}
x3336
}
val x3339 = x3291
val x3340 = x3292
val x3341 = x3293
val x3346 = if (x3340) {
true
} else {
false
}
val x3352 = if (x3346) {
true
} else {
false
}
val x3986 = if (x3352) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x7 = List()
var x3360: scala.collection.immutable.List[Char] = x7
var x3361: Boolean = false
val x3353 = if (x3346) {
0
} else {
val x3347 = if (x3340) {
x72
} else {
x3341
}
x3347
}
var x3362: Int = x3353
var x3364: Int = -1
var x3365: Boolean = true
var x3366: Int = x3353
val x3401 = while ({val x3367 = x3365
val x3368 = x3364
val x3369 = x3366
val x3370 = x3368 != x3369
val x3371 = x3367 && x3370
x3371}) {
val x3373 = x3366
x3364 = x3373
val x3375 = x3373 >= x3087
val x3399 = if (x3375) {
x3365 = false
()
} else {
val x3377 = x3070(x3373)
val x3378 = x3377 == ' '
val x3397 = if (x3378) {
val x3383 = x3360
val x3384 = x3361
val x3385 = x3362
val x3387 = List(x3377)
val x3388 = x3383 ::: x3387
x3360 = x3388
x3361 = false
val x3379 = x3373 + 1
x3362 = x3379
x3366 = x3379
()
} else {
x3365 = false
()
}
x3397
}
x3399
}
val x3402 = x3360
val x3403 = x3361
val x3404 = x3362
val x3409 = if (x3403) {
true
} else {
false
}
val x3415 = if (x3409) {
true
} else {
false
}
val x3984 = if (x3415) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
var x3423: Int = 0
var x3424: Boolean = false
val x3416 = if (x3409) {
0
} else {
val x3410 = if (x3403) {
x3404
} else {
x3404
}
x3410
}
var x3425: Int = x3416
var x3427: Int = -1
var x3428: Boolean = true
var x3429: Int = x3416
val x3470 = while ({val x3430 = x3428
val x3431 = x3427
val x3432 = x3429
val x3433 = x3431 != x3432
val x3434 = x3430 && x3433
x3434}) {
val x3436 = x3429
x3427 = x3436
val x3438 = x3436 >= x3087
val x3468 = if (x3438) {
x3428 = false
()
} else {
val x3440 = x3070(x3436)
val x3441 = x3440 >= '0'
val x3442 = x3440 <= '9'
val x3443 = x3441 && x3442
val x3466 = if (x3443) {
val x3452 = x3423
val x3453 = x3424
val x3454 = x3425
val x3449 = x3440 - '0'
val x3450 = x3449.toInt
val x3456 = x3452 * 10
val x3457 = x3456 + x3450
x3423 = x3457
x3424 = false
val x3444 = x3436 + 1
x3425 = x3444
x3429 = x3444
()
} else {
x3428 = false
()
}
x3466
}
x3468
}
val x3471 = x3423
val x3472 = x3424
val x3473 = x3425
val x3982 = if (x3472) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
var x3480: java.lang.String = ""
var x3481: Boolean = false
var x3482: Int = x3473
var x3484: Int = -1
var x3485: Boolean = true
var x3486: Int = x3473
val x3521 = while ({val x3487 = x3485
val x3488 = x3484
val x3489 = x3486
val x3490 = x3488 != x3489
val x3491 = x3487 && x3490
x3491}) {
val x3493 = x3486
x3484 = x3493
val x3495 = x3493 >= x3087
val x3519 = if (x3495) {
x3485 = false
()
} else {
val x3497 = x3070(x3493)
val x3503 = x3497 == '
'
val x3517 = if (x3503) {
x3485 = false
()
} else {
val x3506 = x3480
val x3507 = x3481
val x3508 = x3482
val x3510 = x3506+x3497
x3480 = x3510
x3481 = false
val x3499 = x3493 + 1
x3482 = x3499
x3486 = x3499
()
}
x3517
}
x3519
}
val x3522 = x3480
val x3523 = x3481
val x3524 = x3482
val x3980 = if (x3523) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3527 = x3524 >= x3087
val x3978 = if (x3527) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3529 = x3070(x3524)
val x3530 = x3529 == '
'
val x3976 = if (x3530) {
var x3545: Int = 200
var x3546: Int = 0
var x3547: java.lang.String = "close"
var x3548: Boolean = false
var x3549: Boolean = false
var x3551: Boolean = false
val x3531 = x3524 + 1
var x3552: Int = x3531
var x3554: Int = -1
var x3555: Boolean = true
var x3556: Int = x3531
val x10 = null.asInstanceOf[Char]
val x3119 = {x3081: (Int) => 
var x3083: Char = x10
var x3084: Boolean = true
var x3085: Int = x3081
val x3088 = x3081 >= x3087
val x3113 = if (x3088) {
x3083 = x10
x3084 = true
x3085 = x3081
()
} else {
val x3089 = x3070(x3081)
val x3090 = x3089 >= 'a'
val x3091 = x3089 <= 'z'
val x3092 = x3090 && x3091
val x3093 = x3089 >= 'A'
val x3094 = x3089 <= 'Z'
val x3095 = x3093 && x3094
val x3096 = x3092 || x3095
val x3111 = if (x3096) {
x3083 = x3089
x3084 = false
val x3097 = x3081 + 1
x3085 = x3097
()
} else {
x3083 = x10
x3084 = true
x3085 = x3081
()
}
x3111
}
val x3114 = x3083
val x3115 = x3084
val x3116 = x3085
val x3117 = new ParseResultChar(x3114,x3115,x3116)
x3117
}
val x3155 = {x3075: (Int) => 
var x3077: Char = x10
var x3078: Boolean = true
var x3079: Int = x3075
val x3120 = x3119(x3075)
val x3121 = x3120.empty
val x3149 = if (x3121) {
val x3122 = x3075 >= x3087
val x3141 = if (x3122) {
x3077 = x10
x3078 = true
x3079 = x3075
()
} else {
val x3123 = x3070(x3075)
val x3124 = x3123 == '-'
val x3139 = if (x3124) {
x3077 = x3123
x3078 = false
val x3125 = x3075 + 1
x3079 = x3125
()
} else {
x3077 = x10
x3078 = true
x3079 = x3075
()
}
x3139
}
x3141
} else {
val x3143 = x3120.res
x3077 = x3143
x3078 = x3121
val x3146 = x3120.next
x3079 = x3146
()
}
val x3150 = x3077
val x3151 = x3078
val x3152 = x3079
val x3153 = new ParseResultChar(x3150,x3151,x3152)
x3153
}
val x19 = null.asInstanceOf[java.lang.String]
val x16 = null.asInstanceOf[Tuple2CharString]
val x3918 = while ({val x3557 = x3555
val x3558 = x3554
val x3559 = x3556
val x3560 = x3558 != x3559
val x3561 = x3557 && x3560
x3561}) {
val x3563 = x3556
x3554 = x3563
val x3565 = x3563 >= x3087
val x3916 = if (x3565) {
x3555 = false
()
} else {
val x3567 = x3070(x3563)
val x3568 = x3567 >= 'A'
val x3569 = x3567 <= 'Z'
val x3570 = x3568 && x3569
val x3914 = if (x3570) {
var x3579: java.lang.String = ""
var x3580: Boolean = false
val x3571 = x3563 + 1
var x3581: Int = x3571
var x3583: Int = -1
var x3584: Boolean = true
var x3585: Int = x3571
val x3613 = while ({val x3586 = x3584
val x3587 = x3583
val x3588 = x3585
val x3589 = x3587 != x3588
val x3590 = x3586 && x3589
x3590}) {
val x3592 = x3585
x3583 = x3592
val x3594 = x3155(x3592)
val x3595 = x3594.empty
val x3611 = if (x3595) {
x3584 = false
()
} else {
val x3598 = x3579
val x3599 = x3580
val x3600 = x3581
val x3602 = x3594.res
val x3603 = x3598+x3602
x3579 = x3603
x3580 = false
val x3604 = x3594.next
x3581 = x3604
x3585 = x3604
()
}
x3611
}
val x3614 = x3579
val x3615 = x3580
val x3616 = x3581
val x3621 = if (x3615) {
true
} else {
false
}
val x3630 = if (x3621) {
true
} else {
false
}
val x3910 = if (x3630) {
x3555 = false
()
} else {
var x3636: scala.collection.immutable.List[Char] = x7
var x3637: Boolean = false
val x3622 = if (x3615) {
x3563
} else {
x3616
}
val x3631 = if (x3621) {
x3622
} else {
x3622
}
var x3638: Int = x3631
var x3640: Int = -1
var x3641: Boolean = true
var x3642: Int = x3631
val x3677 = while ({val x3643 = x3641
val x3644 = x3640
val x3645 = x3642
val x3646 = x3644 != x3645
val x3647 = x3643 && x3646
x3647}) {
val x3649 = x3642
x3640 = x3649
val x3651 = x3649 >= x3087
val x3675 = if (x3651) {
x3641 = false
()
} else {
val x3653 = x3070(x3649)
val x3654 = x3653 == ' '
val x3673 = if (x3654) {
val x3659 = x3636
val x3660 = x3637
val x3661 = x3638
val x3663 = List(x3653)
val x3664 = x3659 ::: x3663
x3636 = x3664
x3637 = false
val x3655 = x3649 + 1
x3638 = x3655
x3642 = x3655
()
} else {
x3641 = false
()
}
x3673
}
x3675
}
val x3678 = x3636
val x3679 = x3637
val x3680 = x3638
val x3685 = if (x3679) {
true
} else {
false
}
val x3908 = if (x3685) {
x3555 = false
()
} else {
val x3686 = if (x3679) {
x3680
} else {
x3680
}
val x3689 = x3686 >= x3087
val x3906 = if (x3689) {
x3555 = false
()
} else {
val x3691 = x3070(x3686)
val x3692 = x3691 == ':'
val x3904 = if (x3692) {
var x3711: scala.collection.immutable.List[Char] = x7
var x3712: Boolean = false
val x3693 = x3686 + 1
var x3713: Int = x3693
var x3715: Int = -1
var x3716: Boolean = true
var x3717: Int = x3693
val x3752 = while ({val x3718 = x3716
val x3719 = x3715
val x3720 = x3717
val x3721 = x3719 != x3720
val x3722 = x3718 && x3721
x3722}) {
val x3724 = x3717
x3715 = x3724
val x3726 = x3724 >= x3087
val x3750 = if (x3726) {
x3716 = false
()
} else {
val x3728 = x3070(x3724)
val x3729 = x3728 == ' '
val x3748 = if (x3729) {
val x3734 = x3711
val x3735 = x3712
val x3736 = x3713
val x3738 = List(x3728)
val x3739 = x3734 ::: x3738
x3711 = x3739
x3712 = false
val x3730 = x3724 + 1
x3713 = x3730
x3717 = x3730
()
} else {
x3716 = false
()
}
x3748
}
x3750
}
val x3753 = x3711
val x3754 = x3712
val x3755 = x3713
val x3760 = if (x3754) {
true
} else {
false
}
val x3900 = if (x3760) {
x3555 = false
()
} else {
var x3773: java.lang.String = ""
var x3774: Boolean = false
val x3761 = if (x3754) {
x3755
} else {
x3755
}
var x3775: Int = x3761
var x3777: Int = -1
var x3778: Boolean = true
var x3779: Int = x3761
val x3814 = while ({val x3780 = x3778
val x3781 = x3777
val x3782 = x3779
val x3783 = x3781 != x3782
val x3784 = x3780 && x3783
x3784}) {
val x3786 = x3779
x3777 = x3786
val x3788 = x3786 >= x3087
val x3812 = if (x3788) {
x3778 = false
()
} else {
val x3790 = x3070(x3786)
val x3796 = x3790 == '
'
val x3810 = if (x3796) {
x3778 = false
()
} else {
val x3799 = x3773
val x3800 = x3774
val x3801 = x3775
val x3803 = x3799+x3790
x3773 = x3803
x3774 = false
val x3792 = x3786 + 1
x3775 = x3792
x3779 = x3792
()
}
x3810
}
x3812
}
val x3815 = x3773
val x3816 = x3774
val x3817 = x3775
val x3898 = if (x3816) {
x3555 = false
()
} else {
val x3819 = x3817 >= x3087
val x3896 = if (x3819) {
x3555 = false
()
} else {
val x3821 = x3070(x3817)
val x3822 = x3821 == '
'
val x3894 = if (x3822) {
val x3832 = x3545
val x3833 = x3546
val x3834 = x3547
val x3835 = x3548
val x3836 = x3549
val x3838 = x3551
val x3839 = x3552
val x3629 = if (x3621) {
x19
} else {
val x3620 = if (x3615) {
x16
} else {
val x3618 = new Tuple2CharString(x3567,x3614)
x3618
}
val x3625 = x3620._1
val x3626 = x3620._2
val x3627 = x3625+x3626
x3627
}
val x3841 = x3629 == "connection"
val x3842 = x3629 == "proxy-connection"
val x3843 = x3841 || x3842
val x3844 = x3815 == "keep-alive"
val x3845 = x3815 == "close"
val x3846 = x3844 || x3845
val x3847 = x3843 && x3846
val x3876 = if (x3847) {
x3832
} else {
val x3849 = x3629 == "Content-Length"
val x3870 = if (x3849) {
x3832
} else {
val x3852 = x3629 == "Transfer-Encoding"
val x3853 = x3815 == "chunked"
val x3854 = x3852 && x3853
val x3864 = if (x3854) {
x3832
} else {
val x3856 = x3629 == "upgrade"
val x3858 = if (x3856) {
x3832
} else {
x3832
}
x3858
}
x3864
}
x3870
}
x3545 = x3876
val x3877 = if (x3847) {
x3833
} else {
val x3849 = x3629 == "Content-Length"
val x3871 = if (x3849) {
val x3850 = x3815.toInt
x3850
} else {
val x3852 = x3629 == "Transfer-Encoding"
val x3853 = x3815 == "chunked"
val x3854 = x3852 && x3853
val x3865 = if (x3854) {
x3833
} else {
val x3856 = x3629 == "upgrade"
val x3859 = if (x3856) {
x3833
} else {
x3833
}
x3859
}
x3865
}
x3871
}
x3546 = x3877
val x3878 = if (x3847) {
x3815
} else {
val x3849 = x3629 == "Content-Length"
val x3872 = if (x3849) {
x3834
} else {
val x3852 = x3629 == "Transfer-Encoding"
val x3853 = x3815 == "chunked"
val x3854 = x3852 && x3853
val x3866 = if (x3854) {
x3834
} else {
val x3856 = x3629 == "upgrade"
val x3860 = if (x3856) {
x3834
} else {
x3834
}
x3860
}
x3866
}
x3872
}
x3547 = x3878
val x3879 = if (x3847) {
x3835
} else {
val x3849 = x3629 == "Content-Length"
val x3873 = if (x3849) {
x3835
} else {
val x3852 = x3629 == "Transfer-Encoding"
val x3853 = x3815 == "chunked"
val x3854 = x3852 && x3853
val x3867 = if (x3854) {
true
} else {
val x3856 = x3629 == "upgrade"
val x3861 = if (x3856) {
x3835
} else {
x3835
}
x3861
}
x3867
}
x3873
}
x3548 = x3879
val x3880 = if (x3847) {
x3836
} else {
val x3849 = x3629 == "Content-Length"
val x3874 = if (x3849) {
x3836
} else {
val x3852 = x3629 == "Transfer-Encoding"
val x3853 = x3815 == "chunked"
val x3854 = x3852 && x3853
val x3868 = if (x3854) {
x3836
} else {
val x3856 = x3629 == "upgrade"
val x3862 = if (x3856) {
true
} else {
x3836
}
x3862
}
x3868
}
x3874
}
x3549 = x3880
x3551 = false
val x3823 = x3817 + 1
x3552 = x3823
x3556 = x3823
()
} else {
x3555 = false
()
}
x3894
}
x3896
}
x3898
}
x3900
} else {
x3555 = false
()
}
x3904
}
x3906
}
x3908
}
x3910
} else {
x3555 = false
()
}
x3914
}
x3916
}
val x3919 = x3545
val x3920 = x3546
val x3921 = x3547
val x3922 = x3548
val x3923 = x3549
val x3925 = x3551
val x3926 = x3552
val x3931 = if (x3925) {
true
} else {
false
}
val x3970 = if (x3931) {
x3071 = x2111
x3072 = true
val x3932 = if (x3925) {
0
} else {
x3926
}
x3073 = x3932
()
} else {
val x3932 = if (x3925) {
0
} else {
x3926
}
val x3934 = x3932 >= x3087
val x3968 = if (x3934) {
x3071 = x2111
x3072 = true
x3073 = 0
()
} else {
val x3936 = x3070(x3932)
val x3937 = x3936 == '
'
val x3966 = if (x3937) {
val x3930 = if (x3925) {
val x3161 = null.asInstanceOf[Tuple2IntAnon1323431030]
x3161
} else {
val x3924 = new Anon1323431030(x3919,x3920,x3921,x3922,x3923)
val x3928 = new Tuple2IntAnon1323431030(x3471,x3924)
x3928
}
val x3950 = x3930._1
val x3951 = x3930._2
val x3952 = x3951.contentLength
val x3953 = x3951.connection
val x3954 = x3951.chunked
val x3955 = x3951.upgrade
val x3956 = new Anon1323431030(x3950,x3952,x3953,x3954,x3955)
x3071 = x3956
x3072 = false
val x3938 = x3932 + 1
x3073 = x3938
()
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x3966
}
x3968
}
x3970
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x3976
}
x3978
}
x3980
}
x3982
}
x3984
}
x3986
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x3992
}
x3994
}
x3996
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x4002
}
x4004
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x4010
}
x4012
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x4018
}
x4020
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x4026
}
x4028
} else {
x3071 = x2111
x3072 = true
x3073 = 0
()
}
x4034
}
val x4037 = x3071
val x4038 = x3072
val x4039 = x3073
val x4040 = new ParseResultAnon1323431030(x4037,x4038,x4039)
val x4041 = println(x4040)
x4041
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=5000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(418,131,close,false,false),false,258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(Unit)) {
def apply(x5013:Array[Char]): Unit = {
val x19 = null.asInstanceOf[java.lang.String]
var x5014: java.lang.String = x19
var x5015: Boolean = true
var x5016: Int = -1
var x5019: java.lang.String = ""
var x5020: Boolean = false
var x5021: Int = 0
var x5023: Int = -1
var x5024: Boolean = true
var x5025: Int = 0
var x5026: Int = 0
val x5038 = x5013.length
val x5062 = while ({val x5027 = x5026
val x5029 = x5023
val x5030 = x5025
val x5033 = x5024
val x5028 = x5027 < 14
val x5031 = x5029 != x5030
val x5032 = x5028 && x5031
val x5034 = x5032 && x5033
x5034}) {
val x5036 = x5025
x5023 = x5036
val x5039 = x5036 >= x5038
val x5060 = if (x5039) {
x5024 = false
()
} else {
val x5046 = x5019
val x5047 = x5020
val x5048 = x5021
val x5041 = x5013(x5036)
val x5050 = x5046+x5041
x5019 = x5050
x5020 = false
val x5042 = x5036 + 1
x5021 = x5042
x5025 = x5042
val x5056 = x5026
val x5057 = x5056 + 1
x5026 = x5057
()
}
x5060
}
val x5063 = x5019
val x5064 = x5020
val x5065 = x5021
x5014 = x5063
x5015 = x5064
x5016 = x5065
val x5070 = x5014
val x5071 = x5015
val x5072 = x5016
val x5073 = new ParseResultString(x5070,x5071,x5072)
val x5074 = println(x5073)
x5074
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Make it funky!,false,14)
nVars=6000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class respAndMessageParse extends ((Array[Char])=>(Unit)) {
def apply(x5138:Array[Char]): Unit = {
val x5139 = null.asInstanceOf[Tuple2Anon1323431030String]
var x5141: Tuple2Anon1323431030String = x5139
var x5142: Boolean = true
var x5143: Int = -1
val x5157 = x5138.length
val x5226 = 0 >= x5157
val x6164 = if (x5226) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5227 = x5138(0)
val x5228 = x5227 == 'H'
val x6162 = if (x5228) {
val x14 = 0 + 1
val x5238 = x14 >= x5157
val x6156 = if (x5238) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5239 = x5138(x14)
val x5240 = x5239 == 'T'
val x6154 = if (x5240) {
val x34 = x14 + 1
val x5246 = x34 >= x5157
val x6148 = if (x5246) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5247 = x5138(x34)
val x5248 = x5247 == 'T'
val x6146 = if (x5248) {
val x46 = x34 + 1
val x5255 = x46 >= x5157
val x6140 = if (x5255) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5256 = x5138(x46)
val x5257 = x5256 == 'P'
val x6138 = if (x5257) {
val x59 = x46 + 1
val x5264 = x59 >= x5157
val x6132 = if (x5264) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5265 = x5138(x59)
val x5266 = x5265 == '/'
val x6130 = if (x5266) {
var x5292: Int = 0
var x5293: Boolean = false
val x72 = x59 + 1
var x5294: Int = x72
var x5296: Int = -1
var x5297: Boolean = true
var x5298: Int = x72
val x5339 = while ({val x5299 = x5297
val x5300 = x5296
val x5301 = x5298
val x5302 = x5300 != x5301
val x5303 = x5299 && x5302
x5303}) {
val x5305 = x5298
x5296 = x5305
val x5307 = x5305 >= x5157
val x5337 = if (x5307) {
x5297 = false
()
} else {
val x5309 = x5138(x5305)
val x5310 = x5309 >= '0'
val x5311 = x5309 <= '9'
val x5312 = x5310 && x5311
val x5335 = if (x5312) {
val x5321 = x5292
val x5322 = x5293
val x5323 = x5294
val x5318 = x5309 - '0'
val x5319 = x5318.toInt
val x5325 = x5321 * 10
val x5326 = x5325 + x5319
x5292 = x5326
x5293 = false
val x5313 = x5305 + 1
x5294 = x5313
x5298 = x5313
()
} else {
x5297 = false
()
}
x5335
}
x5337
}
val x5340 = x5292
val x5341 = x5293
val x5342 = x5294
val x6124 = if (x5341) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5344 = x5342 >= x5157
val x6122 = if (x5344) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5346 = x5138(x5342)
val x5347 = x5346 == '.'
val x6120 = if (x5347) {
var x5360: Int = 0
var x5361: Boolean = false
val x5348 = x5342 + 1
var x5362: Int = x5348
var x5364: Int = -1
var x5365: Boolean = true
var x5366: Int = x5348
val x5407 = while ({val x5367 = x5365
val x5368 = x5364
val x5369 = x5366
val x5370 = x5368 != x5369
val x5371 = x5367 && x5370
x5371}) {
val x5373 = x5366
x5364 = x5373
val x5375 = x5373 >= x5157
val x5405 = if (x5375) {
x5365 = false
()
} else {
val x5377 = x5138(x5373)
val x5378 = x5377 >= '0'
val x5379 = x5377 <= '9'
val x5380 = x5378 && x5379
val x5403 = if (x5380) {
val x5389 = x5360
val x5390 = x5361
val x5391 = x5362
val x5386 = x5377 - '0'
val x5387 = x5386.toInt
val x5393 = x5389 * 10
val x5394 = x5393 + x5387
x5360 = x5394
x5361 = false
val x5381 = x5373 + 1
x5362 = x5381
x5366 = x5381
()
} else {
x5365 = false
()
}
x5403
}
x5405
}
val x5408 = x5360
val x5409 = x5361
val x5410 = x5362
val x5415 = if (x5409) {
true
} else {
false
}
val x5421 = if (x5415) {
true
} else {
false
}
val x6114 = if (x5421) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x7 = List()
var x5429: scala.collection.immutable.List[Char] = x7
var x5430: Boolean = false
val x5422 = if (x5415) {
0
} else {
val x5416 = if (x5409) {
x72
} else {
x5410
}
x5416
}
var x5431: Int = x5422
var x5433: Int = -1
var x5434: Boolean = true
var x5435: Int = x5422
val x5470 = while ({val x5436 = x5434
val x5437 = x5433
val x5438 = x5435
val x5439 = x5437 != x5438
val x5440 = x5436 && x5439
x5440}) {
val x5442 = x5435
x5433 = x5442
val x5444 = x5442 >= x5157
val x5468 = if (x5444) {
x5434 = false
()
} else {
val x5446 = x5138(x5442)
val x5447 = x5446 == ' '
val x5466 = if (x5447) {
val x5452 = x5429
val x5453 = x5430
val x5454 = x5431
val x5456 = List(x5446)
val x5457 = x5452 ::: x5456
x5429 = x5457
x5430 = false
val x5448 = x5442 + 1
x5431 = x5448
x5435 = x5448
()
} else {
x5434 = false
()
}
x5466
}
x5468
}
val x5471 = x5429
val x5472 = x5430
val x5473 = x5431
val x5478 = if (x5472) {
true
} else {
false
}
val x5484 = if (x5478) {
true
} else {
false
}
val x6112 = if (x5484) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
var x5492: Int = 0
var x5493: Boolean = false
val x5485 = if (x5478) {
0
} else {
val x5479 = if (x5472) {
x5473
} else {
x5473
}
x5479
}
var x5494: Int = x5485
var x5496: Int = -1
var x5497: Boolean = true
var x5498: Int = x5485
val x5539 = while ({val x5499 = x5497
val x5500 = x5496
val x5501 = x5498
val x5502 = x5500 != x5501
val x5503 = x5499 && x5502
x5503}) {
val x5505 = x5498
x5496 = x5505
val x5507 = x5505 >= x5157
val x5537 = if (x5507) {
x5497 = false
()
} else {
val x5509 = x5138(x5505)
val x5510 = x5509 >= '0'
val x5511 = x5509 <= '9'
val x5512 = x5510 && x5511
val x5535 = if (x5512) {
val x5521 = x5492
val x5522 = x5493
val x5523 = x5494
val x5518 = x5509 - '0'
val x5519 = x5518.toInt
val x5525 = x5521 * 10
val x5526 = x5525 + x5519
x5492 = x5526
x5493 = false
val x5513 = x5505 + 1
x5494 = x5513
x5498 = x5513
()
} else {
x5497 = false
()
}
x5535
}
x5537
}
val x5540 = x5492
val x5541 = x5493
val x5542 = x5494
val x6110 = if (x5541) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
var x5549: java.lang.String = ""
var x5550: Boolean = false
var x5551: Int = x5542
var x5553: Int = -1
var x5554: Boolean = true
var x5555: Int = x5542
val x5590 = while ({val x5556 = x5554
val x5557 = x5553
val x5558 = x5555
val x5559 = x5557 != x5558
val x5560 = x5556 && x5559
x5560}) {
val x5562 = x5555
x5553 = x5562
val x5564 = x5562 >= x5157
val x5588 = if (x5564) {
x5554 = false
()
} else {
val x5566 = x5138(x5562)
val x5572 = x5566 == '
'
val x5586 = if (x5572) {
x5554 = false
()
} else {
val x5575 = x5549
val x5576 = x5550
val x5577 = x5551
val x5579 = x5575+x5566
x5549 = x5579
x5550 = false
val x5568 = x5562 + 1
x5551 = x5568
x5555 = x5568
()
}
x5586
}
x5588
}
val x5591 = x5549
val x5592 = x5550
val x5593 = x5551
val x6108 = if (x5592) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5596 = x5593 >= x5157
val x6106 = if (x5596) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x5598 = x5138(x5593)
val x5599 = x5598 == '
'
val x6104 = if (x5599) {
var x5614: Int = 200
var x5615: Int = 0
var x5616: java.lang.String = "close"
var x5617: Boolean = false
var x5618: Boolean = false
var x5620: Boolean = false
val x5600 = x5593 + 1
var x5621: Int = x5600
var x5623: Int = -1
var x5624: Boolean = true
var x5625: Int = x5600
val x10 = null.asInstanceOf[Char]
val x5189 = {x5151: (Int) => 
var x5153: Char = x10
var x5154: Boolean = true
var x5155: Int = x5151
val x5158 = x5151 >= x5157
val x5183 = if (x5158) {
x5153 = x10
x5154 = true
x5155 = x5151
()
} else {
val x5159 = x5138(x5151)
val x5160 = x5159 >= 'a'
val x5161 = x5159 <= 'z'
val x5162 = x5160 && x5161
val x5163 = x5159 >= 'A'
val x5164 = x5159 <= 'Z'
val x5165 = x5163 && x5164
val x5166 = x5162 || x5165
val x5181 = if (x5166) {
x5153 = x5159
x5154 = false
val x5167 = x5151 + 1
x5155 = x5167
()
} else {
x5153 = x10
x5154 = true
x5155 = x5151
()
}
x5181
}
val x5184 = x5153
val x5185 = x5154
val x5186 = x5155
val x5187 = new ParseResultChar(x5184,x5185,x5186)
x5187
}
val x5225 = {x5145: (Int) => 
var x5147: Char = x10
var x5148: Boolean = true
var x5149: Int = x5145
val x5190 = x5189(x5145)
val x5191 = x5190.empty
val x5219 = if (x5191) {
val x5192 = x5145 >= x5157
val x5211 = if (x5192) {
x5147 = x10
x5148 = true
x5149 = x5145
()
} else {
val x5193 = x5138(x5145)
val x5194 = x5193 == '-'
val x5209 = if (x5194) {
x5147 = x5193
x5148 = false
val x5195 = x5145 + 1
x5149 = x5195
()
} else {
x5147 = x10
x5148 = true
x5149 = x5145
()
}
x5209
}
x5211
} else {
val x5213 = x5190.res
x5147 = x5213
x5148 = x5191
val x5216 = x5190.next
x5149 = x5216
()
}
val x5220 = x5147
val x5221 = x5148
val x5222 = x5149
val x5223 = new ParseResultChar(x5220,x5221,x5222)
x5223
}
val x19 = null.asInstanceOf[java.lang.String]
val x16 = null.asInstanceOf[Tuple2CharString]
val x5987 = while ({val x5626 = x5624
val x5627 = x5623
val x5628 = x5625
val x5629 = x5627 != x5628
val x5630 = x5626 && x5629
x5630}) {
val x5632 = x5625
x5623 = x5632
val x5634 = x5632 >= x5157
val x5985 = if (x5634) {
x5624 = false
()
} else {
val x5636 = x5138(x5632)
val x5637 = x5636 >= 'A'
val x5638 = x5636 <= 'Z'
val x5639 = x5637 && x5638
val x5983 = if (x5639) {
var x5648: java.lang.String = ""
var x5649: Boolean = false
val x5640 = x5632 + 1
var x5650: Int = x5640
var x5652: Int = -1
var x5653: Boolean = true
var x5654: Int = x5640
val x5682 = while ({val x5655 = x5653
val x5656 = x5652
val x5657 = x5654
val x5658 = x5656 != x5657
val x5659 = x5655 && x5658
x5659}) {
val x5661 = x5654
x5652 = x5661
val x5663 = x5225(x5661)
val x5664 = x5663.empty
val x5680 = if (x5664) {
x5653 = false
()
} else {
val x5667 = x5648
val x5668 = x5649
val x5669 = x5650
val x5671 = x5663.res
val x5672 = x5667+x5671
x5648 = x5672
x5649 = false
val x5673 = x5663.next
x5650 = x5673
x5654 = x5673
()
}
x5680
}
val x5683 = x5648
val x5684 = x5649
val x5685 = x5650
val x5690 = if (x5684) {
true
} else {
false
}
val x5699 = if (x5690) {
true
} else {
false
}
val x5979 = if (x5699) {
x5624 = false
()
} else {
var x5705: scala.collection.immutable.List[Char] = x7
var x5706: Boolean = false
val x5691 = if (x5684) {
x5632
} else {
x5685
}
val x5700 = if (x5690) {
x5691
} else {
x5691
}
var x5707: Int = x5700
var x5709: Int = -1
var x5710: Boolean = true
var x5711: Int = x5700
val x5746 = while ({val x5712 = x5710
val x5713 = x5709
val x5714 = x5711
val x5715 = x5713 != x5714
val x5716 = x5712 && x5715
x5716}) {
val x5718 = x5711
x5709 = x5718
val x5720 = x5718 >= x5157
val x5744 = if (x5720) {
x5710 = false
()
} else {
val x5722 = x5138(x5718)
val x5723 = x5722 == ' '
val x5742 = if (x5723) {
val x5728 = x5705
val x5729 = x5706
val x5730 = x5707
val x5732 = List(x5722)
val x5733 = x5728 ::: x5732
x5705 = x5733
x5706 = false
val x5724 = x5718 + 1
x5707 = x5724
x5711 = x5724
()
} else {
x5710 = false
()
}
x5742
}
x5744
}
val x5747 = x5705
val x5748 = x5706
val x5749 = x5707
val x5754 = if (x5748) {
true
} else {
false
}
val x5977 = if (x5754) {
x5624 = false
()
} else {
val x5755 = if (x5748) {
x5749
} else {
x5749
}
val x5758 = x5755 >= x5157
val x5975 = if (x5758) {
x5624 = false
()
} else {
val x5760 = x5138(x5755)
val x5761 = x5760 == ':'
val x5973 = if (x5761) {
var x5780: scala.collection.immutable.List[Char] = x7
var x5781: Boolean = false
val x5762 = x5755 + 1
var x5782: Int = x5762
var x5784: Int = -1
var x5785: Boolean = true
var x5786: Int = x5762
val x5821 = while ({val x5787 = x5785
val x5788 = x5784
val x5789 = x5786
val x5790 = x5788 != x5789
val x5791 = x5787 && x5790
x5791}) {
val x5793 = x5786
x5784 = x5793
val x5795 = x5793 >= x5157
val x5819 = if (x5795) {
x5785 = false
()
} else {
val x5797 = x5138(x5793)
val x5798 = x5797 == ' '
val x5817 = if (x5798) {
val x5803 = x5780
val x5804 = x5781
val x5805 = x5782
val x5807 = List(x5797)
val x5808 = x5803 ::: x5807
x5780 = x5808
x5781 = false
val x5799 = x5793 + 1
x5782 = x5799
x5786 = x5799
()
} else {
x5785 = false
()
}
x5817
}
x5819
}
val x5822 = x5780
val x5823 = x5781
val x5824 = x5782
val x5829 = if (x5823) {
true
} else {
false
}
val x5969 = if (x5829) {
x5624 = false
()
} else {
var x5842: java.lang.String = ""
var x5843: Boolean = false
val x5830 = if (x5823) {
x5824
} else {
x5824
}
var x5844: Int = x5830
var x5846: Int = -1
var x5847: Boolean = true
var x5848: Int = x5830
val x5883 = while ({val x5849 = x5847
val x5850 = x5846
val x5851 = x5848
val x5852 = x5850 != x5851
val x5853 = x5849 && x5852
x5853}) {
val x5855 = x5848
x5846 = x5855
val x5857 = x5855 >= x5157
val x5881 = if (x5857) {
x5847 = false
()
} else {
val x5859 = x5138(x5855)
val x5865 = x5859 == '
'
val x5879 = if (x5865) {
x5847 = false
()
} else {
val x5868 = x5842
val x5869 = x5843
val x5870 = x5844
val x5872 = x5868+x5859
x5842 = x5872
x5843 = false
val x5861 = x5855 + 1
x5844 = x5861
x5848 = x5861
()
}
x5879
}
x5881
}
val x5884 = x5842
val x5885 = x5843
val x5886 = x5844
val x5967 = if (x5885) {
x5624 = false
()
} else {
val x5888 = x5886 >= x5157
val x5965 = if (x5888) {
x5624 = false
()
} else {
val x5890 = x5138(x5886)
val x5891 = x5890 == '
'
val x5963 = if (x5891) {
val x5901 = x5614
val x5902 = x5615
val x5903 = x5616
val x5904 = x5617
val x5905 = x5618
val x5907 = x5620
val x5908 = x5621
val x5698 = if (x5690) {
x19
} else {
val x5689 = if (x5684) {
x16
} else {
val x5687 = new Tuple2CharString(x5636,x5683)
x5687
}
val x5694 = x5689._1
val x5695 = x5689._2
val x5696 = x5694+x5695
x5696
}
val x5910 = x5698 == "connection"
val x5911 = x5698 == "proxy-connection"
val x5912 = x5910 || x5911
val x5913 = x5884 == "keep-alive"
val x5914 = x5884 == "close"
val x5915 = x5913 || x5914
val x5916 = x5912 && x5915
val x5945 = if (x5916) {
x5901
} else {
val x5918 = x5698 == "Content-Length"
val x5939 = if (x5918) {
x5901
} else {
val x5921 = x5698 == "Transfer-Encoding"
val x5922 = x5884 == "chunked"
val x5923 = x5921 && x5922
val x5933 = if (x5923) {
x5901
} else {
val x5925 = x5698 == "upgrade"
val x5927 = if (x5925) {
x5901
} else {
x5901
}
x5927
}
x5933
}
x5939
}
x5614 = x5945
val x5946 = if (x5916) {
x5902
} else {
val x5918 = x5698 == "Content-Length"
val x5940 = if (x5918) {
val x5919 = x5884.toInt
x5919
} else {
val x5921 = x5698 == "Transfer-Encoding"
val x5922 = x5884 == "chunked"
val x5923 = x5921 && x5922
val x5934 = if (x5923) {
x5902
} else {
val x5925 = x5698 == "upgrade"
val x5928 = if (x5925) {
x5902
} else {
x5902
}
x5928
}
x5934
}
x5940
}
x5615 = x5946
val x5947 = if (x5916) {
x5884
} else {
val x5918 = x5698 == "Content-Length"
val x5941 = if (x5918) {
x5903
} else {
val x5921 = x5698 == "Transfer-Encoding"
val x5922 = x5884 == "chunked"
val x5923 = x5921 && x5922
val x5935 = if (x5923) {
x5903
} else {
val x5925 = x5698 == "upgrade"
val x5929 = if (x5925) {
x5903
} else {
x5903
}
x5929
}
x5935
}
x5941
}
x5616 = x5947
val x5948 = if (x5916) {
x5904
} else {
val x5918 = x5698 == "Content-Length"
val x5942 = if (x5918) {
x5904
} else {
val x5921 = x5698 == "Transfer-Encoding"
val x5922 = x5884 == "chunked"
val x5923 = x5921 && x5922
val x5936 = if (x5923) {
true
} else {
val x5925 = x5698 == "upgrade"
val x5930 = if (x5925) {
x5904
} else {
x5904
}
x5930
}
x5936
}
x5942
}
x5617 = x5948
val x5949 = if (x5916) {
x5905
} else {
val x5918 = x5698 == "Content-Length"
val x5943 = if (x5918) {
x5905
} else {
val x5921 = x5698 == "Transfer-Encoding"
val x5922 = x5884 == "chunked"
val x5923 = x5921 && x5922
val x5937 = if (x5923) {
x5905
} else {
val x5925 = x5698 == "upgrade"
val x5931 = if (x5925) {
true
} else {
x5905
}
x5931
}
x5937
}
x5943
}
x5618 = x5949
x5620 = false
val x5892 = x5886 + 1
x5621 = x5892
x5625 = x5892
()
} else {
x5624 = false
()
}
x5963
}
x5965
}
x5967
}
x5969
} else {
x5624 = false
()
}
x5973
}
x5975
}
x5977
}
x5979
} else {
x5624 = false
()
}
x5983
}
x5985
}
val x5988 = x5614
val x5989 = x5615
val x5990 = x5616
val x5991 = x5617
val x5992 = x5618
val x5994 = x5620
val x5995 = x5621
val x6000 = if (x5994) {
true
} else {
false
}
val x6098 = if (x6000) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x6001 = if (x5994) {
0
} else {
x5995
}
val x6003 = x6001 >= x5157
val x6096 = if (x6003) {
x5141 = x5139
x5142 = true
x5143 = 0
()
} else {
val x6005 = x5138(x6001)
val x6006 = x6005 == '
'
val x6094 = if (x6006) {
var x6028: java.lang.String = ""
var x6029: Boolean = false
val x6007 = x6001 + 1
var x6030: Int = x6007
var x6032: Int = -1
var x6033: Boolean = true
var x6034: Int = x6007
var x6035: Int = 0
val x5999 = if (x5994) {
val x3161 = null.asInstanceOf[Tuple2IntAnon1323431030]
x3161
} else {
val x5993 = new Anon1323431030(x5988,x5989,x5990,x5991,x5992)
val x5997 = new Tuple2IntAnon1323431030(x5540,x5993)
x5997
}
val x6020 = x5999._2
val x6021 = x6020.contentLength
val x6070 = while ({val x6036 = x6035
val x6038 = x6032
val x6039 = x6034
val x6042 = x6033
val x6037 = x6036 < x6021
val x6040 = x6038 != x6039
val x6041 = x6037 && x6040
val x6043 = x6041 && x6042
x6043}) {
val x6045 = x6034
x6032 = x6045
val x6047 = x6045 >= x5157
val x6068 = if (x6047) {
x6033 = false
()
} else {
val x6054 = x6028
val x6055 = x6029
val x6056 = x6030
val x6049 = x5138(x6045)
val x6058 = x6054+x6049
x6028 = x6058
x6029 = false
val x6050 = x6045 + 1
x6030 = x6050
x6034 = x6050
val x6064 = x6035
val x6065 = x6064 + 1
x6035 = x6065
()
}
x6068
}
val x6071 = x6028
val x6072 = x6029
val x6073 = x6030
val x6079 = if (x6072) {
true
} else {
false
}
val x6082 = if (x6079) {
x5139
} else {
val x6078 = if (x6072) {
x5139
} else {
val x6019 = x5999._1
val x6022 = x6020.connection
val x6023 = x6020.chunked
val x6024 = x6020.upgrade
val x6025 = new Anon1323431030(x6019,x6021,x6022,x6023,x6024)
val x6076 = new Tuple2Anon1323431030String(x6025,x6071)
x6076
}
x6078
}
x5141 = x6082
val x6083 = if (x6079) {
true
} else {
x6079
}
x5142 = x6083
val x6084 = if (x6079) {
0
} else {
val x6080 = if (x6072) {
x6073
} else {
x6073
}
x6080
}
x5143 = x6084
()
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6094
}
x6096
}
x6098
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6104
}
x6106
}
x6108
}
x6110
}
x6112
}
x6114
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6120
}
x6122
}
x6124
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6130
}
x6132
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6138
}
x6140
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6146
}
x6148
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6154
}
x6156
} else {
x5141 = x5139
x5142 = true
x5143 = 0
()
}
x6162
}
val x6165 = x5141
val x6166 = x5142
val x6167 = x5143
val x6168 = new ParseResultTuple2Anon1323431030String(x6165,x6166,x6167)
val x6169 = println(x6168)
x6169
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=7000
compilation: ok
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,2,close,false,false),AA),false,248)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,0,close,true,false),),false,273)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,129,close,false,false),<html>
<head>
  <title>An Example Page</title>
</head>
<body>
  Hello World, this is a very simple HTML document.
</body>
</html>),false,377)
