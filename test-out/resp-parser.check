compilation: ok
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class responseParse(px1340:Array[Char],px1366:Array[Char],px1393:Array[Char],px1419:Array[Char],px1465:Array[Char],px1510:Array[Char],px1536:Array[Char],px1564:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x558:Array[Char]): Unit = {
var x560: Anon1323431030 = null
var x561: Boolean = true
var x562: Int = -1
val x565 = x558.length
val x566 = 0 >= x565
val x1782 = if (x566) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x573 = x558(0)
val x574 = x573 == 'H'
val x1780 = if (x574) {
val x20 = 0 + 1
val x576 = x20 >= x565
val x1774 = if (x576) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x581 = x558(x20)
val x582 = x581 == 'T'
val x1772 = if (x582) {
val x32 = x20 + 1
val x584 = x32 >= x565
val x1766 = if (x584) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x589 = x558(x32)
val x590 = x589 == 'T'
val x1764 = if (x590) {
val x44 = x32 + 1
val x592 = x44 >= x565
val x1758 = if (x592) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x597 = x558(x44)
val x598 = x597 == 'P'
val x1756 = if (x598) {
val x56 = x44 + 1
val x600 = x56 >= x565
val x1750 = if (x600) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x605 = x558(x56)
val x606 = x605 == '/'
val x1748 = if (x606) {
val x68 = x56 + 1
val x628 = x68 >= x565
val x1742 = if (x628) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x633 = x558(x68)
val x634 = x633 >= '0'
val x635 = x633 <= '9'
val x636 = x634 && x635
val x1740 = if (x636) {
val x638 = x633 - '0'
val x639 = x638.toInt
var x641: Int = x639
var x642: Boolean = false
val x103 = x68 + 1
var x643: Int = x103
var x645: Int = -1
var x646: Boolean = true
var x647: Int = x103
val x688 = while ({val x648 = x646
val x649 = x645
val x650 = x647
val x651 = x649 != x650
val x652 = x648 && x651
x652}) {
val x654 = x647
x645 = x654
val x656 = x654 >= x565
val x686 = if (x656) {
x646 = false
()
} else {
val x661 = x558(x654)
val x662 = x661 >= '0'
val x663 = x661 <= '9'
val x664 = x662 && x663
val x684 = if (x664) {
val x670 = x641
val x671 = x642
val x672 = x643
val x667 = x661 - '0'
val x668 = x667.toInt
val x674 = x670 * 10
val x675 = x674 + x668
x641 = x675
x642 = false
val x665 = x654 + 1
x643 = x665
x647 = x665
()
} else {
x646 = false
()
}
x684
}
x686
}
val x689 = x641
val x690 = x642
val x691 = x643
val x694 = if (x690) {
true
} else {
x690
}
val x1734 = if (x694) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x695 = if (x690) {
x68
} else {
x691
}
val x701 = x695 >= x565
val x1732 = if (x701) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x708 = x558(x695)
val x709 = x708 == '.'
val x1730 = if (x709) {
val x710 = x695 + 1
val x712 = x710 >= x565
val x1724 = if (x712) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x719 = x558(x710)
val x720 = x719 >= '0'
val x721 = x719 <= '9'
val x722 = x720 && x721
val x1722 = if (x722) {
val x725 = x719 - '0'
val x726 = x725.toInt
var x728: Int = x726
var x729: Boolean = false
val x723 = x710 + 1
var x730: Int = x723
var x732: Int = -1
var x733: Boolean = true
var x734: Int = x723
val x775 = while ({val x735 = x733
val x736 = x732
val x737 = x734
val x738 = x736 != x737
val x739 = x735 && x738
x739}) {
val x741 = x734
x732 = x741
val x743 = x741 >= x565
val x773 = if (x743) {
x733 = false
()
} else {
val x748 = x558(x741)
val x749 = x748 >= '0'
val x750 = x748 <= '9'
val x751 = x749 && x750
val x771 = if (x751) {
val x757 = x728
val x758 = x729
val x759 = x730
val x754 = x748 - '0'
val x755 = x754.toInt
val x761 = x757 * 10
val x762 = x761 + x755
x728 = x762
x729 = false
val x752 = x741 + 1
x730 = x752
x734 = x752
()
} else {
x733 = false
()
}
x771
}
x773
}
val x776 = x728
val x777 = x729
val x778 = x730
val x781 = if (x777) {
true
} else {
x777
}
val x787 = if (x781) {
true
} else {
false
}
val x793 = if (x787) {
true
} else {
false
}
val x1716 = if (x793) {
x560 = null
x561 = true
x562 = 0
()
} else {
var x801: java.lang.String = ""
var x802: Boolean = false
val x794 = if (x787) {
0
} else {
val x788 = if (x781) {
x68
} else {
val x782 = if (x777) {
x710
} else {
x778
}
x782
}
x788
}
var x803: Int = x794
var x805: Int = -1
var x806: Boolean = true
var x807: Int = x794
val x840 = while ({val x808 = x806
val x809 = x805
val x810 = x807
val x811 = x809 != x810
val x812 = x808 && x811
x812}) {
val x814 = x807
x805 = x814
val x816 = x814 >= x565
val x838 = if (x816) {
x806 = false
()
} else {
val x820 = x558(x814)
val x821 = x820 == ' '
val x836 = if (x821) {
val x824 = x801
val x825 = x802
val x826 = x803
x801 = x824
x802 = false
val x822 = x814 + 1
x803 = x822
x807 = x822
()
} else {
x806 = false
()
}
x836
}
x838
}
val x841 = x801
val x842 = x802
val x843 = x803
val x848 = if (x842) {
true
} else {
false
}
val x1714 = if (x848) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x849 = if (x842) {
0
} else {
x843
}
val x855 = x849 >= x565
val x1712 = if (x855) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x862 = x558(x849)
val x863 = x862 >= '0'
val x864 = x862 <= '9'
val x865 = x863 && x864
val x1710 = if (x865) {
val x868 = x862 - '0'
val x869 = x868.toInt
var x871: Int = x869
var x872: Boolean = false
val x866 = x849 + 1
var x873: Int = x866
var x875: Int = -1
var x876: Boolean = true
var x877: Int = x866
val x918 = while ({val x878 = x876
val x879 = x875
val x880 = x877
val x881 = x879 != x880
val x882 = x878 && x881
x882}) {
val x884 = x877
x875 = x884
val x886 = x884 >= x565
val x916 = if (x886) {
x876 = false
()
} else {
val x891 = x558(x884)
val x892 = x891 >= '0'
val x893 = x891 <= '9'
val x894 = x892 && x893
val x914 = if (x894) {
val x900 = x871
val x901 = x872
val x902 = x873
val x897 = x891 - '0'
val x898 = x897.toInt
val x904 = x900 * 10
val x905 = x904 + x898
x871 = x905
x872 = false
val x895 = x884 + 1
x873 = x895
x877 = x895
()
} else {
x876 = false
()
}
x914
}
x916
}
val x919 = x871
val x920 = x872
val x921 = x873
val x924 = if (x920) {
true
} else {
x920
}
val x1704 = if (x924) {
x560 = null
x561 = true
x562 = 0
()
} else {
var x932: Int = 0
var x933: Boolean = false
val x925 = if (x920) {
x849
} else {
x921
}
var x934: Int = x925
var x936: Int = -1
var x937: Boolean = true
var x938: Int = x925
val x973 = while ({val x939 = x937
val x940 = x936
val x941 = x938
val x942 = x940 != x941
val x943 = x939 && x942
x943}) {
val x945 = x938
x936 = x945
val x947 = x945 >= x565
val x971 = if (x947) {
x937 = false
()
} else {
val x951 = x558(x945)
val x953 = x951 == '\n'
val x969 = if (x953) {
x937 = false
()
} else {
val x958 = x932
val x959 = x933
val x960 = x934
val x962 = x958 + 1
x932 = x962
x933 = false
val x956 = x945 + 1
x934 = x956
x938 = x956
()
}
x969
}
x971
}
val x974 = x932
val x975 = x933
val x976 = x934
val x980 = x976 >= x565
val x1702 = if (x980) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x987 = x558(x976)
val x988 = x987 == '\n'
val x1700 = if (x988) {
var x995: Int = 200
var x996: Int = 0
var x997: java.lang.String = "close"
var x998: Boolean = false
var x999: Boolean = false
var x1001: Boolean = false
val x989 = x976 + 1
var x1002: Int = x989
var x1004: Int = -1
var x1005: Boolean = true
var x1006: Int = x989
val x1058 = {x1021: (Int) => 
var x1023: Int = 0
var x1024: Boolean = true
var x1025: Int = x1021
val x1027 = x1021 >= x565
val x1052 = if (x1027) {
x1023 = 0
x1024 = true
x1025 = x1021
()
} else {
val x1032 = x558(x1021)
val x1033 = x1032 >= 'a'
val x1034 = x1032 <= 'z'
val x1035 = x1033 && x1034
val x1036 = x1032 >= 'A'
val x1037 = x1032 <= 'Z'
val x1038 = x1036 && x1037
val x1039 = x1035 || x1038
val x1050 = if (x1039) {
x1023 = x1021
x1024 = false
val x1040 = x1021 + 1
x1025 = x1040
()
} else {
x1023 = 0
x1024 = true
x1025 = x1021
()
}
x1050
}
val x1053 = x1023
val x1054 = x1024
val x1055 = x1025
val x1056 = new ParseResultInt(x1053,x1054,x1055)
x1056: ParseResultInt
}
val x1094 = {x1015: (Int) => 
var x1017: Int = 0
var x1018: Boolean = true
var x1019: Int = x1015
val x1059 = x1058(x1015)
val x1060 = x1059.empty
val x1088 = if (x1060) {
val x1061 = x1015 >= x565
val x1080 = if (x1061) {
x1017 = 0
x1018 = true
x1019 = x1015
()
} else {
val x1066 = x558(x1015)
val x1067 = x1066 == '-'
val x1078 = if (x1067) {
x1017 = x1015
x1018 = false
val x1068 = x1015 + 1
x1019 = x1068
()
} else {
x1017 = 0
x1018 = true
x1019 = x1015
()
}
x1078
}
x1080
} else {
val x1082 = x1059.res
x1017 = x1082
x1018 = x1060
val x1085 = x1059.next
x1019 = x1085
()
}
val x1089 = x1017
val x1090 = x1018
val x1091 = x1019
val x1092 = new ParseResultInt(x1089,x1090,x1091)
x1092: ParseResultInt
}
val x1340 = px1340 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x1341 = x1340.length
val x1366 = px1366 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x1367 = x1366.length
val x1393 = px1393 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x1394 = x1393.length
val x1419 = px1419 // static data: Array(c,l,o,s,e)
val x1420 = x1419.length
val x1465 = px1465 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x1466 = x1465.length
val x1510 = px1510 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x1511 = x1510.length
val x1536 = px1536 // static data: Array(c,h,u,n,k,e,d)
val x1537 = x1536.length
val x1564 = px1564 // static data: Array(u,p,g,r,a,d,e)
val x1565 = x1564.length
val x1642 = while ({val x1007 = x1005
val x1008 = x1004
val x1009 = x1006
val x1010 = x1008 != x1009
val x1011 = x1007 && x1010
x1011}) {
val x1013 = x1006
x1004 = x1013
val x1095 = x1013 >= x565
val x1640 = if (x1095) {
x1005 = false
()
} else {
val x1102 = x558(x1013)
val x1103 = x1102 >= 'a'
val x1104 = x1102 <= 'z'
val x1105 = x1103 && x1104
val x1106 = x1102 >= 'A'
val x1107 = x1102 <= 'Z'
val x1108 = x1106 && x1107
val x1109 = x1105 || x1108
val x1638 = if (x1109) {
var x1113: Int = 0
var x1114: Boolean = false
val x1110 = x1013 + 1
var x1115: Int = x1110
var x1117: Int = -1
var x1118: Boolean = true
var x1119: Int = x1110
val x1146 = while ({val x1120 = x1118
val x1121 = x1117
val x1122 = x1119
val x1123 = x1121 != x1122
val x1124 = x1120 && x1123
x1124}) {
val x1126 = x1119
x1117 = x1126
val x1128 = x1094(x1126)
val x1129 = x1128.empty
val x1144 = if (x1129) {
x1118 = false
()
} else {
val x1132 = x1113
val x1133 = x1114
val x1134 = x1115
val x1136 = x1132 + 1
x1113 = x1136
x1114 = false
val x1137 = x1128.next
x1115 = x1137
x1119 = x1137
()
}
x1144
}
val x1147 = x1113
val x1148 = x1114
val x1149 = x1115
var x1159: java.lang.String = ""
var x1160: Boolean = false
var x1161: Int = x1149
var x1163: Int = -1
var x1164: Boolean = true
var x1165: Int = x1149
val x1198 = while ({val x1166 = x1164
val x1167 = x1163
val x1168 = x1165
val x1169 = x1167 != x1168
val x1170 = x1166 && x1169
x1170}) {
val x1172 = x1165
x1163 = x1172
val x1174 = x1172 >= x565
val x1196 = if (x1174) {
x1164 = false
()
} else {
val x1178 = x558(x1172)
val x1179 = x1178 == ' '
val x1194 = if (x1179) {
val x1182 = x1159
val x1183 = x1160
val x1184 = x1161
x1159 = x1182
x1160 = false
val x1180 = x1172 + 1
x1161 = x1180
x1165 = x1180
()
} else {
x1164 = false
()
}
x1194
}
x1196
}
val x1199 = x1159
val x1200 = x1160
val x1201 = x1161
val x1634 = if (x1200) {
x1005 = false
()
} else {
val x1206 = x1201 >= x565
val x1632 = if (x1206) {
x1005 = false
()
} else {
val x1212 = x558(x1201)
val x1213 = x1212 == ':'
val x1630 = if (x1213) {
var x1224: java.lang.String = ""
var x1225: Boolean = false
val x1214 = x1201 + 1
var x1226: Int = x1214
var x1228: Int = -1
var x1229: Boolean = true
var x1230: Int = x1214
val x1263 = while ({val x1231 = x1229
val x1232 = x1228
val x1233 = x1230
val x1234 = x1232 != x1233
val x1235 = x1231 && x1234
x1235}) {
val x1237 = x1230
x1228 = x1237
val x1239 = x1237 >= x565
val x1261 = if (x1239) {
x1229 = false
()
} else {
val x1243 = x558(x1237)
val x1244 = x1243 == ' '
val x1259 = if (x1244) {
val x1247 = x1224
val x1248 = x1225
val x1249 = x1226
x1224 = x1247
x1225 = false
val x1245 = x1237 + 1
x1226 = x1245
x1230 = x1245
()
} else {
x1229 = false
()
}
x1259
}
x1261
}
val x1264 = x1224
val x1265 = x1225
val x1266 = x1226
val x1626 = if (x1265) {
x1005 = false
()
} else {
var x1272: Int = 0
var x1273: Boolean = false
var x1274: Int = x1266
var x1276: Int = -1
var x1277: Boolean = true
var x1278: Int = x1266
val x1313 = while ({val x1279 = x1277
val x1280 = x1276
val x1281 = x1278
val x1282 = x1280 != x1281
val x1283 = x1279 && x1282
x1283}) {
val x1285 = x1278
x1276 = x1285
val x1287 = x1285 >= x565
val x1311 = if (x1287) {
x1277 = false
()
} else {
val x1291 = x558(x1285)
val x1293 = x1291 == '\n'
val x1309 = if (x1293) {
x1277 = false
()
} else {
val x1298 = x1272
val x1299 = x1273
val x1300 = x1274
val x1302 = x1298 + 1
x1272 = x1302
x1273 = false
val x1296 = x1285 + 1
x1274 = x1296
x1278 = x1296
()
}
x1309
}
x1311
}
val x1314 = x1272
val x1315 = x1273
val x1316 = x1274
val x1320 = x1316 >= x565
val x1624 = if (x1320) {
x1005 = false
()
} else {
val x1324 = x558(x1316)
val x1325 = x1324 == '\n'
val x1622 = if (x1325) {
val x1331 = x995
val x1332 = x996
val x1333 = x997
val x1334 = x998
val x1335 = x999
val x1337 = x1001
val x1338 = x1002
val x1155 = x1147 + 1
val x1342 = x1155 == x1341
val x1365 = if (x1342) {
var x1343: Int = 0
var x1344: Boolean = true
val x1362 = while ({val x1345 = x1343
val x1347 = x1344
val x1346 = x1345 < x1155
val x1348 = x1346 && x1347
x1348}) {
val x1350 = x1343
val x1351 = x1350 + x1013
val x1352 = x558(x1351)
val x1353 = x1340(x1350)
val x1355 = x1352 == x1353
val x1358 = if (x1355) {
()
} else {
x1344 = false
()
}
val x1359 = x1350 + 1
x1343 = x1359
()
}
val x1363 = x1344
x1363
} else {
false
}
val x1368 = x1155 == x1367
val x1391 = if (x1368) {
var x1369: Int = 0
var x1370: Boolean = true
val x1388 = while ({val x1371 = x1369
val x1373 = x1370
val x1372 = x1371 < x1155
val x1374 = x1372 && x1373
x1374}) {
val x1376 = x1369
val x1377 = x1376 + x1013
val x1378 = x558(x1377)
val x1379 = x1366(x1376)
val x1381 = x1378 == x1379
val x1384 = if (x1381) {
()
} else {
x1370 = false
()
}
val x1385 = x1376 + 1
x1369 = x1385
()
}
val x1389 = x1370
x1389
} else {
false
}
val x1392 = x1365 || x1391
val x1395 = x1314 == x1394
val x1418 = if (x1395) {
var x1396: Int = 0
var x1397: Boolean = true
val x1415 = while ({val x1398 = x1396
val x1400 = x1397
val x1399 = x1398 < x1314
val x1401 = x1399 && x1400
x1401}) {
val x1403 = x1396
val x1404 = x1403 + x1266
val x1405 = x558(x1404)
val x1406 = x1393(x1403)
val x1408 = x1405 == x1406
val x1411 = if (x1408) {
()
} else {
x1397 = false
()
}
val x1412 = x1403 + 1
x1396 = x1412
()
}
val x1416 = x1397
x1416
} else {
false
}
val x1421 = x1314 == x1420
val x1444 = if (x1421) {
var x1422: Int = 0
var x1423: Boolean = true
val x1441 = while ({val x1424 = x1422
val x1426 = x1423
val x1425 = x1424 < x1314
val x1427 = x1425 && x1426
x1427}) {
val x1429 = x1422
val x1430 = x1429 + x1266
val x1431 = x558(x1430)
val x1432 = x1419(x1429)
val x1434 = x1431 == x1432
val x1437 = if (x1434) {
()
} else {
x1423 = false
()
}
val x1438 = x1429 + 1
x1422 = x1438
()
}
val x1442 = x1423
x1442
} else {
false
}
val x1445 = x1418 || x1444
val x1446 = x1392 && x1445
val x1604 = if (x1446) {
var x1447: java.lang.String = ""
var x1448: Int = 0
val x1461 = while ({val x1449 = x1448
val x1450 = x1449 < x1314
x1450}) {
val x1452 = x1447
val x1453 = x1448
val x1454 = x1266 + x1453
val x1455 = x558(x1454)
val x1456 = x1452+x1455
x1447 = x1456
val x1458 = x1453 + 1
x1448 = x1458
()
}
val x1462 = x1447
val x1463 = new Anon1323431030(x1331,x1332,x1462,x1334,x1335)
x1463
} else {
val x1467 = x1155 == x1466
val x1490 = if (x1467) {
var x1468: Int = 0
var x1469: Boolean = true
val x1487 = while ({val x1470 = x1468
val x1472 = x1469
val x1471 = x1470 < x1155
val x1473 = x1471 && x1472
x1473}) {
val x1475 = x1468
val x1476 = x1475 + x1013
val x1477 = x558(x1476)
val x1478 = x1465(x1475)
val x1480 = x1477 == x1478
val x1483 = if (x1480) {
()
} else {
x1469 = false
()
}
val x1484 = x1475 + 1
x1468 = x1484
()
}
val x1488 = x1469
x1488
} else {
false
}
val x1603 = if (x1490) {
var x1491: java.lang.String = ""
var x1492: Int = 0
val x1505 = while ({val x1493 = x1492
val x1494 = x1493 < x1314
x1494}) {
val x1496 = x1491
val x1497 = x1492
val x1498 = x1266 + x1497
val x1499 = x558(x1498)
val x1500 = x1496+x1499
x1491 = x1500
val x1502 = x1497 + 1
x1492 = x1502
()
}
val x1506 = x1491
val x1507 = x1506.toInt
val x1508 = new Anon1323431030(x1331,x1507,x1333,x1334,x1335)
x1508
} else {
val x1512 = x1155 == x1511
val x1535 = if (x1512) {
var x1513: Int = 0
var x1514: Boolean = true
val x1532 = while ({val x1515 = x1513
val x1517 = x1514
val x1516 = x1515 < x1155
val x1518 = x1516 && x1517
x1518}) {
val x1520 = x1513
val x1521 = x1520 + x1013
val x1522 = x558(x1521)
val x1523 = x1510(x1520)
val x1525 = x1522 == x1523
val x1528 = if (x1525) {
()
} else {
x1514 = false
()
}
val x1529 = x1520 + 1
x1513 = x1529
()
}
val x1533 = x1514
x1533
} else {
false
}
val x1538 = x1314 == x1537
val x1561 = if (x1538) {
var x1539: Int = 0
var x1540: Boolean = true
val x1558 = while ({val x1541 = x1539
val x1543 = x1540
val x1542 = x1541 < x1314
val x1544 = x1542 && x1543
x1544}) {
val x1546 = x1539
val x1547 = x1546 + x1266
val x1548 = x558(x1547)
val x1549 = x1536(x1546)
val x1551 = x1548 == x1549
val x1554 = if (x1551) {
()
} else {
x1540 = false
()
}
val x1555 = x1546 + 1
x1539 = x1555
()
}
val x1559 = x1540
x1559
} else {
false
}
val x1562 = x1535 && x1561
val x1597 = if (x1562) {
x1331
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1591 = if (x1589) {
x1331
} else {
x1331
}
x1591
}
val x1598 = if (x1562) {
x1332
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1592 = if (x1589) {
x1332
} else {
x1332
}
x1592
}
val x1599 = if (x1562) {
x1333
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1593 = if (x1589) {
x1333
} else {
x1333
}
x1593
}
val x1600 = if (x1562) {
true
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1594 = if (x1589) {
x1334
} else {
x1334
}
x1594
}
val x1601 = if (x1562) {
x1335
} else {
val x1566 = x1155 == x1565
val x1589 = if (x1566) {
var x1567: Int = 0
var x1568: Boolean = true
val x1586 = while ({val x1569 = x1567
val x1571 = x1568
val x1570 = x1569 < x1155
val x1572 = x1570 && x1571
x1572}) {
val x1574 = x1567
val x1575 = x1574 + x1013
val x1576 = x558(x1575)
val x1577 = x1564(x1574)
val x1579 = x1576 == x1577
val x1582 = if (x1579) {
()
} else {
x1568 = false
()
}
val x1583 = x1574 + 1
x1567 = x1583
()
}
val x1587 = x1568
x1587
} else {
false
}
val x1595 = if (x1589) {
true
} else {
x1335
}
x1595
}
val x1602 = new Anon1323431030(x1597,x1598,x1599,x1600,x1601)
x1602
}
x1603
}
val x1606 = x1604.status
x995 = x1606
val x1608 = x1604.contentLength
x996 = x1608
val x1610 = x1604.connection
x997 = x1610
val x1612 = x1604.chunked
x998 = x1612
val x1614 = x1604.upgrade
x999 = x1614
x1001 = false
val x1326 = x1316 + 1
x1002 = x1326
x1006 = x1326
()
} else {
x1005 = false
()
}
x1622
}
x1624
}
x1626
} else {
x1005 = false
()
}
x1630
}
x1632
}
x1634
} else {
x1005 = false
()
}
x1638
}
x1640
}
val x1643 = x995
val x1644 = x996
val x1645 = x997
val x1646 = x998
val x1647 = x999
val x1649 = x1001
val x1650 = x1002
val x1655 = if (x1649) {
true
} else {
false
}
val x1694 = if (x1655) {
x560 = null
x561 = true
val x1656 = if (x1649) {
0
} else {
x1650
}
x562 = x1656
()
} else {
val x1656 = if (x1649) {
0
} else {
x1650
}
val x1663 = x1656 >= x565
val x1692 = if (x1663) {
x560 = null
x561 = true
x562 = 0
()
} else {
val x1669 = x558(x1656)
val x1670 = x1669 == '\n'
val x1690 = if (x1670) {
val x1654 = if (x1649) {
null
} else {
val x923 = if (x920) {
0
} else {
x919
}
val x1648 = new Anon1323431030(x1643,x1644,x1645,x1646,x1647)
val x1652 = new Tuple2IntAnon1323431030(x923,x1648)
x1652
}
val x1674 = x1654._1
val x1675 = x1654._2
val x1676 = x1675.contentLength
val x1677 = x1675.connection
val x1678 = x1675.chunked
val x1679 = x1675.upgrade
val x1680 = new Anon1323431030(x1674,x1676,x1677,x1678,x1679)
x560 = x1680
x561 = false
val x1671 = x1656 + 1
x562 = x1671
()
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1690
}
x1692
}
x1694
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1700
}
x1702
}
x1704
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1710
}
x1712
}
x1714
}
x1716
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1722
}
x1724
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1730
}
x1732
}
x1734
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1740
}
x1742
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1748
}
x1750
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1756
}
x1758
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1764
}
x1766
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1772
}
x1774
} else {
x560 = null
x561 = true
x562 = 0
()
}
x1780
}
val x1783 = x560
val x1784 = x561
val x1785 = x562
val x1786 = new ParseResultAnon1323431030(x1783,x1784,x1785)
val x1787 = println(x1786)
x1787
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=1000
compilation: ok
ParseResultAnon1323431030(Anon1323431030(418,0,close,false,false),false,258)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class bodyParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: java.lang.String = null
var x3: Boolean = true
var x4: Int = -1
val x6 = 0 + 14
val x7 = x0.length
val x8 = x6 < x7
val x21 = if (x8) {
val x9 = new Anon1680061013(x0,0,x6)
val x10 = x9.input.slice(x9.start,x9.start+x9.length).mkString
x2 = x10
x3 = false
x4 = 14
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
val x22 = x2
val x23 = x3
val x24 = x4
val x25 = new ParseResultString(x22,x23,x24)
val x26 = println(x25)
x26
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Make it funky!,false,14)
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class respAndMessageParse(px811:Array[Char],px837:Array[Char],px864:Array[Char],px890:Array[Char],px936:Array[Char],px981:Array[Char],px1007:Array[Char],px1035:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Tuple2Anon1323431030String = null
var x3: Boolean = true
var x4: Int = -1
val x7 = x0.length
val x8 = 0 >= x7
val x1268 = if (x8) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x22 = x0(0)
val x23 = x22 == 'H'
val x1266 = if (x23) {
val x24 = 0 + 1
val x26 = x24 >= x7
val x1260 = if (x26) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x34 = x0(x24)
val x35 = x34 == 'T'
val x1258 = if (x35) {
val x36 = x24 + 1
val x38 = x36 >= x7
val x1252 = if (x38) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x46 = x0(x36)
val x47 = x46 == 'T'
val x1250 = if (x47) {
val x48 = x36 + 1
val x50 = x48 >= x7
val x1244 = if (x50) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x58 = x0(x48)
val x59 = x58 == 'P'
val x1242 = if (x59) {
val x60 = x48 + 1
val x62 = x60 >= x7
val x1236 = if (x62) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x70 = x0(x60)
val x71 = x70 == '/'
val x1234 = if (x71) {
val x72 = x60 + 1
val x95 = x72 >= x7
val x1228 = if (x95) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x103 = x0(x72)
val x104 = x103 >= '0'
val x105 = x103 <= '9'
val x106 = x104 && x105
val x1226 = if (x106) {
val x109 = x103 - '0'
val x110 = x109.toInt
var x112: Int = x110
var x113: Boolean = false
val x107 = x72 + 1
var x114: Int = x107
var x116: Int = -1
var x117: Boolean = true
var x118: Int = x107
val x159 = while ({val x119 = x117
val x120 = x116
val x121 = x118
val x122 = x120 != x121
val x123 = x119 && x122
x123}) {
val x125 = x118
x116 = x125
val x127 = x125 >= x7
val x157 = if (x127) {
x117 = false
()
} else {
val x132 = x0(x125)
val x133 = x132 >= '0'
val x134 = x132 <= '9'
val x135 = x133 && x134
val x155 = if (x135) {
val x141 = x112
val x142 = x113
val x143 = x114
val x138 = x132 - '0'
val x139 = x138.toInt
val x145 = x141 * 10
val x146 = x145 + x139
x112 = x146
x113 = false
val x136 = x125 + 1
x114 = x136
x118 = x136
()
} else {
x117 = false
()
}
x155
}
x157
}
val x160 = x112
val x161 = x113
val x162 = x114
val x165 = if (x161) {
true
} else {
x161
}
val x1220 = if (x165) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x166 = if (x161) {
x72
} else {
x162
}
val x172 = x166 >= x7
val x1218 = if (x172) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x179 = x0(x166)
val x180 = x179 == '.'
val x1216 = if (x180) {
val x181 = x166 + 1
val x183 = x181 >= x7
val x1210 = if (x183) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x190 = x0(x181)
val x191 = x190 >= '0'
val x192 = x190 <= '9'
val x193 = x191 && x192
val x1208 = if (x193) {
val x196 = x190 - '0'
val x197 = x196.toInt
var x199: Int = x197
var x200: Boolean = false
val x194 = x181 + 1
var x201: Int = x194
var x203: Int = -1
var x204: Boolean = true
var x205: Int = x194
val x246 = while ({val x206 = x204
val x207 = x203
val x208 = x205
val x209 = x207 != x208
val x210 = x206 && x209
x210}) {
val x212 = x205
x203 = x212
val x214 = x212 >= x7
val x244 = if (x214) {
x204 = false
()
} else {
val x219 = x0(x212)
val x220 = x219 >= '0'
val x221 = x219 <= '9'
val x222 = x220 && x221
val x242 = if (x222) {
val x228 = x199
val x229 = x200
val x230 = x201
val x225 = x219 - '0'
val x226 = x225.toInt
val x232 = x228 * 10
val x233 = x232 + x226
x199 = x233
x200 = false
val x223 = x212 + 1
x201 = x223
x205 = x223
()
} else {
x204 = false
()
}
x242
}
x244
}
val x247 = x199
val x248 = x200
val x249 = x201
val x252 = if (x248) {
true
} else {
x248
}
val x258 = if (x252) {
true
} else {
false
}
val x264 = if (x258) {
true
} else {
false
}
val x1202 = if (x264) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x272: java.lang.String = ""
var x273: Boolean = false
val x265 = if (x258) {
0
} else {
val x259 = if (x252) {
x72
} else {
val x253 = if (x248) {
x181
} else {
x249
}
x253
}
x259
}
var x274: Int = x265
var x276: Int = -1
var x277: Boolean = true
var x278: Int = x265
val x311 = while ({val x279 = x277
val x280 = x276
val x281 = x278
val x282 = x280 != x281
val x283 = x279 && x282
x283}) {
val x285 = x278
x276 = x285
val x287 = x285 >= x7
val x309 = if (x287) {
x277 = false
()
} else {
val x291 = x0(x285)
val x292 = x291 == ' '
val x307 = if (x292) {
val x295 = x272
val x296 = x273
val x297 = x274
x272 = x295
x273 = false
val x293 = x285 + 1
x274 = x293
x278 = x293
()
} else {
x277 = false
()
}
x307
}
x309
}
val x312 = x272
val x313 = x273
val x314 = x274
val x319 = if (x313) {
true
} else {
false
}
val x1200 = if (x319) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x320 = if (x313) {
0
} else {
x314
}
val x326 = x320 >= x7
val x1198 = if (x326) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x333 = x0(x320)
val x334 = x333 >= '0'
val x335 = x333 <= '9'
val x336 = x334 && x335
val x1196 = if (x336) {
val x339 = x333 - '0'
val x340 = x339.toInt
var x342: Int = x340
var x343: Boolean = false
val x337 = x320 + 1
var x344: Int = x337
var x346: Int = -1
var x347: Boolean = true
var x348: Int = x337
val x389 = while ({val x349 = x347
val x350 = x346
val x351 = x348
val x352 = x350 != x351
val x353 = x349 && x352
x353}) {
val x355 = x348
x346 = x355
val x357 = x355 >= x7
val x387 = if (x357) {
x347 = false
()
} else {
val x362 = x0(x355)
val x363 = x362 >= '0'
val x364 = x362 <= '9'
val x365 = x363 && x364
val x385 = if (x365) {
val x371 = x342
val x372 = x343
val x373 = x344
val x368 = x362 - '0'
val x369 = x368.toInt
val x375 = x371 * 10
val x376 = x375 + x369
x342 = x376
x343 = false
val x366 = x355 + 1
x344 = x366
x348 = x366
()
} else {
x347 = false
()
}
x385
}
x387
}
val x390 = x342
val x391 = x343
val x392 = x344
val x395 = if (x391) {
true
} else {
x391
}
val x1190 = if (x395) {
x2 = null
x3 = true
x4 = 0
()
} else {
var x403: Int = 0
var x404: Boolean = false
val x396 = if (x391) {
x320
} else {
x392
}
var x405: Int = x396
var x407: Int = -1
var x408: Boolean = true
var x409: Int = x396
val x444 = while ({val x410 = x408
val x411 = x407
val x412 = x409
val x413 = x411 != x412
val x414 = x410 && x413
x414}) {
val x416 = x409
x407 = x416
val x418 = x416 >= x7
val x442 = if (x418) {
x408 = false
()
} else {
val x422 = x0(x416)
val x424 = x422 == '\n'
val x440 = if (x424) {
x408 = false
()
} else {
val x429 = x403
val x430 = x404
val x431 = x405
val x433 = x429 + 1
x403 = x433
x404 = false
val x427 = x416 + 1
x405 = x427
x409 = x427
()
}
x440
}
x442
}
val x445 = x403
val x446 = x404
val x447 = x405
val x451 = x447 >= x7
val x1188 = if (x451) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x458 = x0(x447)
val x459 = x458 == '\n'
val x1186 = if (x459) {
var x466: Int = 200
var x467: Int = 0
var x468: java.lang.String = "close"
var x469: Boolean = false
var x470: Boolean = false
var x472: Boolean = false
val x460 = x447 + 1
var x473: Int = x460
var x475: Int = -1
var x476: Boolean = true
var x477: Int = x460
val x529 = {x492: (Int) => 
var x494: Int = 0
var x495: Boolean = true
var x496: Int = x492
val x498 = x492 >= x7
val x523 = if (x498) {
x494 = 0
x495 = true
x496 = x492
()
} else {
val x503 = x0(x492)
val x504 = x503 >= 'a'
val x505 = x503 <= 'z'
val x506 = x504 && x505
val x507 = x503 >= 'A'
val x508 = x503 <= 'Z'
val x509 = x507 && x508
val x510 = x506 || x509
val x521 = if (x510) {
x494 = x492
x495 = false
val x511 = x492 + 1
x496 = x511
()
} else {
x494 = 0
x495 = true
x496 = x492
()
}
x521
}
val x524 = x494
val x525 = x495
val x526 = x496
val x527 = new ParseResultInt(x524,x525,x526)
x527: ParseResultInt
}
val x565 = {x486: (Int) => 
var x488: Int = 0
var x489: Boolean = true
var x490: Int = x486
val x530 = x529(x486)
val x531 = x530.empty
val x559 = if (x531) {
val x532 = x486 >= x7
val x551 = if (x532) {
x488 = 0
x489 = true
x490 = x486
()
} else {
val x537 = x0(x486)
val x538 = x537 == '-'
val x549 = if (x538) {
x488 = x486
x489 = false
val x539 = x486 + 1
x490 = x539
()
} else {
x488 = 0
x489 = true
x490 = x486
()
}
x549
}
x551
} else {
val x553 = x530.res
x488 = x553
x489 = x531
val x556 = x530.next
x490 = x556
()
}
val x560 = x488
val x561 = x489
val x562 = x490
val x563 = new ParseResultInt(x560,x561,x562)
x563: ParseResultInt
}
val x811 = px811 // static data: Array(c,o,n,n,e,c,t,i,o,n)
val x812 = x811.length
val x837 = px837 // static data: Array(p,r,o,x,y,-,c,o,n,n,e,c,t,i,o,n)
val x838 = x837.length
val x864 = px864 // static data: Array(k,e,e,p,-,a,l,i,v,e)
val x865 = x864.length
val x890 = px890 // static data: Array(c,l,o,s,e)
val x891 = x890.length
val x936 = px936 // static data: Array(c,o,n,t,e,n,t,-,l,e,n,g,t,h)
val x937 = x936.length
val x981 = px981 // static data: Array(t,r,a,n,s,f,e,r,-,e,n,c,o,d,i,n,g)
val x982 = x981.length
val x1007 = px1007 // static data: Array(c,h,u,n,k,e,d)
val x1008 = x1007.length
val x1035 = px1035 // static data: Array(u,p,g,r,a,d,e)
val x1036 = x1035.length
val x1113 = while ({val x478 = x476
val x479 = x475
val x480 = x477
val x481 = x479 != x480
val x482 = x478 && x481
x482}) {
val x484 = x477
x475 = x484
val x566 = x484 >= x7
val x1111 = if (x566) {
x476 = false
()
} else {
val x573 = x0(x484)
val x574 = x573 >= 'a'
val x575 = x573 <= 'z'
val x576 = x574 && x575
val x577 = x573 >= 'A'
val x578 = x573 <= 'Z'
val x579 = x577 && x578
val x580 = x576 || x579
val x1109 = if (x580) {
var x584: Int = 0
var x585: Boolean = false
val x581 = x484 + 1
var x586: Int = x581
var x588: Int = -1
var x589: Boolean = true
var x590: Int = x581
val x617 = while ({val x591 = x589
val x592 = x588
val x593 = x590
val x594 = x592 != x593
val x595 = x591 && x594
x595}) {
val x597 = x590
x588 = x597
val x599 = x565(x597)
val x600 = x599.empty
val x615 = if (x600) {
x589 = false
()
} else {
val x603 = x584
val x604 = x585
val x605 = x586
val x607 = x603 + 1
x584 = x607
x585 = false
val x608 = x599.next
x586 = x608
x590 = x608
()
}
x615
}
val x618 = x584
val x619 = x585
val x620 = x586
var x630: java.lang.String = ""
var x631: Boolean = false
var x632: Int = x620
var x634: Int = -1
var x635: Boolean = true
var x636: Int = x620
val x669 = while ({val x637 = x635
val x638 = x634
val x639 = x636
val x640 = x638 != x639
val x641 = x637 && x640
x641}) {
val x643 = x636
x634 = x643
val x645 = x643 >= x7
val x667 = if (x645) {
x635 = false
()
} else {
val x649 = x0(x643)
val x650 = x649 == ' '
val x665 = if (x650) {
val x653 = x630
val x654 = x631
val x655 = x632
x630 = x653
x631 = false
val x651 = x643 + 1
x632 = x651
x636 = x651
()
} else {
x635 = false
()
}
x665
}
x667
}
val x670 = x630
val x671 = x631
val x672 = x632
val x1105 = if (x671) {
x476 = false
()
} else {
val x677 = x672 >= x7
val x1103 = if (x677) {
x476 = false
()
} else {
val x683 = x0(x672)
val x684 = x683 == ':'
val x1101 = if (x684) {
var x695: java.lang.String = ""
var x696: Boolean = false
val x685 = x672 + 1
var x697: Int = x685
var x699: Int = -1
var x700: Boolean = true
var x701: Int = x685
val x734 = while ({val x702 = x700
val x703 = x699
val x704 = x701
val x705 = x703 != x704
val x706 = x702 && x705
x706}) {
val x708 = x701
x699 = x708
val x710 = x708 >= x7
val x732 = if (x710) {
x700 = false
()
} else {
val x714 = x0(x708)
val x715 = x714 == ' '
val x730 = if (x715) {
val x718 = x695
val x719 = x696
val x720 = x697
x695 = x718
x696 = false
val x716 = x708 + 1
x697 = x716
x701 = x716
()
} else {
x700 = false
()
}
x730
}
x732
}
val x735 = x695
val x736 = x696
val x737 = x697
val x1097 = if (x736) {
x476 = false
()
} else {
var x743: Int = 0
var x744: Boolean = false
var x745: Int = x737
var x747: Int = -1
var x748: Boolean = true
var x749: Int = x737
val x784 = while ({val x750 = x748
val x751 = x747
val x752 = x749
val x753 = x751 != x752
val x754 = x750 && x753
x754}) {
val x756 = x749
x747 = x756
val x758 = x756 >= x7
val x782 = if (x758) {
x748 = false
()
} else {
val x762 = x0(x756)
val x764 = x762 == '\n'
val x780 = if (x764) {
x748 = false
()
} else {
val x769 = x743
val x770 = x744
val x771 = x745
val x773 = x769 + 1
x743 = x773
x744 = false
val x767 = x756 + 1
x745 = x767
x749 = x767
()
}
x780
}
x782
}
val x785 = x743
val x786 = x744
val x787 = x745
val x791 = x787 >= x7
val x1095 = if (x791) {
x476 = false
()
} else {
val x795 = x0(x787)
val x796 = x795 == '\n'
val x1093 = if (x796) {
val x802 = x466
val x803 = x467
val x804 = x468
val x805 = x469
val x806 = x470
val x808 = x472
val x809 = x473
val x626 = x618 + 1
val x813 = x626 == x812
val x836 = if (x813) {
var x814: Int = 0
var x815: Boolean = true
val x833 = while ({val x816 = x814
val x818 = x815
val x817 = x816 < x626
val x819 = x817 && x818
x819}) {
val x821 = x814
val x822 = x821 + x484
val x823 = x0(x822)
val x824 = x811(x821)
val x826 = x823 == x824
val x829 = if (x826) {
()
} else {
x815 = false
()
}
val x830 = x821 + 1
x814 = x830
()
}
val x834 = x815
x834
} else {
false
}
val x839 = x626 == x838
val x862 = if (x839) {
var x840: Int = 0
var x841: Boolean = true
val x859 = while ({val x842 = x840
val x844 = x841
val x843 = x842 < x626
val x845 = x843 && x844
x845}) {
val x847 = x840
val x848 = x847 + x484
val x849 = x0(x848)
val x850 = x837(x847)
val x852 = x849 == x850
val x855 = if (x852) {
()
} else {
x841 = false
()
}
val x856 = x847 + 1
x840 = x856
()
}
val x860 = x841
x860
} else {
false
}
val x863 = x836 || x862
val x866 = x785 == x865
val x889 = if (x866) {
var x867: Int = 0
var x868: Boolean = true
val x886 = while ({val x869 = x867
val x871 = x868
val x870 = x869 < x785
val x872 = x870 && x871
x872}) {
val x874 = x867
val x875 = x874 + x737
val x876 = x0(x875)
val x877 = x864(x874)
val x879 = x876 == x877
val x882 = if (x879) {
()
} else {
x868 = false
()
}
val x883 = x874 + 1
x867 = x883
()
}
val x887 = x868
x887
} else {
false
}
val x892 = x785 == x891
val x915 = if (x892) {
var x893: Int = 0
var x894: Boolean = true
val x912 = while ({val x895 = x893
val x897 = x894
val x896 = x895 < x785
val x898 = x896 && x897
x898}) {
val x900 = x893
val x901 = x900 + x737
val x902 = x0(x901)
val x903 = x890(x900)
val x905 = x902 == x903
val x908 = if (x905) {
()
} else {
x894 = false
()
}
val x909 = x900 + 1
x893 = x909
()
}
val x913 = x894
x913
} else {
false
}
val x916 = x889 || x915
val x917 = x863 && x916
val x1075 = if (x917) {
var x918: java.lang.String = ""
var x919: Int = 0
val x932 = while ({val x920 = x919
val x921 = x920 < x785
x921}) {
val x923 = x918
val x924 = x919
val x925 = x737 + x924
val x926 = x0(x925)
val x927 = x923+x926
x918 = x927
val x929 = x924 + 1
x919 = x929
()
}
val x933 = x918
val x934 = new Anon1323431030(x802,x803,x933,x805,x806)
x934
} else {
val x938 = x626 == x937
val x961 = if (x938) {
var x939: Int = 0
var x940: Boolean = true
val x958 = while ({val x941 = x939
val x943 = x940
val x942 = x941 < x626
val x944 = x942 && x943
x944}) {
val x946 = x939
val x947 = x946 + x484
val x948 = x0(x947)
val x949 = x936(x946)
val x951 = x948 == x949
val x954 = if (x951) {
()
} else {
x940 = false
()
}
val x955 = x946 + 1
x939 = x955
()
}
val x959 = x940
x959
} else {
false
}
val x1074 = if (x961) {
var x962: java.lang.String = ""
var x963: Int = 0
val x976 = while ({val x964 = x963
val x965 = x964 < x785
x965}) {
val x967 = x962
val x968 = x963
val x969 = x737 + x968
val x970 = x0(x969)
val x971 = x967+x970
x962 = x971
val x973 = x968 + 1
x963 = x973
()
}
val x977 = x962
val x978 = x977.toInt
val x979 = new Anon1323431030(x802,x978,x804,x805,x806)
x979
} else {
val x983 = x626 == x982
val x1006 = if (x983) {
var x984: Int = 0
var x985: Boolean = true
val x1003 = while ({val x986 = x984
val x988 = x985
val x987 = x986 < x626
val x989 = x987 && x988
x989}) {
val x991 = x984
val x992 = x991 + x484
val x993 = x0(x992)
val x994 = x981(x991)
val x996 = x993 == x994
val x999 = if (x996) {
()
} else {
x985 = false
()
}
val x1000 = x991 + 1
x984 = x1000
()
}
val x1004 = x985
x1004
} else {
false
}
val x1009 = x785 == x1008
val x1032 = if (x1009) {
var x1010: Int = 0
var x1011: Boolean = true
val x1029 = while ({val x1012 = x1010
val x1014 = x1011
val x1013 = x1012 < x785
val x1015 = x1013 && x1014
x1015}) {
val x1017 = x1010
val x1018 = x1017 + x737
val x1019 = x0(x1018)
val x1020 = x1007(x1017)
val x1022 = x1019 == x1020
val x1025 = if (x1022) {
()
} else {
x1011 = false
()
}
val x1026 = x1017 + 1
x1010 = x1026
()
}
val x1030 = x1011
x1030
} else {
false
}
val x1033 = x1006 && x1032
val x1068 = if (x1033) {
x802
} else {
val x1037 = x626 == x1036
val x1060 = if (x1037) {
var x1038: Int = 0
var x1039: Boolean = true
val x1057 = while ({val x1040 = x1038
val x1042 = x1039
val x1041 = x1040 < x626
val x1043 = x1041 && x1042
x1043}) {
val x1045 = x1038
val x1046 = x1045 + x484
val x1047 = x0(x1046)
val x1048 = x1035(x1045)
val x1050 = x1047 == x1048
val x1053 = if (x1050) {
()
} else {
x1039 = false
()
}
val x1054 = x1045 + 1
x1038 = x1054
()
}
val x1058 = x1039
x1058
} else {
false
}
val x1062 = if (x1060) {
x802
} else {
x802
}
x1062
}
val x1069 = if (x1033) {
x803
} else {
val x1037 = x626 == x1036
val x1060 = if (x1037) {
var x1038: Int = 0
var x1039: Boolean = true
val x1057 = while ({val x1040 = x1038
val x1042 = x1039
val x1041 = x1040 < x626
val x1043 = x1041 && x1042
x1043}) {
val x1045 = x1038
val x1046 = x1045 + x484
val x1047 = x0(x1046)
val x1048 = x1035(x1045)
val x1050 = x1047 == x1048
val x1053 = if (x1050) {
()
} else {
x1039 = false
()
}
val x1054 = x1045 + 1
x1038 = x1054
()
}
val x1058 = x1039
x1058
} else {
false
}
val x1063 = if (x1060) {
x803
} else {
x803
}
x1063
}
val x1070 = if (x1033) {
x804
} else {
val x1037 = x626 == x1036
val x1060 = if (x1037) {
var x1038: Int = 0
var x1039: Boolean = true
val x1057 = while ({val x1040 = x1038
val x1042 = x1039
val x1041 = x1040 < x626
val x1043 = x1041 && x1042
x1043}) {
val x1045 = x1038
val x1046 = x1045 + x484
val x1047 = x0(x1046)
val x1048 = x1035(x1045)
val x1050 = x1047 == x1048
val x1053 = if (x1050) {
()
} else {
x1039 = false
()
}
val x1054 = x1045 + 1
x1038 = x1054
()
}
val x1058 = x1039
x1058
} else {
false
}
val x1064 = if (x1060) {
x804
} else {
x804
}
x1064
}
val x1071 = if (x1033) {
true
} else {
val x1037 = x626 == x1036
val x1060 = if (x1037) {
var x1038: Int = 0
var x1039: Boolean = true
val x1057 = while ({val x1040 = x1038
val x1042 = x1039
val x1041 = x1040 < x626
val x1043 = x1041 && x1042
x1043}) {
val x1045 = x1038
val x1046 = x1045 + x484
val x1047 = x0(x1046)
val x1048 = x1035(x1045)
val x1050 = x1047 == x1048
val x1053 = if (x1050) {
()
} else {
x1039 = false
()
}
val x1054 = x1045 + 1
x1038 = x1054
()
}
val x1058 = x1039
x1058
} else {
false
}
val x1065 = if (x1060) {
x805
} else {
x805
}
x1065
}
val x1072 = if (x1033) {
x806
} else {
val x1037 = x626 == x1036
val x1060 = if (x1037) {
var x1038: Int = 0
var x1039: Boolean = true
val x1057 = while ({val x1040 = x1038
val x1042 = x1039
val x1041 = x1040 < x626
val x1043 = x1041 && x1042
x1043}) {
val x1045 = x1038
val x1046 = x1045 + x484
val x1047 = x0(x1046)
val x1048 = x1035(x1045)
val x1050 = x1047 == x1048
val x1053 = if (x1050) {
()
} else {
x1039 = false
()
}
val x1054 = x1045 + 1
x1038 = x1054
()
}
val x1058 = x1039
x1058
} else {
false
}
val x1066 = if (x1060) {
true
} else {
x806
}
x1066
}
val x1073 = new Anon1323431030(x1068,x1069,x1070,x1071,x1072)
x1073
}
x1074
}
val x1077 = x1075.status
x466 = x1077
val x1079 = x1075.contentLength
x467 = x1079
val x1081 = x1075.connection
x468 = x1081
val x1083 = x1075.chunked
x469 = x1083
val x1085 = x1075.upgrade
x470 = x1085
x472 = false
val x797 = x787 + 1
x473 = x797
x477 = x797
()
} else {
x476 = false
()
}
x1093
}
x1095
}
x1097
} else {
x476 = false
()
}
x1101
}
x1103
}
x1105
} else {
x476 = false
()
}
x1109
}
x1111
}
val x1114 = x466
val x1115 = x467
val x1116 = x468
val x1117 = x469
val x1118 = x470
val x1120 = x472
val x1121 = x473
val x1126 = if (x1120) {
true
} else {
false
}
val x1180 = if (x1126) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x1127 = if (x1120) {
0
} else {
x1121
}
val x1134 = x1127 >= x7
val x1178 = if (x1134) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x1140 = x0(x1127)
val x1141 = x1140 == '\n'
val x1176 = if (x1141) {
val x1142 = x1127 + 1
val x1125 = if (x1120) {
null
} else {
val x394 = if (x391) {
0
} else {
x390
}
val x1119 = new Anon1323431030(x1114,x1115,x1116,x1117,x1118)
val x1123 = new Tuple2IntAnon1323431030(x394,x1119)
x1123
}
val x1146 = x1125._2
val x1147 = x1146.contentLength
val x1153 = x1142 + x1147
val x1154 = x1153 < x7
val x1170 = if (x1154) {
val x1145 = x1125._1
val x1148 = x1146.connection
val x1149 = x1146.chunked
val x1150 = x1146.upgrade
val x1151 = new Anon1323431030(x1145,x1147,x1148,x1149,x1150)
val x1155 = new Anon1680061013(x0,x1142,x1153)
val x1156 = x1155.input.slice(x1155.start,x1155.start+x1155.length).mkString
val x1158 = new Tuple2Anon1323431030String(x1151,x1156)
x2 = x1158
x3 = false
x4 = x1147
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1170
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1176
}
x1178
}
x1180
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1186
}
x1188
}
x1190
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1196
}
x1198
}
x1200
}
x1202
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1208
}
x1210
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1216
}
x1218
}
x1220
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1226
}
x1228
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1234
}
x1236
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1242
}
x1244
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1250
}
x1252
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1258
}
x1260
} else {
x2 = null
x3 = true
x4 = 0
()
}
x1266
}
val x1269 = x2
val x1270 = x3
val x1271 = x4
val x1272 = new ParseResultTuple2Anon1323431030String(x1269,x1270,x1271)
val x1273 = println(x1272)
x1273
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Anon1323431030(status: Int, contentLength: Int, connection: java.lang.String, chunked: Boolean, upgrade: Boolean)

case class Anon1680061013(input: Array[Char], start: Int, length: Int)

case class Tuple2Anon1323431030String(_1: Anon1323431030, _2: java.lang.String)

case class ParseResultInt(res: Int, empty: Boolean, next: Int)

case class ParseResultTuple2Anon1323431030String(res: Tuple2Anon1323431030String, empty: Boolean, next: Int)

case class ParseResultAnon1323431030(res: Anon1323431030, empty: Boolean, next: Int)

case class Tuple2IntAnon1323431030(_1: Int, _2: Anon1323431030)

case class ParseResultString(res: java.lang.String, empty: Boolean, next: Int)
nVars=1000
compilation: ok
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,0,close,false,false),AA
),false,0)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,0,close,false,false),4
Wiki
4
pedi
D
a in

chunks.
0

),false,0)
ParseResultTuple2Anon1323431030String(Tuple2Anon1323431030String(Anon1323431030(200,0,close,false,false),<html>
<head>
  <title>An Example Page</title>
</head>
<body>
  Hello World, this is a very simple HTML document.
</body>
</html>
),false,0)
