not contains
contains
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testRecNumber extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x7 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
var x122 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
var x80 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
val x1 = null.asInstanceOf[Int]
x7 = {x8: (Int) => 
var x10: Int = x1
var x11: Boolean = true
var x12: Int = x8
val x123 = x122(x8)
val x124 = x123.res
x10 = x124
val x126 = x123.empty
x11 = x126
val x128 = x123.next
x12 = x128
val x130 = x10
val x131 = x11
val x132 = x12
val x133 = new ParseResultInt(x130,x131,x132)
x133
}
val x26 = x0.length
val x30 = null.asInstanceOf[Tuple2IntInt]
x80 = {x20: (Int) => 
var x22: Int = x1
var x23: Boolean = true
var x24: Int = x20
val x27 = x20 >= x26
val x74 = if (x27) {
x22 = x1
x23 = true
x24 = x20
()
} else {
val x36 = x0(x20)
val x37 = x36 >= '0'
val x38 = x36 <= '9'
val x39 = x37 && x38
val x72 = if (x39) {
val x40 = x20 + 1
val x45 = x7(x40)
val x46 = x45.empty
val x52 = if (x46) {
true
} else {
false
}
val x60 = if (x52) {
x1
} else {
val x51 = if (x46) {
x30
} else {
val x42 = x36 - '0'
val x43 = x42.toInt
val x47 = x45.res
val x48 = new Tuple2IntInt(x43,x47)
x48
}
val x56 = x51._1
val x57 = x51._2
val x58 = x56 + x57
x58
}
x22 = x60
val x61 = if (x52) {
true
} else {
false
}
x23 = x61
val x53 = if (x46) {
x20
} else {
val x49 = x45.next
x49
}
val x62 = if (x52) {
x53
} else {
x53
}
x24 = x62
()
} else {
x22 = x1
x23 = true
x24 = x20
()
}
x72
}
val x75 = x22
val x76 = x23
val x77 = x24
val x78 = new ParseResultInt(x75,x76,x77)
x78
}
x122 = {x14: (Int) => 
var x16: Int = x1
var x17: Boolean = true
var x18: Int = x14
val x81 = x80(x14)
val x82 = x81.empty
val x116 = if (x82) {
val x83 = x14 >= x26
val x108 = if (x83) {
x16 = x1
x17 = true
x18 = x14
()
} else {
val x89 = x0(x14)
val x90 = x89 >= '0'
val x91 = x89 <= '9'
val x92 = x90 && x91
val x106 = if (x92) {
val x95 = x89 - '0'
val x96 = x95.toInt
x16 = x96
x17 = false
val x93 = x14 + 1
x18 = x93
()
} else {
x16 = x1
x17 = true
x18 = x14
()
}
x106
}
x108
} else {
val x110 = x81.res
x16 = x110
x17 = x82
val x113 = x81.next
x18 = x113
()
}
val x117 = x16
val x118 = x17
val x119 = x18
val x120 = new ParseResultInt(x117,x118,x119)
x120
}
var x3: Int = x1
var x4: Boolean = true
var x5: Int = -1
val x135 = x7(0)
val x136 = x135.res
x3 = x136
val x138 = x135.empty
x4 = x138
val x140 = x135.next
x5 = x140
val x142 = x3
val x143 = x4
val x144 = x5
val x145 = new ParseResultInt(x142,x143,x144)
val x146 = println(x145)
x146
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
not contains
contains
compilation: ok
ParseResultInt(2,false,1)
ParseResultInt(5,false,2)
ParseResultInt(2,false,1)
ParseResultInt(5,false,2)
ParseResultInt(0,true,0)
not contains
contains
contains
contains
nVars=1000
contains
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testRecExpr extends ((Array[Char])=>(Unit)) {
def apply(x292:Array[Char]): Unit = {
var x297 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
var x470 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
var x669 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
var x910 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
var x1108 = null.asInstanceOf[scala.Function1[Int, ParseResultInt]]
val x1 = null.asInstanceOf[Int]
val x316 = x292.length
val x30 = null.asInstanceOf[Tuple2IntInt]
x297 = {x298: (Int) => 
var x300: Int = x1
var x301: Boolean = true
var x302: Int = x298
val x471 = x470(x298)
val x472 = x471.empty
val x1204 = if (x472) {
x300 = x1
x301 = true
x302 = x298
()
} else {
var x480: Int = 1
var x481: Boolean = false
val x478 = x471.next
var x482: Int = x478
var x484: Int = -1
var x485: Boolean = true
var x486: Int = x478
val x695 = while ({val x487 = x485
val x488 = x484
val x489 = x486
val x490 = x488 != x489
val x491 = x487 && x490
x491}) {
val x493 = x486
x484 = x493
val x495 = x493 >= x316
val x693 = if (x495) {
x485 = false
()
} else {
val x500 = x292(x493)
val x501 = x500 == '*'
val x691 = if (x501) {
val x502 = x493 + 1
val x670 = x669(x502)
val x671 = x670.empty
val x687 = if (x671) {
x485 = false
()
} else {
val x674 = x480
val x675 = x481
val x676 = x482
val x678 = x670.res
val x679 = x674 * x678
x480 = x679
x481 = false
val x680 = x670.next
x482 = x680
x486 = x680
()
}
x687
} else {
x485 = false
()
}
x691
}
x693
}
val x696 = x480
val x697 = x481
val x698 = x482
val x704 = if (x697) {
true
} else {
false
}
val x713 = if (x704) {
true
} else {
false
}
val x1202 = if (x713) {
x300 = x1
x301 = true
x302 = x298
()
} else {
var x721: Int = 0
var x722: Boolean = false
val x705 = if (x697) {
x298
} else {
x698
}
val x714 = if (x704) {
x705
} else {
x705
}
var x723: Int = x714
var x725: Int = -1
var x726: Boolean = true
var x727: Int = x714
val x1178 = while ({val x728 = x726
val x729 = x725
val x730 = x727
val x731 = x729 != x730
val x732 = x728 && x731
x732}) {
val x734 = x727
x725 = x734
val x736 = x734 >= x316
val x1176 = if (x736) {
x726 = false
()
} else {
val x741 = x292(x734)
val x742 = x741 == '+'
val x1174 = if (x742) {
val x743 = x734 + 1
val x911 = x910(x743)
val x912 = x911.empty
val x1170 = if (x912) {
x726 = false
()
} else {
var x919: Int = 1
var x920: Boolean = false
val x917 = x911.next
var x921: Int = x917
var x923: Int = -1
var x924: Boolean = true
var x925: Int = x917
val x1134 = while ({val x926 = x924
val x927 = x923
val x928 = x925
val x929 = x927 != x928
val x930 = x926 && x929
x930}) {
val x932 = x925
x923 = x932
val x934 = x932 >= x316
val x1132 = if (x934) {
x924 = false
()
} else {
val x939 = x292(x932)
val x940 = x939 == '*'
val x1130 = if (x940) {
val x941 = x932 + 1
val x1109 = x1108(x941)
val x1110 = x1109.empty
val x1126 = if (x1110) {
x924 = false
()
} else {
val x1113 = x919
val x1114 = x920
val x1115 = x921
val x1117 = x1109.res
val x1118 = x1113 * x1117
x919 = x1118
x920 = false
val x1119 = x1109.next
x921 = x1119
x925 = x1119
()
}
x1126
} else {
x924 = false
()
}
x1130
}
x1132
}
val x1135 = x919
val x1136 = x920
val x1137 = x921
val x1143 = if (x1136) {
true
} else {
false
}
val x1152 = if (x1143) {
true
} else {
false
}
val x1168 = if (x1152) {
x726 = false
()
} else {
val x1157 = x721
val x1158 = x722
val x1159 = x723
val x1151 = if (x1143) {
x1
} else {
val x1142 = if (x1136) {
x30
} else {
val x1139 = x911.res
val x1140 = new Tuple2IntInt(x1139,x1135)
x1140
}
val x1147 = x1142._1
val x1148 = x1142._2
val x1149 = x1147 * x1148
x1149
}
val x1161 = x1157 + x1151
x721 = x1161
x722 = false
val x1144 = if (x1136) {
x743
} else {
x1137
}
val x1153 = if (x1143) {
x1144
} else {
x1144
}
x723 = x1153
x727 = x1153
()
}
x1168
}
x1170
} else {
x726 = false
()
}
x1174
}
x1176
}
val x1179 = x721
val x1180 = x722
val x1181 = x723
val x1186 = if (x1180) {
true
} else {
false
}
val x1194 = if (x1186) {
x1
} else {
val x1185 = if (x1180) {
x30
} else {
val x712 = if (x704) {
x1
} else {
val x703 = if (x697) {
x30
} else {
val x700 = x471.res
val x701 = new Tuple2IntInt(x700,x696)
x701
}
val x708 = x703._1
val x709 = x703._2
val x710 = x708 * x709
x710
}
val x1183 = new Tuple2IntInt(x712,x1179)
x1183
}
val x1190 = x1185._1
val x1191 = x1185._2
val x1192 = x1190 + x1191
x1192
}
x300 = x1194
val x1195 = if (x1186) {
true
} else {
false
}
x301 = x1195
val x1187 = if (x1180) {
x298
} else {
x1181
}
val x1196 = if (x1186) {
x1187
} else {
x1187
}
x302 = x1196
()
}
x1202
}
val x1205 = x300
val x1206 = x301
val x1207 = x302
val x1208 = new ParseResultInt(x1205,x1206,x1207)
x1208
}
val x404 = {x310: (Int) => 
var x312: Int = x1
var x313: Boolean = true
var x314: Int = x310
val x317 = x310 >= x316
val x398 = if (x317) {
x312 = x1
x313 = true
x314 = x310
()
} else {
val x323 = x292(x310)
val x324 = x323 >= '0'
val x325 = x323 <= '9'
val x326 = x324 && x325
val x396 = if (x326) {
val x329 = x323 - '0'
val x330 = x329.toInt
var x332: Int = x330
var x333: Boolean = false
val x327 = x310 + 1
var x334: Int = x327
var x336: Int = -1
var x337: Boolean = true
var x338: Int = x327
val x379 = while ({val x339 = x337
val x340 = x336
val x341 = x338
val x342 = x340 != x341
val x343 = x339 && x342
x343}) {
val x345 = x338
x336 = x345
val x347 = x345 >= x316
val x377 = if (x347) {
x337 = false
()
} else {
val x352 = x292(x345)
val x353 = x352 >= '0'
val x354 = x352 <= '9'
val x355 = x353 && x354
val x375 = if (x355) {
val x361 = x332
val x362 = x333
val x363 = x334
val x358 = x352 - '0'
val x359 = x358.toInt
val x365 = x361 * 10
val x366 = x365 + x359
x332 = x366
x333 = false
val x356 = x345 + 1
x334 = x356
x338 = x356
()
} else {
x337 = false
()
}
x375
}
x377
}
val x380 = x332
val x381 = x333
val x382 = x334
val x384 = if (x381) {
x1
} else {
x380
}
x312 = x384
val x385 = if (x381) {
true
} else {
x381
}
x313 = x385
val x386 = if (x381) {
x310
} else {
x382
}
x314 = x386
()
} else {
x312 = x1
x313 = true
x314 = x310
()
}
x396
}
val x399 = x312
val x400 = x313
val x401 = x314
val x402 = new ParseResultInt(x399,x400,x401)
x402
}
x470 = {x304: (Int) => 
var x306: Int = x1
var x307: Boolean = true
var x308: Int = x304
val x405 = x404(x304)
val x406 = x405.empty
val x464 = if (x406) {
val x407 = x304 >= x316
val x456 = if (x407) {
x306 = x1
x307 = true
x308 = x304
()
} else {
val x413 = x292(x304)
val x414 = x413 == '('
val x454 = if (x414) {
val x415 = x304 + 1
val x417 = x297(x415)
val x418 = x417.empty
val x448 = if (x418) {
val x419 = x417.res
x306 = x419
x307 = x418
val x422 = x417.next
x308 = x422
()
} else {
val x422 = x417.next
val x425 = x422 >= x316
val x446 = if (x425) {
x306 = x1
x307 = true
x308 = x304
()
} else {
val x431 = x292(x422)
val x432 = x431 == ')'
val x444 = if (x432) {
val x419 = x417.res
x306 = x419
x307 = false
val x433 = x422 + 1
x308 = x433
()
} else {
x306 = x1
x307 = true
x308 = x304
()
}
x444
}
x446
}
x448
} else {
x306 = x1
x307 = true
x308 = x304
()
}
x454
}
x456
} else {
val x458 = x405.res
x306 = x458
x307 = x406
val x461 = x405.next
x308 = x461
()
}
val x465 = x306
val x466 = x307
val x467 = x308
val x468 = new ParseResultInt(x465,x466,x467)
x468
}
val x603 = {x510: (Int) => 
var x512: Int = x1
var x513: Boolean = true
var x514: Int = x510
val x516 = x510 >= x316
val x597 = if (x516) {
x512 = x1
x513 = true
x514 = x510
()
} else {
val x522 = x292(x510)
val x523 = x522 >= '0'
val x524 = x522 <= '9'
val x525 = x523 && x524
val x595 = if (x525) {
val x528 = x522 - '0'
val x529 = x528.toInt
var x531: Int = x529
var x532: Boolean = false
val x526 = x510 + 1
var x533: Int = x526
var x535: Int = -1
var x536: Boolean = true
var x537: Int = x526
val x578 = while ({val x538 = x536
val x539 = x535
val x540 = x537
val x541 = x539 != x540
val x542 = x538 && x541
x542}) {
val x544 = x537
x535 = x544
val x546 = x544 >= x316
val x576 = if (x546) {
x536 = false
()
} else {
val x551 = x292(x544)
val x552 = x551 >= '0'
val x553 = x551 <= '9'
val x554 = x552 && x553
val x574 = if (x554) {
val x560 = x531
val x561 = x532
val x562 = x533
val x557 = x551 - '0'
val x558 = x557.toInt
val x564 = x560 * 10
val x565 = x564 + x558
x531 = x565
x532 = false
val x555 = x544 + 1
x533 = x555
x537 = x555
()
} else {
x536 = false
()
}
x574
}
x576
}
val x579 = x531
val x580 = x532
val x581 = x533
val x583 = if (x580) {
x1
} else {
x579
}
x512 = x583
val x584 = if (x580) {
true
} else {
x580
}
x513 = x584
val x585 = if (x580) {
x510
} else {
x581
}
x514 = x585
()
} else {
x512 = x1
x513 = true
x514 = x510
()
}
x595
}
val x598 = x512
val x599 = x513
val x600 = x514
val x601 = new ParseResultInt(x598,x599,x600)
x601
}
x669 = {x504: (Int) => 
var x506: Int = x1
var x507: Boolean = true
var x508: Int = x504
val x604 = x603(x504)
val x605 = x604.empty
val x663 = if (x605) {
val x606 = x504 >= x316
val x655 = if (x606) {
x506 = x1
x507 = true
x508 = x504
()
} else {
val x612 = x292(x504)
val x613 = x612 == '('
val x653 = if (x613) {
val x614 = x504 + 1
val x616 = x297(x614)
val x617 = x616.empty
val x647 = if (x617) {
val x618 = x616.res
x506 = x618
x507 = x617
val x621 = x616.next
x508 = x621
()
} else {
val x621 = x616.next
val x624 = x621 >= x316
val x645 = if (x624) {
x506 = x1
x507 = true
x508 = x504
()
} else {
val x630 = x292(x621)
val x631 = x630 == ')'
val x643 = if (x631) {
val x618 = x616.res
x506 = x618
x507 = false
val x632 = x621 + 1
x508 = x632
()
} else {
x506 = x1
x507 = true
x508 = x504
()
}
x643
}
x645
}
x647
} else {
x506 = x1
x507 = true
x508 = x504
()
}
x653
}
x655
} else {
val x657 = x604.res
x506 = x657
x507 = x605
val x660 = x604.next
x508 = x660
()
}
val x664 = x506
val x665 = x507
val x666 = x508
val x667 = new ParseResultInt(x664,x665,x666)
x667
}
val x844 = {x751: (Int) => 
var x753: Int = x1
var x754: Boolean = true
var x755: Int = x751
val x757 = x751 >= x316
val x838 = if (x757) {
x753 = x1
x754 = true
x755 = x751
()
} else {
val x763 = x292(x751)
val x764 = x763 >= '0'
val x765 = x763 <= '9'
val x766 = x764 && x765
val x836 = if (x766) {
val x769 = x763 - '0'
val x770 = x769.toInt
var x772: Int = x770
var x773: Boolean = false
val x767 = x751 + 1
var x774: Int = x767
var x776: Int = -1
var x777: Boolean = true
var x778: Int = x767
val x819 = while ({val x779 = x777
val x780 = x776
val x781 = x778
val x782 = x780 != x781
val x783 = x779 && x782
x783}) {
val x785 = x778
x776 = x785
val x787 = x785 >= x316
val x817 = if (x787) {
x777 = false
()
} else {
val x792 = x292(x785)
val x793 = x792 >= '0'
val x794 = x792 <= '9'
val x795 = x793 && x794
val x815 = if (x795) {
val x801 = x772
val x802 = x773
val x803 = x774
val x798 = x792 - '0'
val x799 = x798.toInt
val x805 = x801 * 10
val x806 = x805 + x799
x772 = x806
x773 = false
val x796 = x785 + 1
x774 = x796
x778 = x796
()
} else {
x777 = false
()
}
x815
}
x817
}
val x820 = x772
val x821 = x773
val x822 = x774
val x824 = if (x821) {
x1
} else {
x820
}
x753 = x824
val x825 = if (x821) {
true
} else {
x821
}
x754 = x825
val x826 = if (x821) {
x751
} else {
x822
}
x755 = x826
()
} else {
x753 = x1
x754 = true
x755 = x751
()
}
x836
}
val x839 = x753
val x840 = x754
val x841 = x755
val x842 = new ParseResultInt(x839,x840,x841)
x842
}
x910 = {x745: (Int) => 
var x747: Int = x1
var x748: Boolean = true
var x749: Int = x745
val x845 = x844(x745)
val x846 = x845.empty
val x904 = if (x846) {
val x847 = x745 >= x316
val x896 = if (x847) {
x747 = x1
x748 = true
x749 = x745
()
} else {
val x853 = x292(x745)
val x854 = x853 == '('
val x894 = if (x854) {
val x855 = x745 + 1
val x857 = x297(x855)
val x858 = x857.empty
val x888 = if (x858) {
val x859 = x857.res
x747 = x859
x748 = x858
val x862 = x857.next
x749 = x862
()
} else {
val x862 = x857.next
val x865 = x862 >= x316
val x886 = if (x865) {
x747 = x1
x748 = true
x749 = x745
()
} else {
val x871 = x292(x862)
val x872 = x871 == ')'
val x884 = if (x872) {
val x859 = x857.res
x747 = x859
x748 = false
val x873 = x862 + 1
x749 = x873
()
} else {
x747 = x1
x748 = true
x749 = x745
()
}
x884
}
x886
}
x888
} else {
x747 = x1
x748 = true
x749 = x745
()
}
x894
}
x896
} else {
val x898 = x845.res
x747 = x898
x748 = x846
val x901 = x845.next
x749 = x901
()
}
val x905 = x747
val x906 = x748
val x907 = x749
val x908 = new ParseResultInt(x905,x906,x907)
x908
}
val x1042 = {x949: (Int) => 
var x951: Int = x1
var x952: Boolean = true
var x953: Int = x949
val x955 = x949 >= x316
val x1036 = if (x955) {
x951 = x1
x952 = true
x953 = x949
()
} else {
val x961 = x292(x949)
val x962 = x961 >= '0'
val x963 = x961 <= '9'
val x964 = x962 && x963
val x1034 = if (x964) {
val x967 = x961 - '0'
val x968 = x967.toInt
var x970: Int = x968
var x971: Boolean = false
val x965 = x949 + 1
var x972: Int = x965
var x974: Int = -1
var x975: Boolean = true
var x976: Int = x965
val x1017 = while ({val x977 = x975
val x978 = x974
val x979 = x976
val x980 = x978 != x979
val x981 = x977 && x980
x981}) {
val x983 = x976
x974 = x983
val x985 = x983 >= x316
val x1015 = if (x985) {
x975 = false
()
} else {
val x990 = x292(x983)
val x991 = x990 >= '0'
val x992 = x990 <= '9'
val x993 = x991 && x992
val x1013 = if (x993) {
val x999 = x970
val x1000 = x971
val x1001 = x972
val x996 = x990 - '0'
val x997 = x996.toInt
val x1003 = x999 * 10
val x1004 = x1003 + x997
x970 = x1004
x971 = false
val x994 = x983 + 1
x972 = x994
x976 = x994
()
} else {
x975 = false
()
}
x1013
}
x1015
}
val x1018 = x970
val x1019 = x971
val x1020 = x972
val x1022 = if (x1019) {
x1
} else {
x1018
}
x951 = x1022
val x1023 = if (x1019) {
true
} else {
x1019
}
x952 = x1023
val x1024 = if (x1019) {
x949
} else {
x1020
}
x953 = x1024
()
} else {
x951 = x1
x952 = true
x953 = x949
()
}
x1034
}
val x1037 = x951
val x1038 = x952
val x1039 = x953
val x1040 = new ParseResultInt(x1037,x1038,x1039)
x1040
}
x1108 = {x943: (Int) => 
var x945: Int = x1
var x946: Boolean = true
var x947: Int = x943
val x1043 = x1042(x943)
val x1044 = x1043.empty
val x1102 = if (x1044) {
val x1045 = x943 >= x316
val x1094 = if (x1045) {
x945 = x1
x946 = true
x947 = x943
()
} else {
val x1051 = x292(x943)
val x1052 = x1051 == '('
val x1092 = if (x1052) {
val x1053 = x943 + 1
val x1055 = x297(x1053)
val x1056 = x1055.empty
val x1086 = if (x1056) {
val x1057 = x1055.res
x945 = x1057
x946 = x1056
val x1060 = x1055.next
x947 = x1060
()
} else {
val x1060 = x1055.next
val x1063 = x1060 >= x316
val x1084 = if (x1063) {
x945 = x1
x946 = true
x947 = x943
()
} else {
val x1069 = x292(x1060)
val x1070 = x1069 == ')'
val x1082 = if (x1070) {
val x1057 = x1055.res
x945 = x1057
x946 = false
val x1071 = x1060 + 1
x947 = x1071
()
} else {
x945 = x1
x946 = true
x947 = x943
()
}
x1082
}
x1084
}
x1086
} else {
x945 = x1
x946 = true
x947 = x943
()
}
x1092
}
x1094
} else {
val x1096 = x1043.res
x945 = x1096
x946 = x1044
val x1099 = x1043.next
x947 = x1099
()
}
val x1103 = x945
val x1104 = x946
val x1105 = x947
val x1106 = new ParseResultInt(x1103,x1104,x1105)
x1106
}
var x293: Int = x1
var x294: Boolean = true
var x295: Int = -1
val x1210 = x297(0)
val x1211 = x1210.res
x293 = x1211
val x1213 = x1210.empty
x294 = x1213
val x1215 = x1210.next
x295 = x1215
val x1217 = x293
val x1218 = x294
val x1219 = x295
val x1220 = new ParseResultInt(x1217,x1218,x1219)
val x1221 = println(x1220)
x1221
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
not contains
contains
contains
contains
contains
nVars=2000
compilation: ok
ParseResultInt(2,false,1)
ParseResultInt(5,false,3)
ParseResultInt(17,false,5)
ParseResultInt(25,false,7)
ParseResultInt(125,false,9)
