not contains
contains
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testRecNumber extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x6: scala.Function1[Int, ParseResultInt] = null
var x119: scala.Function1[Int, ParseResultInt] = null
var x77: scala.Function1[Int, ParseResultInt] = null
x6 = {x7: (Int) => 
var x9: Int = 0
var x10: Boolean = true
var x11: Int = x7
val x120 = x119(x7)
val x121 = x120.res
x9 = x121
val x123 = x120.empty
x10 = x123
val x125 = x120.next
x11 = x125
val x127 = x9
val x128 = x10
val x129 = x11
val x130 = new ParseResultInt(x127,x128,x129)
x130: ParseResultInt
}
val x25 = x0.length
x77 = {x19: (Int) => 
var x21: Int = 0
var x22: Boolean = true
var x23: Int = x19
val x26 = x19 >= x25
val x71 = if (x26) {
x21 = 0
x22 = true
x23 = x19
()
} else {
val x33 = x0(x19)
val x34 = x33 >= '0'
val x35 = x33 <= '9'
val x36 = x34 && x35
val x69 = if (x36) {
val x37 = x19 + 1
val x42 = x6(x37)
val x43 = x42.empty
val x49 = if (x43) {
true
} else {
false
}
val x57 = if (x49) {
0
} else {
val x48 = if (x43) {
null
} else {
val x39 = x33 - '0'
val x40 = x39.toInt
val x44 = x42.res
val x45 = new Tuple2IntInt(x40,x44)
x45
}
val x53 = x48._1
val x54 = x48._2
val x55 = x53 + x54
x55
}
x21 = x57
val x58 = if (x49) {
true
} else {
false
}
x22 = x58
val x50 = if (x43) {
x19
} else {
val x46 = x42.next
x46
}
val x59 = if (x49) {
x50
} else {
x50
}
x23 = x59
()
} else {
x21 = 0
x22 = true
x23 = x19
()
}
x69
}
val x72 = x21
val x73 = x22
val x74 = x23
val x75 = new ParseResultInt(x72,x73,x74)
x75: ParseResultInt
}
x119 = {x13: (Int) => 
var x15: Int = 0
var x16: Boolean = true
var x17: Int = x13
val x78 = x77(x13)
val x79 = x78.empty
val x113 = if (x79) {
val x80 = x13 >= x25
val x105 = if (x80) {
x15 = 0
x16 = true
x17 = x13
()
} else {
val x86 = x0(x13)
val x87 = x86 >= '0'
val x88 = x86 <= '9'
val x89 = x87 && x88
val x103 = if (x89) {
val x92 = x86 - '0'
val x93 = x92.toInt
x15 = x93
x16 = false
val x90 = x13 + 1
x17 = x90
()
} else {
x15 = 0
x16 = true
x17 = x13
()
}
x103
}
x105
} else {
val x107 = x78.res
x15 = x107
x16 = x79
val x110 = x78.next
x17 = x110
()
}
val x114 = x15
val x115 = x16
val x116 = x17
val x117 = new ParseResultInt(x114,x115,x116)
x117: ParseResultInt
}
var x2: Int = 0
var x3: Boolean = true
var x4: Int = -1
val x132 = x6(0)
val x133 = x132.res
x2 = x133
val x135 = x132.empty
x3 = x135
val x137 = x132.next
x4 = x137
val x139 = x2
val x140 = x3
val x141 = x4
val x142 = new ParseResultInt(x139,x140,x141)
val x143 = println(x142)
x143
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
not contains
contains
compilation: ok
ParseResultInt(2,false,1)
ParseResultInt(5,false,2)
ParseResultInt(2,false,1)
ParseResultInt(5,false,2)
ParseResultInt(0,true,0)
not contains
contains
contains
contains
nVars=1000
contains
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testRecExpr extends ((Array[Char])=>(Unit)) {
def apply(x289:Array[Char]): Unit = {
var x294: scala.Function1[Int, ParseResultInt] = null
var x467: scala.Function1[Int, ParseResultInt] = null
var x666: scala.Function1[Int, ParseResultInt] = null
var x907: scala.Function1[Int, ParseResultInt] = null
var x1105: scala.Function1[Int, ParseResultInt] = null
val x313 = x289.length
x294 = {x295: (Int) => 
var x297: Int = 0
var x298: Boolean = true
var x299: Int = x295
val x468 = x467(x295)
val x469 = x468.empty
val x1201 = if (x469) {
x297 = 0
x298 = true
x299 = x295
()
} else {
var x477: Int = 1
var x478: Boolean = false
val x475 = x468.next
var x479: Int = x475
var x481: Int = -1
var x482: Boolean = true
var x483: Int = x475
val x692 = while ({val x484 = x482
val x485 = x481
val x486 = x483
val x487 = x485 != x486
val x488 = x484 && x487
x488}) {
val x490 = x483
x481 = x490
val x492 = x490 >= x313
val x690 = if (x492) {
x482 = false
()
} else {
val x497 = x289(x490)
val x498 = x497 == '*'
val x688 = if (x498) {
val x499 = x490 + 1
val x667 = x666(x499)
val x668 = x667.empty
val x684 = if (x668) {
x482 = false
()
} else {
val x671 = x477
val x672 = x478
val x673 = x479
val x675 = x667.res
val x676 = x671 * x675
x477 = x676
x478 = false
val x677 = x667.next
x479 = x677
x483 = x677
()
}
x684
} else {
x482 = false
()
}
x688
}
x690
}
val x693 = x477
val x694 = x478
val x695 = x479
val x701 = if (x694) {
true
} else {
false
}
val x710 = if (x701) {
true
} else {
false
}
val x1199 = if (x710) {
x297 = 0
x298 = true
x299 = x295
()
} else {
var x718: Int = 0
var x719: Boolean = false
val x702 = if (x694) {
x295
} else {
x695
}
val x711 = if (x701) {
x702
} else {
x702
}
var x720: Int = x711
var x722: Int = -1
var x723: Boolean = true
var x724: Int = x711
val x1175 = while ({val x725 = x723
val x726 = x722
val x727 = x724
val x728 = x726 != x727
val x729 = x725 && x728
x729}) {
val x731 = x724
x722 = x731
val x733 = x731 >= x313
val x1173 = if (x733) {
x723 = false
()
} else {
val x738 = x289(x731)
val x739 = x738 == '+'
val x1171 = if (x739) {
val x740 = x731 + 1
val x908 = x907(x740)
val x909 = x908.empty
val x1167 = if (x909) {
x723 = false
()
} else {
var x916: Int = 1
var x917: Boolean = false
val x914 = x908.next
var x918: Int = x914
var x920: Int = -1
var x921: Boolean = true
var x922: Int = x914
val x1131 = while ({val x923 = x921
val x924 = x920
val x925 = x922
val x926 = x924 != x925
val x927 = x923 && x926
x927}) {
val x929 = x922
x920 = x929
val x931 = x929 >= x313
val x1129 = if (x931) {
x921 = false
()
} else {
val x936 = x289(x929)
val x937 = x936 == '*'
val x1127 = if (x937) {
val x938 = x929 + 1
val x1106 = x1105(x938)
val x1107 = x1106.empty
val x1123 = if (x1107) {
x921 = false
()
} else {
val x1110 = x916
val x1111 = x917
val x1112 = x918
val x1114 = x1106.res
val x1115 = x1110 * x1114
x916 = x1115
x917 = false
val x1116 = x1106.next
x918 = x1116
x922 = x1116
()
}
x1123
} else {
x921 = false
()
}
x1127
}
x1129
}
val x1132 = x916
val x1133 = x917
val x1134 = x918
val x1140 = if (x1133) {
true
} else {
false
}
val x1149 = if (x1140) {
true
} else {
false
}
val x1165 = if (x1149) {
x723 = false
()
} else {
val x1154 = x718
val x1155 = x719
val x1156 = x720
val x1148 = if (x1140) {
0
} else {
val x1139 = if (x1133) {
null
} else {
val x1136 = x908.res
val x1137 = new Tuple2IntInt(x1136,x1132)
x1137
}
val x1144 = x1139._1
val x1145 = x1139._2
val x1146 = x1144 * x1145
x1146
}
val x1158 = x1154 + x1148
x718 = x1158
x719 = false
val x1141 = if (x1133) {
x740
} else {
x1134
}
val x1150 = if (x1140) {
x1141
} else {
x1141
}
x720 = x1150
x724 = x1150
()
}
x1165
}
x1167
} else {
x723 = false
()
}
x1171
}
x1173
}
val x1176 = x718
val x1177 = x719
val x1178 = x720
val x1183 = if (x1177) {
true
} else {
false
}
val x1191 = if (x1183) {
0
} else {
val x1182 = if (x1177) {
null
} else {
val x709 = if (x701) {
0
} else {
val x700 = if (x694) {
null
} else {
val x697 = x468.res
val x698 = new Tuple2IntInt(x697,x693)
x698
}
val x705 = x700._1
val x706 = x700._2
val x707 = x705 * x706
x707
}
val x1180 = new Tuple2IntInt(x709,x1176)
x1180
}
val x1187 = x1182._1
val x1188 = x1182._2
val x1189 = x1187 + x1188
x1189
}
x297 = x1191
val x1192 = if (x1183) {
true
} else {
false
}
x298 = x1192
val x1184 = if (x1177) {
x295
} else {
x1178
}
val x1193 = if (x1183) {
x1184
} else {
x1184
}
x299 = x1193
()
}
x1199
}
val x1202 = x297
val x1203 = x298
val x1204 = x299
val x1205 = new ParseResultInt(x1202,x1203,x1204)
x1205: ParseResultInt
}
val x401 = {x307: (Int) => 
var x309: Int = 0
var x310: Boolean = true
var x311: Int = x307
val x314 = x307 >= x313
val x395 = if (x314) {
x309 = 0
x310 = true
x311 = x307
()
} else {
val x320 = x289(x307)
val x321 = x320 >= '0'
val x322 = x320 <= '9'
val x323 = x321 && x322
val x393 = if (x323) {
val x326 = x320 - '0'
val x327 = x326.toInt
var x329: Int = x327
var x330: Boolean = false
val x324 = x307 + 1
var x331: Int = x324
var x333: Int = -1
var x334: Boolean = true
var x335: Int = x324
val x376 = while ({val x336 = x334
val x337 = x333
val x338 = x335
val x339 = x337 != x338
val x340 = x336 && x339
x340}) {
val x342 = x335
x333 = x342
val x344 = x342 >= x313
val x374 = if (x344) {
x334 = false
()
} else {
val x349 = x289(x342)
val x350 = x349 >= '0'
val x351 = x349 <= '9'
val x352 = x350 && x351
val x372 = if (x352) {
val x358 = x329
val x359 = x330
val x360 = x331
val x355 = x349 - '0'
val x356 = x355.toInt
val x362 = x358 * 10
val x363 = x362 + x356
x329 = x363
x330 = false
val x353 = x342 + 1
x331 = x353
x335 = x353
()
} else {
x334 = false
()
}
x372
}
x374
}
val x377 = x329
val x378 = x330
val x379 = x331
val x381 = if (x378) {
0
} else {
x377
}
x309 = x381
val x382 = if (x378) {
true
} else {
x378
}
x310 = x382
val x383 = if (x378) {
x307
} else {
x379
}
x311 = x383
()
} else {
x309 = 0
x310 = true
x311 = x307
()
}
x393
}
val x396 = x309
val x397 = x310
val x398 = x311
val x399 = new ParseResultInt(x396,x397,x398)
x399: ParseResultInt
}
x467 = {x301: (Int) => 
var x303: Int = 0
var x304: Boolean = true
var x305: Int = x301
val x402 = x401(x301)
val x403 = x402.empty
val x461 = if (x403) {
val x404 = x301 >= x313
val x453 = if (x404) {
x303 = 0
x304 = true
x305 = x301
()
} else {
val x410 = x289(x301)
val x411 = x410 == '('
val x451 = if (x411) {
val x412 = x301 + 1
val x414 = x294(x412)
val x415 = x414.empty
val x445 = if (x415) {
val x416 = x414.res
x303 = x416
x304 = x415
val x419 = x414.next
x305 = x419
()
} else {
val x419 = x414.next
val x422 = x419 >= x313
val x443 = if (x422) {
x303 = 0
x304 = true
x305 = x301
()
} else {
val x428 = x289(x419)
val x429 = x428 == ')'
val x441 = if (x429) {
val x416 = x414.res
x303 = x416
x304 = false
val x430 = x419 + 1
x305 = x430
()
} else {
x303 = 0
x304 = true
x305 = x301
()
}
x441
}
x443
}
x445
} else {
x303 = 0
x304 = true
x305 = x301
()
}
x451
}
x453
} else {
val x455 = x402.res
x303 = x455
x304 = x403
val x458 = x402.next
x305 = x458
()
}
val x462 = x303
val x463 = x304
val x464 = x305
val x465 = new ParseResultInt(x462,x463,x464)
x465: ParseResultInt
}
val x600 = {x507: (Int) => 
var x509: Int = 0
var x510: Boolean = true
var x511: Int = x507
val x513 = x507 >= x313
val x594 = if (x513) {
x509 = 0
x510 = true
x511 = x507
()
} else {
val x519 = x289(x507)
val x520 = x519 >= '0'
val x521 = x519 <= '9'
val x522 = x520 && x521
val x592 = if (x522) {
val x525 = x519 - '0'
val x526 = x525.toInt
var x528: Int = x526
var x529: Boolean = false
val x523 = x507 + 1
var x530: Int = x523
var x532: Int = -1
var x533: Boolean = true
var x534: Int = x523
val x575 = while ({val x535 = x533
val x536 = x532
val x537 = x534
val x538 = x536 != x537
val x539 = x535 && x538
x539}) {
val x541 = x534
x532 = x541
val x543 = x541 >= x313
val x573 = if (x543) {
x533 = false
()
} else {
val x548 = x289(x541)
val x549 = x548 >= '0'
val x550 = x548 <= '9'
val x551 = x549 && x550
val x571 = if (x551) {
val x557 = x528
val x558 = x529
val x559 = x530
val x554 = x548 - '0'
val x555 = x554.toInt
val x561 = x557 * 10
val x562 = x561 + x555
x528 = x562
x529 = false
val x552 = x541 + 1
x530 = x552
x534 = x552
()
} else {
x533 = false
()
}
x571
}
x573
}
val x576 = x528
val x577 = x529
val x578 = x530
val x580 = if (x577) {
0
} else {
x576
}
x509 = x580
val x581 = if (x577) {
true
} else {
x577
}
x510 = x581
val x582 = if (x577) {
x507
} else {
x578
}
x511 = x582
()
} else {
x509 = 0
x510 = true
x511 = x507
()
}
x592
}
val x595 = x509
val x596 = x510
val x597 = x511
val x598 = new ParseResultInt(x595,x596,x597)
x598: ParseResultInt
}
x666 = {x501: (Int) => 
var x503: Int = 0
var x504: Boolean = true
var x505: Int = x501
val x601 = x600(x501)
val x602 = x601.empty
val x660 = if (x602) {
val x603 = x501 >= x313
val x652 = if (x603) {
x503 = 0
x504 = true
x505 = x501
()
} else {
val x609 = x289(x501)
val x610 = x609 == '('
val x650 = if (x610) {
val x611 = x501 + 1
val x613 = x294(x611)
val x614 = x613.empty
val x644 = if (x614) {
val x615 = x613.res
x503 = x615
x504 = x614
val x618 = x613.next
x505 = x618
()
} else {
val x618 = x613.next
val x621 = x618 >= x313
val x642 = if (x621) {
x503 = 0
x504 = true
x505 = x501
()
} else {
val x627 = x289(x618)
val x628 = x627 == ')'
val x640 = if (x628) {
val x615 = x613.res
x503 = x615
x504 = false
val x629 = x618 + 1
x505 = x629
()
} else {
x503 = 0
x504 = true
x505 = x501
()
}
x640
}
x642
}
x644
} else {
x503 = 0
x504 = true
x505 = x501
()
}
x650
}
x652
} else {
val x654 = x601.res
x503 = x654
x504 = x602
val x657 = x601.next
x505 = x657
()
}
val x661 = x503
val x662 = x504
val x663 = x505
val x664 = new ParseResultInt(x661,x662,x663)
x664: ParseResultInt
}
val x841 = {x748: (Int) => 
var x750: Int = 0
var x751: Boolean = true
var x752: Int = x748
val x754 = x748 >= x313
val x835 = if (x754) {
x750 = 0
x751 = true
x752 = x748
()
} else {
val x760 = x289(x748)
val x761 = x760 >= '0'
val x762 = x760 <= '9'
val x763 = x761 && x762
val x833 = if (x763) {
val x766 = x760 - '0'
val x767 = x766.toInt
var x769: Int = x767
var x770: Boolean = false
val x764 = x748 + 1
var x771: Int = x764
var x773: Int = -1
var x774: Boolean = true
var x775: Int = x764
val x816 = while ({val x776 = x774
val x777 = x773
val x778 = x775
val x779 = x777 != x778
val x780 = x776 && x779
x780}) {
val x782 = x775
x773 = x782
val x784 = x782 >= x313
val x814 = if (x784) {
x774 = false
()
} else {
val x789 = x289(x782)
val x790 = x789 >= '0'
val x791 = x789 <= '9'
val x792 = x790 && x791
val x812 = if (x792) {
val x798 = x769
val x799 = x770
val x800 = x771
val x795 = x789 - '0'
val x796 = x795.toInt
val x802 = x798 * 10
val x803 = x802 + x796
x769 = x803
x770 = false
val x793 = x782 + 1
x771 = x793
x775 = x793
()
} else {
x774 = false
()
}
x812
}
x814
}
val x817 = x769
val x818 = x770
val x819 = x771
val x821 = if (x818) {
0
} else {
x817
}
x750 = x821
val x822 = if (x818) {
true
} else {
x818
}
x751 = x822
val x823 = if (x818) {
x748
} else {
x819
}
x752 = x823
()
} else {
x750 = 0
x751 = true
x752 = x748
()
}
x833
}
val x836 = x750
val x837 = x751
val x838 = x752
val x839 = new ParseResultInt(x836,x837,x838)
x839: ParseResultInt
}
x907 = {x742: (Int) => 
var x744: Int = 0
var x745: Boolean = true
var x746: Int = x742
val x842 = x841(x742)
val x843 = x842.empty
val x901 = if (x843) {
val x844 = x742 >= x313
val x893 = if (x844) {
x744 = 0
x745 = true
x746 = x742
()
} else {
val x850 = x289(x742)
val x851 = x850 == '('
val x891 = if (x851) {
val x852 = x742 + 1
val x854 = x294(x852)
val x855 = x854.empty
val x885 = if (x855) {
val x856 = x854.res
x744 = x856
x745 = x855
val x859 = x854.next
x746 = x859
()
} else {
val x859 = x854.next
val x862 = x859 >= x313
val x883 = if (x862) {
x744 = 0
x745 = true
x746 = x742
()
} else {
val x868 = x289(x859)
val x869 = x868 == ')'
val x881 = if (x869) {
val x856 = x854.res
x744 = x856
x745 = false
val x870 = x859 + 1
x746 = x870
()
} else {
x744 = 0
x745 = true
x746 = x742
()
}
x881
}
x883
}
x885
} else {
x744 = 0
x745 = true
x746 = x742
()
}
x891
}
x893
} else {
val x895 = x842.res
x744 = x895
x745 = x843
val x898 = x842.next
x746 = x898
()
}
val x902 = x744
val x903 = x745
val x904 = x746
val x905 = new ParseResultInt(x902,x903,x904)
x905: ParseResultInt
}
val x1039 = {x946: (Int) => 
var x948: Int = 0
var x949: Boolean = true
var x950: Int = x946
val x952 = x946 >= x313
val x1033 = if (x952) {
x948 = 0
x949 = true
x950 = x946
()
} else {
val x958 = x289(x946)
val x959 = x958 >= '0'
val x960 = x958 <= '9'
val x961 = x959 && x960
val x1031 = if (x961) {
val x964 = x958 - '0'
val x965 = x964.toInt
var x967: Int = x965
var x968: Boolean = false
val x962 = x946 + 1
var x969: Int = x962
var x971: Int = -1
var x972: Boolean = true
var x973: Int = x962
val x1014 = while ({val x974 = x972
val x975 = x971
val x976 = x973
val x977 = x975 != x976
val x978 = x974 && x977
x978}) {
val x980 = x973
x971 = x980
val x982 = x980 >= x313
val x1012 = if (x982) {
x972 = false
()
} else {
val x987 = x289(x980)
val x988 = x987 >= '0'
val x989 = x987 <= '9'
val x990 = x988 && x989
val x1010 = if (x990) {
val x996 = x967
val x997 = x968
val x998 = x969
val x993 = x987 - '0'
val x994 = x993.toInt
val x1000 = x996 * 10
val x1001 = x1000 + x994
x967 = x1001
x968 = false
val x991 = x980 + 1
x969 = x991
x973 = x991
()
} else {
x972 = false
()
}
x1010
}
x1012
}
val x1015 = x967
val x1016 = x968
val x1017 = x969
val x1019 = if (x1016) {
0
} else {
x1015
}
x948 = x1019
val x1020 = if (x1016) {
true
} else {
x1016
}
x949 = x1020
val x1021 = if (x1016) {
x946
} else {
x1017
}
x950 = x1021
()
} else {
x948 = 0
x949 = true
x950 = x946
()
}
x1031
}
val x1034 = x948
val x1035 = x949
val x1036 = x950
val x1037 = new ParseResultInt(x1034,x1035,x1036)
x1037: ParseResultInt
}
x1105 = {x940: (Int) => 
var x942: Int = 0
var x943: Boolean = true
var x944: Int = x940
val x1040 = x1039(x940)
val x1041 = x1040.empty
val x1099 = if (x1041) {
val x1042 = x940 >= x313
val x1091 = if (x1042) {
x942 = 0
x943 = true
x944 = x940
()
} else {
val x1048 = x289(x940)
val x1049 = x1048 == '('
val x1089 = if (x1049) {
val x1050 = x940 + 1
val x1052 = x294(x1050)
val x1053 = x1052.empty
val x1083 = if (x1053) {
val x1054 = x1052.res
x942 = x1054
x943 = x1053
val x1057 = x1052.next
x944 = x1057
()
} else {
val x1057 = x1052.next
val x1060 = x1057 >= x313
val x1081 = if (x1060) {
x942 = 0
x943 = true
x944 = x940
()
} else {
val x1066 = x289(x1057)
val x1067 = x1066 == ')'
val x1079 = if (x1067) {
val x1054 = x1052.res
x942 = x1054
x943 = false
val x1068 = x1057 + 1
x944 = x1068
()
} else {
x942 = 0
x943 = true
x944 = x940
()
}
x1079
}
x1081
}
x1083
} else {
x942 = 0
x943 = true
x944 = x940
()
}
x1089
}
x1091
} else {
val x1093 = x1040.res
x942 = x1093
x943 = x1041
val x1096 = x1040.next
x944 = x1096
()
}
val x1100 = x942
val x1101 = x943
val x1102 = x944
val x1103 = new ParseResultInt(x1100,x1101,x1102)
x1103: ParseResultInt
}
var x290: Int = 0
var x291: Boolean = true
var x292: Int = -1
val x1207 = x294(0)
val x1208 = x1207.res
x290 = x1208
val x1210 = x1207.empty
x291 = x1210
val x1212 = x1207.next
x292 = x1212
val x1214 = x290
val x1215 = x291
val x1216 = x292
val x1217 = new ParseResultInt(x1214,x1215,x1216)
val x1218 = println(x1217)
x1218
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
not contains
contains
contains
contains
contains
nVars=2000
compilation: ok
ParseResultInt(2,false,1)
ParseResultInt(5,false,3)
ParseResultInt(17,false,5)
ParseResultInt(25,false,7)
ParseResultInt(125,false,9)
