not contains
contains
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testRecNumber extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x6: scala.Function1[Int, ParseResultInt] = null
var x119: scala.Function1[Int, ParseResultInt] = null
var x77: scala.Function1[Int, ParseResultInt] = null
x6 = {x7: (Int) => 
var x9: Int = 0
var x10: Boolean = true
var x11: Int = x7
val x120 = x119(x7)
val x121 = x120.res
x9 = x121
val x123 = x120.empty
x10 = x123
val x125 = x120.next
x11 = x125
val x127 = x9
val x128 = x10
val x129 = x11
val x130 = new ParseResultInt(x127,x128,x129)
x130: ParseResultInt
}
val x25 = x0.length
x77 = {x19: (Int) => 
var x21: Int = 0
var x22: Boolean = true
var x23: Int = x19
val x26 = x19 >= x25
val x71 = if (x26) {
x21 = 0
x22 = true
x23 = x19
()
} else {
val x33 = x0(x19)
val x34 = x33 >= '0'
val x35 = x33 <= '9'
val x36 = x34 && x35
val x69 = if (x36) {
val x37 = x19 + 1
val x42 = x6(x37)
val x43 = x42.empty
val x49 = if (x43) {
true
} else {
false
}
val x57 = if (x49) {
0
} else {
val x48 = if (x43) {
null
} else {
val x39 = x33 - '0'
val x40 = x39.toInt
val x44 = x42.res
val x45 = new Tuple2IntInt(x40,x44)
x45
}
val x53 = x48._1
val x54 = x48._2
val x55 = x53 + x54
x55
}
x21 = x57
val x58 = if (x49) {
true
} else {
false
}
x22 = x58
val x50 = if (x43) {
x19
} else {
val x46 = x42.next
x46
}
val x59 = if (x49) {
x50
} else {
x50
}
x23 = x59
()
} else {
x21 = 0
x22 = true
x23 = x19
()
}
x69
}
val x72 = x21
val x73 = x22
val x74 = x23
val x75 = new ParseResultInt(x72,x73,x74)
x75: ParseResultInt
}
x119 = {x13: (Int) => 
var x15: Int = 0
var x16: Boolean = true
var x17: Int = x13
val x78 = x77(x13)
val x79 = x78.empty
val x113 = if (x79) {
val x80 = x13 >= x25
val x105 = if (x80) {
x15 = 0
x16 = true
x17 = x13
()
} else {
val x86 = x0(x13)
val x87 = x86 >= '0'
val x88 = x86 <= '9'
val x89 = x87 && x88
val x103 = if (x89) {
val x92 = x86 - '0'
val x93 = x92.toInt
x15 = x93
x16 = false
val x90 = x13 + 1
x17 = x90
()
} else {
x15 = 0
x16 = true
x17 = x13
()
}
x103
}
x105
} else {
val x107 = x78.res
x15 = x107
x16 = x79
val x110 = x78.next
x17 = x110
()
}
val x114 = x15
val x115 = x16
val x116 = x17
val x117 = new ParseResultInt(x114,x115,x116)
x117: ParseResultInt
}
var x2: Int = 0
var x3: Boolean = true
var x4: Int = -1
val x132 = x6(0)
val x133 = x132.res
x2 = x133
val x135 = x132.empty
x3 = x135
val x137 = x132.next
x4 = x137
val x139 = x2
val x140 = x3
val x141 = x4
val x142 = new ParseResultInt(x139,x140,x141)
val x143 = println(x142)
x143
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
not contains
contains
compilation: ok
ParseResultInt(2,false,1)
ParseResultInt(5,false,2)
ParseResultInt(2,false,1)
ParseResultInt(5,false,2)
ParseResultInt(0,true,0)
not contains
contains
contains
contains
contains
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testRecExpr extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x6: scala.Function1[Int, ParseResultInt] = null
var x179: scala.Function1[Int, ParseResultInt] = null
var x378: scala.Function1[Int, ParseResultInt] = null
var x619: scala.Function1[Int, ParseResultInt] = null
var x817: scala.Function1[Int, ParseResultInt] = null
val x25 = x0.length
x6 = {x7: (Int) => 
var x9: Int = 0
var x10: Boolean = true
var x11: Int = x7
val x180 = x179(x7)
val x181 = x180.empty
val x913 = if (x181) {
x9 = 0
x10 = true
x11 = x7
()
} else {
var x189: Int = 1
var x190: Boolean = false
val x187 = x180.next
var x191: Int = x187
var x193: Int = -1
var x194: Boolean = true
var x195: Int = x187
val x404 = while ({val x196 = x194
val x197 = x193
val x198 = x195
val x199 = x197 != x198
val x200 = x196 && x199
x200}) {
val x202 = x195
x193 = x202
val x204 = x202 >= x25
val x402 = if (x204) {
x194 = false
()
} else {
val x209 = x0(x202)
val x210 = x209 == '*'
val x400 = if (x210) {
val x211 = x202 + 1
val x379 = x378(x211)
val x380 = x379.empty
val x396 = if (x380) {
x194 = false
()
} else {
val x383 = x189
val x384 = x190
val x385 = x191
val x387 = x379.res
val x388 = x383 * x387
x189 = x388
x190 = false
val x389 = x379.next
x191 = x389
x195 = x389
()
}
x396
} else {
x194 = false
()
}
x400
}
x402
}
val x405 = x189
val x406 = x190
val x407 = x191
val x413 = if (x406) {
true
} else {
false
}
val x422 = if (x413) {
true
} else {
false
}
val x911 = if (x422) {
x9 = 0
x10 = true
x11 = x7
()
} else {
var x430: Int = 0
var x431: Boolean = false
val x414 = if (x406) {
x7
} else {
x407
}
val x423 = if (x413) {
x414
} else {
x414
}
var x432: Int = x423
var x434: Int = -1
var x435: Boolean = true
var x436: Int = x423
val x887 = while ({val x437 = x435
val x438 = x434
val x439 = x436
val x440 = x438 != x439
val x441 = x437 && x440
x441}) {
val x443 = x436
x434 = x443
val x445 = x443 >= x25
val x885 = if (x445) {
x435 = false
()
} else {
val x450 = x0(x443)
val x451 = x450 == '+'
val x883 = if (x451) {
val x452 = x443 + 1
val x620 = x619(x452)
val x621 = x620.empty
val x879 = if (x621) {
x435 = false
()
} else {
var x628: Int = 1
var x629: Boolean = false
val x626 = x620.next
var x630: Int = x626
var x632: Int = -1
var x633: Boolean = true
var x634: Int = x626
val x843 = while ({val x635 = x633
val x636 = x632
val x637 = x634
val x638 = x636 != x637
val x639 = x635 && x638
x639}) {
val x641 = x634
x632 = x641
val x643 = x641 >= x25
val x841 = if (x643) {
x633 = false
()
} else {
val x648 = x0(x641)
val x649 = x648 == '*'
val x839 = if (x649) {
val x650 = x641 + 1
val x818 = x817(x650)
val x819 = x818.empty
val x835 = if (x819) {
x633 = false
()
} else {
val x822 = x628
val x823 = x629
val x824 = x630
val x826 = x818.res
val x827 = x822 * x826
x628 = x827
x629 = false
val x828 = x818.next
x630 = x828
x634 = x828
()
}
x835
} else {
x633 = false
()
}
x839
}
x841
}
val x844 = x628
val x845 = x629
val x846 = x630
val x852 = if (x845) {
true
} else {
false
}
val x861 = if (x852) {
true
} else {
false
}
val x877 = if (x861) {
x435 = false
()
} else {
val x866 = x430
val x867 = x431
val x868 = x432
val x860 = if (x852) {
0
} else {
val x851 = if (x845) {
null
} else {
val x848 = x620.res
val x849 = new Tuple2IntInt(x848,x844)
x849
}
val x856 = x851._1
val x857 = x851._2
val x858 = x856 * x857
x858
}
val x870 = x866 + x860
x430 = x870
x431 = false
val x853 = if (x845) {
x452
} else {
x846
}
val x862 = if (x852) {
x853
} else {
x853
}
x432 = x862
x436 = x862
()
}
x877
}
x879
} else {
x435 = false
()
}
x883
}
x885
}
val x888 = x430
val x889 = x431
val x890 = x432
val x895 = if (x889) {
true
} else {
false
}
val x903 = if (x895) {
0
} else {
val x894 = if (x889) {
null
} else {
val x421 = if (x413) {
0
} else {
val x412 = if (x406) {
null
} else {
val x409 = x180.res
val x410 = new Tuple2IntInt(x409,x405)
x410
}
val x417 = x412._1
val x418 = x412._2
val x419 = x417 * x418
x419
}
val x892 = new Tuple2IntInt(x421,x888)
x892
}
val x899 = x894._1
val x900 = x894._2
val x901 = x899 + x900
x901
}
x9 = x903
val x904 = if (x895) {
true
} else {
false
}
x10 = x904
val x896 = if (x889) {
x7
} else {
x890
}
val x905 = if (x895) {
x896
} else {
x896
}
x11 = x905
()
}
x911
}
val x914 = x9
val x915 = x10
val x916 = x11
val x917 = new ParseResultInt(x914,x915,x916)
x917: ParseResultInt
}
val x113 = {x19: (Int) => 
var x21: Int = 0
var x22: Boolean = true
var x23: Int = x19
val x26 = x19 >= x25
val x107 = if (x26) {
x21 = 0
x22 = true
x23 = x19
()
} else {
val x32 = x0(x19)
val x33 = x32 >= '0'
val x34 = x32 <= '9'
val x35 = x33 && x34
val x105 = if (x35) {
val x38 = x32 - '0'
val x39 = x38.toInt
var x41: Int = x39
var x42: Boolean = false
val x36 = x19 + 1
var x43: Int = x36
var x45: Int = -1
var x46: Boolean = true
var x47: Int = x36
val x88 = while ({val x48 = x46
val x49 = x45
val x50 = x47
val x51 = x49 != x50
val x52 = x48 && x51
x52}) {
val x54 = x47
x45 = x54
val x56 = x54 >= x25
val x86 = if (x56) {
x46 = false
()
} else {
val x61 = x0(x54)
val x62 = x61 >= '0'
val x63 = x61 <= '9'
val x64 = x62 && x63
val x84 = if (x64) {
val x70 = x41
val x71 = x42
val x72 = x43
val x67 = x61 - '0'
val x68 = x67.toInt
val x74 = x70 * 10
val x75 = x74 + x68
x41 = x75
x42 = false
val x65 = x54 + 1
x43 = x65
x47 = x65
()
} else {
x46 = false
()
}
x84
}
x86
}
val x89 = x41
val x90 = x42
val x91 = x43
val x93 = if (x90) {
0
} else {
x89
}
x21 = x93
val x94 = if (x90) {
true
} else {
x90
}
x22 = x94
val x95 = if (x90) {
x19
} else {
x91
}
x23 = x95
()
} else {
x21 = 0
x22 = true
x23 = x19
()
}
x105
}
val x108 = x21
val x109 = x22
val x110 = x23
val x111 = new ParseResultInt(x108,x109,x110)
x111: ParseResultInt
}
x179 = {x13: (Int) => 
var x15: Int = 0
var x16: Boolean = true
var x17: Int = x13
val x114 = x113(x13)
val x115 = x114.empty
val x173 = if (x115) {
val x116 = x13 >= x25
val x165 = if (x116) {
x15 = 0
x16 = true
x17 = x13
()
} else {
val x122 = x0(x13)
val x123 = x122 == '('
val x163 = if (x123) {
val x124 = x13 + 1
val x126 = x6(x124)
val x127 = x126.empty
val x157 = if (x127) {
val x128 = x126.res
x15 = x128
x16 = x127
val x131 = x126.next
x17 = x131
()
} else {
val x131 = x126.next
val x134 = x131 >= x25
val x155 = if (x134) {
x15 = 0
x16 = true
x17 = x13
()
} else {
val x140 = x0(x131)
val x141 = x140 == ')'
val x153 = if (x141) {
val x128 = x126.res
x15 = x128
x16 = false
val x142 = x131 + 1
x17 = x142
()
} else {
x15 = 0
x16 = true
x17 = x13
()
}
x153
}
x155
}
x157
} else {
x15 = 0
x16 = true
x17 = x13
()
}
x163
}
x165
} else {
val x167 = x114.res
x15 = x167
x16 = x115
val x170 = x114.next
x17 = x170
()
}
val x174 = x15
val x175 = x16
val x176 = x17
val x177 = new ParseResultInt(x174,x175,x176)
x177: ParseResultInt
}
val x312 = {x219: (Int) => 
var x221: Int = 0
var x222: Boolean = true
var x223: Int = x219
val x225 = x219 >= x25
val x306 = if (x225) {
x221 = 0
x222 = true
x223 = x219
()
} else {
val x231 = x0(x219)
val x232 = x231 >= '0'
val x233 = x231 <= '9'
val x234 = x232 && x233
val x304 = if (x234) {
val x237 = x231 - '0'
val x238 = x237.toInt
var x240: Int = x238
var x241: Boolean = false
val x235 = x219 + 1
var x242: Int = x235
var x244: Int = -1
var x245: Boolean = true
var x246: Int = x235
val x287 = while ({val x247 = x245
val x248 = x244
val x249 = x246
val x250 = x248 != x249
val x251 = x247 && x250
x251}) {
val x253 = x246
x244 = x253
val x255 = x253 >= x25
val x285 = if (x255) {
x245 = false
()
} else {
val x260 = x0(x253)
val x261 = x260 >= '0'
val x262 = x260 <= '9'
val x263 = x261 && x262
val x283 = if (x263) {
val x269 = x240
val x270 = x241
val x271 = x242
val x266 = x260 - '0'
val x267 = x266.toInt
val x273 = x269 * 10
val x274 = x273 + x267
x240 = x274
x241 = false
val x264 = x253 + 1
x242 = x264
x246 = x264
()
} else {
x245 = false
()
}
x283
}
x285
}
val x288 = x240
val x289 = x241
val x290 = x242
val x292 = if (x289) {
0
} else {
x288
}
x221 = x292
val x293 = if (x289) {
true
} else {
x289
}
x222 = x293
val x294 = if (x289) {
x219
} else {
x290
}
x223 = x294
()
} else {
x221 = 0
x222 = true
x223 = x219
()
}
x304
}
val x307 = x221
val x308 = x222
val x309 = x223
val x310 = new ParseResultInt(x307,x308,x309)
x310: ParseResultInt
}
x378 = {x213: (Int) => 
var x215: Int = 0
var x216: Boolean = true
var x217: Int = x213
val x313 = x312(x213)
val x314 = x313.empty
val x372 = if (x314) {
val x315 = x213 >= x25
val x364 = if (x315) {
x215 = 0
x216 = true
x217 = x213
()
} else {
val x321 = x0(x213)
val x322 = x321 == '('
val x362 = if (x322) {
val x323 = x213 + 1
val x325 = x6(x323)
val x326 = x325.empty
val x356 = if (x326) {
val x327 = x325.res
x215 = x327
x216 = x326
val x330 = x325.next
x217 = x330
()
} else {
val x330 = x325.next
val x333 = x330 >= x25
val x354 = if (x333) {
x215 = 0
x216 = true
x217 = x213
()
} else {
val x339 = x0(x330)
val x340 = x339 == ')'
val x352 = if (x340) {
val x327 = x325.res
x215 = x327
x216 = false
val x341 = x330 + 1
x217 = x341
()
} else {
x215 = 0
x216 = true
x217 = x213
()
}
x352
}
x354
}
x356
} else {
x215 = 0
x216 = true
x217 = x213
()
}
x362
}
x364
} else {
val x366 = x313.res
x215 = x366
x216 = x314
val x369 = x313.next
x217 = x369
()
}
val x373 = x215
val x374 = x216
val x375 = x217
val x376 = new ParseResultInt(x373,x374,x375)
x376: ParseResultInt
}
val x553 = {x460: (Int) => 
var x462: Int = 0
var x463: Boolean = true
var x464: Int = x460
val x466 = x460 >= x25
val x547 = if (x466) {
x462 = 0
x463 = true
x464 = x460
()
} else {
val x472 = x0(x460)
val x473 = x472 >= '0'
val x474 = x472 <= '9'
val x475 = x473 && x474
val x545 = if (x475) {
val x478 = x472 - '0'
val x479 = x478.toInt
var x481: Int = x479
var x482: Boolean = false
val x476 = x460 + 1
var x483: Int = x476
var x485: Int = -1
var x486: Boolean = true
var x487: Int = x476
val x528 = while ({val x488 = x486
val x489 = x485
val x490 = x487
val x491 = x489 != x490
val x492 = x488 && x491
x492}) {
val x494 = x487
x485 = x494
val x496 = x494 >= x25
val x526 = if (x496) {
x486 = false
()
} else {
val x501 = x0(x494)
val x502 = x501 >= '0'
val x503 = x501 <= '9'
val x504 = x502 && x503
val x524 = if (x504) {
val x510 = x481
val x511 = x482
val x512 = x483
val x507 = x501 - '0'
val x508 = x507.toInt
val x514 = x510 * 10
val x515 = x514 + x508
x481 = x515
x482 = false
val x505 = x494 + 1
x483 = x505
x487 = x505
()
} else {
x486 = false
()
}
x524
}
x526
}
val x529 = x481
val x530 = x482
val x531 = x483
val x533 = if (x530) {
0
} else {
x529
}
x462 = x533
val x534 = if (x530) {
true
} else {
x530
}
x463 = x534
val x535 = if (x530) {
x460
} else {
x531
}
x464 = x535
()
} else {
x462 = 0
x463 = true
x464 = x460
()
}
x545
}
val x548 = x462
val x549 = x463
val x550 = x464
val x551 = new ParseResultInt(x548,x549,x550)
x551: ParseResultInt
}
x619 = {x454: (Int) => 
var x456: Int = 0
var x457: Boolean = true
var x458: Int = x454
val x554 = x553(x454)
val x555 = x554.empty
val x613 = if (x555) {
val x556 = x454 >= x25
val x605 = if (x556) {
x456 = 0
x457 = true
x458 = x454
()
} else {
val x562 = x0(x454)
val x563 = x562 == '('
val x603 = if (x563) {
val x564 = x454 + 1
val x566 = x6(x564)
val x567 = x566.empty
val x597 = if (x567) {
val x568 = x566.res
x456 = x568
x457 = x567
val x571 = x566.next
x458 = x571
()
} else {
val x571 = x566.next
val x574 = x571 >= x25
val x595 = if (x574) {
x456 = 0
x457 = true
x458 = x454
()
} else {
val x580 = x0(x571)
val x581 = x580 == ')'
val x593 = if (x581) {
val x568 = x566.res
x456 = x568
x457 = false
val x582 = x571 + 1
x458 = x582
()
} else {
x456 = 0
x457 = true
x458 = x454
()
}
x593
}
x595
}
x597
} else {
x456 = 0
x457 = true
x458 = x454
()
}
x603
}
x605
} else {
val x607 = x554.res
x456 = x607
x457 = x555
val x610 = x554.next
x458 = x610
()
}
val x614 = x456
val x615 = x457
val x616 = x458
val x617 = new ParseResultInt(x614,x615,x616)
x617: ParseResultInt
}
val x751 = {x658: (Int) => 
var x660: Int = 0
var x661: Boolean = true
var x662: Int = x658
val x664 = x658 >= x25
val x745 = if (x664) {
x660 = 0
x661 = true
x662 = x658
()
} else {
val x670 = x0(x658)
val x671 = x670 >= '0'
val x672 = x670 <= '9'
val x673 = x671 && x672
val x743 = if (x673) {
val x676 = x670 - '0'
val x677 = x676.toInt
var x679: Int = x677
var x680: Boolean = false
val x674 = x658 + 1
var x681: Int = x674
var x683: Int = -1
var x684: Boolean = true
var x685: Int = x674
val x726 = while ({val x686 = x684
val x687 = x683
val x688 = x685
val x689 = x687 != x688
val x690 = x686 && x689
x690}) {
val x692 = x685
x683 = x692
val x694 = x692 >= x25
val x724 = if (x694) {
x684 = false
()
} else {
val x699 = x0(x692)
val x700 = x699 >= '0'
val x701 = x699 <= '9'
val x702 = x700 && x701
val x722 = if (x702) {
val x708 = x679
val x709 = x680
val x710 = x681
val x705 = x699 - '0'
val x706 = x705.toInt
val x712 = x708 * 10
val x713 = x712 + x706
x679 = x713
x680 = false
val x703 = x692 + 1
x681 = x703
x685 = x703
()
} else {
x684 = false
()
}
x722
}
x724
}
val x727 = x679
val x728 = x680
val x729 = x681
val x731 = if (x728) {
0
} else {
x727
}
x660 = x731
val x732 = if (x728) {
true
} else {
x728
}
x661 = x732
val x733 = if (x728) {
x658
} else {
x729
}
x662 = x733
()
} else {
x660 = 0
x661 = true
x662 = x658
()
}
x743
}
val x746 = x660
val x747 = x661
val x748 = x662
val x749 = new ParseResultInt(x746,x747,x748)
x749: ParseResultInt
}
x817 = {x652: (Int) => 
var x654: Int = 0
var x655: Boolean = true
var x656: Int = x652
val x752 = x751(x652)
val x753 = x752.empty
val x811 = if (x753) {
val x754 = x652 >= x25
val x803 = if (x754) {
x654 = 0
x655 = true
x656 = x652
()
} else {
val x760 = x0(x652)
val x761 = x760 == '('
val x801 = if (x761) {
val x762 = x652 + 1
val x764 = x6(x762)
val x765 = x764.empty
val x795 = if (x765) {
val x766 = x764.res
x654 = x766
x655 = x765
val x769 = x764.next
x656 = x769
()
} else {
val x769 = x764.next
val x772 = x769 >= x25
val x793 = if (x772) {
x654 = 0
x655 = true
x656 = x652
()
} else {
val x778 = x0(x769)
val x779 = x778 == ')'
val x791 = if (x779) {
val x766 = x764.res
x654 = x766
x655 = false
val x780 = x769 + 1
x656 = x780
()
} else {
x654 = 0
x655 = true
x656 = x652
()
}
x791
}
x793
}
x795
} else {
x654 = 0
x655 = true
x656 = x652
()
}
x801
}
x803
} else {
val x805 = x752.res
x654 = x805
x655 = x753
val x808 = x752.next
x656 = x808
()
}
val x812 = x654
val x813 = x655
val x814 = x656
val x815 = new ParseResultInt(x812,x813,x814)
x815: ParseResultInt
}
var x2: Int = 0
var x3: Boolean = true
var x4: Int = -1
val x919 = x6(0)
val x920 = x919.res
x2 = x920
val x922 = x919.empty
x3 = x922
val x924 = x919.next
x4 = x924
val x926 = x2
val x927 = x3
val x928 = x4
val x929 = new ParseResultInt(x926,x927,x928)
val x930 = println(x929)
x930
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
not contains
contains
contains
contains
contains
compilation: ok
ParseResultInt(2,false,1)
ParseResultInt(5,false,3)
ParseResultInt(17,false,5)
ParseResultInt(25,false,7)
ParseResultInt(125,false,9)
