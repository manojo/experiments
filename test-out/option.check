/*****************************************
  Emitting Generated Code                  
*******************************************/
class test1 extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x2 = x0 * 2
val x3 = new OptionInt(x2,true)
val x4 = println(x3)
x4
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(6,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test2 extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x1 = null.asInstanceOf[Int]
val x2 = new OptionInt(x1,false)
val x3 = println(x2)
x3
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test3 extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x2 = x0 * 2
val x3 = new OptionInt(x2,true)
val x4 = println(x3)
x4
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(6,true)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test4 extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x1 = null.asInstanceOf[Int]
val x2 = new OptionInt(x1,false)
val x3 = println(x2)
x3
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testFilter extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x2 = x0 == 3
val x3 = true && x2
val x6 = if (x3) {
x0
} else {
val x4 = null.asInstanceOf[Int]
x4
}
val x7 = if (x3) {
true
} else {
false
}
val x8 = new OptionInt(x6,x7)
val x9 = println(x8)
x9
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(3,true)
OptionInt(0,false)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testFilterNone extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x1 = null.asInstanceOf[Int]
val x2 = new OptionInt(x1,false)
val x3 = println(x2)
x3
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
OptionInt(0,false)
