/*****************************************
  Emitting Generated Code                  
*******************************************/
class test1 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x0:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x2: scala.Tuple2[Char, Int] = x1
val x3 = x0.length
val x4 = 0 >= x3
val x13 = if (x4) {
()
} else {
val x5 = x0(0)
val x6 = x5 == 'h'
val x11 = if (x6) {
val x7 = 0 + 1
val x8 = (x5,x7)
x2 = x8
()
} else {
()
}
x11
}
val x14 = x2
x14
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test2 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x30:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x31: scala.Tuple2[Char, Int] = x1
val x32 = x30.length
val x33 = 0 >= x32
val x41 = if (x33) {
()
} else {
val x34 = x30(0)
val x35 = x34 == 'h'
val x39 = if (x35) {
val x7 = 0 + 1
val x36 = (x34,x7)
x31 = x36
()
} else {
()
}
x39
}
val x42 = x31
x42
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test3 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x58:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x59: scala.Tuple2[Char, Int] = x1
val x60 = x58.length
val x61 = 0 >= x60
val x75 = if (x61) {
()
} else {
val x62 = x58(0)
val x63 = x62 >= 'a'
val x64 = x62 <= 'z'
val x65 = x63 && x64
val x66 = x62 >= 'A'
val x67 = x62 <= 'Z'
val x68 = x66 && x67
val x69 = x65 || x68
val x73 = if (x69) {
val x7 = 0 + 1
val x70 = (x62,x7)
x59 = x70
()
} else {
()
}
x73
}
val x76 = x59
x76
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test4 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x98:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x99: scala.Tuple2[Char, Int] = x1
val x100 = x98.length
val x101 = 0 >= x100
val x111 = if (x101) {
()
} else {
val x102 = x98(0)
val x103 = x102 >= '0'
val x104 = x102 <= '9'
val x105 = x103 && x104
val x109 = if (x105) {
val x7 = 0 + 1
val x106 = (x102,x7)
x99 = x106
()
} else {
()
}
x109
}
val x112 = x99
x112
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(a,-1)
(1,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test5 extends ((Array[Char])=>(scala.Tuple2[scala.Tuple2[Char, Char], Int])) {
def apply(x130:Array[Char]): scala.Tuple2[scala.Tuple2[Char, Char], Int] = {
val x131 = ('a','a')
val x132 = (x131,-1)
var x133: scala.Tuple2[scala.Tuple2[Char, Char], Int] = x132
val x134 = x130.length
val x135 = 0 >= x134
val x166 = if (x135) {
()
} else {
val x136 = x130(0)
val x137 = x136 >= 'a'
val x138 = x136 <= 'z'
val x139 = x137 && x138
val x140 = x136 >= 'A'
val x141 = x136 <= 'Z'
val x142 = x140 && x141
val x143 = x139 || x142
val x164 = if (x143) {
val x7 = 0 + 1
val x145 = x7 >= x134
val x162 = if (x145) {
()
} else {
val x146 = x130(x7)
val x147 = x146 >= 'a'
val x148 = x146 <= 'z'
val x149 = x147 && x148
val x150 = x146 >= 'A'
val x151 = x146 <= 'Z'
val x152 = x150 && x151
val x153 = x149 || x152
val x160 = if (x153) {
val x154 = x7 + 1
val x156 = (x136,x146)
val x157 = (x156,x154)
x133 = x157
()
} else {
()
}
x160
}
x162
} else {
()
}
x164
}
val x167 = x133
x167
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
((h,e),2)
((a,a),-1)
((a,a),-1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test6 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x205:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x206: scala.Tuple2[Char, Int] = x1
val x207 = x205.length
val x208 = 0 >= x207
val x236 = if (x208) {
()
} else {
val x209 = x205(0)
val x210 = x209 >= 'a'
val x211 = x209 <= 'z'
val x212 = x210 && x211
val x213 = x209 >= 'A'
val x214 = x209 <= 'Z'
val x215 = x213 && x214
val x216 = x212 || x215
val x234 = if (x216) {
val x7 = 0 + 1
val x218 = x7 >= x207
val x232 = if (x218) {
()
} else {
val x219 = x205(x7)
val x220 = x219 >= 'a'
val x221 = x219 <= 'z'
val x222 = x220 && x221
val x223 = x219 >= 'A'
val x224 = x219 <= 'Z'
val x225 = x223 && x224
val x226 = x222 || x225
val x230 = if (x226) {
val x154 = x7 + 1
val x227 = (x219,x154)
x206 = x227
()
} else {
()
}
x230
}
x232
} else {
()
}
x234
}
val x237 = x206
x237
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(e,2)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test7 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x273:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x274: scala.Tuple2[Char, Int] = x1
val x275 = x273.length
val x276 = 0 >= x275
val x305 = if (x276) {
()
} else {
val x277 = x273(0)
val x278 = x277 >= 'a'
val x279 = x277 <= 'z'
val x280 = x278 && x279
val x281 = x277 >= 'A'
val x282 = x277 <= 'Z'
val x283 = x281 && x282
val x284 = x280 || x283
val x303 = if (x284) {
val x7 = 0 + 1
val x286 = x7 >= x275
val x301 = if (x286) {
()
} else {
val x287 = x273(x7)
val x288 = x287 >= 'a'
val x289 = x287 <= 'z'
val x290 = x288 && x289
val x291 = x287 >= 'A'
val x292 = x287 <= 'Z'
val x293 = x291 && x292
val x294 = x290 || x293
val x299 = if (x294) {
val x154 = x7 + 1
val x296 = (x277,x154)
x274 = x296
()
} else {
()
}
x299
}
x301
} else {
()
}
x303
}
val x306 = x274
x306
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,2)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test9 extends ((Array[Char])=>(scala.Tuple2[Char, Int])) {
def apply(x343:Array[Char]): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x344: scala.Tuple2[Char, Int] = x1
val x345 = x343.length
val x346 = 0 >= x345
val x363 = if (x346) {
()
} else {
val x347 = x343(0)
val x348 = x347 >= 'a'
val x349 = x347 <= 'z'
val x350 = x348 && x349
val x351 = x347 >= 'A'
val x352 = x347 <= 'Z'
val x353 = x351 && x352
val x354 = x350 || x353
val x361 = if (x354) {
val x7 = 0 + 1
val x355 = (x347,x7)
x344 = x355
()
} else {
()
}
x361
}
val x368 = if (x346) {
()
} else {
val x347 = x343(0)
val x356 = x347 >= '0'
val x357 = x347 <= '9'
val x358 = x356 && x357
val x366 = if (x358) {
val x7 = 0 + 1
val x355 = (x347,x7)
x344 = x355
()
} else {
()
}
x366
}
val x369 = x344
x369
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(h,1)
(1,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test10 extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x399:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x400 = ("",-1)
var x401: scala.Tuple2[java.lang.String, Int] = x400
val x402 = List()
var x403: scala.collection.immutable.List[Char] = x402
var x404: Int = -1
var x405: Int = 0
val x412 = x399.length
val x434 = while ({val x406 = x404
val x407 = x405
val x408 = x406 != x407
x408}) {
val x410 = x405
x404 = x410
val x413 = x410 >= x412
val x432 = if (x413) {
()
} else {
val x414 = x399(x410)
val x415 = x414 >= 'a'
val x416 = x414 <= 'z'
val x417 = x415 && x416
val x418 = x414 >= 'A'
val x419 = x414 <= 'Z'
val x420 = x418 && x419
val x421 = x417 || x420
val x430 = if (x421) {
val x424 = x403
val x425 = List(x414)
val x426 = x424 ::: x425
x403 = x426
val x422 = x410 + 1
x405 = x422
()
} else {
()
}
x430
}
x432
}
val x435 = x403
val x436 = x405
val x438 = x435.mkString
val x439 = (x438,x436)
x401 = x439
val x441 = x401
x441
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(hello,5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test11 extends ((Array[Char])=>(scala.Tuple2[Int, Int])) {
def apply(x485:Array[Char]): scala.Tuple2[Int, Int] = {
val x486 = (0,-1)
var x487: scala.Tuple2[Int, Int] = x486
var x488: Int = 0
var x489: Int = -1
var x490: Int = 0
val x497 = x485.length
val x517 = while ({val x491 = x489
val x492 = x490
val x493 = x491 != x492
x493}) {
val x495 = x490
x489 = x495
val x498 = x495 >= x497
val x515 = if (x498) {
()
} else {
val x499 = x485(x495)
val x500 = x499 >= '0'
val x501 = x499 <= '9'
val x502 = x500 && x501
val x513 = if (x502) {
val x508 = x488
val x505 = x499 - '0'
val x506 = x505.toInt
val x509 = x508 + x506
x488 = x509
val x503 = x495 + 1
x490 = x503
()
} else {
()
}
x513
}
x515
}
val x518 = x488
val x519 = x490
val x520 = (x518,x519)
x487 = x520
val x522 = x487
x522
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(15,5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testCond extends ((Array[Char], Int)=>(scala.Tuple2[Char, Int])) {
def apply(x562:Array[Char], x563:Int): scala.Tuple2[Char, Int] = {
val x1 = ('a',-1)
var x564: scala.Tuple2[Char, Int] = x1
val x565 = x563 < 3
val x584 = if (x565) {
val x566 = x562.length
val x567 = 0 >= x566
val x576 = if (x567) {
()
} else {
val x568 = x562(0)
val x569 = x568 == 'b'
val x574 = if (x569) {
val x7 = 0 + 1
val x570 = (x568,x7)
x564 = x570
()
} else {
()
}
x574
}
x576
} else {
val x566 = x562.length
val x567 = 0 >= x566
val x582 = if (x567) {
()
} else {
val x568 = x562(0)
val x571 = x568 == 'c'
val x580 = if (x571) {
val x7 = 0 + 1
val x570 = (x568,x7)
x564 = x570
()
} else {
()
}
x580
}
x582
}
val x585 = x564
x585
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(b,1)
(c,1)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testBind extends ((Array[Char])=>(scala.Tuple2[java.lang.String, Int])) {
def apply(x612:Array[Char]): scala.Tuple2[java.lang.String, Int] = {
val x400 = ("",-1)
var x613: scala.Tuple2[java.lang.String, Int] = x400
val x614 = x612.length
val x615 = 0 >= x614
val x650 = if (x615) {
()
} else {
val x616 = x612(0)
val x617 = x616 >= 'a'
val x618 = x616 <= 'z'
val x619 = x617 && x618
val x620 = x616 >= 'A'
val x621 = x616 <= 'Z'
val x622 = x620 && x621
val x623 = x619 || x622
val x648 = if (x623) {
val x625 = x616 == 'a'
val x646 = if (x625) {
val x7 = 0 + 1
val x626 = x7 >= x614
val x638 = if (x626) {
()
} else {
val x627 = x612(x7)
val x628 = x627 == 'b'
val x636 = if (x628) {
val x154 = x7 + 1
val x631 = x616+", "
val x632 = x631+x627
val x633 = (x632,x154)
x613 = x633
()
} else {
()
}
x636
}
x638
} else {
val x7 = 0 + 1
val x626 = x7 >= x614
val x644 = if (x626) {
()
} else {
val x627 = x612(x7)
val x630 = x627 == 'd'
val x642 = if (x630) {
val x154 = x7 + 1
val x631 = x616+", "
val x632 = x631+x627
val x633 = (x632,x154)
x613 = x633
()
} else {
()
}
x642
}
x644
}
x646
} else {
()
}
x648
}
val x651 = x613
x651
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
(a, b,2)
(c, d,2)
