/*****************************************
  Emitting Generated Code                  
*******************************************/
class testOr2 extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
val x1 = null.asInstanceOf[Tuple2CharChar]
var x3: Tuple2CharChar = x1
var x4: Boolean = true
var x5: Int = -1
val x19 = x0.length
val x67 = {x13: (Int) => 
var x15: Tuple2CharChar = x1
var x16: Boolean = true
var x17: Int = x13
val x20 = x13 >= x19
val x61 = if (x20) {
x15 = x1
x16 = true
x17 = x13
()
} else {
val x27 = x0(x13)
val x28 = x27 == 'h'
val x59 = if (x28) {
val x29 = x13 + 1
val x31 = x29 >= x19
val x53 = if (x31) {
x15 = x1
x16 = true
x17 = x13
()
} else {
val x37 = x0(x29)
val x38 = x37 == 'e'
val x51 = if (x38) {
val x41 = new Tuple2CharChar(x27,x37)
x15 = x41
x16 = false
val x39 = x29 + 1
x17 = x39
()
} else {
x15 = x1
x16 = true
x17 = x13
()
}
x51
}
x53
} else {
x15 = x1
x16 = true
x17 = x13
()
}
x59
}
val x62 = x15
val x63 = x16
val x64 = x17
val x65 = new ParseResultTuple2CharChar(x62,x63,x64)
x65
}
val x124 = {x7: (Int) => 
var x9: Tuple2CharChar = x1
var x10: Boolean = true
var x11: Int = x7
val x68 = x67(x7)
val x69 = x68.empty
val x118 = if (x69) {
val x70 = x7 >= x19
val x110 = if (x70) {
x9 = x1
x10 = true
x11 = x7
()
} else {
val x76 = x0(x7)
val x77 = x76 == '1'
val x108 = if (x77) {
val x78 = x7 + 1
val x80 = x78 >= x19
val x102 = if (x80) {
x9 = x1
x10 = true
x11 = x7
()
} else {
val x86 = x0(x78)
val x87 = x86 == '2'
val x100 = if (x87) {
val x90 = new Tuple2CharChar(x76,x86)
x9 = x90
x10 = false
val x88 = x78 + 1
x11 = x88
()
} else {
x9 = x1
x10 = true
x11 = x7
()
}
x100
}
x102
} else {
x9 = x1
x10 = true
x11 = x7
()
}
x108
}
x110
} else {
val x112 = x68.res
x9 = x112
x10 = x69
val x115 = x68.next
x11 = x115
()
}
val x119 = x9
val x120 = x10
val x121 = x11
val x122 = new ParseResultTuple2CharChar(x119,x120,x121)
x122
}
val x125 = x124(0)
val x126 = x125.res
x3 = x126
val x128 = x125.empty
x4 = x128
val x130 = x125.next
x5 = x130
val x132 = x3
val x133 = x4
val x134 = x5
val x135 = new ParseResultTuple2CharChar(x132,x133,x134)
val x136 = println(x135)
x136
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Tuple2CharChar(_1: Char, _2: Char)

case class ParseResultTuple2CharChar(res: Tuple2CharChar, empty: Boolean, next: Int)
compilation: ok
ParseResultTuple2CharChar(Tuple2CharChar(h,e),false,2)
ParseResultTuple2CharChar(Tuple2CharChar(1,2),false,2)
ParseResultTuple2CharChar(null,true,0)
ParseResultTuple2CharChar(null,true,0)
ParseResultTuple2CharChar(null,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testOr3 extends ((Array[Char])=>(Unit)) {
def apply(x273:Array[Char]): Unit = {
val x274 = null.asInstanceOf[Tuple2Tuple2CharCharChar]
var x276: Tuple2Tuple2CharCharChar = x274
var x277: Boolean = true
var x278: Int = -1
val x1 = null.asInstanceOf[Tuple2CharChar]
val x292 = x273.length
val x339 = {x286: (Int) => 
var x288: Tuple2CharChar = x1
var x289: Boolean = true
var x290: Int = x286
val x293 = x286 >= x292
val x333 = if (x293) {
x288 = x1
x289 = true
x290 = x286
()
} else {
val x299 = x273(x286)
val x300 = x299 == 'h'
val x331 = if (x300) {
val x301 = x286 + 1
val x303 = x301 >= x292
val x325 = if (x303) {
x288 = x1
x289 = true
x290 = x286
()
} else {
val x309 = x273(x301)
val x310 = x309 == 'e'
val x323 = if (x310) {
val x313 = new Tuple2CharChar(x299,x309)
x288 = x313
x289 = false
val x311 = x301 + 1
x290 = x311
()
} else {
x288 = x1
x289 = true
x290 = x286
()
}
x323
}
x325
} else {
x288 = x1
x289 = true
x290 = x286
()
}
x331
}
val x334 = x288
val x335 = x289
val x336 = x290
val x337 = new ParseResultTuple2CharChar(x334,x335,x336)
x337
}
val x396 = {x280: (Int) => 
var x282: Tuple2CharChar = x1
var x283: Boolean = true
var x284: Int = x280
val x340 = x339(x280)
val x341 = x340.empty
val x390 = if (x341) {
val x342 = x280 >= x292
val x382 = if (x342) {
x282 = x1
x283 = true
x284 = x280
()
} else {
val x348 = x273(x280)
val x349 = x348 == '1'
val x380 = if (x349) {
val x350 = x280 + 1
val x352 = x350 >= x292
val x374 = if (x352) {
x282 = x1
x283 = true
x284 = x280
()
} else {
val x358 = x273(x350)
val x359 = x358 == '2'
val x372 = if (x359) {
val x362 = new Tuple2CharChar(x348,x358)
x282 = x362
x283 = false
val x360 = x350 + 1
x284 = x360
()
} else {
x282 = x1
x283 = true
x284 = x280
()
}
x372
}
x374
} else {
x282 = x1
x283 = true
x284 = x280
()
}
x380
}
x382
} else {
val x384 = x340.res
x282 = x384
x283 = x341
val x387 = x340.next
x284 = x387
()
}
val x391 = x282
val x392 = x283
val x393 = x284
val x394 = new ParseResultTuple2CharChar(x391,x392,x393)
x394
}
val x397 = x396(0)
val x398 = x397.empty
val x430 = if (x398) {
x276 = x274
x277 = true
x278 = 0
()
} else {
val x404 = x397.next
val x405 = x404 >= x292
val x428 = if (x405) {
x276 = x274
x277 = true
x278 = 0
()
} else {
val x411 = x273(x404)
val x412 = x411 == '3'
val x426 = if (x412) {
val x415 = x397.res
val x416 = new Tuple2Tuple2CharCharChar(x415,x411)
x276 = x416
x277 = false
val x413 = x404 + 1
x278 = x413
()
} else {
x276 = x274
x277 = true
x278 = 0
()
}
x426
}
x428
}
val x431 = x276
val x432 = x277
val x433 = x278
val x434 = new ParseResultTuple2Tuple2CharCharChar(x431,x432,x433)
val x435 = println(x434)
x435
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Tuple2CharChar(_1: Char, _2: Char)

case class ParseResultTuple2Tuple2CharCharChar(res: Tuple2Tuple2CharCharChar, empty: Boolean, next: Int)

case class ParseResultTuple2CharChar(res: Tuple2CharChar, empty: Boolean, next: Int)

case class Tuple2Tuple2CharCharChar(_1: Tuple2CharChar, _2: Char)
compilation: ok
ParseResultTuple2Tuple2CharCharChar(Tuple2Tuple2CharCharChar(Tuple2CharChar(h,e),3),false,3)
ParseResultTuple2Tuple2CharCharChar(Tuple2Tuple2CharCharChar(Tuple2CharChar(1,2),3),false,3)
ParseResultTuple2Tuple2CharCharChar(null,true,0)
ParseResultTuple2Tuple2CharCharChar(null,true,0)
ParseResultTuple2Tuple2CharCharChar(null,true,0)
