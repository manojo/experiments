/*****************************************
  Emitting Generated Code                  
*******************************************/
class testOr2 extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Tuple2CharChar = null
var x3: Boolean = true
var x4: Int = -1
val x18 = x0.length
val x65 = {x12: (Int) => 
var x14: Tuple2CharChar = null
var x15: Boolean = true
var x16: Int = x12
val x19 = x12 >= x18
val x59 = if (x19) {
x14 = null
x15 = true
x16 = x12
()
} else {
val x25 = x0(x12)
val x26 = x25 == 'h'
val x57 = if (x26) {
val x27 = x12 + 1
val x29 = x27 >= x18
val x51 = if (x29) {
x14 = null
x15 = true
x16 = x12
()
} else {
val x35 = x0(x27)
val x36 = x35 == 'e'
val x49 = if (x36) {
val x39 = new Tuple2CharChar(x25,x35)
x14 = x39
x15 = false
val x37 = x27 + 1
x16 = x37
()
} else {
x14 = null
x15 = true
x16 = x12
()
}
x49
}
x51
} else {
x14 = null
x15 = true
x16 = x12
()
}
x57
}
val x60 = x14
val x61 = x15
val x62 = x16
val x63 = new ParseResultTuple2CharChar(x60,x61,x62)
x63: ParseResultTuple2CharChar
}
val x122 = {x6: (Int) => 
var x8: Tuple2CharChar = null
var x9: Boolean = true
var x10: Int = x6
val x66 = x65(x6)
val x67 = x66.empty
val x116 = if (x67) {
val x68 = x6 >= x18
val x108 = if (x68) {
x8 = null
x9 = true
x10 = x6
()
} else {
val x74 = x0(x6)
val x75 = x74 == '1'
val x106 = if (x75) {
val x76 = x6 + 1
val x78 = x76 >= x18
val x100 = if (x78) {
x8 = null
x9 = true
x10 = x6
()
} else {
val x84 = x0(x76)
val x85 = x84 == '2'
val x98 = if (x85) {
val x88 = new Tuple2CharChar(x74,x84)
x8 = x88
x9 = false
val x86 = x76 + 1
x10 = x86
()
} else {
x8 = null
x9 = true
x10 = x6
()
}
x98
}
x100
} else {
x8 = null
x9 = true
x10 = x6
()
}
x106
}
x108
} else {
val x110 = x66.res
x8 = x110
x9 = x67
val x113 = x66.next
x10 = x113
()
}
val x117 = x8
val x118 = x9
val x119 = x10
val x120 = new ParseResultTuple2CharChar(x117,x118,x119)
x120: ParseResultTuple2CharChar
}
val x123 = x122(0)
val x124 = x123.res
x2 = x124
val x126 = x123.empty
x3 = x126
val x128 = x123.next
x4 = x128
val x130 = x2
val x131 = x3
val x132 = x4
val x133 = new ParseResultTuple2CharChar(x130,x131,x132)
val x134 = println(x133)
x134
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Tuple2CharChar(_1: Char, _2: Char)

case class ParseResultTuple2CharChar(res: Tuple2CharChar, empty: Boolean, next: Int)
compilation: ok
ParseResultTuple2CharChar(Tuple2CharChar(h,e),false,2)
ParseResultTuple2CharChar(Tuple2CharChar(1,2),false,2)
ParseResultTuple2CharChar(null,true,0)
ParseResultTuple2CharChar(null,true,0)
ParseResultTuple2CharChar(null,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class testOr3 extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Tuple2Tuple2CharCharChar = null
var x3: Boolean = true
var x4: Int = -1
val x18 = x0.length
val x65 = {x12: (Int) => 
var x14: Tuple2CharChar = null
var x15: Boolean = true
var x16: Int = x12
val x19 = x12 >= x18
val x59 = if (x19) {
x14 = null
x15 = true
x16 = x12
()
} else {
val x25 = x0(x12)
val x26 = x25 == 'h'
val x57 = if (x26) {
val x27 = x12 + 1
val x29 = x27 >= x18
val x51 = if (x29) {
x14 = null
x15 = true
x16 = x12
()
} else {
val x35 = x0(x27)
val x36 = x35 == 'e'
val x49 = if (x36) {
val x39 = new Tuple2CharChar(x25,x35)
x14 = x39
x15 = false
val x37 = x27 + 1
x16 = x37
()
} else {
x14 = null
x15 = true
x16 = x12
()
}
x49
}
x51
} else {
x14 = null
x15 = true
x16 = x12
()
}
x57
}
val x60 = x14
val x61 = x15
val x62 = x16
val x63 = new ParseResultTuple2CharChar(x60,x61,x62)
x63: ParseResultTuple2CharChar
}
val x122 = {x6: (Int) => 
var x8: Tuple2CharChar = null
var x9: Boolean = true
var x10: Int = x6
val x66 = x65(x6)
val x67 = x66.empty
val x116 = if (x67) {
val x68 = x6 >= x18
val x108 = if (x68) {
x8 = null
x9 = true
x10 = x6
()
} else {
val x74 = x0(x6)
val x75 = x74 == '1'
val x106 = if (x75) {
val x76 = x6 + 1
val x78 = x76 >= x18
val x100 = if (x78) {
x8 = null
x9 = true
x10 = x6
()
} else {
val x84 = x0(x76)
val x85 = x84 == '2'
val x98 = if (x85) {
val x88 = new Tuple2CharChar(x74,x84)
x8 = x88
x9 = false
val x86 = x76 + 1
x10 = x86
()
} else {
x8 = null
x9 = true
x10 = x6
()
}
x98
}
x100
} else {
x8 = null
x9 = true
x10 = x6
()
}
x106
}
x108
} else {
val x110 = x66.res
x8 = x110
x9 = x67
val x113 = x66.next
x10 = x113
()
}
val x117 = x8
val x118 = x9
val x119 = x10
val x120 = new ParseResultTuple2CharChar(x117,x118,x119)
x120: ParseResultTuple2CharChar
}
val x123 = x122(0)
val x124 = x123.empty
val x156 = if (x124) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x130 = x123.next
val x131 = x130 >= x18
val x154 = if (x131) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x137 = x0(x130)
val x138 = x137 == '3'
val x152 = if (x138) {
val x141 = x123.res
val x142 = new Tuple2Tuple2CharCharChar(x141,x137)
x2 = x142
x3 = false
val x139 = x130 + 1
x4 = x139
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x152
}
x154
}
val x157 = x2
val x158 = x3
val x159 = x4
val x160 = new ParseResultTuple2Tuple2CharCharChar(x157,x158,x159)
val x161 = println(x160)
x161
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Tuple2CharChar(_1: Char, _2: Char)

case class ParseResultTuple2Tuple2CharCharChar(res: Tuple2Tuple2CharCharChar, empty: Boolean, next: Int)

case class ParseResultTuple2CharChar(res: Tuple2CharChar, empty: Boolean, next: Int)

case class Tuple2Tuple2CharCharChar(_1: Tuple2CharChar, _2: Char)
compilation: ok
ParseResultTuple2Tuple2CharCharChar(Tuple2Tuple2CharCharChar(Tuple2CharChar(h,e),3),false,3)
ParseResultTuple2Tuple2CharCharChar(Tuple2Tuple2CharCharChar(Tuple2CharChar(1,2),3),false,3)
ParseResultTuple2Tuple2CharCharChar(null,true,0)
ParseResultTuple2Tuple2CharCharChar(null,true,0)
ParseResultTuple2Tuple2CharCharChar(null,true,0)
