/*****************************************
  Emitting Generated Code                  
*******************************************/
class testJPrimitives extends ((Int)=>(Unit)) {
def apply(x0:Int): Unit = {
val x1 = new Anon6507737(1,null)
val x6 = println(x1)
val x2 = new Anon6507737(2,null)
val x7 = println(x2)
val x3 = new Anon6507737(0,null)
val x8 = println(x3)
val x4 = List(x2)
val x5 = new Anon6507737(6,x4)
val x9 = println(x5)
x9
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
Anon6507737(1,null)
Anon6507737(2,null)
Anon6507737(0,null)
Anon6507737(6,List(Anon6507737(2,null)))
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class primitiveParse(px6:Int,px7:Array[Char],px9:Int,px10:Array[Char],px129:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Anon6507737 = null
var x3: Boolean = true
var x4: Int = -1
val x6 = px6 // static data: 5
val x25 = x0.length
val x7 = px7 // static data: Array(f,a,l,s,e)
val x8 = new Anon6507737(1,null)
val x71 = {x18: (Int) => 
var x20: Anon6507737 = null
var x21: Boolean = true
var x22: Int = x18
val x24 = x18 + x6
val x26 = x24 > x25
val x65 = if (x26) {
x20 = null
x21 = true
x22 = x18
()
} else {
var x32: Int = 0
var x33: Boolean = true
val x51 = while ({val x34 = x33
val x35 = x32
val x36 = x35 < x6
val x37 = x34 && x36
x37}) {
val x39 = x32
val x40 = x18 + x39
val x41 = x0(x40)
val x42 = x7(x39)
val x44 = x41 == x42
val x47 = if (x44) {
()
} else {
x33 = false
()
}
val x48 = x39 + 1
x32 = x48
()
}
val x52 = x33
val x63 = if (x52) {
x20 = x8
x21 = false
x22 = x24
()
} else {
x20 = null
x21 = true
x22 = x18
()
}
x63
}
val x66 = x20
val x67 = x21
val x68 = x22
val x69 = new ParseResultAnon6507737(x66,x67,x68)
x69: ParseResultAnon6507737
}
val x9 = px9 // static data: 4
val x10 = px10 // static data: Array(t,r,u,e)
val x11 = new Anon6507737(2,null)
val x128 = {x12: (Int) => 
var x14: Anon6507737 = null
var x15: Boolean = true
var x16: Int = x12
val x72 = x71(x12)
val x73 = x72.empty
val x122 = if (x73) {
val x74 = x12 + x9
val x75 = x74 > x25
val x114 = if (x75) {
x14 = null
x15 = true
x16 = x12
()
} else {
var x81: Int = 0
var x82: Boolean = true
val x100 = while ({val x83 = x82
val x84 = x81
val x85 = x84 < x9
val x86 = x83 && x85
x86}) {
val x88 = x81
val x89 = x12 + x88
val x90 = x0(x89)
val x91 = x10(x88)
val x93 = x90 == x91
val x96 = if (x93) {
()
} else {
x82 = false
()
}
val x97 = x88 + 1
x81 = x97
()
}
val x101 = x82
val x112 = if (x101) {
x14 = x11
x15 = false
x16 = x74
()
} else {
x14 = null
x15 = true
x16 = x12
()
}
x112
}
x114
} else {
val x116 = x72.res
x14 = x116
x15 = x73
val x119 = x72.next
x16 = x119
()
}
val x123 = x14
val x124 = x15
val x125 = x16
val x126 = new ParseResultAnon6507737(x123,x124,x125)
x126: ParseResultAnon6507737
}
val x155 = {x137: (Int) => 
var x139: Anon6507737 = null
var x140: Boolean = true
var x141: Int = x137
val x143 = x128(x137)
val x144 = x143.res
x139 = x144
val x146 = x143.empty
x140 = x146
val x148 = x143.next
x141 = x148
val x150 = x139
val x151 = x140
val x152 = x141
val x153 = new ParseResultAnon6507737(x150,x151,x152)
x153: ParseResultAnon6507737
}
val x129 = px129 // static data: Array(n,u,l,l)
val x130 = new Anon6507737(0,null)
val x212 = {x131: (Int) => 
var x133: Anon6507737 = null
var x134: Boolean = true
var x135: Int = x131
val x156 = x155(x131)
val x157 = x156.empty
val x206 = if (x157) {
val x158 = x131 + x9
val x159 = x158 > x25
val x198 = if (x159) {
x133 = null
x134 = true
x135 = x131
()
} else {
var x165: Int = 0
var x166: Boolean = true
val x184 = while ({val x167 = x166
val x168 = x165
val x169 = x168 < x9
val x170 = x167 && x169
x170}) {
val x172 = x165
val x173 = x131 + x172
val x174 = x0(x173)
val x175 = x129(x172)
val x177 = x174 == x175
val x180 = if (x177) {
()
} else {
x166 = false
()
}
val x181 = x172 + 1
x165 = x181
()
}
val x185 = x166
val x196 = if (x185) {
x133 = x130
x134 = false
x135 = x158
()
} else {
x133 = null
x134 = true
x135 = x131
()
}
x196
}
x198
} else {
val x200 = x156.res
x133 = x200
x134 = x157
val x203 = x156.next
x135 = x203
()
}
val x207 = x133
val x208 = x134
val x209 = x135
val x210 = new ParseResultAnon6507737(x207,x208,x209)
x210: ParseResultAnon6507737
}
val x237 = {x219: (Int) => 
var x221: Anon6507737 = null
var x222: Boolean = true
var x223: Int = x219
val x225 = x212(x219)
val x226 = x225.res
x221 = x226
val x228 = x225.empty
x222 = x228
val x230 = x225.next
x223 = x230
val x232 = x221
val x233 = x222
val x234 = x223
val x235 = new ParseResultAnon6507737(x232,x233,x234)
x235: ParseResultAnon6507737
}
val x242 = null.asInstanceOf[Char]
val x243 = new OptionChar(x242,false)
val x745 = {x213: (Int) => 
var x215: Anon6507737 = null
var x216: Boolean = true
var x217: Int = x213
val x238 = x237(x213)
val x239 = x238.empty
val x739 = if (x239) {
val x240 = x213 >= x25
val x731 = if (x240) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x254 = x0(x213)
val x255 = x254 == '-'
val x729 = if (x255) {
val x256 = x213 + 1
val x260 = x256 >= x25
val x499 = if (x260) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x268 = x0(x256)
val x269 = x268 >= '0'
val x270 = x268 <= '9'
val x271 = x269 && x270
val x497 = if (x271) {
var x275: java.lang.String = ""
var x276: Boolean = false
val x272 = x256 + 1
var x277: Int = x272
var x279: Int = -1
var x280: Boolean = true
var x281: Int = x272
val x317 = while ({val x282 = x280
val x283 = x279
val x284 = x281
val x285 = x283 != x284
val x286 = x282 && x285
x286}) {
val x288 = x281
x279 = x288
val x290 = x288 >= x25
val x315 = if (x290) {
x280 = false
()
} else {
val x294 = x0(x288)
val x295 = x294 >= '0'
val x296 = x294 <= '9'
val x297 = x295 && x296
val x313 = if (x297) {
val x300 = x275
val x301 = x276
val x302 = x277
val x304 = x300+x294
x275 = x304
x276 = false
val x298 = x288 + 1
x277 = x298
x281 = x298
()
} else {
x280 = false
()
}
x313
}
x315
}
val x318 = x275
val x319 = x276
val x320 = x277
val x325 = if (x319) {
true
} else {
false
}
val x334 = if (x325) {
true
} else {
false
}
val x340 = if (x334) {
true
} else {
false
}
val x352 = if (x340) {
true
} else {
false
}
val x491 = if (x352) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x341 = if (x334) {
x213
} else {
val x326 = if (x319) {
x256
} else {
x320
}
val x335 = if (x325) {
x326
} else {
x326
}
x335
}
val x353 = if (x340) {
x341
} else {
x341
}
val x359 = x353 >= x25
val x489 = if (x359) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x366 = x0(x353)
val x367 = x366 == '.'
val x487 = if (x367) {
val x368 = x353 + 1
val x370 = x368 >= x25
val x481 = if (x370) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x378 = x0(x368)
val x379 = x378 >= '0'
val x380 = x378 <= '9'
val x381 = x379 && x380
val x479 = if (x381) {
var x385: java.lang.String = ""
var x386: Boolean = false
val x382 = x368 + 1
var x387: Int = x382
var x389: Int = -1
var x390: Boolean = true
var x391: Int = x382
val x427 = while ({val x392 = x390
val x393 = x389
val x394 = x391
val x395 = x393 != x394
val x396 = x392 && x395
x396}) {
val x398 = x391
x389 = x398
val x400 = x398 >= x25
val x425 = if (x400) {
x390 = false
()
} else {
val x404 = x0(x398)
val x405 = x404 >= '0'
val x406 = x404 <= '9'
val x407 = x405 && x406
val x423 = if (x407) {
val x410 = x385
val x411 = x386
val x412 = x387
val x414 = x410+x404
x385 = x414
x386 = false
val x408 = x398 + 1
x387 = x408
x391 = x408
()
} else {
x390 = false
()
}
x423
}
x425
}
val x428 = x385
val x429 = x386
val x430 = x387
val x435 = if (x429) {
true
} else {
false
}
val x444 = if (x435) {
true
} else {
false
}
val x450 = if (x444) {
true
} else {
false
}
val x461 = if (x450) {
true
} else {
false
}
val x467 = if (x461) {
null
} else {
val x460 = if (x450) {
0.0
} else {
val x449 = if (x444) {
null
} else {
val x351 = if (x340) {
null
} else {
val x339 = if (x334) {
null
} else {
val x258 = new OptionChar(x254,true)
val x333 = if (x325) {
null
} else {
val x324 = if (x319) {
null
} else {
val x322 = new Tuple2CharString(x268,x318)
x322
}
val x329 = x324._1
val x330 = x324._2
val x331 = x329+x330
x331
}
val x337 = new Tuple2OptionCharString(x258,x333)
x337
}
val x344 = x339._1
val x346 = x344.defined
val x349 = if (x346) {
val x345 = x339._2
val x347 = x344.value
val x348 = x347+x345
x348
} else {
val x345 = x339._2
x345
}
x349
}
val x443 = if (x435) {
null
} else {
val x434 = if (x429) {
null
} else {
val x432 = new Tuple2CharString(x378,x428)
x432
}
val x439 = x434._1
val x440 = x434._2
val x441 = x439+x440
x441
}
val x447 = new Tuple2StringString(x351,x443)
x447
}
val x455 = x449._2
val x454 = x449._1
val x456 = x454+"."
val x457 = x456+x455
val x458 = x457.toDouble
x458
}
val x465 = new Anon6507737(4,x460)
x465
}
x215 = x467
val x468 = if (x461) {
true
} else {
false
}
x216 = x468
val x451 = if (x444) {
x213
} else {
val x436 = if (x429) {
x368
} else {
x430
}
val x445 = if (x435) {
x436
} else {
x436
}
x445
}
val x462 = if (x450) {
x451
} else {
x451
}
val x469 = if (x461) {
x462
} else {
x462
}
x217 = x469
()
} else {
x215 = null
x216 = true
x217 = x213
()
}
x479
}
x481
} else {
x215 = null
x216 = true
x217 = x213
()
}
x487
}
x489
}
x491
} else {
x215 = null
x216 = true
x217 = x213
()
}
x497
}
x499
} else {
val x501 = x254 >= '0'
val x502 = x254 <= '9'
val x503 = x501 && x502
val x727 = if (x503) {
var x505: java.lang.String = ""
var x506: Boolean = false
val x256 = x213 + 1
var x507: Int = x256
var x509: Int = -1
var x510: Boolean = true
var x511: Int = x256
val x547 = while ({val x512 = x510
val x513 = x509
val x514 = x511
val x515 = x513 != x514
val x516 = x512 && x515
x516}) {
val x518 = x511
x509 = x518
val x520 = x518 >= x25
val x545 = if (x520) {
x510 = false
()
} else {
val x524 = x0(x518)
val x525 = x524 >= '0'
val x526 = x524 <= '9'
val x527 = x525 && x526
val x543 = if (x527) {
val x530 = x505
val x531 = x506
val x532 = x507
val x534 = x530+x524
x505 = x534
x506 = false
val x528 = x518 + 1
x507 = x528
x511 = x528
()
} else {
x510 = false
()
}
x543
}
x545
}
val x548 = x505
val x549 = x506
val x550 = x507
val x555 = if (x549) {
true
} else {
false
}
val x564 = if (x555) {
true
} else {
false
}
val x570 = if (x564) {
true
} else {
false
}
val x582 = if (x570) {
true
} else {
false
}
val x721 = if (x582) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x571 = if (x564) {
x213
} else {
val x556 = if (x549) {
x213
} else {
x550
}
val x565 = if (x555) {
x556
} else {
x556
}
x565
}
val x583 = if (x570) {
x571
} else {
x571
}
val x589 = x583 >= x25
val x719 = if (x589) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x596 = x0(x583)
val x597 = x596 == '.'
val x717 = if (x597) {
val x598 = x583 + 1
val x600 = x598 >= x25
val x711 = if (x600) {
x215 = null
x216 = true
x217 = x213
()
} else {
val x608 = x0(x598)
val x609 = x608 >= '0'
val x610 = x608 <= '9'
val x611 = x609 && x610
val x709 = if (x611) {
var x615: java.lang.String = ""
var x616: Boolean = false
val x612 = x598 + 1
var x617: Int = x612
var x619: Int = -1
var x620: Boolean = true
var x621: Int = x612
val x657 = while ({val x622 = x620
val x623 = x619
val x624 = x621
val x625 = x623 != x624
val x626 = x622 && x625
x626}) {
val x628 = x621
x619 = x628
val x630 = x628 >= x25
val x655 = if (x630) {
x620 = false
()
} else {
val x634 = x0(x628)
val x635 = x634 >= '0'
val x636 = x634 <= '9'
val x637 = x635 && x636
val x653 = if (x637) {
val x640 = x615
val x641 = x616
val x642 = x617
val x644 = x640+x634
x615 = x644
x616 = false
val x638 = x628 + 1
x617 = x638
x621 = x638
()
} else {
x620 = false
()
}
x653
}
x655
}
val x658 = x615
val x659 = x616
val x660 = x617
val x665 = if (x659) {
true
} else {
false
}
val x674 = if (x665) {
true
} else {
false
}
val x680 = if (x674) {
true
} else {
false
}
val x691 = if (x680) {
true
} else {
false
}
val x697 = if (x691) {
null
} else {
val x690 = if (x680) {
0.0
} else {
val x679 = if (x674) {
null
} else {
val x581 = if (x570) {
null
} else {
val x569 = if (x564) {
null
} else {
val x563 = if (x555) {
null
} else {
val x554 = if (x549) {
null
} else {
val x552 = new Tuple2CharString(x254,x548)
x552
}
val x559 = x554._1
val x560 = x554._2
val x561 = x559+x560
x561
}
val x567 = new Tuple2OptionCharString(x243,x563)
x567
}
val x574 = x569._1
val x576 = x574.defined
val x579 = if (x576) {
val x575 = x569._2
val x577 = x574.value
val x578 = x577+x575
x578
} else {
val x575 = x569._2
x575
}
x579
}
val x673 = if (x665) {
null
} else {
val x664 = if (x659) {
null
} else {
val x662 = new Tuple2CharString(x608,x658)
x662
}
val x669 = x664._1
val x670 = x664._2
val x671 = x669+x670
x671
}
val x677 = new Tuple2StringString(x581,x673)
x677
}
val x685 = x679._2
val x684 = x679._1
val x686 = x684+"."
val x687 = x686+x685
val x688 = x687.toDouble
x688
}
val x695 = new Anon6507737(4,x690)
x695
}
x215 = x697
val x698 = if (x691) {
true
} else {
false
}
x216 = x698
val x681 = if (x674) {
x213
} else {
val x666 = if (x659) {
x598
} else {
x660
}
val x675 = if (x665) {
x666
} else {
x666
}
x675
}
val x692 = if (x680) {
x681
} else {
x681
}
val x699 = if (x691) {
x692
} else {
x692
}
x217 = x699
()
} else {
x215 = null
x216 = true
x217 = x213
()
}
x709
}
x711
} else {
x215 = null
x216 = true
x217 = x213
()
}
x717
}
x719
}
x721
} else {
x215 = null
x216 = true
x217 = x213
()
}
x727
}
x729
}
x731
} else {
val x733 = x238.res
x215 = x733
x216 = x239
val x736 = x238.next
x217 = x736
()
}
val x740 = x215
val x741 = x216
val x742 = x217
val x743 = new ParseResultAnon6507737(x740,x741,x742)
x743: ParseResultAnon6507737
}
val x770 = {x752: (Int) => 
var x754: Anon6507737 = null
var x755: Boolean = true
var x756: Int = x752
val x758 = x745(x752)
val x759 = x758.res
x754 = x759
val x761 = x758.empty
x755 = x761
val x763 = x758.next
x756 = x763
val x765 = x754
val x766 = x755
val x767 = x756
val x768 = new ParseResultAnon6507737(x765,x766,x767)
x768: ParseResultAnon6507737
}
val x1008 = {x746: (Int) => 
var x748: Anon6507737 = null
var x749: Boolean = true
var x750: Int = x746
val x771 = x770(x746)
val x772 = x771.empty
val x1002 = if (x772) {
val x773 = x746 >= x25
val x994 = if (x773) {
x748 = null
x749 = true
x750 = x746
()
} else {
val x782 = x0(x746)
val x783 = x782 == '-'
val x992 = if (x783) {
val x784 = x746 + 1
val x788 = x784 >= x25
val x894 = if (x788) {
x748 = null
x749 = true
x750 = x746
()
} else {
val x795 = x0(x784)
val x796 = x795 >= '0'
val x797 = x795 <= '9'
val x798 = x796 && x797
val x892 = if (x798) {
val x801 = x795 - '0'
val x802 = x801.toInt
var x804: Int = x802
var x805: Boolean = false
val x799 = x784 + 1
var x806: Int = x799
var x808: Int = -1
var x809: Boolean = true
var x810: Int = x799
val x851 = while ({val x811 = x809
val x812 = x808
val x813 = x810
val x814 = x812 != x813
val x815 = x811 && x814
x815}) {
val x817 = x810
x808 = x817
val x819 = x817 >= x25
val x849 = if (x819) {
x809 = false
()
} else {
val x824 = x0(x817)
val x825 = x824 >= '0'
val x826 = x824 <= '9'
val x827 = x825 && x826
val x847 = if (x827) {
val x833 = x804
val x834 = x805
val x835 = x806
val x830 = x824 - '0'
val x831 = x830.toInt
val x837 = x833 * 10
val x838 = x837 + x831
x804 = x838
x805 = false
val x828 = x817 + 1
x806 = x828
x810 = x828
()
} else {
x809 = false
()
}
x847
}
x849
}
val x852 = x804
val x853 = x805
val x854 = x806
val x857 = if (x853) {
true
} else {
x853
}
val x863 = if (x857) {
true
} else {
false
}
val x874 = if (x863) {
true
} else {
false
}
val x880 = if (x874) {
null
} else {
val x873 = if (x863) {
0
} else {
val x862 = if (x857) {
null
} else {
val x786 = new OptionChar(x782,true)
val x856 = if (x853) {
0
} else {
x852
}
val x860 = new Tuple2OptionCharInt(x786,x856)
x860
}
val x867 = x862._1
val x869 = x867.defined
val x871 = if (x869) {
val x868 = x862._2
val x870 = -1 * x868
x870
} else {
val x868 = x862._2
x868
}
x871
}
val x878 = new Anon6507737(3,x873)
x878
}
x748 = x880
val x881 = if (x874) {
true
} else {
false
}
x749 = x881
val x864 = if (x857) {
x746
} else {
val x858 = if (x853) {
x784
} else {
x854
}
x858
}
val x875 = if (x863) {
x864
} else {
x864
}
val x882 = if (x874) {
x875
} else {
x875
}
x750 = x882
()
} else {
x748 = null
x749 = true
x750 = x746
()
}
x892
}
x894
} else {
val x896 = x782 >= '0'
val x897 = x782 <= '9'
val x898 = x896 && x897
val x990 = if (x898) {
val x899 = x782 - '0'
val x900 = x899.toInt
var x902: Int = x900
var x903: Boolean = false
val x784 = x746 + 1
var x904: Int = x784
var x906: Int = -1
var x907: Boolean = true
var x908: Int = x784
val x949 = while ({val x909 = x907
val x910 = x906
val x911 = x908
val x912 = x910 != x911
val x913 = x909 && x912
x913}) {
val x915 = x908
x906 = x915
val x917 = x915 >= x25
val x947 = if (x917) {
x907 = false
()
} else {
val x922 = x0(x915)
val x923 = x922 >= '0'
val x924 = x922 <= '9'
val x925 = x923 && x924
val x945 = if (x925) {
val x931 = x902
val x932 = x903
val x933 = x904
val x928 = x922 - '0'
val x929 = x928.toInt
val x935 = x931 * 10
val x936 = x935 + x929
x902 = x936
x903 = false
val x926 = x915 + 1
x904 = x926
x908 = x926
()
} else {
x907 = false
()
}
x945
}
x947
}
val x950 = x902
val x951 = x903
val x952 = x904
val x955 = if (x951) {
true
} else {
x951
}
val x961 = if (x955) {
true
} else {
false
}
val x972 = if (x961) {
true
} else {
false
}
val x978 = if (x972) {
null
} else {
val x971 = if (x961) {
0
} else {
val x960 = if (x955) {
null
} else {
val x954 = if (x951) {
0
} else {
x950
}
val x958 = new Tuple2OptionCharInt(x243,x954)
x958
}
val x965 = x960._1
val x967 = x965.defined
val x969 = if (x967) {
val x966 = x960._2
val x968 = -1 * x966
x968
} else {
val x966 = x960._2
x966
}
x969
}
val x976 = new Anon6507737(3,x971)
x976
}
x748 = x978
val x979 = if (x972) {
true
} else {
false
}
x749 = x979
val x962 = if (x955) {
x746
} else {
val x956 = if (x951) {
x746
} else {
x952
}
x956
}
val x973 = if (x961) {
x962
} else {
x962
}
val x980 = if (x972) {
x973
} else {
x973
}
x750 = x980
()
} else {
x748 = null
x749 = true
x750 = x746
()
}
x990
}
x992
}
x994
} else {
val x996 = x771.res
x748 = x996
x749 = x772
val x999 = x771.next
x750 = x999
()
}
val x1003 = x748
val x1004 = x749
val x1005 = x750
val x1006 = new ParseResultAnon6507737(x1003,x1004,x1005)
x1006: ParseResultAnon6507737
}
val x1033 = {x1015: (Int) => 
var x1017: Anon6507737 = null
var x1018: Boolean = true
var x1019: Int = x1015
val x1021 = x1008(x1015)
val x1022 = x1021.res
x1017 = x1022
val x1024 = x1021.empty
x1018 = x1024
val x1026 = x1021.next
x1019 = x1026
val x1028 = x1017
val x1029 = x1018
val x1030 = x1019
val x1031 = new ParseResultAnon6507737(x1028,x1029,x1030)
x1031: ParseResultAnon6507737
}
val x1138 = {x1069: (Int) => 
var x1071: java.lang.String = null
var x1072: Boolean = true
var x1073: Int = x1069
val x1075 = x1069 >= x25
val x1132 = if (x1075) {
x1071 = null
x1072 = true
x1073 = x1069
()
} else {
val x1081 = x0(x1069)
val x1082 = x1081 == '\\'
val x1130 = if (x1082) {
val x1083 = x1069 + 1
val x1085 = x1083 >= x25
val x1124 = if (x1085) {
x1071 = null
x1072 = true
x1073 = x1083
()
} else {
val x1092 = x0(x1083)
val x1093 = x1092 == '\\'
val x1094 = x1092 == '\''
val x1095 = x1093 || x1094
val x1096 = x1092 == '"'
val x1097 = x1095 || x1096
val x1098 = x1092 == 'b'
val x1099 = x1097 || x1098
val x1100 = x1092 == 'f'
val x1101 = x1099 || x1100
val x1102 = x1092 == 'n'
val x1103 = x1101 || x1102
val x1104 = x1092 == 'r'
val x1105 = x1103 || x1104
val x1106 = x1092 == 't'
val x1107 = x1105 || x1106
val x1108 = x1092 == '/'
val x1109 = x1107 || x1108
val x1122 = if (x1109) {
val x1112 = ""+x1092
x1071 = x1112
x1072 = false
val x1110 = x1083 + 1
x1073 = x1110
()
} else {
x1071 = null
x1072 = true
x1073 = x1083
()
}
x1122
}
x1124
} else {
x1071 = null
x1072 = true
x1073 = x1069
()
}
x1130
}
val x1133 = x1071
val x1134 = x1072
val x1135 = x1073
val x1136 = new ParseResultString(x1133,x1134,x1135)
x1136: ParseResultString
}
val x1252 = {x1063: (Int) => 
var x1065: java.lang.String = null
var x1066: Boolean = true
var x1067: Int = x1063
val x1139 = x1138(x1063)
val x1140 = x1139.empty
val x1246 = if (x1140) {
val x1141 = x1063 >= x25
val x1238 = if (x1141) {
x1065 = null
x1066 = true
x1067 = x1063
()
} else {
val x1147 = x0(x1063)
val x1148 = x1147 == '\\'
val x1236 = if (x1148) {
val x1149 = x1063 + 1
val x1151 = x1149 >= x25
val x1230 = if (x1151) {
x1065 = null
x1066 = true
x1067 = x1063
()
} else {
val x1157 = x0(x1149)
val x1158 = x1157 == 'u'
val x1228 = if (x1158) {
var x1162: java.lang.String = ""
var x1163: Boolean = false
val x1159 = x1149 + 1
var x1164: Int = x1159
var x1166: Int = -1
var x1167: Boolean = true
var x1168: Int = x1159
var x1169: Int = 0
val x1215 = while ({val x1170 = x1169
val x1172 = x1166
val x1173 = x1168
val x1176 = x1167
val x1171 = x1170 < 4
val x1174 = x1172 != x1173
val x1175 = x1171 && x1174
val x1177 = x1175 && x1176
x1177}) {
val x1179 = x1168
x1166 = x1179
val x1181 = x1179 >= x25
val x1213 = if (x1181) {
x1167 = false
()
} else {
val x1185 = x0(x1179)
val x1186 = x1185 >= '0'
val x1187 = x1185 <= '9'
val x1188 = x1186 && x1187
val x1189 = x1185 >= 'A'
val x1190 = x1185 <= 'F'
val x1191 = x1189 && x1190
val x1192 = x1188 || x1191
val x1211 = if (x1192) {
val x1195 = x1162
val x1196 = x1163
val x1197 = x1164
val x1199 = x1195+x1185
x1162 = x1199
x1163 = false
val x1193 = x1179 + 1
x1164 = x1193
x1168 = x1193
val x1205 = x1169
val x1206 = x1205 + 1
x1169 = x1206
()
} else {
x1167 = false
()
}
x1211
}
x1213
}
val x1216 = x1162
val x1217 = x1163
val x1218 = x1164
x1065 = x1216
x1066 = x1217
x1067 = x1218
()
} else {
x1065 = null
x1066 = true
x1067 = x1063
()
}
x1228
}
x1230
} else {
x1065 = null
x1066 = true
x1067 = x1063
()
}
x1236
}
x1238
} else {
val x1240 = x1139.res
x1065 = x1240
x1066 = x1140
val x1243 = x1139.next
x1067 = x1243
()
}
val x1247 = x1065
val x1248 = x1066
val x1249 = x1067
val x1250 = new ParseResultString(x1247,x1248,x1249)
x1250: ParseResultString
}
val x1277 = {x1259: (Int) => 
var x1261: java.lang.String = null
var x1262: Boolean = true
var x1263: Int = x1259
val x1265 = x1252(x1259)
val x1266 = x1265.res
x1261 = x1266
val x1268 = x1265.empty
x1262 = x1268
val x1270 = x1265.next
x1263 = x1270
val x1272 = x1261
val x1273 = x1262
val x1274 = x1263
val x1275 = new ParseResultString(x1272,x1273,x1274)
x1275: ParseResultString
}
val x1318 = {x1253: (Int) => 
var x1255: java.lang.String = null
var x1256: Boolean = true
var x1257: Int = x1253
val x1278 = x1277(x1253)
val x1279 = x1278.empty
val x1312 = if (x1279) {
val x1280 = x1253 >= x25
val x1304 = if (x1280) {
x1255 = null
x1256 = true
x1257 = x1253
()
} else {
val x1286 = x0(x1253)
val x1287 = x1286 != '"'
val x1288 = x1286 != '\\'
val x1289 = x1287 && x1288
val x1302 = if (x1289) {
val x1292 = ""+x1286
x1255 = x1292
x1256 = false
val x1290 = x1253 + 1
x1257 = x1290
()
} else {
x1255 = null
x1256 = true
x1257 = x1253
()
}
x1302
}
x1304
} else {
val x1306 = x1278.res
x1255 = x1306
x1256 = x1279
val x1309 = x1278.next
x1257 = x1309
()
}
val x1313 = x1255
val x1314 = x1256
val x1315 = x1257
val x1316 = new ParseResultString(x1313,x1314,x1315)
x1316: ParseResultString
}
val x1395 = {x1009: (Int) => 
var x1011: Anon6507737 = null
var x1012: Boolean = true
var x1013: Int = x1009
val x1034 = x1033(x1009)
val x1035 = x1034.empty
val x1389 = if (x1035) {
val x1036 = x1009 >= x25
val x1381 = if (x1036) {
x1011 = null
x1012 = true
x1013 = x1009
()
} else {
val x1043 = x0(x1009)
val x1044 = x1043 == '"'
val x1379 = if (x1044) {
var x1048: java.lang.String = ""
var x1049: Boolean = false
val x1045 = x1009 + 1
var x1050: Int = x1045
var x1052: Int = -1
var x1053: Boolean = true
var x1054: Int = x1045
val x1338 = while ({val x1055 = x1053
val x1056 = x1052
val x1057 = x1054
val x1058 = x1056 != x1057
val x1059 = x1055 && x1058
x1059}) {
val x1061 = x1054
x1052 = x1061
val x1319 = x1318(x1061)
val x1320 = x1319.empty
val x1336 = if (x1320) {
x1053 = false
()
} else {
val x1323 = x1048
val x1324 = x1049
val x1325 = x1050
val x1327 = x1319.res
val x1328 = x1323+x1327
x1048 = x1328
x1049 = false
val x1329 = x1319.next
x1050 = x1329
x1054 = x1329
()
}
x1336
}
val x1339 = x1048
val x1340 = x1049
val x1341 = x1050
val x1373 = if (x1340) {
x1011 = null
x1012 = true
x1013 = x1341
()
} else {
val x1348 = x1341 >= x25
val x1371 = if (x1348) {
x1011 = null
x1012 = true
x1013 = x1009
()
} else {
val x1354 = x0(x1341)
val x1355 = x1354 == '"'
val x1369 = if (x1355) {
val x1359 = new Anon6507737(5,x1339)
x1011 = x1359
x1012 = false
val x1356 = x1341 + 1
x1013 = x1356
()
} else {
x1011 = null
x1012 = true
x1013 = x1009
()
}
x1369
}
x1371
}
x1373
} else {
x1011 = null
x1012 = true
x1013 = x1009
()
}
x1379
}
x1381
} else {
val x1383 = x1034.res
x1011 = x1383
x1012 = x1035
val x1386 = x1034.next
x1013 = x1386
()
}
val x1390 = x1011
val x1391 = x1012
val x1392 = x1013
val x1393 = new ParseResultAnon6507737(x1390,x1391,x1392)
x1393: ParseResultAnon6507737
}
val x1396 = x1395(0)
val x1397 = x1396.res
x2 = x1397
val x1399 = x1396.empty
x3 = x1399
val x1401 = x1396.next
x4 = x1401
val x1403 = x2
val x1404 = x3
val x1405 = x4
val x1406 = new ParseResultAnon6507737(x1403,x1404,x1405)
val x1407 = println(x1406)
x1407
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=1000
compilation: ok
ParseResultAnon6507737(Anon6507737(3,23),false,2)
ParseResultAnon6507737(Anon6507737(4,2.13),false,4)
ParseResultAnon6507737(Anon6507737(4,-22.13),false,6)
ParseResultAnon6507737(Anon6507737(1,null),false,5)
ParseResultAnon6507737(Anon6507737(0,null),false,4)
ParseResultAnon6507737(Anon6507737(2,null),false,4)
ParseResultAnon6507737(Anon6507737(5,hello),false,7)
ParseResultAnon6507737(Anon6507737(5,"hello),false,9)
ParseResultAnon6507737(Anon6507737(5,/hello),false,9)
ParseResultAnon6507737(Anon6507737(5,<),false,3)
not contains
contains
contains
nVars=1000
contains
contains
nVars=2000
nVars=3000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class jsonParse(px1804:Int,px1805:Array[Char],px1807:Int,px1808:Array[Char],px1926:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x6: scala.Function1[Int, ParseResultAnon6507737] = null
var x3240: scala.Function1[Int, ParseResultAnon6507737] = null
var x3217: scala.Function1[Int, ParseResultAnon6507737] = null
var x1803: scala.Function1[Int, ParseResultAnon6507737] = null
var x1397: scala.Function1[Int, ParseResultAnon6507737] = null
var x1292: scala.Function1[Int, ParseResultListAnon6507737] = null
var x1272: scala.Function1[Int, ParseResultListAnon6507737] = null
var x1689: scala.Function1[Int, ParseResultListAnon6507737] = null
var x1669: scala.Function1[Int, ParseResultListAnon6507737] = null
x6 = {x7: (Int) => 
var x9: Anon6507737 = null
var x10: Boolean = true
var x11: Int = x7
val x3241 = x3240(x7)
val x3242 = x3241.res
x9 = x3242
val x3244 = x3241.empty
x10 = x3244
val x3246 = x3241.next
x11 = x3246
val x3248 = x9
val x3249 = x10
val x3250 = x11
val x3251 = new ParseResultAnon6507737(x3248,x3249,x3250)
x3251: ParseResultAnon6507737
}
val x25 = x0.length
val x207 = {x138: (Int) => 
var x140: java.lang.String = null
var x141: Boolean = true
var x142: Int = x138
val x144 = x138 >= x25
val x201 = if (x144) {
x140 = null
x141 = true
x142 = x138
()
} else {
val x150 = x0(x138)
val x151 = x150 == '\\'
val x199 = if (x151) {
val x152 = x138 + 1
val x154 = x152 >= x25
val x193 = if (x154) {
x140 = null
x141 = true
x142 = x152
()
} else {
val x161 = x0(x152)
val x162 = x161 == '\\'
val x163 = x161 == '\''
val x164 = x162 || x163
val x165 = x161 == '"'
val x166 = x164 || x165
val x167 = x161 == 'b'
val x168 = x166 || x167
val x169 = x161 == 'f'
val x170 = x168 || x169
val x171 = x161 == 'n'
val x172 = x170 || x171
val x173 = x161 == 'r'
val x174 = x172 || x173
val x175 = x161 == 't'
val x176 = x174 || x175
val x177 = x161 == '/'
val x178 = x176 || x177
val x191 = if (x178) {
val x181 = ""+x161
x140 = x181
x141 = false
val x179 = x152 + 1
x142 = x179
()
} else {
x140 = null
x141 = true
x142 = x152
()
}
x191
}
x193
} else {
x140 = null
x141 = true
x142 = x138
()
}
x199
}
val x202 = x140
val x203 = x141
val x204 = x142
val x205 = new ParseResultString(x202,x203,x204)
x205: ParseResultString
}
val x321 = {x132: (Int) => 
var x134: java.lang.String = null
var x135: Boolean = true
var x136: Int = x132
val x208 = x207(x132)
val x209 = x208.empty
val x315 = if (x209) {
val x210 = x132 >= x25
val x307 = if (x210) {
x134 = null
x135 = true
x136 = x132
()
} else {
val x216 = x0(x132)
val x217 = x216 == '\\'
val x305 = if (x217) {
val x218 = x132 + 1
val x220 = x218 >= x25
val x299 = if (x220) {
x134 = null
x135 = true
x136 = x132
()
} else {
val x226 = x0(x218)
val x227 = x226 == 'u'
val x297 = if (x227) {
var x231: java.lang.String = ""
var x232: Boolean = false
val x228 = x218 + 1
var x233: Int = x228
var x235: Int = -1
var x236: Boolean = true
var x237: Int = x228
var x238: Int = 0
val x284 = while ({val x239 = x238
val x241 = x235
val x242 = x237
val x245 = x236
val x240 = x239 < 4
val x243 = x241 != x242
val x244 = x240 && x243
val x246 = x244 && x245
x246}) {
val x248 = x237
x235 = x248
val x250 = x248 >= x25
val x282 = if (x250) {
x236 = false
()
} else {
val x254 = x0(x248)
val x255 = x254 >= '0'
val x256 = x254 <= '9'
val x257 = x255 && x256
val x258 = x254 >= 'A'
val x259 = x254 <= 'F'
val x260 = x258 && x259
val x261 = x257 || x260
val x280 = if (x261) {
val x264 = x231
val x265 = x232
val x266 = x233
val x268 = x264+x254
x231 = x268
x232 = false
val x262 = x248 + 1
x233 = x262
x237 = x262
val x274 = x238
val x275 = x274 + 1
x238 = x275
()
} else {
x236 = false
()
}
x280
}
x282
}
val x285 = x231
val x286 = x232
val x287 = x233
x134 = x285
x135 = x286
x136 = x287
()
} else {
x134 = null
x135 = true
x136 = x132
()
}
x297
}
x299
} else {
x134 = null
x135 = true
x136 = x132
()
}
x305
}
x307
} else {
val x309 = x208.res
x134 = x309
x135 = x209
val x312 = x208.next
x136 = x312
()
}
val x316 = x134
val x317 = x135
val x318 = x136
val x319 = new ParseResultString(x316,x317,x318)
x319: ParseResultString
}
val x346 = {x328: (Int) => 
var x330: java.lang.String = null
var x331: Boolean = true
var x332: Int = x328
val x334 = x321(x328)
val x335 = x334.res
x330 = x335
val x337 = x334.empty
x331 = x337
val x339 = x334.next
x332 = x339
val x341 = x330
val x342 = x331
val x343 = x332
val x344 = new ParseResultString(x341,x342,x343)
x344: ParseResultString
}
val x387 = {x322: (Int) => 
var x324: java.lang.String = null
var x325: Boolean = true
var x326: Int = x322
val x347 = x346(x322)
val x348 = x347.empty
val x381 = if (x348) {
val x349 = x322 >= x25
val x373 = if (x349) {
x324 = null
x325 = true
x326 = x322
()
} else {
val x355 = x0(x322)
val x356 = x355 != '"'
val x357 = x355 != '\\'
val x358 = x356 && x357
val x371 = if (x358) {
val x361 = ""+x355
x324 = x361
x325 = false
val x359 = x322 + 1
x326 = x359
()
} else {
x324 = null
x325 = true
x326 = x322
()
}
x371
}
x373
} else {
val x375 = x347.res
x324 = x375
x325 = x348
val x378 = x347.next
x326 = x378
()
}
val x382 = x324
val x383 = x325
val x384 = x326
val x385 = new ParseResultString(x382,x383,x384)
x385: ParseResultString
}
val x89 = List()
val x805 = {x736: (Int) => 
var x738: java.lang.String = null
var x739: Boolean = true
var x740: Int = x736
val x742 = x736 >= x25
val x799 = if (x742) {
x738 = null
x739 = true
x740 = x736
()
} else {
val x748 = x0(x736)
val x749 = x748 == '\\'
val x797 = if (x749) {
val x750 = x736 + 1
val x752 = x750 >= x25
val x791 = if (x752) {
x738 = null
x739 = true
x740 = x750
()
} else {
val x759 = x0(x750)
val x760 = x759 == '\\'
val x761 = x759 == '\''
val x762 = x760 || x761
val x763 = x759 == '"'
val x764 = x762 || x763
val x765 = x759 == 'b'
val x766 = x764 || x765
val x767 = x759 == 'f'
val x768 = x766 || x767
val x769 = x759 == 'n'
val x770 = x768 || x769
val x771 = x759 == 'r'
val x772 = x770 || x771
val x773 = x759 == 't'
val x774 = x772 || x773
val x775 = x759 == '/'
val x776 = x774 || x775
val x789 = if (x776) {
val x779 = ""+x759
x738 = x779
x739 = false
val x777 = x750 + 1
x740 = x777
()
} else {
x738 = null
x739 = true
x740 = x750
()
}
x789
}
x791
} else {
x738 = null
x739 = true
x740 = x736
()
}
x797
}
val x800 = x738
val x801 = x739
val x802 = x740
val x803 = new ParseResultString(x800,x801,x802)
x803: ParseResultString
}
val x919 = {x730: (Int) => 
var x732: java.lang.String = null
var x733: Boolean = true
var x734: Int = x730
val x806 = x805(x730)
val x807 = x806.empty
val x913 = if (x807) {
val x808 = x730 >= x25
val x905 = if (x808) {
x732 = null
x733 = true
x734 = x730
()
} else {
val x814 = x0(x730)
val x815 = x814 == '\\'
val x903 = if (x815) {
val x816 = x730 + 1
val x818 = x816 >= x25
val x897 = if (x818) {
x732 = null
x733 = true
x734 = x730
()
} else {
val x824 = x0(x816)
val x825 = x824 == 'u'
val x895 = if (x825) {
var x829: java.lang.String = ""
var x830: Boolean = false
val x826 = x816 + 1
var x831: Int = x826
var x833: Int = -1
var x834: Boolean = true
var x835: Int = x826
var x836: Int = 0
val x882 = while ({val x837 = x836
val x839 = x833
val x840 = x835
val x843 = x834
val x838 = x837 < 4
val x841 = x839 != x840
val x842 = x838 && x841
val x844 = x842 && x843
x844}) {
val x846 = x835
x833 = x846
val x848 = x846 >= x25
val x880 = if (x848) {
x834 = false
()
} else {
val x852 = x0(x846)
val x853 = x852 >= '0'
val x854 = x852 <= '9'
val x855 = x853 && x854
val x856 = x852 >= 'A'
val x857 = x852 <= 'F'
val x858 = x856 && x857
val x859 = x855 || x858
val x878 = if (x859) {
val x862 = x829
val x863 = x830
val x864 = x831
val x866 = x862+x852
x829 = x866
x830 = false
val x860 = x846 + 1
x831 = x860
x835 = x860
val x872 = x836
val x873 = x872 + 1
x836 = x873
()
} else {
x834 = false
()
}
x878
}
x880
}
val x883 = x829
val x884 = x830
val x885 = x831
x732 = x883
x733 = x884
x734 = x885
()
} else {
x732 = null
x733 = true
x734 = x730
()
}
x895
}
x897
} else {
x732 = null
x733 = true
x734 = x730
()
}
x903
}
x905
} else {
val x907 = x806.res
x732 = x907
x733 = x807
val x910 = x806.next
x734 = x910
()
}
val x914 = x732
val x915 = x733
val x916 = x734
val x917 = new ParseResultString(x914,x915,x916)
x917: ParseResultString
}
val x944 = {x926: (Int) => 
var x928: java.lang.String = null
var x929: Boolean = true
var x930: Int = x926
val x932 = x919(x926)
val x933 = x932.res
x928 = x933
val x935 = x932.empty
x929 = x935
val x937 = x932.next
x930 = x937
val x939 = x928
val x940 = x929
val x941 = x930
val x942 = new ParseResultString(x939,x940,x941)
x942: ParseResultString
}
val x985 = {x920: (Int) => 
var x922: java.lang.String = null
var x923: Boolean = true
var x924: Int = x920
val x945 = x944(x920)
val x946 = x945.empty
val x979 = if (x946) {
val x947 = x920 >= x25
val x971 = if (x947) {
x922 = null
x923 = true
x924 = x920
()
} else {
val x953 = x0(x920)
val x954 = x953 != '"'
val x955 = x953 != '\\'
val x956 = x954 && x955
val x969 = if (x956) {
val x959 = ""+x953
x922 = x959
x923 = false
val x957 = x920 + 1
x924 = x957
()
} else {
x922 = null
x923 = true
x924 = x920
()
}
x969
}
x971
} else {
val x973 = x945.res
x922 = x973
x923 = x946
val x976 = x945.next
x924 = x976
()
}
val x980 = x922
val x981 = x923
val x982 = x924
val x983 = new ParseResultString(x980,x981,x982)
x983: ParseResultString
}
x1272 = {x96: (Int) => 
var x98: scala.collection.immutable.List[Anon6507737] = null
var x99: Boolean = true
var x100: Int = x96
val x102 = x96 >= x25
val x1266 = if (x102) {
x98 = null
x99 = true
x100 = x96
()
} else {
val x112 = x0(x96)
val x113 = x112 == '"'
val x1264 = if (x113) {
var x117: java.lang.String = ""
var x118: Boolean = false
val x114 = x96 + 1
var x119: Int = x114
var x121: Int = -1
var x122: Boolean = true
var x123: Int = x114
val x407 = while ({val x124 = x122
val x125 = x121
val x126 = x123
val x127 = x125 != x126
val x128 = x124 && x127
x128}) {
val x130 = x123
x121 = x130
val x388 = x387(x130)
val x389 = x388.empty
val x405 = if (x389) {
x122 = false
()
} else {
val x392 = x117
val x393 = x118
val x394 = x119
val x396 = x388.res
val x397 = x392+x396
x117 = x397
x118 = false
val x398 = x388.next
x119 = x398
x123 = x398
()
}
x405
}
val x408 = x117
val x409 = x118
val x410 = x119
val x1258 = if (x409) {
x98 = null
x99 = true
x100 = x96
()
} else {
val x416 = x410 >= x25
val x1256 = if (x416) {
x98 = null
x99 = true
x100 = x96
()
} else {
val x422 = x0(x410)
val x423 = x422 == '"'
val x1254 = if (x423) {
var x428: java.lang.String = ""
var x429: Boolean = false
val x424 = x410 + 1
var x430: Int = x424
var x432: Int = -1
var x433: Boolean = true
var x434: Int = x424
val x469 = while ({val x435 = x433
val x436 = x432
val x437 = x434
val x438 = x436 != x437
val x439 = x435 && x438
x439}) {
val x441 = x434
x432 = x441
val x443 = x441 >= x25
val x467 = if (x443) {
x433 = false
()
} else {
val x447 = x0(x441)
val x448 = x447 == ' '
val x449 = x447 == '\n'
val x450 = x448 || x449
val x465 = if (x450) {
val x453 = x428
val x454 = x429
val x455 = x430
x428 = x453
x429 = false
val x451 = x441 + 1
x430 = x451
x434 = x451
()
} else {
x433 = false
()
}
x465
}
x467
}
val x470 = x428
val x471 = x429
val x472 = x430
val x1248 = if (x471) {
x98 = null
x99 = true
x100 = x96
()
} else {
val x478 = x472 >= x25
val x1246 = if (x478) {
x98 = null
x99 = true
x100 = x96
()
} else {
val x486 = x0(x472)
val x487 = x486 == ':'
val x1244 = if (x487) {
var x491: java.lang.String = ""
var x492: Boolean = false
val x488 = x472 + 1
var x493: Int = x488
var x495: Int = -1
var x496: Boolean = true
var x497: Int = x488
val x532 = while ({val x498 = x496
val x499 = x495
val x500 = x497
val x501 = x499 != x500
val x502 = x498 && x501
x502}) {
val x504 = x497
x495 = x504
val x506 = x504 >= x25
val x530 = if (x506) {
x496 = false
()
} else {
val x510 = x0(x504)
val x511 = x510 == ' '
val x512 = x510 == '\n'
val x513 = x511 || x512
val x528 = if (x513) {
val x516 = x491
val x517 = x492
val x518 = x493
x491 = x516
x492 = false
val x514 = x504 + 1
x493 = x514
x497 = x514
()
} else {
x496 = false
()
}
x528
}
x530
}
val x533 = x491
val x534 = x492
val x535 = x493
val x540 = if (x534) {
true
} else {
false
}
val x545 = if (x540) {
true
} else {
false
}
val x550 = if (x545) {
true
} else {
false
}
val x1238 = if (x550) {
x98 = null
x99 = true
x100 = x96
()
} else {
val x551 = if (x545) {
x96
} else {
val x546 = if (x540) {
x424
} else {
val x541 = if (x534) {
x472
} else {
x535
}
x541
}
x546
}
val x557 = x6(x551)
val x558 = x557.empty
val x564 = if (x558) {
true
} else {
false
}
val x571 = if (x564) {
true
} else {
false
}
val x1236 = if (x571) {
x98 = null
x99 = true
x100 = x96
()
} else {
var x579: scala.collection.immutable.List[Anon6507737] = x89
var x580: Boolean = false
val x565 = if (x558) {
x96
} else {
val x561 = x557.next
x561
}
val x572 = if (x564) {
x565
} else {
x565
}
var x581: Int = x572
var x583: Int = -1
var x584: Boolean = true
var x585: Int = x572
val x1212 = while ({val x586 = x584
val x587 = x583
val x588 = x585
val x589 = x587 != x588
val x590 = x586 && x589
x590}) {
val x592 = x585
x583 = x592
var x595: java.lang.String = ""
var x596: Boolean = false
var x597: Int = x592
var x599: Int = -1
var x600: Boolean = true
var x601: Int = x592
val x636 = while ({val x602 = x600
val x603 = x599
val x604 = x601
val x605 = x603 != x604
val x606 = x602 && x605
x606}) {
val x608 = x601
x599 = x608
val x610 = x608 >= x25
val x634 = if (x610) {
x600 = false
()
} else {
val x614 = x0(x608)
val x615 = x614 == ' '
val x616 = x614 == '\n'
val x617 = x615 || x616
val x632 = if (x617) {
val x620 = x595
val x621 = x596
val x622 = x597
x595 = x620
x596 = false
val x618 = x608 + 1
x597 = x618
x601 = x618
()
} else {
x600 = false
()
}
x632
}
x634
}
val x637 = x595
val x638 = x596
val x639 = x597
val x1210 = if (x638) {
x584 = false
()
} else {
val x646 = x639 >= x25
val x1208 = if (x646) {
x584 = false
()
} else {
val x650 = x0(x639)
val x651 = x650 == ','
val x1206 = if (x651) {
var x655: java.lang.String = ""
var x656: Boolean = false
val x652 = x639 + 1
var x657: Int = x652
var x659: Int = -1
var x660: Boolean = true
var x661: Int = x652
val x696 = while ({val x662 = x660
val x663 = x659
val x664 = x661
val x665 = x663 != x664
val x666 = x662 && x665
x666}) {
val x668 = x661
x659 = x668
val x670 = x668 >= x25
val x694 = if (x670) {
x660 = false
()
} else {
val x674 = x0(x668)
val x675 = x674 == ' '
val x676 = x674 == '\n'
val x677 = x675 || x676
val x692 = if (x677) {
val x680 = x655
val x681 = x656
val x682 = x657
x655 = x680
x656 = false
val x678 = x668 + 1
x657 = x678
x661 = x678
()
} else {
x660 = false
()
}
x692
}
x694
}
val x697 = x655
val x698 = x656
val x699 = x657
val x1202 = if (x698) {
x584 = false
()
} else {
val x703 = x699 >= x25
val x1200 = if (x703) {
x584 = false
()
} else {
val x710 = x0(x699)
val x711 = x710 == '"'
val x1198 = if (x711) {
var x715: java.lang.String = ""
var x716: Boolean = false
val x712 = x699 + 1
var x717: Int = x712
var x719: Int = -1
var x720: Boolean = true
var x721: Int = x712
val x1005 = while ({val x722 = x720
val x723 = x719
val x724 = x721
val x725 = x723 != x724
val x726 = x722 && x725
x726}) {
val x728 = x721
x719 = x728
val x986 = x985(x728)
val x987 = x986.empty
val x1003 = if (x987) {
x720 = false
()
} else {
val x990 = x715
val x991 = x716
val x992 = x717
val x994 = x986.res
val x995 = x990+x994
x715 = x995
x716 = false
val x996 = x986.next
x717 = x996
x721 = x996
()
}
x1003
}
val x1006 = x715
val x1007 = x716
val x1008 = x717
val x1194 = if (x1007) {
x584 = false
()
} else {
val x1012 = x1008 >= x25
val x1192 = if (x1012) {
x584 = false
()
} else {
val x1016 = x0(x1008)
val x1017 = x1016 == '"'
val x1190 = if (x1017) {
var x1022: java.lang.String = ""
var x1023: Boolean = false
val x1018 = x1008 + 1
var x1024: Int = x1018
var x1026: Int = -1
var x1027: Boolean = true
var x1028: Int = x1018
val x1063 = while ({val x1029 = x1027
val x1030 = x1026
val x1031 = x1028
val x1032 = x1030 != x1031
val x1033 = x1029 && x1032
x1033}) {
val x1035 = x1028
x1026 = x1035
val x1037 = x1035 >= x25
val x1061 = if (x1037) {
x1027 = false
()
} else {
val x1041 = x0(x1035)
val x1042 = x1041 == ' '
val x1043 = x1041 == '\n'
val x1044 = x1042 || x1043
val x1059 = if (x1044) {
val x1047 = x1022
val x1048 = x1023
val x1049 = x1024
x1022 = x1047
x1023 = false
val x1045 = x1035 + 1
x1024 = x1045
x1028 = x1045
()
} else {
x1027 = false
()
}
x1059
}
x1061
}
val x1064 = x1022
val x1065 = x1023
val x1066 = x1024
val x1186 = if (x1065) {
x584 = false
()
} else {
val x1070 = x1066 >= x25
val x1184 = if (x1070) {
x584 = false
()
} else {
val x1076 = x0(x1066)
val x1077 = x1076 == ':'
val x1182 = if (x1077) {
var x1081: java.lang.String = ""
var x1082: Boolean = false
val x1078 = x1066 + 1
var x1083: Int = x1078
var x1085: Int = -1
var x1086: Boolean = true
var x1087: Int = x1078
val x1122 = while ({val x1088 = x1086
val x1089 = x1085
val x1090 = x1087
val x1091 = x1089 != x1090
val x1092 = x1088 && x1091
x1092}) {
val x1094 = x1087
x1085 = x1094
val x1096 = x1094 >= x25
val x1120 = if (x1096) {
x1086 = false
()
} else {
val x1100 = x0(x1094)
val x1101 = x1100 == ' '
val x1102 = x1100 == '\n'
val x1103 = x1101 || x1102
val x1118 = if (x1103) {
val x1106 = x1081
val x1107 = x1082
val x1108 = x1083
x1081 = x1106
x1082 = false
val x1104 = x1094 + 1
x1083 = x1104
x1087 = x1104
()
} else {
x1086 = false
()
}
x1118
}
x1120
}
val x1123 = x1081
val x1124 = x1082
val x1125 = x1083
val x1130 = if (x1124) {
true
} else {
false
}
val x1135 = if (x1130) {
true
} else {
false
}
val x1140 = if (x1135) {
true
} else {
false
}
val x1178 = if (x1140) {
x584 = false
()
} else {
val x1141 = if (x1135) {
x699
} else {
val x1136 = if (x1130) {
x1018
} else {
val x1131 = if (x1124) {
x1066
} else {
x1125
}
x1131
}
x1136
}
val x1145 = x6(x1141)
val x1146 = x1145.empty
val x1152 = if (x1146) {
true
} else {
false
}
val x1159 = if (x1152) {
true
} else {
false
}
val x1176 = if (x1159) {
x584 = false
()
} else {
val x1164 = x579
val x1165 = x580
val x1166 = x581
val x1158 = if (x1152) {
null
} else {
val x1151 = if (x1146) {
null
} else {
val x1139 = if (x1135) {
null
} else {
x1006
}
val x1147 = x1145.res
val x1148 = new Tuple2StringAnon6507737(x1139,x1147)
x1148
}
val x1156 = new Anon6507737(7,x1151)
x1156
}
val x1168 = List(x1158)
val x1169 = x1164 ::: x1168
x579 = x1169
x580 = false
val x1153 = if (x1146) {
x699
} else {
val x1149 = x1145.next
x1149
}
val x1160 = if (x1152) {
x1153
} else {
x1153
}
x581 = x1160
x585 = x1160
()
}
x1176
}
x1178
} else {
x584 = false
()
}
x1182
}
x1184
}
x1186
} else {
x584 = false
()
}
x1190
}
x1192
}
x1194
} else {
x584 = false
()
}
x1198
}
x1200
}
x1202
} else {
x584 = false
()
}
x1206
}
x1208
}
x1210
}
val x1213 = x579
val x1214 = x580
val x1215 = x581
val x1220 = if (x1214) {
true
} else {
false
}
val x1228 = if (x1220) {
null
} else {
val x1219 = if (x1214) {
null
} else {
val x570 = if (x564) {
null
} else {
val x563 = if (x558) {
null
} else {
val x549 = if (x545) {
null
} else {
x408
}
val x559 = x557.res
val x560 = new Tuple2StringAnon6507737(x549,x559)
x560
}
val x568 = new Anon6507737(7,x563)
x568
}
val x1217 = new Tuple2Anon6507737ListAnon6507737(x570,x1213)
x1217
}
val x1224 = x1219._1
val x1225 = x1219._2
val x1226 = x1224 :: x1225
x1226
}
x98 = x1228
val x1229 = if (x1220) {
true
} else {
false
}
x99 = x1229
val x1221 = if (x1214) {
x96
} else {
x1215
}
val x1230 = if (x1220) {
x1221
} else {
x1221
}
x100 = x1230
()
}
x1236
}
x1238
} else {
x98 = null
x99 = true
x100 = x96
()
}
x1244
}
x1246
}
x1248
} else {
x98 = null
x99 = true
x100 = x96
()
}
x1254
}
x1256
}
x1258
} else {
x98 = null
x99 = true
x100 = x96
()
}
x1264
}
val x1267 = x98
val x1268 = x99
val x1269 = x100
val x1270 = new ParseResultListAnon6507737(x1267,x1268,x1269)
x1270: ParseResultListAnon6507737
}
x1292 = {x90: (Int) => 
var x92: scala.collection.immutable.List[Anon6507737] = null
var x93: Boolean = true
var x94: Int = x90
val x1273 = x1272(x90)
val x1274 = x1273.empty
val x1286 = if (x1274) {
x92 = x89
x93 = false
x94 = x90
()
} else {
val x1280 = x1273.res
x92 = x1280
x93 = x1274
val x1283 = x1273.next
x94 = x1283
()
}
val x1287 = x92
val x1288 = x93
val x1289 = x94
val x1290 = new ParseResultListAnon6507737(x1287,x1288,x1289)
x1290: ParseResultListAnon6507737
}
x1397 = {x19: (Int) => 
var x21: Anon6507737 = null
var x22: Boolean = true
var x23: Int = x19
val x26 = x19 >= x25
val x1391 = if (x26) {
x21 = null
x22 = true
x23 = x19
()
} else {
val x34 = x0(x19)
val x35 = x34 == '{'
val x1389 = if (x35) {
var x39: java.lang.String = ""
var x40: Boolean = false
val x36 = x19 + 1
var x41: Int = x36
var x43: Int = -1
var x44: Boolean = true
var x45: Int = x36
val x80 = while ({val x46 = x44
val x47 = x43
val x48 = x45
val x49 = x47 != x48
val x50 = x46 && x49
x50}) {
val x52 = x45
x43 = x52
val x54 = x52 >= x25
val x78 = if (x54) {
x44 = false
()
} else {
val x58 = x0(x52)
val x59 = x58 == ' '
val x60 = x58 == '\n'
val x61 = x59 || x60
val x76 = if (x61) {
val x64 = x39
val x65 = x40
val x66 = x41
x39 = x64
x40 = false
val x62 = x52 + 1
x41 = x62
x45 = x62
()
} else {
x44 = false
()
}
x76
}
x78
}
val x81 = x39
val x82 = x40
val x83 = x41
val x1383 = if (x82) {
x21 = null
x22 = true
x23 = x19
()
} else {
val x1293 = x1292(x83)
val x1294 = x1293.empty
val x1381 = if (x1294) {
x21 = null
x22 = true
val x1295 = x1293.next
x23 = x1295
()
} else {
var x1302: java.lang.String = ""
var x1303: Boolean = false
val x1295 = x1293.next
var x1304: Int = x1295
var x1306: Int = -1
var x1307: Boolean = true
var x1308: Int = x1295
val x1343 = while ({val x1309 = x1307
val x1310 = x1306
val x1311 = x1308
val x1312 = x1310 != x1311
val x1313 = x1309 && x1312
x1313}) {
val x1315 = x1308
x1306 = x1315
val x1317 = x1315 >= x25
val x1341 = if (x1317) {
x1307 = false
()
} else {
val x1321 = x0(x1315)
val x1322 = x1321 == ' '
val x1323 = x1321 == '\n'
val x1324 = x1322 || x1323
val x1339 = if (x1324) {
val x1327 = x1302
val x1328 = x1303
val x1329 = x1304
x1302 = x1327
x1303 = false
val x1325 = x1315 + 1
x1304 = x1325
x1308 = x1325
()
} else {
x1307 = false
()
}
x1339
}
x1341
}
val x1344 = x1302
val x1345 = x1303
val x1346 = x1304
val x1379 = if (x1345) {
x21 = null
x22 = true
x23 = x19
()
} else {
val x1353 = x1346 >= x25
val x1377 = if (x1353) {
x21 = null
x22 = true
x23 = x19
()
} else {
val x1359 = x0(x1346)
val x1360 = x1359 == '}'
val x1375 = if (x1360) {
val x1363 = x1293.res
val x1365 = new Anon6507737(8,x1363)
x21 = x1365
x22 = false
val x1361 = x1346 + 1
x23 = x1361
()
} else {
x21 = null
x22 = true
x23 = x19
()
}
x1375
}
x1377
}
x1379
}
x1381
}
x1383
} else {
x21 = null
x22 = true
x23 = x19
()
}
x1389
}
val x1392 = x21
val x1393 = x22
val x1394 = x23
val x1395 = new ParseResultAnon6507737(x1392,x1393,x1394)
x1395: ParseResultAnon6507737
}
x1669 = {x1469: (Int) => 
var x1471: scala.collection.immutable.List[Anon6507737] = null
var x1472: Boolean = true
var x1473: Int = x1469
val x1475 = x6(x1469)
val x1476 = x1475.empty
val x1663 = if (x1476) {
x1471 = null
x1472 = true
x1473 = x1469
()
} else {
var x1484: scala.collection.immutable.List[Anon6507737] = x89
var x1485: Boolean = false
val x1482 = x1475.next
var x1486: Int = x1482
var x1488: Int = -1
var x1489: Boolean = true
var x1490: Int = x1482
val x1638 = while ({val x1491 = x1489
val x1492 = x1488
val x1493 = x1490
val x1494 = x1492 != x1493
val x1495 = x1491 && x1494
x1495}) {
val x1497 = x1490
x1488 = x1497
var x1500: java.lang.String = ""
var x1501: Boolean = false
var x1502: Int = x1497
var x1504: Int = -1
var x1505: Boolean = true
var x1506: Int = x1497
val x1541 = while ({val x1507 = x1505
val x1508 = x1504
val x1509 = x1506
val x1510 = x1508 != x1509
val x1511 = x1507 && x1510
x1511}) {
val x1513 = x1506
x1504 = x1513
val x1515 = x1513 >= x25
val x1539 = if (x1515) {
x1505 = false
()
} else {
val x1519 = x0(x1513)
val x1520 = x1519 == ' '
val x1521 = x1519 == '\n'
val x1522 = x1520 || x1521
val x1537 = if (x1522) {
val x1525 = x1500
val x1526 = x1501
val x1527 = x1502
x1500 = x1525
x1501 = false
val x1523 = x1513 + 1
x1502 = x1523
x1506 = x1523
()
} else {
x1505 = false
()
}
x1537
}
x1539
}
val x1542 = x1500
val x1543 = x1501
val x1544 = x1502
val x1636 = if (x1543) {
x1489 = false
()
} else {
val x1551 = x1544 >= x25
val x1634 = if (x1551) {
x1489 = false
()
} else {
val x1555 = x0(x1544)
val x1556 = x1555 == ','
val x1632 = if (x1556) {
var x1560: java.lang.String = ""
var x1561: Boolean = false
val x1557 = x1544 + 1
var x1562: Int = x1557
var x1564: Int = -1
var x1565: Boolean = true
var x1566: Int = x1557
val x1601 = while ({val x1567 = x1565
val x1568 = x1564
val x1569 = x1566
val x1570 = x1568 != x1569
val x1571 = x1567 && x1570
x1571}) {
val x1573 = x1566
x1564 = x1573
val x1575 = x1573 >= x25
val x1599 = if (x1575) {
x1565 = false
()
} else {
val x1579 = x0(x1573)
val x1580 = x1579 == ' '
val x1581 = x1579 == '\n'
val x1582 = x1580 || x1581
val x1597 = if (x1582) {
val x1585 = x1560
val x1586 = x1561
val x1587 = x1562
x1560 = x1585
x1561 = false
val x1583 = x1573 + 1
x1562 = x1583
x1566 = x1583
()
} else {
x1565 = false
()
}
x1597
}
x1599
}
val x1602 = x1560
val x1603 = x1561
val x1604 = x1562
val x1628 = if (x1603) {
x1489 = false
()
} else {
val x1608 = x6(x1604)
val x1609 = x1608.empty
val x1626 = if (x1609) {
x1489 = false
()
} else {
val x1612 = x1484
val x1613 = x1485
val x1614 = x1486
val x1616 = x1608.res
val x1617 = List(x1616)
val x1618 = x1612 ::: x1617
x1484 = x1618
x1485 = false
val x1619 = x1608.next
x1486 = x1619
x1490 = x1619
()
}
x1626
}
x1628
} else {
x1489 = false
()
}
x1632
}
x1634
}
x1636
}
val x1639 = x1484
val x1640 = x1485
val x1641 = x1486
val x1647 = if (x1640) {
true
} else {
false
}
val x1655 = if (x1647) {
null
} else {
val x1646 = if (x1640) {
null
} else {
val x1643 = x1475.res
val x1644 = new Tuple2Anon6507737ListAnon6507737(x1643,x1639)
x1644
}
val x1651 = x1646._1
val x1652 = x1646._2
val x1653 = x1651 :: x1652
x1653
}
x1471 = x1655
val x1656 = if (x1647) {
true
} else {
false
}
x1472 = x1656
val x1648 = if (x1640) {
x1469
} else {
x1641
}
val x1657 = if (x1647) {
x1648
} else {
x1648
}
x1473 = x1657
()
}
val x1664 = x1471
val x1665 = x1472
val x1666 = x1473
val x1667 = new ParseResultListAnon6507737(x1664,x1665,x1666)
x1667: ParseResultListAnon6507737
}
x1689 = {x1463: (Int) => 
var x1465: scala.collection.immutable.List[Anon6507737] = null
var x1466: Boolean = true
var x1467: Int = x1463
val x1670 = x1669(x1463)
val x1671 = x1670.empty
val x1683 = if (x1671) {
x1465 = x89
x1466 = false
x1467 = x1463
()
} else {
val x1677 = x1670.res
x1465 = x1677
x1466 = x1671
val x1680 = x1670.next
x1467 = x1680
()
}
val x1684 = x1465
val x1685 = x1466
val x1686 = x1467
val x1687 = new ParseResultListAnon6507737(x1684,x1685,x1686)
x1687: ParseResultListAnon6507737
}
x1803 = {x13: (Int) => 
var x15: Anon6507737 = null
var x16: Boolean = true
var x17: Int = x13
val x1398 = x1397(x13)
val x1399 = x1398.empty
val x1797 = if (x1399) {
val x1400 = x13 >= x25
val x1789 = if (x1400) {
x15 = null
x16 = true
x17 = x13
()
} else {
val x1408 = x0(x13)
val x1409 = x1408 == '['
val x1787 = if (x1409) {
var x1413: java.lang.String = ""
var x1414: Boolean = false
val x1410 = x13 + 1
var x1415: Int = x1410
var x1417: Int = -1
var x1418: Boolean = true
var x1419: Int = x1410
val x1454 = while ({val x1420 = x1418
val x1421 = x1417
val x1422 = x1419
val x1423 = x1421 != x1422
val x1424 = x1420 && x1423
x1424}) {
val x1426 = x1419
x1417 = x1426
val x1428 = x1426 >= x25
val x1452 = if (x1428) {
x1418 = false
()
} else {
val x1432 = x0(x1426)
val x1433 = x1432 == ' '
val x1434 = x1432 == '\n'
val x1435 = x1433 || x1434
val x1450 = if (x1435) {
val x1438 = x1413
val x1439 = x1414
val x1440 = x1415
x1413 = x1438
x1414 = false
val x1436 = x1426 + 1
x1415 = x1436
x1419 = x1436
()
} else {
x1418 = false
()
}
x1450
}
x1452
}
val x1455 = x1413
val x1456 = x1414
val x1457 = x1415
val x1781 = if (x1456) {
x15 = null
x16 = true
x17 = x13
()
} else {
val x1690 = x1689(x1457)
val x1691 = x1690.empty
val x1779 = if (x1691) {
x15 = null
x16 = true
val x1692 = x1690.next
x17 = x1692
()
} else {
var x1699: java.lang.String = ""
var x1700: Boolean = false
val x1692 = x1690.next
var x1701: Int = x1692
var x1703: Int = -1
var x1704: Boolean = true
var x1705: Int = x1692
val x1740 = while ({val x1706 = x1704
val x1707 = x1703
val x1708 = x1705
val x1709 = x1707 != x1708
val x1710 = x1706 && x1709
x1710}) {
val x1712 = x1705
x1703 = x1712
val x1714 = x1712 >= x25
val x1738 = if (x1714) {
x1704 = false
()
} else {
val x1718 = x0(x1712)
val x1719 = x1718 == ' '
val x1720 = x1718 == '\n'
val x1721 = x1719 || x1720
val x1736 = if (x1721) {
val x1724 = x1699
val x1725 = x1700
val x1726 = x1701
x1699 = x1724
x1700 = false
val x1722 = x1712 + 1
x1701 = x1722
x1705 = x1722
()
} else {
x1704 = false
()
}
x1736
}
x1738
}
val x1741 = x1699
val x1742 = x1700
val x1743 = x1701
val x1777 = if (x1742) {
x15 = null
x16 = true
x17 = x13
()
} else {
val x1750 = x1743 >= x25
val x1775 = if (x1750) {
x15 = null
x16 = true
x17 = x13
()
} else {
val x1756 = x0(x1743)
val x1757 = x1756 == ']'
val x1773 = if (x1757) {
val x1760 = x1690.res
val x1762 = x1760.asInstanceOf[scala.collection.immutable.List[Anon6507737]]
val x1763 = new Anon6507737(6,x1762)
x15 = x1763
x16 = false
val x1758 = x1743 + 1
x17 = x1758
()
} else {
x15 = null
x16 = true
x17 = x13
()
}
x1773
}
x1775
}
x1777
}
x1779
}
x1781
} else {
x15 = null
x16 = true
x17 = x13
()
}
x1787
}
x1789
} else {
val x1791 = x1398.res
x15 = x1791
x16 = x1399
val x1794 = x1398.next
x17 = x1794
()
}
val x1798 = x15
val x1799 = x16
val x1800 = x17
val x1801 = new ParseResultAnon6507737(x1798,x1799,x1800)
x1801: ParseResultAnon6507737
}
x3217 = {x3199: (Int) => 
var x3201: Anon6507737 = null
var x3202: Boolean = true
var x3203: Int = x3199
val x3205 = x1803(x3199)
val x3206 = x3205.res
x3201 = x3206
val x3208 = x3205.empty
x3202 = x3208
val x3210 = x3205.next
x3203 = x3210
val x3212 = x3201
val x3213 = x3202
val x3214 = x3203
val x3215 = new ParseResultAnon6507737(x3212,x3213,x3214)
x3215: ParseResultAnon6507737
}
val x1804 = px1804 // static data: 5
val x1805 = px1805 // static data: Array(f,a,l,s,e)
val x1806 = new Anon6507737(1,null)
val x1868 = {x1816: (Int) => 
var x1818: Anon6507737 = null
var x1819: Boolean = true
var x1820: Int = x1816
val x1822 = x1816 + x1804
val x1823 = x1822 > x25
val x1862 = if (x1823) {
x1818 = null
x1819 = true
x1820 = x1816
()
} else {
var x1829: Int = 0
var x1830: Boolean = true
val x1848 = while ({val x1831 = x1830
val x1832 = x1829
val x1833 = x1832 < x1804
val x1834 = x1831 && x1833
x1834}) {
val x1836 = x1829
val x1837 = x1816 + x1836
val x1838 = x0(x1837)
val x1839 = x1805(x1836)
val x1841 = x1838 == x1839
val x1844 = if (x1841) {
()
} else {
x1830 = false
()
}
val x1845 = x1836 + 1
x1829 = x1845
()
}
val x1849 = x1830
val x1860 = if (x1849) {
x1818 = x1806
x1819 = false
x1820 = x1822
()
} else {
x1818 = null
x1819 = true
x1820 = x1816
()
}
x1860
}
val x1863 = x1818
val x1864 = x1819
val x1865 = x1820
val x1866 = new ParseResultAnon6507737(x1863,x1864,x1865)
x1866: ParseResultAnon6507737
}
val x1807 = px1807 // static data: 4
val x1808 = px1808 // static data: Array(t,r,u,e)
val x1809 = new Anon6507737(2,null)
val x1925 = {x1810: (Int) => 
var x1812: Anon6507737 = null
var x1813: Boolean = true
var x1814: Int = x1810
val x1869 = x1868(x1810)
val x1870 = x1869.empty
val x1919 = if (x1870) {
val x1871 = x1810 + x1807
val x1872 = x1871 > x25
val x1911 = if (x1872) {
x1812 = null
x1813 = true
x1814 = x1810
()
} else {
var x1878: Int = 0
var x1879: Boolean = true
val x1897 = while ({val x1880 = x1879
val x1881 = x1878
val x1882 = x1881 < x1807
val x1883 = x1880 && x1882
x1883}) {
val x1885 = x1878
val x1886 = x1810 + x1885
val x1887 = x0(x1886)
val x1888 = x1808(x1885)
val x1890 = x1887 == x1888
val x1893 = if (x1890) {
()
} else {
x1879 = false
()
}
val x1894 = x1885 + 1
x1878 = x1894
()
}
val x1898 = x1879
val x1909 = if (x1898) {
x1812 = x1809
x1813 = false
x1814 = x1871
()
} else {
x1812 = null
x1813 = true
x1814 = x1810
()
}
x1909
}
x1911
} else {
val x1913 = x1869.res
x1812 = x1913
x1813 = x1870
val x1916 = x1869.next
x1814 = x1916
()
}
val x1920 = x1812
val x1921 = x1813
val x1922 = x1814
val x1923 = new ParseResultAnon6507737(x1920,x1921,x1922)
x1923: ParseResultAnon6507737
}
val x1952 = {x1934: (Int) => 
var x1936: Anon6507737 = null
var x1937: Boolean = true
var x1938: Int = x1934
val x1940 = x1925(x1934)
val x1941 = x1940.res
x1936 = x1941
val x1943 = x1940.empty
x1937 = x1943
val x1945 = x1940.next
x1938 = x1945
val x1947 = x1936
val x1948 = x1937
val x1949 = x1938
val x1950 = new ParseResultAnon6507737(x1947,x1948,x1949)
x1950: ParseResultAnon6507737
}
val x1926 = px1926 // static data: Array(n,u,l,l)
val x1927 = new Anon6507737(0,null)
val x2009 = {x1928: (Int) => 
var x1930: Anon6507737 = null
var x1931: Boolean = true
var x1932: Int = x1928
val x1953 = x1952(x1928)
val x1954 = x1953.empty
val x2003 = if (x1954) {
val x1955 = x1928 + x1807
val x1956 = x1955 > x25
val x1995 = if (x1956) {
x1930 = null
x1931 = true
x1932 = x1928
()
} else {
var x1962: Int = 0
var x1963: Boolean = true
val x1981 = while ({val x1964 = x1963
val x1965 = x1962
val x1966 = x1965 < x1807
val x1967 = x1964 && x1966
x1967}) {
val x1969 = x1962
val x1970 = x1928 + x1969
val x1971 = x0(x1970)
val x1972 = x1926(x1969)
val x1974 = x1971 == x1972
val x1977 = if (x1974) {
()
} else {
x1963 = false
()
}
val x1978 = x1969 + 1
x1962 = x1978
()
}
val x1982 = x1963
val x1993 = if (x1982) {
x1930 = x1927
x1931 = false
x1932 = x1955
()
} else {
x1930 = null
x1931 = true
x1932 = x1928
()
}
x1993
}
x1995
} else {
val x1997 = x1953.res
x1930 = x1997
x1931 = x1954
val x2000 = x1953.next
x1932 = x2000
()
}
val x2004 = x1930
val x2005 = x1931
val x2006 = x1932
val x2007 = new ParseResultAnon6507737(x2004,x2005,x2006)
x2007: ParseResultAnon6507737
}
val x2034 = {x2016: (Int) => 
var x2018: Anon6507737 = null
var x2019: Boolean = true
var x2020: Int = x2016
val x2022 = x2009(x2016)
val x2023 = x2022.res
x2018 = x2023
val x2025 = x2022.empty
x2019 = x2025
val x2027 = x2022.next
x2020 = x2027
val x2029 = x2018
val x2030 = x2019
val x2031 = x2020
val x2032 = new ParseResultAnon6507737(x2029,x2030,x2031)
x2032: ParseResultAnon6507737
}
val x2039 = null.asInstanceOf[Char]
val x2040 = new OptionChar(x2039,false)
val x2542 = {x2010: (Int) => 
var x2012: Anon6507737 = null
var x2013: Boolean = true
var x2014: Int = x2010
val x2035 = x2034(x2010)
val x2036 = x2035.empty
val x2536 = if (x2036) {
val x2037 = x2010 >= x25
val x2528 = if (x2037) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2051 = x0(x2010)
val x2052 = x2051 == '-'
val x2526 = if (x2052) {
val x2053 = x2010 + 1
val x2057 = x2053 >= x25
val x2296 = if (x2057) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2065 = x0(x2053)
val x2066 = x2065 >= '0'
val x2067 = x2065 <= '9'
val x2068 = x2066 && x2067
val x2294 = if (x2068) {
var x2072: java.lang.String = ""
var x2073: Boolean = false
val x2069 = x2053 + 1
var x2074: Int = x2069
var x2076: Int = -1
var x2077: Boolean = true
var x2078: Int = x2069
val x2114 = while ({val x2079 = x2077
val x2080 = x2076
val x2081 = x2078
val x2082 = x2080 != x2081
val x2083 = x2079 && x2082
x2083}) {
val x2085 = x2078
x2076 = x2085
val x2087 = x2085 >= x25
val x2112 = if (x2087) {
x2077 = false
()
} else {
val x2091 = x0(x2085)
val x2092 = x2091 >= '0'
val x2093 = x2091 <= '9'
val x2094 = x2092 && x2093
val x2110 = if (x2094) {
val x2097 = x2072
val x2098 = x2073
val x2099 = x2074
val x2101 = x2097+x2091
x2072 = x2101
x2073 = false
val x2095 = x2085 + 1
x2074 = x2095
x2078 = x2095
()
} else {
x2077 = false
()
}
x2110
}
x2112
}
val x2115 = x2072
val x2116 = x2073
val x2117 = x2074
val x2122 = if (x2116) {
true
} else {
false
}
val x2131 = if (x2122) {
true
} else {
false
}
val x2137 = if (x2131) {
true
} else {
false
}
val x2149 = if (x2137) {
true
} else {
false
}
val x2288 = if (x2149) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2138 = if (x2131) {
x2010
} else {
val x2123 = if (x2116) {
x2053
} else {
x2117
}
val x2132 = if (x2122) {
x2123
} else {
x2123
}
x2132
}
val x2150 = if (x2137) {
x2138
} else {
x2138
}
val x2156 = x2150 >= x25
val x2286 = if (x2156) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2163 = x0(x2150)
val x2164 = x2163 == '.'
val x2284 = if (x2164) {
val x2165 = x2150 + 1
val x2167 = x2165 >= x25
val x2278 = if (x2167) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2175 = x0(x2165)
val x2176 = x2175 >= '0'
val x2177 = x2175 <= '9'
val x2178 = x2176 && x2177
val x2276 = if (x2178) {
var x2182: java.lang.String = ""
var x2183: Boolean = false
val x2179 = x2165 + 1
var x2184: Int = x2179
var x2186: Int = -1
var x2187: Boolean = true
var x2188: Int = x2179
val x2224 = while ({val x2189 = x2187
val x2190 = x2186
val x2191 = x2188
val x2192 = x2190 != x2191
val x2193 = x2189 && x2192
x2193}) {
val x2195 = x2188
x2186 = x2195
val x2197 = x2195 >= x25
val x2222 = if (x2197) {
x2187 = false
()
} else {
val x2201 = x0(x2195)
val x2202 = x2201 >= '0'
val x2203 = x2201 <= '9'
val x2204 = x2202 && x2203
val x2220 = if (x2204) {
val x2207 = x2182
val x2208 = x2183
val x2209 = x2184
val x2211 = x2207+x2201
x2182 = x2211
x2183 = false
val x2205 = x2195 + 1
x2184 = x2205
x2188 = x2205
()
} else {
x2187 = false
()
}
x2220
}
x2222
}
val x2225 = x2182
val x2226 = x2183
val x2227 = x2184
val x2232 = if (x2226) {
true
} else {
false
}
val x2241 = if (x2232) {
true
} else {
false
}
val x2247 = if (x2241) {
true
} else {
false
}
val x2258 = if (x2247) {
true
} else {
false
}
val x2264 = if (x2258) {
null
} else {
val x2257 = if (x2247) {
0.0
} else {
val x2246 = if (x2241) {
null
} else {
val x2148 = if (x2137) {
null
} else {
val x2136 = if (x2131) {
null
} else {
val x2055 = new OptionChar(x2051,true)
val x2130 = if (x2122) {
null
} else {
val x2121 = if (x2116) {
null
} else {
val x2119 = new Tuple2CharString(x2065,x2115)
x2119
}
val x2126 = x2121._1
val x2127 = x2121._2
val x2128 = x2126+x2127
x2128
}
val x2134 = new Tuple2OptionCharString(x2055,x2130)
x2134
}
val x2141 = x2136._1
val x2143 = x2141.defined
val x2146 = if (x2143) {
val x2142 = x2136._2
val x2144 = x2141.value
val x2145 = x2144+x2142
x2145
} else {
val x2142 = x2136._2
x2142
}
x2146
}
val x2240 = if (x2232) {
null
} else {
val x2231 = if (x2226) {
null
} else {
val x2229 = new Tuple2CharString(x2175,x2225)
x2229
}
val x2236 = x2231._1
val x2237 = x2231._2
val x2238 = x2236+x2237
x2238
}
val x2244 = new Tuple2StringString(x2148,x2240)
x2244
}
val x2252 = x2246._2
val x2251 = x2246._1
val x2253 = x2251+"."
val x2254 = x2253+x2252
val x2255 = x2254.toDouble
x2255
}
val x2262 = new Anon6507737(4,x2257)
x2262
}
x2012 = x2264
val x2265 = if (x2258) {
true
} else {
false
}
x2013 = x2265
val x2248 = if (x2241) {
x2010
} else {
val x2233 = if (x2226) {
x2165
} else {
x2227
}
val x2242 = if (x2232) {
x2233
} else {
x2233
}
x2242
}
val x2259 = if (x2247) {
x2248
} else {
x2248
}
val x2266 = if (x2258) {
x2259
} else {
x2259
}
x2014 = x2266
()
} else {
x2012 = null
x2013 = true
x2014 = x2010
()
}
x2276
}
x2278
} else {
x2012 = null
x2013 = true
x2014 = x2010
()
}
x2284
}
x2286
}
x2288
} else {
x2012 = null
x2013 = true
x2014 = x2010
()
}
x2294
}
x2296
} else {
val x2298 = x2051 >= '0'
val x2299 = x2051 <= '9'
val x2300 = x2298 && x2299
val x2524 = if (x2300) {
var x2302: java.lang.String = ""
var x2303: Boolean = false
val x2053 = x2010 + 1
var x2304: Int = x2053
var x2306: Int = -1
var x2307: Boolean = true
var x2308: Int = x2053
val x2344 = while ({val x2309 = x2307
val x2310 = x2306
val x2311 = x2308
val x2312 = x2310 != x2311
val x2313 = x2309 && x2312
x2313}) {
val x2315 = x2308
x2306 = x2315
val x2317 = x2315 >= x25
val x2342 = if (x2317) {
x2307 = false
()
} else {
val x2321 = x0(x2315)
val x2322 = x2321 >= '0'
val x2323 = x2321 <= '9'
val x2324 = x2322 && x2323
val x2340 = if (x2324) {
val x2327 = x2302
val x2328 = x2303
val x2329 = x2304
val x2331 = x2327+x2321
x2302 = x2331
x2303 = false
val x2325 = x2315 + 1
x2304 = x2325
x2308 = x2325
()
} else {
x2307 = false
()
}
x2340
}
x2342
}
val x2345 = x2302
val x2346 = x2303
val x2347 = x2304
val x2352 = if (x2346) {
true
} else {
false
}
val x2361 = if (x2352) {
true
} else {
false
}
val x2367 = if (x2361) {
true
} else {
false
}
val x2379 = if (x2367) {
true
} else {
false
}
val x2518 = if (x2379) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2368 = if (x2361) {
x2010
} else {
val x2353 = if (x2346) {
x2010
} else {
x2347
}
val x2362 = if (x2352) {
x2353
} else {
x2353
}
x2362
}
val x2380 = if (x2367) {
x2368
} else {
x2368
}
val x2386 = x2380 >= x25
val x2516 = if (x2386) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2393 = x0(x2380)
val x2394 = x2393 == '.'
val x2514 = if (x2394) {
val x2395 = x2380 + 1
val x2397 = x2395 >= x25
val x2508 = if (x2397) {
x2012 = null
x2013 = true
x2014 = x2010
()
} else {
val x2405 = x0(x2395)
val x2406 = x2405 >= '0'
val x2407 = x2405 <= '9'
val x2408 = x2406 && x2407
val x2506 = if (x2408) {
var x2412: java.lang.String = ""
var x2413: Boolean = false
val x2409 = x2395 + 1
var x2414: Int = x2409
var x2416: Int = -1
var x2417: Boolean = true
var x2418: Int = x2409
val x2454 = while ({val x2419 = x2417
val x2420 = x2416
val x2421 = x2418
val x2422 = x2420 != x2421
val x2423 = x2419 && x2422
x2423}) {
val x2425 = x2418
x2416 = x2425
val x2427 = x2425 >= x25
val x2452 = if (x2427) {
x2417 = false
()
} else {
val x2431 = x0(x2425)
val x2432 = x2431 >= '0'
val x2433 = x2431 <= '9'
val x2434 = x2432 && x2433
val x2450 = if (x2434) {
val x2437 = x2412
val x2438 = x2413
val x2439 = x2414
val x2441 = x2437+x2431
x2412 = x2441
x2413 = false
val x2435 = x2425 + 1
x2414 = x2435
x2418 = x2435
()
} else {
x2417 = false
()
}
x2450
}
x2452
}
val x2455 = x2412
val x2456 = x2413
val x2457 = x2414
val x2462 = if (x2456) {
true
} else {
false
}
val x2471 = if (x2462) {
true
} else {
false
}
val x2477 = if (x2471) {
true
} else {
false
}
val x2488 = if (x2477) {
true
} else {
false
}
val x2494 = if (x2488) {
null
} else {
val x2487 = if (x2477) {
0.0
} else {
val x2476 = if (x2471) {
null
} else {
val x2378 = if (x2367) {
null
} else {
val x2366 = if (x2361) {
null
} else {
val x2360 = if (x2352) {
null
} else {
val x2351 = if (x2346) {
null
} else {
val x2349 = new Tuple2CharString(x2051,x2345)
x2349
}
val x2356 = x2351._1
val x2357 = x2351._2
val x2358 = x2356+x2357
x2358
}
val x2364 = new Tuple2OptionCharString(x2040,x2360)
x2364
}
val x2371 = x2366._1
val x2373 = x2371.defined
val x2376 = if (x2373) {
val x2372 = x2366._2
val x2374 = x2371.value
val x2375 = x2374+x2372
x2375
} else {
val x2372 = x2366._2
x2372
}
x2376
}
val x2470 = if (x2462) {
null
} else {
val x2461 = if (x2456) {
null
} else {
val x2459 = new Tuple2CharString(x2405,x2455)
x2459
}
val x2466 = x2461._1
val x2467 = x2461._2
val x2468 = x2466+x2467
x2468
}
val x2474 = new Tuple2StringString(x2378,x2470)
x2474
}
val x2482 = x2476._2
val x2481 = x2476._1
val x2483 = x2481+"."
val x2484 = x2483+x2482
val x2485 = x2484.toDouble
x2485
}
val x2492 = new Anon6507737(4,x2487)
x2492
}
x2012 = x2494
val x2495 = if (x2488) {
true
} else {
false
}
x2013 = x2495
val x2478 = if (x2471) {
x2010
} else {
val x2463 = if (x2456) {
x2395
} else {
x2457
}
val x2472 = if (x2462) {
x2463
} else {
x2463
}
x2472
}
val x2489 = if (x2477) {
x2478
} else {
x2478
}
val x2496 = if (x2488) {
x2489
} else {
x2489
}
x2014 = x2496
()
} else {
x2012 = null
x2013 = true
x2014 = x2010
()
}
x2506
}
x2508
} else {
x2012 = null
x2013 = true
x2014 = x2010
()
}
x2514
}
x2516
}
x2518
} else {
x2012 = null
x2013 = true
x2014 = x2010
()
}
x2524
}
x2526
}
x2528
} else {
val x2530 = x2035.res
x2012 = x2530
x2013 = x2036
val x2533 = x2035.next
x2014 = x2533
()
}
val x2537 = x2012
val x2538 = x2013
val x2539 = x2014
val x2540 = new ParseResultAnon6507737(x2537,x2538,x2539)
x2540: ParseResultAnon6507737
}
val x2567 = {x2549: (Int) => 
var x2551: Anon6507737 = null
var x2552: Boolean = true
var x2553: Int = x2549
val x2555 = x2542(x2549)
val x2556 = x2555.res
x2551 = x2556
val x2558 = x2555.empty
x2552 = x2558
val x2560 = x2555.next
x2553 = x2560
val x2562 = x2551
val x2563 = x2552
val x2564 = x2553
val x2565 = new ParseResultAnon6507737(x2562,x2563,x2564)
x2565: ParseResultAnon6507737
}
val x2805 = {x2543: (Int) => 
var x2545: Anon6507737 = null
var x2546: Boolean = true
var x2547: Int = x2543
val x2568 = x2567(x2543)
val x2569 = x2568.empty
val x2799 = if (x2569) {
val x2570 = x2543 >= x25
val x2791 = if (x2570) {
x2545 = null
x2546 = true
x2547 = x2543
()
} else {
val x2579 = x0(x2543)
val x2580 = x2579 == '-'
val x2789 = if (x2580) {
val x2581 = x2543 + 1
val x2585 = x2581 >= x25
val x2691 = if (x2585) {
x2545 = null
x2546 = true
x2547 = x2543
()
} else {
val x2592 = x0(x2581)
val x2593 = x2592 >= '0'
val x2594 = x2592 <= '9'
val x2595 = x2593 && x2594
val x2689 = if (x2595) {
val x2598 = x2592 - '0'
val x2599 = x2598.toInt
var x2601: Int = x2599
var x2602: Boolean = false
val x2596 = x2581 + 1
var x2603: Int = x2596
var x2605: Int = -1
var x2606: Boolean = true
var x2607: Int = x2596
val x2648 = while ({val x2608 = x2606
val x2609 = x2605
val x2610 = x2607
val x2611 = x2609 != x2610
val x2612 = x2608 && x2611
x2612}) {
val x2614 = x2607
x2605 = x2614
val x2616 = x2614 >= x25
val x2646 = if (x2616) {
x2606 = false
()
} else {
val x2621 = x0(x2614)
val x2622 = x2621 >= '0'
val x2623 = x2621 <= '9'
val x2624 = x2622 && x2623
val x2644 = if (x2624) {
val x2630 = x2601
val x2631 = x2602
val x2632 = x2603
val x2627 = x2621 - '0'
val x2628 = x2627.toInt
val x2634 = x2630 * 10
val x2635 = x2634 + x2628
x2601 = x2635
x2602 = false
val x2625 = x2614 + 1
x2603 = x2625
x2607 = x2625
()
} else {
x2606 = false
()
}
x2644
}
x2646
}
val x2649 = x2601
val x2650 = x2602
val x2651 = x2603
val x2654 = if (x2650) {
true
} else {
x2650
}
val x2660 = if (x2654) {
true
} else {
false
}
val x2671 = if (x2660) {
true
} else {
false
}
val x2677 = if (x2671) {
null
} else {
val x2670 = if (x2660) {
0
} else {
val x2659 = if (x2654) {
null
} else {
val x2583 = new OptionChar(x2579,true)
val x2653 = if (x2650) {
0
} else {
x2649
}
val x2657 = new Tuple2OptionCharInt(x2583,x2653)
x2657
}
val x2664 = x2659._1
val x2666 = x2664.defined
val x2668 = if (x2666) {
val x2665 = x2659._2
val x2667 = -1 * x2665
x2667
} else {
val x2665 = x2659._2
x2665
}
x2668
}
val x2675 = new Anon6507737(3,x2670)
x2675
}
x2545 = x2677
val x2678 = if (x2671) {
true
} else {
false
}
x2546 = x2678
val x2661 = if (x2654) {
x2543
} else {
val x2655 = if (x2650) {
x2581
} else {
x2651
}
x2655
}
val x2672 = if (x2660) {
x2661
} else {
x2661
}
val x2679 = if (x2671) {
x2672
} else {
x2672
}
x2547 = x2679
()
} else {
x2545 = null
x2546 = true
x2547 = x2543
()
}
x2689
}
x2691
} else {
val x2693 = x2579 >= '0'
val x2694 = x2579 <= '9'
val x2695 = x2693 && x2694
val x2787 = if (x2695) {
val x2696 = x2579 - '0'
val x2697 = x2696.toInt
var x2699: Int = x2697
var x2700: Boolean = false
val x2581 = x2543 + 1
var x2701: Int = x2581
var x2703: Int = -1
var x2704: Boolean = true
var x2705: Int = x2581
val x2746 = while ({val x2706 = x2704
val x2707 = x2703
val x2708 = x2705
val x2709 = x2707 != x2708
val x2710 = x2706 && x2709
x2710}) {
val x2712 = x2705
x2703 = x2712
val x2714 = x2712 >= x25
val x2744 = if (x2714) {
x2704 = false
()
} else {
val x2719 = x0(x2712)
val x2720 = x2719 >= '0'
val x2721 = x2719 <= '9'
val x2722 = x2720 && x2721
val x2742 = if (x2722) {
val x2728 = x2699
val x2729 = x2700
val x2730 = x2701
val x2725 = x2719 - '0'
val x2726 = x2725.toInt
val x2732 = x2728 * 10
val x2733 = x2732 + x2726
x2699 = x2733
x2700 = false
val x2723 = x2712 + 1
x2701 = x2723
x2705 = x2723
()
} else {
x2704 = false
()
}
x2742
}
x2744
}
val x2747 = x2699
val x2748 = x2700
val x2749 = x2701
val x2752 = if (x2748) {
true
} else {
x2748
}
val x2758 = if (x2752) {
true
} else {
false
}
val x2769 = if (x2758) {
true
} else {
false
}
val x2775 = if (x2769) {
null
} else {
val x2768 = if (x2758) {
0
} else {
val x2757 = if (x2752) {
null
} else {
val x2751 = if (x2748) {
0
} else {
x2747
}
val x2755 = new Tuple2OptionCharInt(x2040,x2751)
x2755
}
val x2762 = x2757._1
val x2764 = x2762.defined
val x2766 = if (x2764) {
val x2763 = x2757._2
val x2765 = -1 * x2763
x2765
} else {
val x2763 = x2757._2
x2763
}
x2766
}
val x2773 = new Anon6507737(3,x2768)
x2773
}
x2545 = x2775
val x2776 = if (x2769) {
true
} else {
false
}
x2546 = x2776
val x2759 = if (x2752) {
x2543
} else {
val x2753 = if (x2748) {
x2543
} else {
x2749
}
x2753
}
val x2770 = if (x2758) {
x2759
} else {
x2759
}
val x2777 = if (x2769) {
x2770
} else {
x2770
}
x2547 = x2777
()
} else {
x2545 = null
x2546 = true
x2547 = x2543
()
}
x2787
}
x2789
}
x2791
} else {
val x2793 = x2568.res
x2545 = x2793
x2546 = x2569
val x2796 = x2568.next
x2547 = x2796
()
}
val x2800 = x2545
val x2801 = x2546
val x2802 = x2547
val x2803 = new ParseResultAnon6507737(x2800,x2801,x2802)
x2803: ParseResultAnon6507737
}
val x2830 = {x2812: (Int) => 
var x2814: Anon6507737 = null
var x2815: Boolean = true
var x2816: Int = x2812
val x2818 = x2805(x2812)
val x2819 = x2818.res
x2814 = x2819
val x2821 = x2818.empty
x2815 = x2821
val x2823 = x2818.next
x2816 = x2823
val x2825 = x2814
val x2826 = x2815
val x2827 = x2816
val x2828 = new ParseResultAnon6507737(x2825,x2826,x2827)
x2828: ParseResultAnon6507737
}
val x2935 = {x2866: (Int) => 
var x2868: java.lang.String = null
var x2869: Boolean = true
var x2870: Int = x2866
val x2872 = x2866 >= x25
val x2929 = if (x2872) {
x2868 = null
x2869 = true
x2870 = x2866
()
} else {
val x2878 = x0(x2866)
val x2879 = x2878 == '\\'
val x2927 = if (x2879) {
val x2880 = x2866 + 1
val x2882 = x2880 >= x25
val x2921 = if (x2882) {
x2868 = null
x2869 = true
x2870 = x2880
()
} else {
val x2889 = x0(x2880)
val x2890 = x2889 == '\\'
val x2891 = x2889 == '\''
val x2892 = x2890 || x2891
val x2893 = x2889 == '"'
val x2894 = x2892 || x2893
val x2895 = x2889 == 'b'
val x2896 = x2894 || x2895
val x2897 = x2889 == 'f'
val x2898 = x2896 || x2897
val x2899 = x2889 == 'n'
val x2900 = x2898 || x2899
val x2901 = x2889 == 'r'
val x2902 = x2900 || x2901
val x2903 = x2889 == 't'
val x2904 = x2902 || x2903
val x2905 = x2889 == '/'
val x2906 = x2904 || x2905
val x2919 = if (x2906) {
val x2909 = ""+x2889
x2868 = x2909
x2869 = false
val x2907 = x2880 + 1
x2870 = x2907
()
} else {
x2868 = null
x2869 = true
x2870 = x2880
()
}
x2919
}
x2921
} else {
x2868 = null
x2869 = true
x2870 = x2866
()
}
x2927
}
val x2930 = x2868
val x2931 = x2869
val x2932 = x2870
val x2933 = new ParseResultString(x2930,x2931,x2932)
x2933: ParseResultString
}
val x3049 = {x2860: (Int) => 
var x2862: java.lang.String = null
var x2863: Boolean = true
var x2864: Int = x2860
val x2936 = x2935(x2860)
val x2937 = x2936.empty
val x3043 = if (x2937) {
val x2938 = x2860 >= x25
val x3035 = if (x2938) {
x2862 = null
x2863 = true
x2864 = x2860
()
} else {
val x2944 = x0(x2860)
val x2945 = x2944 == '\\'
val x3033 = if (x2945) {
val x2946 = x2860 + 1
val x2948 = x2946 >= x25
val x3027 = if (x2948) {
x2862 = null
x2863 = true
x2864 = x2860
()
} else {
val x2954 = x0(x2946)
val x2955 = x2954 == 'u'
val x3025 = if (x2955) {
var x2959: java.lang.String = ""
var x2960: Boolean = false
val x2956 = x2946 + 1
var x2961: Int = x2956
var x2963: Int = -1
var x2964: Boolean = true
var x2965: Int = x2956
var x2966: Int = 0
val x3012 = while ({val x2967 = x2966
val x2969 = x2963
val x2970 = x2965
val x2973 = x2964
val x2968 = x2967 < 4
val x2971 = x2969 != x2970
val x2972 = x2968 && x2971
val x2974 = x2972 && x2973
x2974}) {
val x2976 = x2965
x2963 = x2976
val x2978 = x2976 >= x25
val x3010 = if (x2978) {
x2964 = false
()
} else {
val x2982 = x0(x2976)
val x2983 = x2982 >= '0'
val x2984 = x2982 <= '9'
val x2985 = x2983 && x2984
val x2986 = x2982 >= 'A'
val x2987 = x2982 <= 'F'
val x2988 = x2986 && x2987
val x2989 = x2985 || x2988
val x3008 = if (x2989) {
val x2992 = x2959
val x2993 = x2960
val x2994 = x2961
val x2996 = x2992+x2982
x2959 = x2996
x2960 = false
val x2990 = x2976 + 1
x2961 = x2990
x2965 = x2990
val x3002 = x2966
val x3003 = x3002 + 1
x2966 = x3003
()
} else {
x2964 = false
()
}
x3008
}
x3010
}
val x3013 = x2959
val x3014 = x2960
val x3015 = x2961
x2862 = x3013
x2863 = x3014
x2864 = x3015
()
} else {
x2862 = null
x2863 = true
x2864 = x2860
()
}
x3025
}
x3027
} else {
x2862 = null
x2863 = true
x2864 = x2860
()
}
x3033
}
x3035
} else {
val x3037 = x2936.res
x2862 = x3037
x2863 = x2937
val x3040 = x2936.next
x2864 = x3040
()
}
val x3044 = x2862
val x3045 = x2863
val x3046 = x2864
val x3047 = new ParseResultString(x3044,x3045,x3046)
x3047: ParseResultString
}
val x3074 = {x3056: (Int) => 
var x3058: java.lang.String = null
var x3059: Boolean = true
var x3060: Int = x3056
val x3062 = x3049(x3056)
val x3063 = x3062.res
x3058 = x3063
val x3065 = x3062.empty
x3059 = x3065
val x3067 = x3062.next
x3060 = x3067
val x3069 = x3058
val x3070 = x3059
val x3071 = x3060
val x3072 = new ParseResultString(x3069,x3070,x3071)
x3072: ParseResultString
}
val x3115 = {x3050: (Int) => 
var x3052: java.lang.String = null
var x3053: Boolean = true
var x3054: Int = x3050
val x3075 = x3074(x3050)
val x3076 = x3075.empty
val x3109 = if (x3076) {
val x3077 = x3050 >= x25
val x3101 = if (x3077) {
x3052 = null
x3053 = true
x3054 = x3050
()
} else {
val x3083 = x0(x3050)
val x3084 = x3083 != '"'
val x3085 = x3083 != '\\'
val x3086 = x3084 && x3085
val x3099 = if (x3086) {
val x3089 = ""+x3083
x3052 = x3089
x3053 = false
val x3087 = x3050 + 1
x3054 = x3087
()
} else {
x3052 = null
x3053 = true
x3054 = x3050
()
}
x3099
}
x3101
} else {
val x3103 = x3075.res
x3052 = x3103
x3053 = x3076
val x3106 = x3075.next
x3054 = x3106
()
}
val x3110 = x3052
val x3111 = x3053
val x3112 = x3054
val x3113 = new ParseResultString(x3110,x3111,x3112)
x3113: ParseResultString
}
val x3192 = {x2806: (Int) => 
var x2808: Anon6507737 = null
var x2809: Boolean = true
var x2810: Int = x2806
val x2831 = x2830(x2806)
val x2832 = x2831.empty
val x3186 = if (x2832) {
val x2833 = x2806 >= x25
val x3178 = if (x2833) {
x2808 = null
x2809 = true
x2810 = x2806
()
} else {
val x2840 = x0(x2806)
val x2841 = x2840 == '"'
val x3176 = if (x2841) {
var x2845: java.lang.String = ""
var x2846: Boolean = false
val x2842 = x2806 + 1
var x2847: Int = x2842
var x2849: Int = -1
var x2850: Boolean = true
var x2851: Int = x2842
val x3135 = while ({val x2852 = x2850
val x2853 = x2849
val x2854 = x2851
val x2855 = x2853 != x2854
val x2856 = x2852 && x2855
x2856}) {
val x2858 = x2851
x2849 = x2858
val x3116 = x3115(x2858)
val x3117 = x3116.empty
val x3133 = if (x3117) {
x2850 = false
()
} else {
val x3120 = x2845
val x3121 = x2846
val x3122 = x2847
val x3124 = x3116.res
val x3125 = x3120+x3124
x2845 = x3125
x2846 = false
val x3126 = x3116.next
x2847 = x3126
x2851 = x3126
()
}
x3133
}
val x3136 = x2845
val x3137 = x2846
val x3138 = x2847
val x3170 = if (x3137) {
x2808 = null
x2809 = true
x2810 = x3138
()
} else {
val x3145 = x3138 >= x25
val x3168 = if (x3145) {
x2808 = null
x2809 = true
x2810 = x2806
()
} else {
val x3151 = x0(x3138)
val x3152 = x3151 == '"'
val x3166 = if (x3152) {
val x3156 = new Anon6507737(5,x3136)
x2808 = x3156
x2809 = false
val x3153 = x3138 + 1
x2810 = x3153
()
} else {
x2808 = null
x2809 = true
x2810 = x2806
()
}
x3166
}
x3168
}
x3170
} else {
x2808 = null
x2809 = true
x2810 = x2806
()
}
x3176
}
x3178
} else {
val x3180 = x2831.res
x2808 = x3180
x2809 = x2832
val x3183 = x2831.next
x2810 = x3183
()
}
val x3187 = x2808
val x3188 = x2809
val x3189 = x2810
val x3190 = new ParseResultAnon6507737(x3187,x3188,x3189)
x3190: ParseResultAnon6507737
}
x3240 = {x3193: (Int) => 
var x3195: Anon6507737 = null
var x3196: Boolean = true
var x3197: Int = x3193
val x3218 = x3217(x3193)
val x3219 = x3218.empty
val x3234 = if (x3219) {
val x3220 = x3192(x3193)
val x3221 = x3220.res
x3195 = x3221
val x3223 = x3220.empty
x3196 = x3223
val x3225 = x3220.next
x3197 = x3225
()
} else {
val x3228 = x3218.res
x3195 = x3228
x3196 = x3219
val x3231 = x3218.next
x3197 = x3231
()
}
val x3235 = x3195
val x3236 = x3196
val x3237 = x3197
val x3238 = new ParseResultAnon6507737(x3235,x3236,x3237)
x3238: ParseResultAnon6507737
}
var x2: Anon6507737 = null
var x3: Boolean = true
var x4: Int = -1
val x3253 = x6(0)
val x3254 = x3253.res
x2 = x3254
val x3256 = x3253.empty
x3 = x3256
val x3258 = x3253.next
x4 = x3258
val x3260 = x2
val x3261 = x3
val x3262 = x4
val x3263 = new ParseResultAnon6507737(x3260,x3261,x3262)
val x3264 = println(x3263)
x3264
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class Tuple2StringAnon6507737(_1: java.lang.String, _2: Anon6507737)

case class OptionChar(value: Char, defined: Boolean)

case class Tuple2StringString(_1: java.lang.String, _2: java.lang.String)

case class ParseResultAnon6507737(res: Anon6507737, empty: Boolean, next: Int)

case class Anon6507737(kind: Int, data: Any)

case class Tuple2Anon6507737ListAnon6507737(_1: Anon6507737, _2: scala.collection.immutable.List[Anon6507737])

case class Tuple2CharString(_1: Char, _2: java.lang.String)

case class ParseResultListAnon6507737(res: scala.collection.immutable.List[Anon6507737], empty: Boolean, next: Int)

case class Tuple2OptionCharString(_1: OptionChar, _2: java.lang.String)

case class Tuple2OptionCharInt(_1: OptionChar, _2: Int)

case class ParseResultString(res: java.lang.String, empty: Boolean, next: Int)
not contains
contains
contains
nVars=1000
contains
contains
nVars=2000
nVars=3000
compilation: ok
ParseResultAnon6507737(Anon6507737(3,3),false,1)
ParseResultAnon6507737(Anon6507737(3,-32),false,3)
ParseResultAnon6507737(Anon6507737(4,55.932083999999996),false,18)
ParseResultAnon6507737(Anon6507737(4,-55.932083999999996),false,19)
ParseResultAnon6507737(Anon6507737(2,null),false,4)
ParseResultAnon6507737(Anon6507737(1,null),false,5)
ParseResultAnon6507737(Anon6507737(0,null),false,4)
ParseResultAnon6507737(Anon6507737(5,hi),false,4)
ParseResultAnon6507737(Anon6507737(5,"hello),false,9)
ParseResultAnon6507737(Anon6507737(5,/hello),false,9)
ParseResultAnon6507737(Anon6507737(6,List(Anon6507737(3,3))),false,3)
ParseResultAnon6507737(Anon6507737(6,List(Anon6507737(3,3), Anon6507737(6,List(Anon6507737(3,2))), Anon6507737(6,List(Anon6507737(6,List(Anon6507737(3,1))))))),false,13)
ParseResultAnon6507737(Anon6507737(8,List(Anon6507737(7,Tuple2StringAnon6507737(hi,Anon6507737(3,2))), Anon6507737(7,Tuple2StringAnon6507737(hey,Anon6507737(8,List(Anon6507737(7,Tuple2StringAnon6507737(hey,Anon6507737(3,2))))))))),false,30)
ParseResultAnon6507737(Anon6507737(8,List(Anon6507737(7,Tuple2StringAnon6507737(address book,Anon6507737(8,List(Anon6507737(7,Tuple2StringAnon6507737(name,Anon6507737(5,John Smith))), Anon6507737(7,Tuple2StringAnon6507737(address,Anon6507737(8,List(Anon6507737(7,Tuple2StringAnon6507737(street,Anon6507737(5,10 Market Street))), Anon6507737(7,Tuple2StringAnon6507737(city,Anon6507737(5,San Francisco, CA))), Anon6507737(7,Tuple2StringAnon6507737(zip,Anon6507737(3,94111))))))), Anon6507737(7,Tuple2StringAnon6507737(phone Nums,Anon6507737(6,List(Anon6507737(5,408 338-4238), Anon6507737(5,408 111-6892))))))))))),false,314)
