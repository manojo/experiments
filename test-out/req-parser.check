/*****************************************
  Emitting Generated Code                  
*******************************************/
class reqTypeParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
val x1 = null.asInstanceOf[java.lang.String]
var x3: java.lang.String = x1
var x4: Boolean = true
var x5: Int = -1
var x8: java.lang.String = ""
var x9: Boolean = false
var x10: Int = 0
var x12: Int = -1
var x13: Boolean = true
var x14: Int = 0
val x23 = x0.length
val x56 = while ({val x15 = x13
val x16 = x12
val x17 = x14
val x18 = x16 != x17
val x19 = x15 && x18
x19}) {
val x21 = x14
x12 = x21
val x24 = x21 >= x23
val x54 = if (x24) {
x13 = false
()
} else {
val x27 = x0(x21)
val x28 = x27 >= 'a'
val x29 = x27 <= 'z'
val x30 = x28 && x29
val x31 = x27 >= 'A'
val x32 = x27 <= 'Z'
val x33 = x31 && x32
val x34 = x30 || x33
val x52 = if (x34) {
val x39 = x8
val x40 = x9
val x41 = x10
val x43 = x39+x27
x8 = x43
x9 = false
val x35 = x21 + 1
x10 = x35
x14 = x35
()
} else {
x13 = false
()
}
x52
}
x54
}
val x57 = x8
val x58 = x9
val x59 = x10
val x69 = if (x58) {
val x60 = new ParseResultString(x57,x58,x59)
x60
} else {
val x61 = collection.mutable.HashSet[java.lang.String]("connect","copy","checkout","delete","get","head","lock","merge","mkactivity","mkcol","move","msearch","notify","options","post","propfind","proppatch","put","report","subscribe","trace","unlock","unsubscribe")
val x62 = x61.contains(x57)
val x64 = if (x62) {
x57
} else {
x1
}
val x65 = if (x62) {
x58
} else {
true
}
val x66 = if (x62) {
x59
} else {
x59
}
val x67 = new ParseResultString(x64,x65,x66)
x67
}
val x70 = x69.res
x3 = x70
val x72 = x69.empty
x4 = x72
val x74 = x69.next
x5 = x74
val x76 = x3
val x77 = x4
val x78 = x5
val x79 = new ParseResultString(x76,x77,x78)
val x80 = println(x79)
x80
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(connect,false,7)
ParseResultString(copy,false,4)
ParseResultString(checkout,false,8)
ParseResultString(delete,false,6)
ParseResultString(get,false,3)
ParseResultString(head,false,4)
ParseResultString(lock,false,4)
ParseResultString(merge,false,5)
ParseResultString(mkactivity,false,10)
ParseResultString(mkcol,false,5)
ParseResultString(move,false,4)
ParseResultString(msearch,false,7)
ParseResultString(notify,false,6)
ParseResultString(options,false,7)
ParseResultString(post,false,4)
ParseResultString(propfind,false,8)
ParseResultString(proppatch,false,9)
ParseResultString(put,false,3)
ParseResultString(report,false,6)
ParseResultString(subscribe,false,9)
ParseResultString(trace,false,5)
ParseResultString(unlock,false,6)
ParseResultString(unsubscribe,false,11)
ParseResultString(null,true,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class hostParse extends ((Array[Char])=>(Unit)) {
def apply(x160:Array[Char]): Unit = {
val x161 = null.asInstanceOf[Anon1863173035]
var x163: Anon1863173035 = x161
var x164: Boolean = true
var x165: Int = -1
val x168 = x160.length
val x169 = 0 >= x168
val x401 = if (x169) {
x163 = x161
x164 = true
x165 = 0
()
} else {
val x171 = x160(0)
val x172 = x171 >= '0'
val x173 = x171 <= '9'
val x174 = x172 && x173
val x175 = x171 >= 'a'
val x176 = x171 <= 'z'
val x177 = x175 && x176
val x178 = x171 >= 'A'
val x179 = x171 <= 'Z'
val x180 = x178 && x179
val x181 = x177 || x180
val x182 = x174 || x181
val x183 = x171 == '-'
val x184 = x182 || x183
val x185 = x171 == '.'
val x186 = x184 || x185
val x399 = if (x186) {
var x201: java.lang.String = ""
var x202: Boolean = false
val x187 = 0 + 1
var x203: Int = x187
var x205: Int = -1
var x206: Boolean = true
var x207: Int = x187
val x255 = while ({val x208 = x206
val x209 = x205
val x210 = x207
val x211 = x209 != x210
val x212 = x208 && x211
x212}) {
val x214 = x207
x205 = x214
val x216 = x214 >= x168
val x253 = if (x216) {
x206 = false
()
} else {
val x218 = x160(x214)
val x219 = x218 >= '0'
val x220 = x218 <= '9'
val x221 = x219 && x220
val x222 = x218 >= 'a'
val x223 = x218 <= 'z'
val x224 = x222 && x223
val x225 = x218 >= 'A'
val x226 = x218 <= 'Z'
val x227 = x225 && x226
val x228 = x224 || x227
val x229 = x221 || x228
val x230 = x218 == '-'
val x231 = x229 || x230
val x232 = x218 == '.'
val x233 = x231 || x232
val x251 = if (x233) {
val x238 = x201
val x239 = x202
val x240 = x203
val x242 = x238+x218
x201 = x242
x202 = false
val x234 = x214 + 1
x203 = x234
x207 = x234
()
} else {
x206 = false
()
}
x251
}
x253
}
val x256 = x201
val x257 = x202
val x258 = x203
val x263 = if (x257) {
true
} else {
false
}
val x272 = if (x263) {
true
} else {
false
}
val x393 = if (x272) {
x163 = x161
x164 = true
x165 = 0
()
} else {
val x264 = if (x257) {
0
} else {
x258
}
val x273 = if (x263) {
x264
} else {
x264
}
val x275 = x273 >= x168
val x391 = if (x275) {
val x271 = if (x263) {
val x1 = null.asInstanceOf[java.lang.String]
x1
} else {
val x262 = if (x257) {
val x189 = null.asInstanceOf[Tuple2CharString]
x189
} else {
val x260 = new Tuple2CharString(x171,x256)
x260
}
val x267 = x262._1
val x268 = x262._2
val x269 = x267+x268
x269
}
val x291 = new Anon1863173035("",x271,"","","",80)
x163 = x291
x164 = false
x165 = x273
()
} else {
val x277 = x160(x273)
val x278 = x277 == ':'
val x389 = if (x278) {
var x298: Int = 0
var x299: Boolean = false
val x279 = x273 + 1
var x300: Int = x279
var x302: Int = -1
var x303: Boolean = true
var x304: Int = x279
val x345 = while ({val x305 = x303
val x306 = x302
val x307 = x304
val x308 = x306 != x307
val x309 = x305 && x308
x309}) {
val x311 = x304
x302 = x311
val x313 = x311 >= x168
val x343 = if (x313) {
x303 = false
()
} else {
val x315 = x160(x311)
val x316 = x315 >= '0'
val x317 = x315 <= '9'
val x318 = x316 && x317
val x341 = if (x318) {
val x327 = x298
val x328 = x299
val x329 = x300
val x324 = x315 - '0'
val x325 = x324.toInt
val x331 = x327 * 10
val x332 = x331 + x325
x298 = x332
x299 = false
val x319 = x311 + 1
x300 = x319
x304 = x319
()
} else {
x303 = false
()
}
x341
}
x343
}
val x346 = x298
val x347 = x299
val x348 = x300
val x356 = if (x347) {
false
} else {
false
}
val x362 = if (x356) {
true
} else {
false
}
val x377 = if (x362) {
x161
} else {
val x361 = if (x356) {
val x192 = null.asInstanceOf[Tuple2StringOptionInt]
x192
} else {
val x271 = if (x263) {
val x1 = null.asInstanceOf[java.lang.String]
x1
} else {
val x262 = if (x257) {
val x189 = null.asInstanceOf[Tuple2CharString]
x189
} else {
val x260 = new Tuple2CharString(x171,x256)
x260
}
val x267 = x262._1
val x268 = x262._2
val x269 = x267+x268
x269
}
val x353 = if (x347) {
val x285 = null.asInstanceOf[Int]
x285
} else {
x346
}
val x354 = if (x347) {
false
} else {
true
}
val x355 = new OptionInt(x353,x354)
val x359 = new Tuple2StringOptionInt(x271,x355)
x359
}
val x367 = x361._2
val x368 = x367.defined
val x372 = if (x368) {
""
} else {
""
}
val x366 = x361._1
val x373 = if (x368) {
x366
} else {
x366
}
val x374 = if (x368) {
val x369 = x367.value
x369
} else {
80
}
val x375 = new Anon1863173035(x372,x373,x372,x372,x372,x374)
x375
}
x163 = x377
val x378 = if (x362) {
true
} else {
false
}
x164 = x378
val x363 = if (x356) {
0
} else {
val x357 = if (x347) {
x348
} else {
x348
}
x357
}
val x379 = if (x362) {
x363
} else {
x363
}
x165 = x379
()
} else {
val x271 = if (x263) {
val x1 = null.asInstanceOf[java.lang.String]
x1
} else {
val x262 = if (x257) {
val x189 = null.asInstanceOf[Tuple2CharString]
x189
} else {
val x260 = new Tuple2CharString(x171,x256)
x260
}
val x267 = x262._1
val x268 = x262._2
val x269 = x267+x268
x269
}
val x291 = new Anon1863173035("",x271,"","","",80)
x163 = x291
x164 = false
x165 = x273
()
}
x389
}
x391
}
x393
} else {
x163 = x161
x164 = true
x165 = 0
()
}
x399
}
val x402 = x163
val x403 = x164
val x404 = x165
val x405 = new ParseResultAnon1863173035(x402,x403,x404)
val x406 = println(x405)
x406
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultAnon1863173035(Anon1863173035(,123..asdf3.adf,,,,90),false,17)
ParseResultAnon1863173035(Anon1863173035(,123..asdf3.adf,,,,80),false,14)
ParseResultAnon1863173035(null,true,0)
ParseResultAnon1863173035(Anon1863173035(,123..asdf3.adf,,,,0),false,15)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class reqFragmentParse extends ((Array[Char])=>(Unit)) {
def apply(x642:Array[Char]): Unit = {
val x161 = null.asInstanceOf[Anon1863173035]
var x643: Anon1863173035 = x161
var x644: Boolean = true
var x645: Int = -1
var x647: java.lang.String = ""
var x648: Boolean = false
var x649: Int = 0
var x651: Int = -1
var x652: Boolean = true
var x653: Int = 0
val x662 = x642.length
val x688 = while ({val x654 = x652
val x655 = x651
val x656 = x653
val x657 = x655 != x656
val x658 = x654 && x657
x658}) {
val x660 = x653
x651 = x660
val x663 = x660 >= x662
val x686 = if (x663) {
x652 = false
()
} else {
val x665 = x642(x660)
val x666 = x665 == '#'
val x684 = if (x666) {
val x671 = x647
val x672 = x648
val x673 = x649
val x675 = x671+x665
x647 = x675
x648 = false
val x667 = x660 + 1
x649 = x667
x653 = x667
()
} else {
x652 = false
()
}
x684
}
x686
}
val x689 = x647
val x690 = x648
val x691 = x649
val x756 = if (x690) {
x643 = x161
x644 = true
x645 = 0
()
} else {
var x698: java.lang.String = ""
var x699: Boolean = false
var x700: Int = x691
var x702: Int = -1
var x703: Boolean = true
var x704: Int = x691
val x740 = while ({val x705 = x703
val x706 = x702
val x707 = x704
val x708 = x706 != x707
val x709 = x705 && x708
x709}) {
val x711 = x704
x702 = x711
val x713 = x711 >= x662
val x738 = if (x713) {
x703 = false
()
} else {
val x715 = x642(x711)
val x716 = x715 > ' '
val x717 = x715 != ''
val x718 = x716 && x717
val x736 = if (x718) {
val x723 = x698
val x724 = x699
val x725 = x700
val x727 = x723+x715
x698 = x727
x699 = false
val x719 = x711 + 1
x700 = x719
x704 = x719
()
} else {
x703 = false
()
}
x736
}
x738
}
val x741 = x698
val x742 = x699
val x743 = x700
val x748 = if (x742) {
x161
} else {
val x746 = new Anon1863173035("","","","",x741,80)
x746
}
x643 = x748
val x749 = if (x742) {
true
} else {
false
}
x644 = x749
val x750 = if (x742) {
x743
} else {
x743
}
x645 = x750
()
}
val x757 = x643
val x758 = x644
val x759 = x645
val x760 = new ParseResultAnon1863173035(x757,x758,x759)
val x761 = println(x760)
x761
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultAnon1863173035(Anon1863173035(,,,,3adsfd.html,80),false,13)
ParseResultAnon1863173035(Anon1863173035(,,,,3asfd#adf,80),false,11)
ParseResultAnon1863173035(Anon1863173035(,,,,asdf,80),false,4)
nVars=1000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class qStringParse extends ((Array[Char])=>(Unit)) {
def apply(x884:Array[Char]): Unit = {
val x161 = null.asInstanceOf[Anon1863173035]
var x885: Anon1863173035 = x161
var x886: Boolean = true
var x887: Int = -1
var x889: java.lang.String = ""
var x890: Boolean = false
var x891: Int = 0
var x893: Int = -1
var x894: Boolean = true
var x895: Int = 0
val x904 = x884.length
val x930 = while ({val x896 = x894
val x897 = x893
val x898 = x895
val x899 = x897 != x898
val x900 = x896 && x899
x900}) {
val x902 = x895
x893 = x902
val x905 = x902 >= x904
val x928 = if (x905) {
x894 = false
()
} else {
val x907 = x884(x902)
val x908 = x907 == '?'
val x926 = if (x908) {
val x913 = x889
val x914 = x890
val x915 = x891
val x917 = x913+x907
x889 = x917
x890 = false
val x909 = x902 + 1
x891 = x909
x895 = x909
()
} else {
x894 = false
()
}
x926
}
x928
}
val x931 = x889
val x932 = x890
val x933 = x891
val x1181 = if (x932) {
x885 = x161
x886 = true
x887 = 0
()
} else {
var x946: java.lang.String = ""
var x947: Boolean = false
var x948: Int = x933
var x950: Int = -1
var x951: Boolean = true
var x952: Int = x933
val x990 = while ({val x953 = x951
val x954 = x950
val x955 = x952
val x956 = x954 != x955
val x957 = x953 && x956
x957}) {
val x959 = x952
x950 = x959
val x961 = x959 >= x904
val x988 = if (x961) {
x951 = false
()
} else {
val x963 = x884(x959)
val x964 = x963 > ' '
val x965 = x963 != '#'
val x966 = x964 && x965
val x967 = x963 != ''
val x968 = x966 && x967
val x986 = if (x968) {
val x973 = x946
val x974 = x947
val x975 = x948
val x977 = x973+x963
x946 = x977
x947 = false
val x969 = x959 + 1
x948 = x969
x952 = x969
()
} else {
x951 = false
()
}
x986
}
x988
}
val x991 = x946
val x992 = x947
val x993 = x948
val x1179 = if (x992) {
x885 = x161
x886 = true
x887 = 0
()
} else {
val x995 = x993 >= x904
val x1177 = if (x995) {
val x1010 = new Anon1863173035("","","",x991,"",80)
x885 = x1010
x886 = false
x887 = x993
()
} else {
val x997 = x884(x993)
val x998 = x997 == '#'
val x1175 = if (x998) {
var x1017: java.lang.String = ""
var x1018: Boolean = false
val x999 = x993 + 1
var x1019: Int = x999
var x1021: Int = -1
var x1022: Boolean = true
var x1023: Int = x999
val x1057 = while ({val x1024 = x1022
val x1025 = x1021
val x1026 = x1023
val x1027 = x1025 != x1026
val x1028 = x1024 && x1027
x1028}) {
val x1030 = x1023
x1021 = x1030
val x1032 = x1030 >= x904
val x1055 = if (x1032) {
x1022 = false
()
} else {
val x1034 = x884(x1030)
val x1035 = x1034 == '#'
val x1053 = if (x1035) {
val x1040 = x1017
val x1041 = x1018
val x1042 = x1019
val x1044 = x1040+x1034
x1017 = x1044
x1018 = false
val x1036 = x1030 + 1
x1019 = x1036
x1023 = x1036
()
} else {
x1022 = false
()
}
x1053
}
x1055
}
val x1058 = x1017
val x1059 = x1018
val x1060 = x1019
val x1169 = if (x1059) {
val x1010 = new Anon1863173035("","","",x991,"",80)
x885 = x1010
x886 = false
x887 = x999
()
} else {
var x1072: java.lang.String = ""
var x1073: Boolean = false
var x1074: Int = x1060
var x1076: Int = -1
var x1077: Boolean = true
var x1078: Int = x1060
val x1114 = while ({val x1079 = x1077
val x1080 = x1076
val x1081 = x1078
val x1082 = x1080 != x1081
val x1083 = x1079 && x1082
x1083}) {
val x1085 = x1078
x1076 = x1085
val x1087 = x1085 >= x904
val x1112 = if (x1087) {
x1077 = false
()
} else {
val x1089 = x884(x1085)
val x1090 = x1089 > ' '
val x1091 = x1089 != ''
val x1092 = x1090 && x1091
val x1110 = if (x1092) {
val x1097 = x1072
val x1098 = x1073
val x1099 = x1074
val x1101 = x1097+x1089
x1072 = x1101
x1073 = false
val x1093 = x1085 + 1
x1074 = x1093
x1078 = x1093
()
} else {
x1077 = false
()
}
x1110
}
x1112
}
val x1115 = x1072
val x1116 = x1073
val x1117 = x1074
val x1123 = if (x1116) {
true
} else {
false
}
val x1132 = if (x1123) {
false
} else {
false
}
val x1138 = if (x1132) {
true
} else {
false
}
val x1161 = if (x1138) {
x161
} else {
val x1137 = if (x1132) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
x935
} else {
val x1129 = if (x1123) {
x161
} else {
val x1122 = if (x1116) {
x161
} else {
val x1120 = new Anon1863173035("","","","",x1115,80)
x1120
}
x1122
}
val x1130 = if (x1123) {
false
} else {
true
}
val x1131 = new OptionAnon1863173035(x1129,x1130)
val x1135 = new Tuple2StringOptionAnon1863173035(x991,x1131)
x1135
}
val x1143 = x1137._2
val x1144 = x1143.defined
val x1153 = if (x1144) {
val x1145 = x1143.value
val x1146 = x1145.schema
x1146
} else {
""
}
val x1154 = if (x1144) {
val x1145 = x1143.value
val x1147 = x1145.hostName
x1147
} else {
""
}
val x1155 = if (x1144) {
val x1145 = x1143.value
val x1148 = x1145.path
x1148
} else {
""
}
val x1142 = x1137._1
val x1156 = if (x1144) {
x1142
} else {
x1142
}
val x1157 = if (x1144) {
val x1145 = x1143.value
val x1149 = x1145.fragment
x1149
} else {
""
}
val x1158 = if (x1144) {
val x1145 = x1143.value
val x1150 = x1145.port
x1150
} else {
80
}
val x1159 = new Anon1863173035(x1153,x1154,x1155,x1156,x1157,x1158)
x1159
}
x885 = x1161
val x1162 = if (x1138) {
true
} else {
false
}
x886 = x1162
val x1139 = if (x1132) {
0
} else {
val x1124 = if (x1116) {
x1117
} else {
x1117
}
val x1133 = if (x1123) {
x1124
} else {
x1124
}
x1133
}
val x1163 = if (x1138) {
x1139
} else {
x1139
}
x887 = x1163
()
}
x1169
} else {
val x1010 = new Anon1863173035("","","",x991,"",80)
x885 = x1010
x886 = false
x887 = x993
()
}
x1175
}
x1177
}
x1179
}
val x1182 = x885
val x1183 = x886
val x1184 = x887
val x1185 = new ParseResultAnon1863173035(x1182,x1183,x1184)
val x1186 = println(x1185)
x1186
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultAnon1863173035(Anon1863173035(,,,asdf,sadf,80),false,12)
ParseResultAnon1863173035(Anon1863173035(,,,asdf?adsf,asdf,80),false,17)
ParseResultAnon1863173035(Anon1863173035(,,,asdf?adsf,,80),false,12)
ParseResultAnon1863173035(Anon1863173035(,,,asd,,80),false,3)
nVars=2000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class reqPathParse extends ((Array[Char])=>(Unit)) {
def apply(x1489:Array[Char]): Unit = {
val x161 = null.asInstanceOf[Anon1863173035]
var x1490: Anon1863173035 = x161
var x1491: Boolean = true
var x1492: Int = -1
var x1494: java.lang.String = ""
var x1495: Boolean = false
var x1496: Int = 0
var x1498: Int = -1
var x1499: Boolean = true
var x1500: Int = 0
val x1509 = x1489.length
val x1541 = while ({val x1501 = x1499
val x1502 = x1498
val x1503 = x1500
val x1504 = x1502 != x1503
val x1505 = x1501 && x1504
x1505}) {
val x1507 = x1500
x1498 = x1507
val x1510 = x1507 >= x1509
val x1539 = if (x1510) {
x1499 = false
()
} else {
val x1512 = x1489(x1507)
val x1513 = x1512 > ' '
val x1514 = x1512 != '#'
val x1515 = x1513 && x1514
val x1516 = x1512 != '?'
val x1517 = x1515 && x1516
val x1518 = x1512 != ''
val x1519 = x1517 && x1518
val x1537 = if (x1519) {
val x1524 = x1494
val x1525 = x1495
val x1526 = x1496
val x1528 = x1524+x1512
x1494 = x1528
x1495 = false
val x1520 = x1507 + 1
x1496 = x1520
x1500 = x1520
()
} else {
x1499 = false
()
}
x1537
}
x1539
}
val x1542 = x1494
val x1543 = x1495
val x1544 = x1496
val x2710 = if (x1543) {
x1490 = x161
x1491 = true
x1492 = 0
()
} else {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x1870 = {x1546: (Int) => 
var x1548: Anon1863173035 = x161
var x1549: Boolean = true
var x1550: Int = x1546
val x1552 = x1546 >= x1509
val x1864 = if (x1552) {
x1548 = x161
x1549 = true
x1550 = x1546
()
} else {
val x1554 = x1489(x1546)
val x1555 = x1554 == '?'
val x1862 = if (x1555) {
var x1563: java.lang.String = ""
var x1564: Boolean = false
val x1556 = x1546 + 1
var x1565: Int = x1556
var x1567: Int = -1
var x1568: Boolean = true
var x1569: Int = x1556
val x1603 = while ({val x1570 = x1568
val x1571 = x1567
val x1572 = x1569
val x1573 = x1571 != x1572
val x1574 = x1570 && x1573
x1574}) {
val x1576 = x1569
x1567 = x1576
val x1578 = x1576 >= x1509
val x1601 = if (x1578) {
x1568 = false
()
} else {
val x1580 = x1489(x1576)
val x1581 = x1580 == '?'
val x1599 = if (x1581) {
val x1586 = x1563
val x1587 = x1564
val x1588 = x1565
val x1590 = x1586+x1580
x1563 = x1590
x1564 = false
val x1582 = x1576 + 1
x1565 = x1582
x1569 = x1582
()
} else {
x1568 = false
()
}
x1599
}
x1601
}
val x1604 = x1563
val x1605 = x1564
val x1606 = x1565
val x1856 = if (x1605) {
x1548 = x161
x1549 = true
x1550 = x1556
()
} else {
var x1622: java.lang.String = ""
var x1623: Boolean = false
var x1624: Int = x1606
var x1626: Int = -1
var x1627: Boolean = true
var x1628: Int = x1606
val x1666 = while ({val x1629 = x1627
val x1630 = x1626
val x1631 = x1628
val x1632 = x1630 != x1631
val x1633 = x1629 && x1632
x1633}) {
val x1635 = x1628
x1626 = x1635
val x1637 = x1635 >= x1509
val x1664 = if (x1637) {
x1627 = false
()
} else {
val x1639 = x1489(x1635)
val x1640 = x1639 > ' '
val x1641 = x1639 != '#'
val x1642 = x1640 && x1641
val x1643 = x1639 != ''
val x1644 = x1642 && x1643
val x1662 = if (x1644) {
val x1649 = x1622
val x1650 = x1623
val x1651 = x1624
val x1653 = x1649+x1639
x1622 = x1653
x1623 = false
val x1645 = x1635 + 1
x1624 = x1645
x1628 = x1645
()
} else {
x1627 = false
()
}
x1662
}
x1664
}
val x1667 = x1622
val x1668 = x1623
val x1669 = x1624
val x1854 = if (x1668) {
x1548 = x161
x1549 = true
x1550 = x1556
()
} else {
val x1671 = x1669 >= x1509
val x1852 = if (x1671) {
val x1685 = new Anon1863173035("","","",x1667,"",80)
x1548 = x1685
x1549 = false
x1550 = x1669
()
} else {
val x1673 = x1489(x1669)
val x1674 = x1673 == '#'
val x1850 = if (x1674) {
var x1692: java.lang.String = ""
var x1693: Boolean = false
val x1675 = x1669 + 1
var x1694: Int = x1675
var x1696: Int = -1
var x1697: Boolean = true
var x1698: Int = x1675
val x1732 = while ({val x1699 = x1697
val x1700 = x1696
val x1701 = x1698
val x1702 = x1700 != x1701
val x1703 = x1699 && x1702
x1703}) {
val x1705 = x1698
x1696 = x1705
val x1707 = x1705 >= x1509
val x1730 = if (x1707) {
x1697 = false
()
} else {
val x1709 = x1489(x1705)
val x1710 = x1709 == '#'
val x1728 = if (x1710) {
val x1715 = x1692
val x1716 = x1693
val x1717 = x1694
val x1719 = x1715+x1709
x1692 = x1719
x1693 = false
val x1711 = x1705 + 1
x1694 = x1711
x1698 = x1711
()
} else {
x1697 = false
()
}
x1728
}
x1730
}
val x1733 = x1692
val x1734 = x1693
val x1735 = x1694
val x1844 = if (x1734) {
val x1685 = new Anon1863173035("","","",x1667,"",80)
x1548 = x1685
x1549 = false
x1550 = x1675
()
} else {
var x1747: java.lang.String = ""
var x1748: Boolean = false
var x1749: Int = x1735
var x1751: Int = -1
var x1752: Boolean = true
var x1753: Int = x1735
val x1789 = while ({val x1754 = x1752
val x1755 = x1751
val x1756 = x1753
val x1757 = x1755 != x1756
val x1758 = x1754 && x1757
x1758}) {
val x1760 = x1753
x1751 = x1760
val x1762 = x1760 >= x1509
val x1787 = if (x1762) {
x1752 = false
()
} else {
val x1764 = x1489(x1760)
val x1765 = x1764 > ' '
val x1766 = x1764 != ''
val x1767 = x1765 && x1766
val x1785 = if (x1767) {
val x1772 = x1747
val x1773 = x1748
val x1774 = x1749
val x1776 = x1772+x1764
x1747 = x1776
x1748 = false
val x1768 = x1760 + 1
x1749 = x1768
x1753 = x1768
()
} else {
x1752 = false
()
}
x1785
}
x1787
}
val x1790 = x1747
val x1791 = x1748
val x1792 = x1749
val x1798 = if (x1791) {
true
} else {
false
}
val x1807 = if (x1798) {
false
} else {
false
}
val x1813 = if (x1807) {
true
} else {
false
}
val x1836 = if (x1813) {
x161
} else {
val x1812 = if (x1807) {
x935
} else {
val x1804 = if (x1798) {
x161
} else {
val x1797 = if (x1791) {
x161
} else {
val x1795 = new Anon1863173035("","","","",x1790,80)
x1795
}
x1797
}
val x1805 = if (x1798) {
false
} else {
true
}
val x1806 = new OptionAnon1863173035(x1804,x1805)
val x1810 = new Tuple2StringOptionAnon1863173035(x1667,x1806)
x1810
}
val x1818 = x1812._2
val x1819 = x1818.defined
val x1828 = if (x1819) {
val x1820 = x1818.value
val x1821 = x1820.schema
x1821
} else {
""
}
val x1829 = if (x1819) {
val x1820 = x1818.value
val x1822 = x1820.hostName
x1822
} else {
""
}
val x1830 = if (x1819) {
val x1820 = x1818.value
val x1823 = x1820.path
x1823
} else {
""
}
val x1817 = x1812._1
val x1831 = if (x1819) {
x1817
} else {
x1817
}
val x1832 = if (x1819) {
val x1820 = x1818.value
val x1824 = x1820.fragment
x1824
} else {
""
}
val x1833 = if (x1819) {
val x1820 = x1818.value
val x1825 = x1820.port
x1825
} else {
80
}
val x1834 = new Anon1863173035(x1828,x1829,x1830,x1831,x1832,x1833)
x1834
}
x1548 = x1836
val x1837 = if (x1813) {
true
} else {
false
}
x1549 = x1837
val x1814 = if (x1807) {
x1556
} else {
val x1799 = if (x1791) {
x1792
} else {
x1792
}
val x1808 = if (x1798) {
x1799
} else {
x1799
}
x1808
}
val x1838 = if (x1813) {
x1814
} else {
x1814
}
x1550 = x1838
()
}
x1844
} else {
val x1685 = new Anon1863173035("","","",x1667,"",80)
x1548 = x1685
x1549 = false
x1550 = x1669
()
}
x1850
}
x1852
}
x1854
}
x1856
} else {
x1548 = x161
x1549 = true
x1550 = x1546
()
}
x1862
}
val x1865 = x1548
val x1866 = x1549
val x1867 = x1550
val x1868 = new ParseResultAnon1863173035(x1865,x1866,x1867)
x1868
}
val x2013 = x1870(x1544)
val x2022 = x2013.empty
val x2708 = if (x2022) {
val x2012 = {x1871: (Int) => 
var x1873: Anon1863173035 = x161
var x1874: Boolean = true
var x1875: Int = x1871
val x1877 = x1871 >= x1509
val x2006 = if (x1877) {
x1873 = x161
x1874 = true
x1875 = x1871
()
} else {
val x1879 = x1489(x1871)
val x1880 = x1879 == '#'
val x2004 = if (x1880) {
var x1888: java.lang.String = ""
var x1889: Boolean = false
val x1881 = x1871 + 1
var x1890: Int = x1881
var x1892: Int = -1
var x1893: Boolean = true
var x1894: Int = x1881
val x1928 = while ({val x1895 = x1893
val x1896 = x1892
val x1897 = x1894
val x1898 = x1896 != x1897
val x1899 = x1895 && x1898
x1899}) {
val x1901 = x1894
x1892 = x1901
val x1903 = x1901 >= x1509
val x1926 = if (x1903) {
x1893 = false
()
} else {
val x1905 = x1489(x1901)
val x1906 = x1905 == '#'
val x1924 = if (x1906) {
val x1911 = x1888
val x1912 = x1889
val x1913 = x1890
val x1915 = x1911+x1905
x1888 = x1915
x1889 = false
val x1907 = x1901 + 1
x1890 = x1907
x1894 = x1907
()
} else {
x1893 = false
()
}
x1924
}
x1926
}
val x1929 = x1888
val x1930 = x1889
val x1931 = x1890
val x1998 = if (x1930) {
x1873 = x161
x1874 = true
x1875 = x1881
()
} else {
var x1940: java.lang.String = ""
var x1941: Boolean = false
var x1942: Int = x1931
var x1944: Int = -1
var x1945: Boolean = true
var x1946: Int = x1931
val x1982 = while ({val x1947 = x1945
val x1948 = x1944
val x1949 = x1946
val x1950 = x1948 != x1949
val x1951 = x1947 && x1950
x1951}) {
val x1953 = x1946
x1944 = x1953
val x1955 = x1953 >= x1509
val x1980 = if (x1955) {
x1945 = false
()
} else {
val x1957 = x1489(x1953)
val x1958 = x1957 > ' '
val x1959 = x1957 != ''
val x1960 = x1958 && x1959
val x1978 = if (x1960) {
val x1965 = x1940
val x1966 = x1941
val x1967 = x1942
val x1969 = x1965+x1957
x1940 = x1969
x1941 = false
val x1961 = x1953 + 1
x1942 = x1961
x1946 = x1961
()
} else {
x1945 = false
()
}
x1978
}
x1980
}
val x1983 = x1940
val x1984 = x1941
val x1985 = x1942
val x1990 = if (x1984) {
x161
} else {
val x1988 = new Anon1863173035("","","","",x1983,80)
x1988
}
x1873 = x1990
val x1991 = if (x1984) {
true
} else {
false
}
x1874 = x1991
val x1992 = if (x1984) {
x1985
} else {
x1985
}
x1875 = x1992
()
}
x1998
} else {
x1873 = x161
x1874 = true
x1875 = x1871
()
}
x2004
}
val x2007 = x1873
val x2008 = x1874
val x2009 = x1875
val x2010 = new ParseResultAnon1863173035(x2007,x2008,x2009)
x2010
}
val x2023 = x2012(x1544)
val x2024 = x2023.empty
val x2033 = if (x2024) {
false
} else {
false
}
val x2039 = if (x2033) {
true
} else {
false
}
val x2381 = if (x2039) {
x1490 = x161
x1491 = true
val x2040 = if (x2033) {
0
} else {
val x2025 = x2023.next
val x2034 = if (x2024) {
x2025
} else {
x2025
}
x2034
}
x1492 = x2040
()
} else {
val x2040 = if (x2033) {
0
} else {
val x2025 = x2023.next
val x2034 = if (x2024) {
x2025
} else {
x2025
}
x2034
}
val x2042 = x2040 >= x1509
val x2379 = if (x2042) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
} else {
val x2044 = x1489(x2040)
val x2045 = x2044 == 'H'
val x2377 = if (x2045) {
val x2046 = x2040 + 1
val x2085 = x2046 >= x1509
val x2371 = if (x2085) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
} else {
val x2087 = x1489(x2046)
val x2088 = x2087 == 'T'
val x2369 = if (x2088) {
val x2089 = x2046 + 1
val x2097 = x2089 >= x1509
val x2363 = if (x2097) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
} else {
val x2099 = x1489(x2089)
val x2100 = x2099 == 'T'
val x2361 = if (x2100) {
val x2101 = x2089 + 1
val x2110 = x2101 >= x1509
val x2355 = if (x2110) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
} else {
val x2112 = x1489(x2101)
val x2113 = x2112 == 'P'
val x2353 = if (x2113) {
val x2114 = x2101 + 1
val x2123 = x2114 >= x1509
val x2347 = if (x2123) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
} else {
val x2125 = x1489(x2114)
val x2126 = x2125 == '/'
val x2345 = if (x2126) {
var x2158: Int = 0
var x2159: Boolean = false
val x2127 = x2114 + 1
var x2160: Int = x2127
var x2162: Int = -1
var x2163: Boolean = true
var x2164: Int = x2127
val x2205 = while ({val x2165 = x2163
val x2166 = x2162
val x2167 = x2164
val x2168 = x2166 != x2167
val x2169 = x2165 && x2168
x2169}) {
val x2171 = x2164
x2162 = x2171
val x2173 = x2171 >= x1509
val x2203 = if (x2173) {
x2163 = false
()
} else {
val x2175 = x1489(x2171)
val x2176 = x2175 >= '0'
val x2177 = x2175 <= '9'
val x2178 = x2176 && x2177
val x2201 = if (x2178) {
val x2187 = x2158
val x2188 = x2159
val x2189 = x2160
val x2184 = x2175 - '0'
val x2185 = x2184.toInt
val x2191 = x2187 * 10
val x2192 = x2191 + x2185
x2158 = x2192
x2159 = false
val x2179 = x2171 + 1
x2160 = x2179
x2164 = x2179
()
} else {
x2163 = false
()
}
x2201
}
x2203
}
val x2206 = x2158
val x2207 = x2159
val x2208 = x2160
val x2339 = if (x2207) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2127
()
} else {
val x2211 = x2208 >= x1509
val x2337 = if (x2211) {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2127
()
} else {
val x2213 = x1489(x2208)
val x2214 = x2213 == '.'
val x2335 = if (x2214) {
var x2230: Int = 0
var x2231: Boolean = false
val x2215 = x2208 + 1
var x2232: Int = x2215
var x2234: Int = -1
var x2235: Boolean = true
var x2236: Int = x2215
val x2277 = while ({val x2237 = x2235
val x2238 = x2234
val x2239 = x2236
val x2240 = x2238 != x2239
val x2241 = x2237 && x2240
x2241}) {
val x2243 = x2236
x2234 = x2243
val x2245 = x2243 >= x1509
val x2275 = if (x2245) {
x2235 = false
()
} else {
val x2247 = x1489(x2243)
val x2248 = x2247 >= '0'
val x2249 = x2247 <= '9'
val x2250 = x2248 && x2249
val x2273 = if (x2250) {
val x2259 = x2230
val x2260 = x2231
val x2261 = x2232
val x2256 = x2247 - '0'
val x2257 = x2256.toInt
val x2263 = x2259 * 10
val x2264 = x2263 + x2257
x2230 = x2264
x2231 = false
val x2251 = x2243 + 1
x2232 = x2251
x2236 = x2251
()
} else {
x2235 = false
()
}
x2273
}
x2275
}
val x2278 = x2230
val x2279 = x2231
val x2280 = x2232
val x2285 = if (x2279) {
true
} else {
false
}
val x2294 = if (x2285) {
false
} else {
false
}
val x2299 = if (x2294) {
true
} else {
false
}
val x2323 = if (x2299) {
x161
} else {
val x2298 = if (x2294) {
x935
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
x2038
}
val x2304 = x2298._2
val x2305 = x2304.defined
val x2315 = if (x2305) {
val x2306 = x2304.value
val x2308 = x2306.schema
x2308
} else {
""
}
val x2316 = if (x2305) {
val x2306 = x2304.value
val x2309 = x2306.hostName
x2309
} else {
""
}
val x2303 = x2298._1
val x2307 = "/"+x2303
val x2317 = if (x2305) {
x2307
} else {
x2307
}
val x2318 = if (x2305) {
val x2306 = x2304.value
val x2310 = x2306.queryString
x2310
} else {
""
}
val x2319 = if (x2305) {
val x2306 = x2304.value
val x2311 = x2306.fragment
x2311
} else {
""
}
val x2320 = if (x2305) {
val x2306 = x2304.value
val x2312 = x2306.port
x2312
} else {
80
}
val x2321 = new Anon1863173035(x2315,x2316,x2317,x2318,x2319,x2320)
x2321
}
x1490 = x2323
val x2324 = if (x2299) {
true
} else {
false
}
x1491 = x2324
val x2300 = if (x2294) {
0
} else {
val x2286 = if (x2279) {
x2127
} else {
x2280
}
val x2295 = if (x2285) {
x2286
} else {
x2286
}
x2295
}
val x2325 = if (x2299) {
x2300
} else {
x2300
}
x1492 = x2325
()
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2127
()
}
x2335
}
x2337
}
x2339
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
}
x2345
}
x2347
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
}
x2353
}
x2355
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
}
x2361
}
x2363
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
}
x2369
}
x2371
} else {
val x2038 = if (x2033) {
x935
} else {
val x2030 = if (x2024) {
x161
} else {
val x2027 = x2023.res
x2027
}
val x2031 = if (x2024) {
false
} else {
true
}
val x2032 = new OptionAnon1863173035(x2030,x2031)
val x2036 = new Tuple2StringOptionAnon1863173035(x1542,x2032)
x2036
}
val x2062 = x2038._2
val x2063 = x2062.defined
val x2073 = if (x2063) {
val x2064 = x2062.value
val x2066 = x2064.schema
x2066
} else {
""
}
val x2074 = if (x2063) {
val x2064 = x2062.value
val x2067 = x2064.hostName
x2067
} else {
""
}
val x2061 = x2038._1
val x2065 = "/"+x2061
val x2075 = if (x2063) {
x2065
} else {
x2065
}
val x2076 = if (x2063) {
val x2064 = x2062.value
val x2068 = x2064.queryString
x2068
} else {
""
}
val x2077 = if (x2063) {
val x2064 = x2062.value
val x2069 = x2064.fragment
x2069
} else {
""
}
val x2078 = if (x2063) {
val x2064 = x2062.value
val x2070 = x2064.port
x2070
} else {
80
}
val x2079 = new Anon1863173035(x2073,x2074,x2075,x2076,x2077,x2078)
x1490 = x2079
x1491 = false
x1492 = x2040
()
}
x2377
}
x2379
}
x2381
} else {
val x2385 = x2013.next
val x2389 = x2385 >= x1509
val x2706 = if (x2389) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
} else {
val x2391 = x1489(x2385)
val x2392 = x2391 == 'H'
val x2704 = if (x2392) {
val x2393 = x2385 + 1
val x2412 = x2393 >= x1509
val x2698 = if (x2412) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
} else {
val x2414 = x1489(x2393)
val x2415 = x2414 == 'T'
val x2696 = if (x2415) {
val x2416 = x2393 + 1
val x2424 = x2416 >= x1509
val x2690 = if (x2424) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
} else {
val x2426 = x1489(x2416)
val x2427 = x2426 == 'T'
val x2688 = if (x2427) {
val x2428 = x2416 + 1
val x2437 = x2428 >= x1509
val x2682 = if (x2437) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
} else {
val x2439 = x1489(x2428)
val x2440 = x2439 == 'P'
val x2680 = if (x2440) {
val x2441 = x2428 + 1
val x2450 = x2441 >= x1509
val x2674 = if (x2450) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
} else {
val x2452 = x1489(x2441)
val x2453 = x2452 == '/'
val x2672 = if (x2453) {
var x2485: Int = 0
var x2486: Boolean = false
val x2454 = x2441 + 1
var x2487: Int = x2454
var x2489: Int = -1
var x2490: Boolean = true
var x2491: Int = x2454
val x2532 = while ({val x2492 = x2490
val x2493 = x2489
val x2494 = x2491
val x2495 = x2493 != x2494
val x2496 = x2492 && x2495
x2496}) {
val x2498 = x2491
x2489 = x2498
val x2500 = x2498 >= x1509
val x2530 = if (x2500) {
x2490 = false
()
} else {
val x2502 = x1489(x2498)
val x2503 = x2502 >= '0'
val x2504 = x2502 <= '9'
val x2505 = x2503 && x2504
val x2528 = if (x2505) {
val x2514 = x2485
val x2515 = x2486
val x2516 = x2487
val x2511 = x2502 - '0'
val x2512 = x2511.toInt
val x2518 = x2514 * 10
val x2519 = x2518 + x2512
x2485 = x2519
x2486 = false
val x2506 = x2498 + 1
x2487 = x2506
x2491 = x2506
()
} else {
x2490 = false
()
}
x2528
}
x2530
}
val x2533 = x2485
val x2534 = x2486
val x2535 = x2487
val x2666 = if (x2534) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2454
()
} else {
val x2538 = x2535 >= x1509
val x2664 = if (x2538) {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2454
()
} else {
val x2540 = x1489(x2535)
val x2541 = x2540 == '.'
val x2662 = if (x2541) {
var x2557: Int = 0
var x2558: Boolean = false
val x2542 = x2535 + 1
var x2559: Int = x2542
var x2561: Int = -1
var x2562: Boolean = true
var x2563: Int = x2542
val x2604 = while ({val x2564 = x2562
val x2565 = x2561
val x2566 = x2563
val x2567 = x2565 != x2566
val x2568 = x2564 && x2567
x2568}) {
val x2570 = x2563
x2561 = x2570
val x2572 = x2570 >= x1509
val x2602 = if (x2572) {
x2562 = false
()
} else {
val x2574 = x1489(x2570)
val x2575 = x2574 >= '0'
val x2576 = x2574 <= '9'
val x2577 = x2575 && x2576
val x2600 = if (x2577) {
val x2586 = x2557
val x2587 = x2558
val x2588 = x2559
val x2583 = x2574 - '0'
val x2584 = x2583.toInt
val x2590 = x2586 * 10
val x2591 = x2590 + x2584
x2557 = x2591
x2558 = false
val x2578 = x2570 + 1
x2559 = x2578
x2563 = x2578
()
} else {
x2562 = false
()
}
x2600
}
x2602
}
val x2605 = x2557
val x2606 = x2558
val x2607 = x2559
val x2612 = if (x2606) {
true
} else {
false
}
val x2621 = if (x2612) {
false
} else {
false
}
val x2626 = if (x2621) {
true
} else {
false
}
val x2650 = if (x2626) {
x161
} else {
val x2625 = if (x2621) {
x935
} else {
val x2383 = x2013.res
val x2384 = new OptionAnon1863173035(x2383,true)
val x2387 = new Tuple2StringOptionAnon1863173035(x1542,x2384)
x2387
}
val x2631 = x2625._2
val x2632 = x2631.defined
val x2642 = if (x2632) {
val x2633 = x2631.value
val x2635 = x2633.schema
x2635
} else {
""
}
val x2643 = if (x2632) {
val x2633 = x2631.value
val x2636 = x2633.hostName
x2636
} else {
""
}
val x2630 = x2625._1
val x2634 = "/"+x2630
val x2644 = if (x2632) {
x2634
} else {
x2634
}
val x2645 = if (x2632) {
val x2633 = x2631.value
val x2637 = x2633.queryString
x2637
} else {
""
}
val x2646 = if (x2632) {
val x2633 = x2631.value
val x2638 = x2633.fragment
x2638
} else {
""
}
val x2647 = if (x2632) {
val x2633 = x2631.value
val x2639 = x2633.port
x2639
} else {
80
}
val x2648 = new Anon1863173035(x2642,x2643,x2644,x2645,x2646,x2647)
x2648
}
x1490 = x2650
val x2651 = if (x2626) {
true
} else {
false
}
x1491 = x2651
val x2627 = if (x2621) {
0
} else {
val x2613 = if (x2606) {
x2454
} else {
x2607
}
val x2622 = if (x2612) {
x2613
} else {
x2613
}
x2622
}
val x2652 = if (x2626) {
x2627
} else {
x2627
}
x1492 = x2652
()
} else {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2454
()
}
x2662
}
x2664
}
x2666
} else {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
}
x2672
}
x2674
} else {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
}
x2680
}
x2682
} else {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
}
x2688
}
x2690
} else {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
}
x2696
}
x2698
} else {
val x2400 = "/"+x1542
val x2383 = x2013.res
val x2401 = x2383.schema
val x2402 = x2383.hostName
val x2403 = x2383.queryString
val x2404 = x2383.fragment
val x2405 = x2383.port
val x2406 = new Anon1863173035(x2401,x2402,x2400,x2403,x2404,x2405)
x1490 = x2406
x1491 = false
x1492 = x2385
()
}
x2704
}
x2706
}
x2708
}
val x2711 = x1490
val x2712 = x1491
val x2713 = x1492
val x2714 = new ParseResultAnon1863173035(x2711,x2712,x2713)
val x2715 = println(x2714)
x2715
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=3000
compilation: ok
ParseResultAnon1863173035(Anon1863173035(,,/,asdf,sadf,80),false,12)
ParseResultAnon1863173035(Anon1863173035(,,/,,asdfadsf,80),false,10)
ParseResultAnon1863173035(Anon1863173035(,,/adsfasd.html,asdf,adsf,80),false,24)
ParseResultAnon1863173035(Anon1863173035(,,/asd,,,80),false,3)
nVars=4000
nVars=5000
nVars=6000
nVars=7000
nVars=8000
nVars=9000
nVars=10000
nVars=11000
nVars=12000
nVars=13000
nVars=14000
nVars=15000
nVars=16000
nVars=17000
nVars=18000
nVars=19000
nVars=20000
nVars=21000
nVars=22000
nVars=23000
nVars=24000
nVars=25000
/*****************************************
  Emitting Generated Code                  
*******************************************/
class urlParse extends ((Array[Char])=>(Unit)) {
def apply(x3943:Array[Char]): Unit = {
val x161 = null.asInstanceOf[Anon1863173035]
var x3944: Anon1863173035 = x161
var x3945: Boolean = true
var x3946: Int = -1
val x1 = null.asInstanceOf[java.lang.String]
val x3954 = x3943.length
val x189 = null.asInstanceOf[Tuple2CharString]
val x4138 = {x3948: (Int) => 
var x3950: java.lang.String = x1
var x3951: Boolean = true
var x3952: Int = x3948
val x3955 = x3948 >= x3954
val x4132 = if (x3955) {
x3950 = x1
x3951 = true
x3952 = x3948
()
} else {
val x3957 = x3943(x3948)
val x3958 = x3957 >= 'a'
val x3959 = x3957 <= 'z'
val x3960 = x3958 && x3959
val x3961 = x3957 >= 'A'
val x3962 = x3957 <= 'Z'
val x3963 = x3961 && x3962
val x3964 = x3960 || x3963
val x4130 = if (x3964) {
var x3974: java.lang.String = ""
var x3975: Boolean = false
val x3965 = x3948 + 1
var x3976: Int = x3965
var x3978: Int = -1
var x3979: Boolean = true
var x3980: Int = x3965
val x4020 = while ({val x3981 = x3979
val x3982 = x3978
val x3983 = x3980
val x3984 = x3982 != x3983
val x3985 = x3981 && x3984
x3985}) {
val x3987 = x3980
x3978 = x3987
val x3989 = x3987 >= x3954
val x4018 = if (x3989) {
x3979 = false
()
} else {
val x3991 = x3943(x3987)
val x3992 = x3991 >= 'a'
val x3993 = x3991 <= 'z'
val x3994 = x3992 && x3993
val x3995 = x3991 >= 'A'
val x3996 = x3991 <= 'Z'
val x3997 = x3995 && x3996
val x3998 = x3994 || x3997
val x4016 = if (x3998) {
val x4003 = x3974
val x4004 = x3975
val x4005 = x3976
val x4007 = x4003+x3991
x3974 = x4007
x3975 = false
val x3999 = x3987 + 1
x3976 = x3999
x3980 = x3999
()
} else {
x3979 = false
()
}
x4016
}
x4018
}
val x4021 = x3974
val x4022 = x3975
val x4023 = x3976
val x4028 = if (x4022) {
true
} else {
false
}
val x4037 = if (x4028) {
true
} else {
false
}
val x4124 = if (x4037) {
val x4036 = if (x4028) {
x1
} else {
val x4027 = if (x4022) {
x189
} else {
val x4025 = new Tuple2CharString(x3957,x4021)
x4025
}
val x4032 = x4027._1
val x4033 = x4027._2
val x4034 = x4032+x4033
x4034
}
x3950 = x4036
x3951 = x4037
val x4029 = if (x4022) {
x3948
} else {
x4023
}
val x4038 = if (x4028) {
x4029
} else {
x4029
}
x3952 = x4038
()
} else {
val x4029 = if (x4022) {
x3948
} else {
x4023
}
val x4038 = if (x4028) {
x4029
} else {
x4029
}
val x4040 = x4038 >= x3954
val x4122 = if (x4040) {
x3950 = x1
x3951 = true
x3952 = x3948
()
} else {
val x4042 = x3943(x4038)
val x4043 = x4042 == ':'
val x4120 = if (x4043) {
val x4044 = x4038 + 1
val x4057 = x4044 >= x3954
val x4114 = if (x4057) {
x3950 = x1
x3951 = true
x3952 = x3948
()
} else {
val x4059 = x3943(x4044)
val x4060 = x4059 == '/'
val x4112 = if (x4060) {
val x4061 = x4044 + 1
val x4069 = x4061 >= x3954
val x4106 = if (x4069) {
x3950 = x1
x3951 = true
x3952 = x3948
()
} else {
val x4071 = x3943(x4061)
val x4072 = x4071 == '/'
val x4104 = if (x4072) {
val x4036 = if (x4028) {
x1
} else {
val x4027 = if (x4022) {
x189
} else {
val x4025 = new Tuple2CharString(x3957,x4021)
x4025
}
val x4032 = x4027._1
val x4033 = x4027._2
val x4034 = x4032+x4033
x4034
}
x3950 = x4036
x3951 = false
val x4073 = x4061 + 1
x3952 = x4073
()
} else {
x3950 = x1
x3951 = true
x3952 = x3948
()
}
x4104
}
x4106
} else {
x3950 = x1
x3951 = true
x3952 = x3948
()
}
x4112
}
x4114
} else {
x3950 = x1
x3951 = true
x3952 = x3948
()
}
x4120
}
x4122
}
x4124
} else {
x3950 = x1
x3951 = true
x3952 = x3948
()
}
x4130
}
val x4133 = x3950
val x4134 = x3951
val x4135 = x3952
val x4136 = new ParseResultString(x4133,x4134,x4135)
x4136
}
val x4178 = x4138(0)
val x4179 = x4178.empty
val x25867 = if (x4179) {
val x4177 = {x4139: (Int) => 
var x4141: java.lang.String = x1
var x4142: Boolean = true
var x4143: Int = x4139
val x4145 = x4139 >= x3954
val x4171 = if (x4145) {
x4141 = x1
x4142 = true
x4143 = x4139
()
} else {
val x4147 = x3943(x4139)
val x4148 = x4147 >= '0'
val x4149 = x4147 <= '9'
val x4150 = x4148 && x4149
val x4151 = x4147 == '.'
val x4152 = x4150 || x4151
val x4169 = if (x4152) {
val x4159 = ""+x4147
x4141 = x4159
x4142 = false
val x4153 = x4139 + 1
x4143 = x4153
()
} else {
x4141 = x1
x4142 = true
x4143 = x4139
()
}
x4169
}
val x4172 = x4141
val x4173 = x4142
val x4174 = x4143
val x4175 = new ParseResultString(x4172,x4173,x4174)
x4175
}
val x4180 = x4177(0)
val x4181 = x4180.empty
val x15814 = if (x4181) {
x3944 = x161
x3945 = true
x3946 = 0
()
} else {
val x4182 = x4180.next
val x4183 = x4182 >= x3954
val x15812 = if (x4183) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x6186 = {x5862: (Int) => 
var x5864: Anon1863173035 = x161
var x5865: Boolean = true
var x5866: Int = x5862
val x5868 = x5862 >= x3954
val x6180 = if (x5868) {
x5864 = x161
x5865 = true
x5866 = x5862
()
} else {
val x5870 = x3943(x5862)
val x5871 = x5870 == '?'
val x6178 = if (x5871) {
var x5879: java.lang.String = ""
var x5880: Boolean = false
val x5872 = x5862 + 1
var x5881: Int = x5872
var x5883: Int = -1
var x5884: Boolean = true
var x5885: Int = x5872
val x5919 = while ({val x5886 = x5884
val x5887 = x5883
val x5888 = x5885
val x5889 = x5887 != x5888
val x5890 = x5886 && x5889
x5890}) {
val x5892 = x5885
x5883 = x5892
val x5894 = x5892 >= x3954
val x5917 = if (x5894) {
x5884 = false
()
} else {
val x5896 = x3943(x5892)
val x5897 = x5896 == '?'
val x5915 = if (x5897) {
val x5902 = x5879
val x5903 = x5880
val x5904 = x5881
val x5906 = x5902+x5896
x5879 = x5906
x5880 = false
val x5898 = x5892 + 1
x5881 = x5898
x5885 = x5898
()
} else {
x5884 = false
()
}
x5915
}
x5917
}
val x5920 = x5879
val x5921 = x5880
val x5922 = x5881
val x6172 = if (x5921) {
x5864 = x161
x5865 = true
x5866 = x5872
()
} else {
var x5938: java.lang.String = ""
var x5939: Boolean = false
var x5940: Int = x5922
var x5942: Int = -1
var x5943: Boolean = true
var x5944: Int = x5922
val x5982 = while ({val x5945 = x5943
val x5946 = x5942
val x5947 = x5944
val x5948 = x5946 != x5947
val x5949 = x5945 && x5948
x5949}) {
val x5951 = x5944
x5942 = x5951
val x5953 = x5951 >= x3954
val x5980 = if (x5953) {
x5943 = false
()
} else {
val x5955 = x3943(x5951)
val x5956 = x5955 > ' '
val x5957 = x5955 != '#'
val x5958 = x5956 && x5957
val x5959 = x5955 != ''
val x5960 = x5958 && x5959
val x5978 = if (x5960) {
val x5965 = x5938
val x5966 = x5939
val x5967 = x5940
val x5969 = x5965+x5955
x5938 = x5969
x5939 = false
val x5961 = x5951 + 1
x5940 = x5961
x5944 = x5961
()
} else {
x5943 = false
()
}
x5978
}
x5980
}
val x5983 = x5938
val x5984 = x5939
val x5985 = x5940
val x6170 = if (x5984) {
x5864 = x161
x5865 = true
x5866 = x5872
()
} else {
val x5987 = x5985 >= x3954
val x6168 = if (x5987) {
val x6001 = new Anon1863173035("","","",x5983,"",80)
x5864 = x6001
x5865 = false
x5866 = x5985
()
} else {
val x5989 = x3943(x5985)
val x5990 = x5989 == '#'
val x6166 = if (x5990) {
var x6008: java.lang.String = ""
var x6009: Boolean = false
val x5991 = x5985 + 1
var x6010: Int = x5991
var x6012: Int = -1
var x6013: Boolean = true
var x6014: Int = x5991
val x6048 = while ({val x6015 = x6013
val x6016 = x6012
val x6017 = x6014
val x6018 = x6016 != x6017
val x6019 = x6015 && x6018
x6019}) {
val x6021 = x6014
x6012 = x6021
val x6023 = x6021 >= x3954
val x6046 = if (x6023) {
x6013 = false
()
} else {
val x6025 = x3943(x6021)
val x6026 = x6025 == '#'
val x6044 = if (x6026) {
val x6031 = x6008
val x6032 = x6009
val x6033 = x6010
val x6035 = x6031+x6025
x6008 = x6035
x6009 = false
val x6027 = x6021 + 1
x6010 = x6027
x6014 = x6027
()
} else {
x6013 = false
()
}
x6044
}
x6046
}
val x6049 = x6008
val x6050 = x6009
val x6051 = x6010
val x6160 = if (x6050) {
val x6001 = new Anon1863173035("","","",x5983,"",80)
x5864 = x6001
x5865 = false
x5866 = x5991
()
} else {
var x6063: java.lang.String = ""
var x6064: Boolean = false
var x6065: Int = x6051
var x6067: Int = -1
var x6068: Boolean = true
var x6069: Int = x6051
val x6105 = while ({val x6070 = x6068
val x6071 = x6067
val x6072 = x6069
val x6073 = x6071 != x6072
val x6074 = x6070 && x6073
x6074}) {
val x6076 = x6069
x6067 = x6076
val x6078 = x6076 >= x3954
val x6103 = if (x6078) {
x6068 = false
()
} else {
val x6080 = x3943(x6076)
val x6081 = x6080 > ' '
val x6082 = x6080 != ''
val x6083 = x6081 && x6082
val x6101 = if (x6083) {
val x6088 = x6063
val x6089 = x6064
val x6090 = x6065
val x6092 = x6088+x6080
x6063 = x6092
x6064 = false
val x6084 = x6076 + 1
x6065 = x6084
x6069 = x6084
()
} else {
x6068 = false
()
}
x6101
}
x6103
}
val x6106 = x6063
val x6107 = x6064
val x6108 = x6065
val x6114 = if (x6107) {
true
} else {
false
}
val x6123 = if (x6114) {
false
} else {
false
}
val x6129 = if (x6123) {
true
} else {
false
}
val x6152 = if (x6129) {
x161
} else {
val x6128 = if (x6123) {
x935
} else {
val x6120 = if (x6114) {
x161
} else {
val x6113 = if (x6107) {
x161
} else {
val x6111 = new Anon1863173035("","","","",x6106,80)
x6111
}
x6113
}
val x6121 = if (x6114) {
false
} else {
true
}
val x6122 = new OptionAnon1863173035(x6120,x6121)
val x6126 = new Tuple2StringOptionAnon1863173035(x5983,x6122)
x6126
}
val x6134 = x6128._2
val x6135 = x6134.defined
val x6144 = if (x6135) {
val x6136 = x6134.value
val x6137 = x6136.schema
x6137
} else {
""
}
val x6145 = if (x6135) {
val x6136 = x6134.value
val x6138 = x6136.hostName
x6138
} else {
""
}
val x6146 = if (x6135) {
val x6136 = x6134.value
val x6139 = x6136.path
x6139
} else {
""
}
val x6133 = x6128._1
val x6147 = if (x6135) {
x6133
} else {
x6133
}
val x6148 = if (x6135) {
val x6136 = x6134.value
val x6140 = x6136.fragment
x6140
} else {
""
}
val x6149 = if (x6135) {
val x6136 = x6134.value
val x6141 = x6136.port
x6141
} else {
80
}
val x6150 = new Anon1863173035(x6144,x6145,x6146,x6147,x6148,x6149)
x6150
}
x5864 = x6152
val x6153 = if (x6129) {
true
} else {
false
}
x5865 = x6153
val x6130 = if (x6123) {
x5872
} else {
val x6115 = if (x6107) {
x6108
} else {
x6108
}
val x6124 = if (x6114) {
x6115
} else {
x6115
}
x6124
}
val x6154 = if (x6129) {
x6130
} else {
x6130
}
x5866 = x6154
()
}
x6160
} else {
val x6001 = new Anon1863173035("","","",x5983,"",80)
x5864 = x6001
x5865 = false
x5866 = x5985
()
}
x6166
}
x6168
}
x6170
}
x6172
} else {
x5864 = x161
x5865 = true
x5866 = x5862
()
}
x6178
}
val x6181 = x5864
val x6182 = x5865
val x6183 = x5866
val x6184 = new ParseResultAnon1863173035(x6181,x6182,x6183)
x6184
}
val x6328 = {x6187: (Int) => 
var x6189: Anon1863173035 = x161
var x6190: Boolean = true
var x6191: Int = x6187
val x6193 = x6187 >= x3954
val x6322 = if (x6193) {
x6189 = x161
x6190 = true
x6191 = x6187
()
} else {
val x6195 = x3943(x6187)
val x6196 = x6195 == '#'
val x6320 = if (x6196) {
var x6204: java.lang.String = ""
var x6205: Boolean = false
val x6197 = x6187 + 1
var x6206: Int = x6197
var x6208: Int = -1
var x6209: Boolean = true
var x6210: Int = x6197
val x6244 = while ({val x6211 = x6209
val x6212 = x6208
val x6213 = x6210
val x6214 = x6212 != x6213
val x6215 = x6211 && x6214
x6215}) {
val x6217 = x6210
x6208 = x6217
val x6219 = x6217 >= x3954
val x6242 = if (x6219) {
x6209 = false
()
} else {
val x6221 = x3943(x6217)
val x6222 = x6221 == '#'
val x6240 = if (x6222) {
val x6227 = x6204
val x6228 = x6205
val x6229 = x6206
val x6231 = x6227+x6221
x6204 = x6231
x6205 = false
val x6223 = x6217 + 1
x6206 = x6223
x6210 = x6223
()
} else {
x6209 = false
()
}
x6240
}
x6242
}
val x6245 = x6204
val x6246 = x6205
val x6247 = x6206
val x6314 = if (x6246) {
x6189 = x161
x6190 = true
x6191 = x6197
()
} else {
var x6256: java.lang.String = ""
var x6257: Boolean = false
var x6258: Int = x6247
var x6260: Int = -1
var x6261: Boolean = true
var x6262: Int = x6247
val x6298 = while ({val x6263 = x6261
val x6264 = x6260
val x6265 = x6262
val x6266 = x6264 != x6265
val x6267 = x6263 && x6266
x6267}) {
val x6269 = x6262
x6260 = x6269
val x6271 = x6269 >= x3954
val x6296 = if (x6271) {
x6261 = false
()
} else {
val x6273 = x3943(x6269)
val x6274 = x6273 > ' '
val x6275 = x6273 != ''
val x6276 = x6274 && x6275
val x6294 = if (x6276) {
val x6281 = x6256
val x6282 = x6257
val x6283 = x6258
val x6285 = x6281+x6273
x6256 = x6285
x6257 = false
val x6277 = x6269 + 1
x6258 = x6277
x6262 = x6277
()
} else {
x6261 = false
()
}
x6294
}
x6296
}
val x6299 = x6256
val x6300 = x6257
val x6301 = x6258
val x6306 = if (x6300) {
x161
} else {
val x6304 = new Anon1863173035("","","","",x6299,80)
x6304
}
x6189 = x6306
val x6307 = if (x6300) {
true
} else {
false
}
x6190 = x6307
val x6308 = if (x6300) {
x6301
} else {
x6301
}
x6191 = x6308
()
}
x6314
} else {
x6189 = x161
x6190 = true
x6191 = x6187
()
}
x6320
}
val x6323 = x6189
val x6324 = x6190
val x6325 = x6191
val x6326 = new ParseResultAnon1863173035(x6323,x6324,x6325)
x6326
}
val x7041 = {x5793: (Int) => 
var x5795: Anon1863173035 = x161
var x5796: Boolean = true
var x5797: Int = x5793
val x5799 = x5793 >= x3954
val x7035 = if (x5799) {
x5795 = x161
x5796 = true
x5797 = x5793
()
} else {
val x5801 = x3943(x5793)
val x5802 = x5801 == '/'
val x7033 = if (x5802) {
var x5810: java.lang.String = ""
var x5811: Boolean = false
val x5803 = x5793 + 1
var x5812: Int = x5803
var x5814: Int = -1
var x5815: Boolean = true
var x5816: Int = x5803
val x5856 = while ({val x5817 = x5815
val x5818 = x5814
val x5819 = x5816
val x5820 = x5818 != x5819
val x5821 = x5817 && x5820
x5821}) {
val x5823 = x5816
x5814 = x5823
val x5825 = x5823 >= x3954
val x5854 = if (x5825) {
x5815 = false
()
} else {
val x5827 = x3943(x5823)
val x5828 = x5827 > ' '
val x5829 = x5827 != '#'
val x5830 = x5828 && x5829
val x5831 = x5827 != '?'
val x5832 = x5830 && x5831
val x5833 = x5827 != ''
val x5834 = x5832 && x5833
val x5852 = if (x5834) {
val x5839 = x5810
val x5840 = x5811
val x5841 = x5812
val x5843 = x5839+x5827
x5810 = x5843
x5811 = false
val x5835 = x5823 + 1
x5812 = x5835
x5816 = x5835
()
} else {
x5815 = false
()
}
x5852
}
x5854
}
val x5857 = x5810
val x5858 = x5811
val x5859 = x5812
val x7027 = if (x5858) {
x5795 = x161
x5796 = true
x5797 = x5803
()
} else {
val x6329 = x6186(x5859)
val x6341 = x6329.empty
val x7025 = if (x6341) {
val x6342 = x6328(x5859)
val x6343 = x6342.empty
val x6352 = if (x6343) {
false
} else {
false
}
val x6358 = if (x6352) {
true
} else {
false
}
val x6698 = if (x6358) {
x5795 = x161
x5796 = true
val x6359 = if (x6352) {
x5803
} else {
val x6344 = x6342.next
val x6353 = if (x6343) {
x6344
} else {
x6344
}
x6353
}
x5797 = x6359
()
} else {
val x6359 = if (x6352) {
x5803
} else {
val x6344 = x6342.next
val x6353 = if (x6343) {
x6344
} else {
x6344
}
x6353
}
val x6361 = x6359 >= x3954
val x6696 = if (x6361) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
} else {
val x6363 = x3943(x6359)
val x6364 = x6363 == 'H'
val x6694 = if (x6364) {
val x6365 = x6359 + 1
val x6402 = x6365 >= x3954
val x6688 = if (x6402) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
} else {
val x6404 = x3943(x6365)
val x6405 = x6404 == 'T'
val x6686 = if (x6405) {
val x6406 = x6365 + 1
val x6414 = x6406 >= x3954
val x6680 = if (x6414) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
} else {
val x6416 = x3943(x6406)
val x6417 = x6416 == 'T'
val x6678 = if (x6417) {
val x6418 = x6406 + 1
val x6427 = x6418 >= x3954
val x6672 = if (x6427) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
} else {
val x6429 = x3943(x6418)
val x6430 = x6429 == 'P'
val x6670 = if (x6430) {
val x6431 = x6418 + 1
val x6440 = x6431 >= x3954
val x6664 = if (x6440) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
} else {
val x6442 = x3943(x6431)
val x6443 = x6442 == '/'
val x6662 = if (x6443) {
var x6475: Int = 0
var x6476: Boolean = false
val x6444 = x6431 + 1
var x6477: Int = x6444
var x6479: Int = -1
var x6480: Boolean = true
var x6481: Int = x6444
val x6522 = while ({val x6482 = x6480
val x6483 = x6479
val x6484 = x6481
val x6485 = x6483 != x6484
val x6486 = x6482 && x6485
x6486}) {
val x6488 = x6481
x6479 = x6488
val x6490 = x6488 >= x3954
val x6520 = if (x6490) {
x6480 = false
()
} else {
val x6492 = x3943(x6488)
val x6493 = x6492 >= '0'
val x6494 = x6492 <= '9'
val x6495 = x6493 && x6494
val x6518 = if (x6495) {
val x6504 = x6475
val x6505 = x6476
val x6506 = x6477
val x6501 = x6492 - '0'
val x6502 = x6501.toInt
val x6508 = x6504 * 10
val x6509 = x6508 + x6502
x6475 = x6509
x6476 = false
val x6496 = x6488 + 1
x6477 = x6496
x6481 = x6496
()
} else {
x6480 = false
()
}
x6518
}
x6520
}
val x6523 = x6475
val x6524 = x6476
val x6525 = x6477
val x6656 = if (x6524) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6444
()
} else {
val x6528 = x6525 >= x3954
val x6654 = if (x6528) {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6444
()
} else {
val x6530 = x3943(x6525)
val x6531 = x6530 == '.'
val x6652 = if (x6531) {
var x6547: Int = 0
var x6548: Boolean = false
val x6532 = x6525 + 1
var x6549: Int = x6532
var x6551: Int = -1
var x6552: Boolean = true
var x6553: Int = x6532
val x6594 = while ({val x6554 = x6552
val x6555 = x6551
val x6556 = x6553
val x6557 = x6555 != x6556
val x6558 = x6554 && x6557
x6558}) {
val x6560 = x6553
x6551 = x6560
val x6562 = x6560 >= x3954
val x6592 = if (x6562) {
x6552 = false
()
} else {
val x6564 = x3943(x6560)
val x6565 = x6564 >= '0'
val x6566 = x6564 <= '9'
val x6567 = x6565 && x6566
val x6590 = if (x6567) {
val x6576 = x6547
val x6577 = x6548
val x6578 = x6549
val x6573 = x6564 - '0'
val x6574 = x6573.toInt
val x6580 = x6576 * 10
val x6581 = x6580 + x6574
x6547 = x6581
x6548 = false
val x6568 = x6560 + 1
x6549 = x6568
x6553 = x6568
()
} else {
x6552 = false
()
}
x6590
}
x6592
}
val x6595 = x6547
val x6596 = x6548
val x6597 = x6549
val x6602 = if (x6596) {
true
} else {
false
}
val x6611 = if (x6602) {
false
} else {
false
}
val x6616 = if (x6611) {
true
} else {
false
}
val x6640 = if (x6616) {
x161
} else {
val x6615 = if (x6611) {
x935
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
x6357
}
val x6621 = x6615._2
val x6622 = x6621.defined
val x6632 = if (x6622) {
val x6623 = x6621.value
val x6625 = x6623.schema
x6625
} else {
""
}
val x6633 = if (x6622) {
val x6623 = x6621.value
val x6626 = x6623.hostName
x6626
} else {
""
}
val x6620 = x6615._1
val x6624 = "/"+x6620
val x6634 = if (x6622) {
x6624
} else {
x6624
}
val x6635 = if (x6622) {
val x6623 = x6621.value
val x6627 = x6623.queryString
x6627
} else {
""
}
val x6636 = if (x6622) {
val x6623 = x6621.value
val x6628 = x6623.fragment
x6628
} else {
""
}
val x6637 = if (x6622) {
val x6623 = x6621.value
val x6629 = x6623.port
x6629
} else {
80
}
val x6638 = new Anon1863173035(x6632,x6633,x6634,x6635,x6636,x6637)
x6638
}
x5795 = x6640
val x6641 = if (x6616) {
true
} else {
false
}
x5796 = x6641
val x6617 = if (x6611) {
x5803
} else {
val x6603 = if (x6596) {
x6444
} else {
x6597
}
val x6612 = if (x6602) {
x6603
} else {
x6603
}
x6612
}
val x6642 = if (x6616) {
x6617
} else {
x6617
}
x5797 = x6642
()
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6444
()
}
x6652
}
x6654
}
x6656
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
}
x6662
}
x6664
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
}
x6670
}
x6672
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
}
x6678
}
x6680
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
}
x6686
}
x6688
} else {
val x6357 = if (x6352) {
x935
} else {
val x6349 = if (x6343) {
x161
} else {
val x6346 = x6342.res
x6346
}
val x6350 = if (x6343) {
false
} else {
true
}
val x6351 = new OptionAnon1863173035(x6349,x6350)
val x6355 = new Tuple2StringOptionAnon1863173035(x5857,x6351)
x6355
}
val x6379 = x6357._2
val x6380 = x6379.defined
val x6390 = if (x6380) {
val x6381 = x6379.value
val x6383 = x6381.schema
x6383
} else {
""
}
val x6391 = if (x6380) {
val x6381 = x6379.value
val x6384 = x6381.hostName
x6384
} else {
""
}
val x6378 = x6357._1
val x6382 = "/"+x6378
val x6392 = if (x6380) {
x6382
} else {
x6382
}
val x6393 = if (x6380) {
val x6381 = x6379.value
val x6385 = x6381.queryString
x6385
} else {
""
}
val x6394 = if (x6380) {
val x6381 = x6379.value
val x6386 = x6381.fragment
x6386
} else {
""
}
val x6395 = if (x6380) {
val x6381 = x6379.value
val x6387 = x6381.port
x6387
} else {
80
}
val x6396 = new Anon1863173035(x6390,x6391,x6392,x6393,x6394,x6395)
x5795 = x6396
x5796 = false
x5797 = x6359
()
}
x6694
}
x6696
}
x6698
} else {
val x6702 = x6329.next
val x6706 = x6702 >= x3954
val x7023 = if (x6706) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
} else {
val x6708 = x3943(x6702)
val x6709 = x6708 == 'H'
val x7021 = if (x6709) {
val x6710 = x6702 + 1
val x6729 = x6710 >= x3954
val x7015 = if (x6729) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
} else {
val x6731 = x3943(x6710)
val x6732 = x6731 == 'T'
val x7013 = if (x6732) {
val x6733 = x6710 + 1
val x6741 = x6733 >= x3954
val x7007 = if (x6741) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
} else {
val x6743 = x3943(x6733)
val x6744 = x6743 == 'T'
val x7005 = if (x6744) {
val x6745 = x6733 + 1
val x6754 = x6745 >= x3954
val x6999 = if (x6754) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
} else {
val x6756 = x3943(x6745)
val x6757 = x6756 == 'P'
val x6997 = if (x6757) {
val x6758 = x6745 + 1
val x6767 = x6758 >= x3954
val x6991 = if (x6767) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
} else {
val x6769 = x3943(x6758)
val x6770 = x6769 == '/'
val x6989 = if (x6770) {
var x6802: Int = 0
var x6803: Boolean = false
val x6771 = x6758 + 1
var x6804: Int = x6771
var x6806: Int = -1
var x6807: Boolean = true
var x6808: Int = x6771
val x6849 = while ({val x6809 = x6807
val x6810 = x6806
val x6811 = x6808
val x6812 = x6810 != x6811
val x6813 = x6809 && x6812
x6813}) {
val x6815 = x6808
x6806 = x6815
val x6817 = x6815 >= x3954
val x6847 = if (x6817) {
x6807 = false
()
} else {
val x6819 = x3943(x6815)
val x6820 = x6819 >= '0'
val x6821 = x6819 <= '9'
val x6822 = x6820 && x6821
val x6845 = if (x6822) {
val x6831 = x6802
val x6832 = x6803
val x6833 = x6804
val x6828 = x6819 - '0'
val x6829 = x6828.toInt
val x6835 = x6831 * 10
val x6836 = x6835 + x6829
x6802 = x6836
x6803 = false
val x6823 = x6815 + 1
x6804 = x6823
x6808 = x6823
()
} else {
x6807 = false
()
}
x6845
}
x6847
}
val x6850 = x6802
val x6851 = x6803
val x6852 = x6804
val x6983 = if (x6851) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6771
()
} else {
val x6855 = x6852 >= x3954
val x6981 = if (x6855) {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6771
()
} else {
val x6857 = x3943(x6852)
val x6858 = x6857 == '.'
val x6979 = if (x6858) {
var x6874: Int = 0
var x6875: Boolean = false
val x6859 = x6852 + 1
var x6876: Int = x6859
var x6878: Int = -1
var x6879: Boolean = true
var x6880: Int = x6859
val x6921 = while ({val x6881 = x6879
val x6882 = x6878
val x6883 = x6880
val x6884 = x6882 != x6883
val x6885 = x6881 && x6884
x6885}) {
val x6887 = x6880
x6878 = x6887
val x6889 = x6887 >= x3954
val x6919 = if (x6889) {
x6879 = false
()
} else {
val x6891 = x3943(x6887)
val x6892 = x6891 >= '0'
val x6893 = x6891 <= '9'
val x6894 = x6892 && x6893
val x6917 = if (x6894) {
val x6903 = x6874
val x6904 = x6875
val x6905 = x6876
val x6900 = x6891 - '0'
val x6901 = x6900.toInt
val x6907 = x6903 * 10
val x6908 = x6907 + x6901
x6874 = x6908
x6875 = false
val x6895 = x6887 + 1
x6876 = x6895
x6880 = x6895
()
} else {
x6879 = false
()
}
x6917
}
x6919
}
val x6922 = x6874
val x6923 = x6875
val x6924 = x6876
val x6929 = if (x6923) {
true
} else {
false
}
val x6938 = if (x6929) {
false
} else {
false
}
val x6943 = if (x6938) {
true
} else {
false
}
val x6967 = if (x6943) {
x161
} else {
val x6942 = if (x6938) {
x935
} else {
val x6700 = x6329.res
val x6701 = new OptionAnon1863173035(x6700,true)
val x6704 = new Tuple2StringOptionAnon1863173035(x5857,x6701)
x6704
}
val x6948 = x6942._2
val x6949 = x6948.defined
val x6959 = if (x6949) {
val x6950 = x6948.value
val x6952 = x6950.schema
x6952
} else {
""
}
val x6960 = if (x6949) {
val x6950 = x6948.value
val x6953 = x6950.hostName
x6953
} else {
""
}
val x6947 = x6942._1
val x6951 = "/"+x6947
val x6961 = if (x6949) {
x6951
} else {
x6951
}
val x6962 = if (x6949) {
val x6950 = x6948.value
val x6954 = x6950.queryString
x6954
} else {
""
}
val x6963 = if (x6949) {
val x6950 = x6948.value
val x6955 = x6950.fragment
x6955
} else {
""
}
val x6964 = if (x6949) {
val x6950 = x6948.value
val x6956 = x6950.port
x6956
} else {
80
}
val x6965 = new Anon1863173035(x6959,x6960,x6961,x6962,x6963,x6964)
x6965
}
x5795 = x6967
val x6968 = if (x6943) {
true
} else {
false
}
x5796 = x6968
val x6944 = if (x6938) {
x5803
} else {
val x6930 = if (x6923) {
x6771
} else {
x6924
}
val x6939 = if (x6929) {
x6930
} else {
x6930
}
x6939
}
val x6969 = if (x6943) {
x6944
} else {
x6944
}
x5797 = x6969
()
} else {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6771
()
}
x6979
}
x6981
}
x6983
} else {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
}
x6989
}
x6991
} else {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
}
x6997
}
x6999
} else {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
}
x7005
}
x7007
} else {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
}
x7013
}
x7015
} else {
val x6717 = "/"+x5857
val x6700 = x6329.res
val x6718 = x6700.schema
val x6719 = x6700.hostName
val x6720 = x6700.queryString
val x6721 = x6700.fragment
val x6722 = x6700.port
val x6723 = new Anon1863173035(x6718,x6719,x6717,x6720,x6721,x6722)
x5795 = x6723
x5796 = false
x5797 = x6702
()
}
x7021
}
x7023
}
x7025
}
x7027
} else {
x5795 = x161
x5796 = true
x5797 = x5793
()
}
x7033
}
val x7036 = x5795
val x7037 = x5796
val x7038 = x5797
val x7039 = new ParseResultAnon1863173035(x7036,x7037,x7038)
x7039
}
val x7367 = x7041(x4182)
val x7368 = x7367.empty
val x7425 = if (x7368) {
val x7366 = {x7042: (Int) => 
var x7044: Anon1863173035 = x161
var x7045: Boolean = true
var x7046: Int = x7042
val x7048 = x7042 >= x3954
val x7360 = if (x7048) {
x7044 = x161
x7045 = true
x7046 = x7042
()
} else {
val x7050 = x3943(x7042)
val x7051 = x7050 == '?'
val x7358 = if (x7051) {
var x7059: java.lang.String = ""
var x7060: Boolean = false
val x7052 = x7042 + 1
var x7061: Int = x7052
var x7063: Int = -1
var x7064: Boolean = true
var x7065: Int = x7052
val x7099 = while ({val x7066 = x7064
val x7067 = x7063
val x7068 = x7065
val x7069 = x7067 != x7068
val x7070 = x7066 && x7069
x7070}) {
val x7072 = x7065
x7063 = x7072
val x7074 = x7072 >= x3954
val x7097 = if (x7074) {
x7064 = false
()
} else {
val x7076 = x3943(x7072)
val x7077 = x7076 == '?'
val x7095 = if (x7077) {
val x7082 = x7059
val x7083 = x7060
val x7084 = x7061
val x7086 = x7082+x7076
x7059 = x7086
x7060 = false
val x7078 = x7072 + 1
x7061 = x7078
x7065 = x7078
()
} else {
x7064 = false
()
}
x7095
}
x7097
}
val x7100 = x7059
val x7101 = x7060
val x7102 = x7061
val x7352 = if (x7101) {
x7044 = x161
x7045 = true
x7046 = x7052
()
} else {
var x7118: java.lang.String = ""
var x7119: Boolean = false
var x7120: Int = x7102
var x7122: Int = -1
var x7123: Boolean = true
var x7124: Int = x7102
val x7162 = while ({val x7125 = x7123
val x7126 = x7122
val x7127 = x7124
val x7128 = x7126 != x7127
val x7129 = x7125 && x7128
x7129}) {
val x7131 = x7124
x7122 = x7131
val x7133 = x7131 >= x3954
val x7160 = if (x7133) {
x7123 = false
()
} else {
val x7135 = x3943(x7131)
val x7136 = x7135 > ' '
val x7137 = x7135 != '#'
val x7138 = x7136 && x7137
val x7139 = x7135 != ''
val x7140 = x7138 && x7139
val x7158 = if (x7140) {
val x7145 = x7118
val x7146 = x7119
val x7147 = x7120
val x7149 = x7145+x7135
x7118 = x7149
x7119 = false
val x7141 = x7131 + 1
x7120 = x7141
x7124 = x7141
()
} else {
x7123 = false
()
}
x7158
}
x7160
}
val x7163 = x7118
val x7164 = x7119
val x7165 = x7120
val x7350 = if (x7164) {
x7044 = x161
x7045 = true
x7046 = x7052
()
} else {
val x7167 = x7165 >= x3954
val x7348 = if (x7167) {
val x7181 = new Anon1863173035("","","",x7163,"",80)
x7044 = x7181
x7045 = false
x7046 = x7165
()
} else {
val x7169 = x3943(x7165)
val x7170 = x7169 == '#'
val x7346 = if (x7170) {
var x7188: java.lang.String = ""
var x7189: Boolean = false
val x7171 = x7165 + 1
var x7190: Int = x7171
var x7192: Int = -1
var x7193: Boolean = true
var x7194: Int = x7171
val x7228 = while ({val x7195 = x7193
val x7196 = x7192
val x7197 = x7194
val x7198 = x7196 != x7197
val x7199 = x7195 && x7198
x7199}) {
val x7201 = x7194
x7192 = x7201
val x7203 = x7201 >= x3954
val x7226 = if (x7203) {
x7193 = false
()
} else {
val x7205 = x3943(x7201)
val x7206 = x7205 == '#'
val x7224 = if (x7206) {
val x7211 = x7188
val x7212 = x7189
val x7213 = x7190
val x7215 = x7211+x7205
x7188 = x7215
x7189 = false
val x7207 = x7201 + 1
x7190 = x7207
x7194 = x7207
()
} else {
x7193 = false
()
}
x7224
}
x7226
}
val x7229 = x7188
val x7230 = x7189
val x7231 = x7190
val x7340 = if (x7230) {
val x7181 = new Anon1863173035("","","",x7163,"",80)
x7044 = x7181
x7045 = false
x7046 = x7171
()
} else {
var x7243: java.lang.String = ""
var x7244: Boolean = false
var x7245: Int = x7231
var x7247: Int = -1
var x7248: Boolean = true
var x7249: Int = x7231
val x7285 = while ({val x7250 = x7248
val x7251 = x7247
val x7252 = x7249
val x7253 = x7251 != x7252
val x7254 = x7250 && x7253
x7254}) {
val x7256 = x7249
x7247 = x7256
val x7258 = x7256 >= x3954
val x7283 = if (x7258) {
x7248 = false
()
} else {
val x7260 = x3943(x7256)
val x7261 = x7260 > ' '
val x7262 = x7260 != ''
val x7263 = x7261 && x7262
val x7281 = if (x7263) {
val x7268 = x7243
val x7269 = x7244
val x7270 = x7245
val x7272 = x7268+x7260
x7243 = x7272
x7244 = false
val x7264 = x7256 + 1
x7245 = x7264
x7249 = x7264
()
} else {
x7248 = false
()
}
x7281
}
x7283
}
val x7286 = x7243
val x7287 = x7244
val x7288 = x7245
val x7294 = if (x7287) {
true
} else {
false
}
val x7303 = if (x7294) {
false
} else {
false
}
val x7309 = if (x7303) {
true
} else {
false
}
val x7332 = if (x7309) {
x161
} else {
val x7308 = if (x7303) {
x935
} else {
val x7300 = if (x7294) {
x161
} else {
val x7293 = if (x7287) {
x161
} else {
val x7291 = new Anon1863173035("","","","",x7286,80)
x7291
}
x7293
}
val x7301 = if (x7294) {
false
} else {
true
}
val x7302 = new OptionAnon1863173035(x7300,x7301)
val x7306 = new Tuple2StringOptionAnon1863173035(x7163,x7302)
x7306
}
val x7314 = x7308._2
val x7315 = x7314.defined
val x7324 = if (x7315) {
val x7316 = x7314.value
val x7317 = x7316.schema
x7317
} else {
""
}
val x7325 = if (x7315) {
val x7316 = x7314.value
val x7318 = x7316.hostName
x7318
} else {
""
}
val x7326 = if (x7315) {
val x7316 = x7314.value
val x7319 = x7316.path
x7319
} else {
""
}
val x7313 = x7308._1
val x7327 = if (x7315) {
x7313
} else {
x7313
}
val x7328 = if (x7315) {
val x7316 = x7314.value
val x7320 = x7316.fragment
x7320
} else {
""
}
val x7329 = if (x7315) {
val x7316 = x7314.value
val x7321 = x7316.port
x7321
} else {
80
}
val x7330 = new Anon1863173035(x7324,x7325,x7326,x7327,x7328,x7329)
x7330
}
x7044 = x7332
val x7333 = if (x7309) {
true
} else {
false
}
x7045 = x7333
val x7310 = if (x7303) {
x7052
} else {
val x7295 = if (x7287) {
x7288
} else {
x7288
}
val x7304 = if (x7294) {
x7295
} else {
x7295
}
x7304
}
val x7334 = if (x7309) {
x7310
} else {
x7310
}
x7046 = x7334
()
}
x7340
} else {
val x7181 = new Anon1863173035("","","",x7163,"",80)
x7044 = x7181
x7045 = false
x7046 = x7165
()
}
x7346
}
x7348
}
x7350
}
x7352
} else {
x7044 = x161
x7045 = true
x7046 = x7042
()
}
x7358
}
val x7361 = x7044
val x7362 = x7045
val x7363 = x7046
val x7364 = new ParseResultAnon1863173035(x7361,x7362,x7363)
x7364
}
val x7369 = x7366(x4182)
val x7370 = x7369.empty
val x7376 = if (x7370) {
true
} else {
false
}
val x7402 = if (x7376) {
x161
} else {
val x7375 = if (x7370) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x1006 = new OptionAnon1863173035(x161,false)
val x5790 = x4180.res
val x5791 = new Tuple2StringOptionAnon1863173035(x5790,x1006)
val x7371 = x7369.res
val x7372 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x5791,x7371)
x7372
}
val x7380 = x7375._1
val x7382 = x7380._1
val x7383 = x7380._2
val x7384 = x7383.defined
val x7394 = if (x7384) {
x7382
} else {
x7382
}
val x7381 = x7375._2
val x7395 = if (x7384) {
val x7385 = x7383.value
val x7386 = x7385.hostName
x7386
} else {
val x7392 = x7381.hostName
x7392
}
val x7387 = x7381.path
val x7396 = if (x7384) {
x7387
} else {
x7387
}
val x7388 = x7381.queryString
val x7397 = if (x7384) {
x7388
} else {
x7388
}
val x7389 = x7381.fragment
val x7398 = if (x7384) {
x7389
} else {
x7389
}
val x7390 = x7381.port
val x7399 = if (x7384) {
x7390
} else {
x7390
}
val x7400 = new Anon1863173035(x7394,x7395,x7396,x7397,x7398,x7399)
x7400
}
x3944 = x7402
val x7403 = if (x7376) {
true
} else {
false
}
x3945 = x7403
val x7377 = if (x7370) {
0
} else {
val x7373 = x7369.next
x7373
}
val x7404 = if (x7376) {
x7377
} else {
x7377
}
x3946 = x7404
()
} else {
val x5790 = x4180.res
val x7410 = x7367.res
val x7414 = x7410.hostName
val x7415 = x7410.path
val x7416 = x7410.queryString
val x7417 = x7410.fragment
val x7418 = x7410.port
val x7419 = new Anon1863173035(x5790,x7414,x7415,x7416,x7417,x7418)
x3944 = x7419
x3945 = false
val x7412 = x7367.next
x3946 = x7412
()
}
x7425
} else {
val x4185 = x3943(x4182)
val x4186 = x4185 >= '0'
val x4187 = x4185 <= '9'
val x4188 = x4186 && x4187
val x4189 = x4185 >= 'a'
val x4190 = x4185 <= 'z'
val x4191 = x4189 && x4190
val x4192 = x4185 >= 'A'
val x4193 = x4185 <= 'Z'
val x4194 = x4192 && x4193
val x4195 = x4191 || x4194
val x4196 = x4188 || x4195
val x4197 = x4185 == '-'
val x4198 = x4196 || x4197
val x4199 = x4185 == '.'
val x4200 = x4198 || x4199
val x15810 = if (x4200) {
var x7428: java.lang.String = ""
var x7429: Boolean = false
val x4201 = x4182 + 1
var x7430: Int = x4201
var x7432: Int = -1
var x7433: Boolean = true
var x7434: Int = x4201
val x7482 = while ({val x7435 = x7433
val x7436 = x7432
val x7437 = x7434
val x7438 = x7436 != x7437
val x7439 = x7435 && x7438
x7439}) {
val x7441 = x7434
x7432 = x7441
val x7443 = x7441 >= x3954
val x7480 = if (x7443) {
x7433 = false
()
} else {
val x7445 = x3943(x7441)
val x7446 = x7445 >= '0'
val x7447 = x7445 <= '9'
val x7448 = x7446 && x7447
val x7449 = x7445 >= 'a'
val x7450 = x7445 <= 'z'
val x7451 = x7449 && x7450
val x7452 = x7445 >= 'A'
val x7453 = x7445 <= 'Z'
val x7454 = x7452 && x7453
val x7455 = x7451 || x7454
val x7456 = x7448 || x7455
val x7457 = x7445 == '-'
val x7458 = x7456 || x7457
val x7459 = x7445 == '.'
val x7460 = x7458 || x7459
val x7478 = if (x7460) {
val x7465 = x7428
val x7466 = x7429
val x7467 = x7430
val x7469 = x7465+x7445
x7428 = x7469
x7429 = false
val x7461 = x7441 + 1
x7430 = x7461
x7434 = x7461
()
} else {
x7433 = false
()
}
x7478
}
x7480
}
val x7483 = x7428
val x7484 = x7429
val x7485 = x7430
val x7490 = if (x7484) {
true
} else {
false
}
val x7499 = if (x7490) {
true
} else {
false
}
val x14174 = if (x7499) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x7901 = {x7577: (Int) => 
var x7579: Anon1863173035 = x161
var x7580: Boolean = true
var x7581: Int = x7577
val x7583 = x7577 >= x3954
val x7895 = if (x7583) {
x7579 = x161
x7580 = true
x7581 = x7577
()
} else {
val x7585 = x3943(x7577)
val x7586 = x7585 == '?'
val x7893 = if (x7586) {
var x7594: java.lang.String = ""
var x7595: Boolean = false
val x7587 = x7577 + 1
var x7596: Int = x7587
var x7598: Int = -1
var x7599: Boolean = true
var x7600: Int = x7587
val x7634 = while ({val x7601 = x7599
val x7602 = x7598
val x7603 = x7600
val x7604 = x7602 != x7603
val x7605 = x7601 && x7604
x7605}) {
val x7607 = x7600
x7598 = x7607
val x7609 = x7607 >= x3954
val x7632 = if (x7609) {
x7599 = false
()
} else {
val x7611 = x3943(x7607)
val x7612 = x7611 == '?'
val x7630 = if (x7612) {
val x7617 = x7594
val x7618 = x7595
val x7619 = x7596
val x7621 = x7617+x7611
x7594 = x7621
x7595 = false
val x7613 = x7607 + 1
x7596 = x7613
x7600 = x7613
()
} else {
x7599 = false
()
}
x7630
}
x7632
}
val x7635 = x7594
val x7636 = x7595
val x7637 = x7596
val x7887 = if (x7636) {
x7579 = x161
x7580 = true
x7581 = x7587
()
} else {
var x7653: java.lang.String = ""
var x7654: Boolean = false
var x7655: Int = x7637
var x7657: Int = -1
var x7658: Boolean = true
var x7659: Int = x7637
val x7697 = while ({val x7660 = x7658
val x7661 = x7657
val x7662 = x7659
val x7663 = x7661 != x7662
val x7664 = x7660 && x7663
x7664}) {
val x7666 = x7659
x7657 = x7666
val x7668 = x7666 >= x3954
val x7695 = if (x7668) {
x7658 = false
()
} else {
val x7670 = x3943(x7666)
val x7671 = x7670 > ' '
val x7672 = x7670 != '#'
val x7673 = x7671 && x7672
val x7674 = x7670 != ''
val x7675 = x7673 && x7674
val x7693 = if (x7675) {
val x7680 = x7653
val x7681 = x7654
val x7682 = x7655
val x7684 = x7680+x7670
x7653 = x7684
x7654 = false
val x7676 = x7666 + 1
x7655 = x7676
x7659 = x7676
()
} else {
x7658 = false
()
}
x7693
}
x7695
}
val x7698 = x7653
val x7699 = x7654
val x7700 = x7655
val x7885 = if (x7699) {
x7579 = x161
x7580 = true
x7581 = x7587
()
} else {
val x7702 = x7700 >= x3954
val x7883 = if (x7702) {
val x7716 = new Anon1863173035("","","",x7698,"",80)
x7579 = x7716
x7580 = false
x7581 = x7700
()
} else {
val x7704 = x3943(x7700)
val x7705 = x7704 == '#'
val x7881 = if (x7705) {
var x7723: java.lang.String = ""
var x7724: Boolean = false
val x7706 = x7700 + 1
var x7725: Int = x7706
var x7727: Int = -1
var x7728: Boolean = true
var x7729: Int = x7706
val x7763 = while ({val x7730 = x7728
val x7731 = x7727
val x7732 = x7729
val x7733 = x7731 != x7732
val x7734 = x7730 && x7733
x7734}) {
val x7736 = x7729
x7727 = x7736
val x7738 = x7736 >= x3954
val x7761 = if (x7738) {
x7728 = false
()
} else {
val x7740 = x3943(x7736)
val x7741 = x7740 == '#'
val x7759 = if (x7741) {
val x7746 = x7723
val x7747 = x7724
val x7748 = x7725
val x7750 = x7746+x7740
x7723 = x7750
x7724 = false
val x7742 = x7736 + 1
x7725 = x7742
x7729 = x7742
()
} else {
x7728 = false
()
}
x7759
}
x7761
}
val x7764 = x7723
val x7765 = x7724
val x7766 = x7725
val x7875 = if (x7765) {
val x7716 = new Anon1863173035("","","",x7698,"",80)
x7579 = x7716
x7580 = false
x7581 = x7706
()
} else {
var x7778: java.lang.String = ""
var x7779: Boolean = false
var x7780: Int = x7766
var x7782: Int = -1
var x7783: Boolean = true
var x7784: Int = x7766
val x7820 = while ({val x7785 = x7783
val x7786 = x7782
val x7787 = x7784
val x7788 = x7786 != x7787
val x7789 = x7785 && x7788
x7789}) {
val x7791 = x7784
x7782 = x7791
val x7793 = x7791 >= x3954
val x7818 = if (x7793) {
x7783 = false
()
} else {
val x7795 = x3943(x7791)
val x7796 = x7795 > ' '
val x7797 = x7795 != ''
val x7798 = x7796 && x7797
val x7816 = if (x7798) {
val x7803 = x7778
val x7804 = x7779
val x7805 = x7780
val x7807 = x7803+x7795
x7778 = x7807
x7779 = false
val x7799 = x7791 + 1
x7780 = x7799
x7784 = x7799
()
} else {
x7783 = false
()
}
x7816
}
x7818
}
val x7821 = x7778
val x7822 = x7779
val x7823 = x7780
val x7829 = if (x7822) {
true
} else {
false
}
val x7838 = if (x7829) {
false
} else {
false
}
val x7844 = if (x7838) {
true
} else {
false
}
val x7867 = if (x7844) {
x161
} else {
val x7843 = if (x7838) {
x935
} else {
val x7835 = if (x7829) {
x161
} else {
val x7828 = if (x7822) {
x161
} else {
val x7826 = new Anon1863173035("","","","",x7821,80)
x7826
}
x7828
}
val x7836 = if (x7829) {
false
} else {
true
}
val x7837 = new OptionAnon1863173035(x7835,x7836)
val x7841 = new Tuple2StringOptionAnon1863173035(x7698,x7837)
x7841
}
val x7849 = x7843._2
val x7850 = x7849.defined
val x7859 = if (x7850) {
val x7851 = x7849.value
val x7852 = x7851.schema
x7852
} else {
""
}
val x7860 = if (x7850) {
val x7851 = x7849.value
val x7853 = x7851.hostName
x7853
} else {
""
}
val x7861 = if (x7850) {
val x7851 = x7849.value
val x7854 = x7851.path
x7854
} else {
""
}
val x7848 = x7843._1
val x7862 = if (x7850) {
x7848
} else {
x7848
}
val x7863 = if (x7850) {
val x7851 = x7849.value
val x7855 = x7851.fragment
x7855
} else {
""
}
val x7864 = if (x7850) {
val x7851 = x7849.value
val x7856 = x7851.port
x7856
} else {
80
}
val x7865 = new Anon1863173035(x7859,x7860,x7861,x7862,x7863,x7864)
x7865
}
x7579 = x7867
val x7868 = if (x7844) {
true
} else {
false
}
x7580 = x7868
val x7845 = if (x7838) {
x7587
} else {
val x7830 = if (x7822) {
x7823
} else {
x7823
}
val x7839 = if (x7829) {
x7830
} else {
x7830
}
x7839
}
val x7869 = if (x7844) {
x7845
} else {
x7845
}
x7581 = x7869
()
}
x7875
} else {
val x7716 = new Anon1863173035("","","",x7698,"",80)
x7579 = x7716
x7580 = false
x7581 = x7700
()
}
x7881
}
x7883
}
x7885
}
x7887
} else {
x7579 = x161
x7580 = true
x7581 = x7577
()
}
x7893
}
val x7896 = x7579
val x7897 = x7580
val x7898 = x7581
val x7899 = new ParseResultAnon1863173035(x7896,x7897,x7898)
x7899
}
val x8043 = {x7902: (Int) => 
var x7904: Anon1863173035 = x161
var x7905: Boolean = true
var x7906: Int = x7902
val x7908 = x7902 >= x3954
val x8037 = if (x7908) {
x7904 = x161
x7905 = true
x7906 = x7902
()
} else {
val x7910 = x3943(x7902)
val x7911 = x7910 == '#'
val x8035 = if (x7911) {
var x7919: java.lang.String = ""
var x7920: Boolean = false
val x7912 = x7902 + 1
var x7921: Int = x7912
var x7923: Int = -1
var x7924: Boolean = true
var x7925: Int = x7912
val x7959 = while ({val x7926 = x7924
val x7927 = x7923
val x7928 = x7925
val x7929 = x7927 != x7928
val x7930 = x7926 && x7929
x7930}) {
val x7932 = x7925
x7923 = x7932
val x7934 = x7932 >= x3954
val x7957 = if (x7934) {
x7924 = false
()
} else {
val x7936 = x3943(x7932)
val x7937 = x7936 == '#'
val x7955 = if (x7937) {
val x7942 = x7919
val x7943 = x7920
val x7944 = x7921
val x7946 = x7942+x7936
x7919 = x7946
x7920 = false
val x7938 = x7932 + 1
x7921 = x7938
x7925 = x7938
()
} else {
x7924 = false
()
}
x7955
}
x7957
}
val x7960 = x7919
val x7961 = x7920
val x7962 = x7921
val x8029 = if (x7961) {
x7904 = x161
x7905 = true
x7906 = x7912
()
} else {
var x7971: java.lang.String = ""
var x7972: Boolean = false
var x7973: Int = x7962
var x7975: Int = -1
var x7976: Boolean = true
var x7977: Int = x7962
val x8013 = while ({val x7978 = x7976
val x7979 = x7975
val x7980 = x7977
val x7981 = x7979 != x7980
val x7982 = x7978 && x7981
x7982}) {
val x7984 = x7977
x7975 = x7984
val x7986 = x7984 >= x3954
val x8011 = if (x7986) {
x7976 = false
()
} else {
val x7988 = x3943(x7984)
val x7989 = x7988 > ' '
val x7990 = x7988 != ''
val x7991 = x7989 && x7990
val x8009 = if (x7991) {
val x7996 = x7971
val x7997 = x7972
val x7998 = x7973
val x8000 = x7996+x7988
x7971 = x8000
x7972 = false
val x7992 = x7984 + 1
x7973 = x7992
x7977 = x7992
()
} else {
x7976 = false
()
}
x8009
}
x8011
}
val x8014 = x7971
val x8015 = x7972
val x8016 = x7973
val x8021 = if (x8015) {
x161
} else {
val x8019 = new Anon1863173035("","","","",x8014,80)
x8019
}
x7904 = x8021
val x8022 = if (x8015) {
true
} else {
false
}
x7905 = x8022
val x8023 = if (x8015) {
x8016
} else {
x8016
}
x7906 = x8023
()
}
x8029
} else {
x7904 = x161
x7905 = true
x7906 = x7902
()
}
x8035
}
val x8038 = x7904
val x8039 = x7905
val x8040 = x7906
val x8041 = new ParseResultAnon1863173035(x8038,x8039,x8040)
x8041
}
val x8756 = {x7508: (Int) => 
var x7510: Anon1863173035 = x161
var x7511: Boolean = true
var x7512: Int = x7508
val x7514 = x7508 >= x3954
val x8750 = if (x7514) {
x7510 = x161
x7511 = true
x7512 = x7508
()
} else {
val x7516 = x3943(x7508)
val x7517 = x7516 == '/'
val x8748 = if (x7517) {
var x7525: java.lang.String = ""
var x7526: Boolean = false
val x7518 = x7508 + 1
var x7527: Int = x7518
var x7529: Int = -1
var x7530: Boolean = true
var x7531: Int = x7518
val x7571 = while ({val x7532 = x7530
val x7533 = x7529
val x7534 = x7531
val x7535 = x7533 != x7534
val x7536 = x7532 && x7535
x7536}) {
val x7538 = x7531
x7529 = x7538
val x7540 = x7538 >= x3954
val x7569 = if (x7540) {
x7530 = false
()
} else {
val x7542 = x3943(x7538)
val x7543 = x7542 > ' '
val x7544 = x7542 != '#'
val x7545 = x7543 && x7544
val x7546 = x7542 != '?'
val x7547 = x7545 && x7546
val x7548 = x7542 != ''
val x7549 = x7547 && x7548
val x7567 = if (x7549) {
val x7554 = x7525
val x7555 = x7526
val x7556 = x7527
val x7558 = x7554+x7542
x7525 = x7558
x7526 = false
val x7550 = x7538 + 1
x7527 = x7550
x7531 = x7550
()
} else {
x7530 = false
()
}
x7567
}
x7569
}
val x7572 = x7525
val x7573 = x7526
val x7574 = x7527
val x8742 = if (x7573) {
x7510 = x161
x7511 = true
x7512 = x7518
()
} else {
val x8044 = x7901(x7574)
val x8056 = x8044.empty
val x8740 = if (x8056) {
val x8057 = x8043(x7574)
val x8058 = x8057.empty
val x8067 = if (x8058) {
false
} else {
false
}
val x8073 = if (x8067) {
true
} else {
false
}
val x8413 = if (x8073) {
x7510 = x161
x7511 = true
val x8074 = if (x8067) {
x7518
} else {
val x8059 = x8057.next
val x8068 = if (x8058) {
x8059
} else {
x8059
}
x8068
}
x7512 = x8074
()
} else {
val x8074 = if (x8067) {
x7518
} else {
val x8059 = x8057.next
val x8068 = if (x8058) {
x8059
} else {
x8059
}
x8068
}
val x8076 = x8074 >= x3954
val x8411 = if (x8076) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
} else {
val x8078 = x3943(x8074)
val x8079 = x8078 == 'H'
val x8409 = if (x8079) {
val x8080 = x8074 + 1
val x8117 = x8080 >= x3954
val x8403 = if (x8117) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
} else {
val x8119 = x3943(x8080)
val x8120 = x8119 == 'T'
val x8401 = if (x8120) {
val x8121 = x8080 + 1
val x8129 = x8121 >= x3954
val x8395 = if (x8129) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
} else {
val x8131 = x3943(x8121)
val x8132 = x8131 == 'T'
val x8393 = if (x8132) {
val x8133 = x8121 + 1
val x8142 = x8133 >= x3954
val x8387 = if (x8142) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
} else {
val x8144 = x3943(x8133)
val x8145 = x8144 == 'P'
val x8385 = if (x8145) {
val x8146 = x8133 + 1
val x8155 = x8146 >= x3954
val x8379 = if (x8155) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
} else {
val x8157 = x3943(x8146)
val x8158 = x8157 == '/'
val x8377 = if (x8158) {
var x8190: Int = 0
var x8191: Boolean = false
val x8159 = x8146 + 1
var x8192: Int = x8159
var x8194: Int = -1
var x8195: Boolean = true
var x8196: Int = x8159
val x8237 = while ({val x8197 = x8195
val x8198 = x8194
val x8199 = x8196
val x8200 = x8198 != x8199
val x8201 = x8197 && x8200
x8201}) {
val x8203 = x8196
x8194 = x8203
val x8205 = x8203 >= x3954
val x8235 = if (x8205) {
x8195 = false
()
} else {
val x8207 = x3943(x8203)
val x8208 = x8207 >= '0'
val x8209 = x8207 <= '9'
val x8210 = x8208 && x8209
val x8233 = if (x8210) {
val x8219 = x8190
val x8220 = x8191
val x8221 = x8192
val x8216 = x8207 - '0'
val x8217 = x8216.toInt
val x8223 = x8219 * 10
val x8224 = x8223 + x8217
x8190 = x8224
x8191 = false
val x8211 = x8203 + 1
x8192 = x8211
x8196 = x8211
()
} else {
x8195 = false
()
}
x8233
}
x8235
}
val x8238 = x8190
val x8239 = x8191
val x8240 = x8192
val x8371 = if (x8239) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8159
()
} else {
val x8243 = x8240 >= x3954
val x8369 = if (x8243) {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8159
()
} else {
val x8245 = x3943(x8240)
val x8246 = x8245 == '.'
val x8367 = if (x8246) {
var x8262: Int = 0
var x8263: Boolean = false
val x8247 = x8240 + 1
var x8264: Int = x8247
var x8266: Int = -1
var x8267: Boolean = true
var x8268: Int = x8247
val x8309 = while ({val x8269 = x8267
val x8270 = x8266
val x8271 = x8268
val x8272 = x8270 != x8271
val x8273 = x8269 && x8272
x8273}) {
val x8275 = x8268
x8266 = x8275
val x8277 = x8275 >= x3954
val x8307 = if (x8277) {
x8267 = false
()
} else {
val x8279 = x3943(x8275)
val x8280 = x8279 >= '0'
val x8281 = x8279 <= '9'
val x8282 = x8280 && x8281
val x8305 = if (x8282) {
val x8291 = x8262
val x8292 = x8263
val x8293 = x8264
val x8288 = x8279 - '0'
val x8289 = x8288.toInt
val x8295 = x8291 * 10
val x8296 = x8295 + x8289
x8262 = x8296
x8263 = false
val x8283 = x8275 + 1
x8264 = x8283
x8268 = x8283
()
} else {
x8267 = false
()
}
x8305
}
x8307
}
val x8310 = x8262
val x8311 = x8263
val x8312 = x8264
val x8317 = if (x8311) {
true
} else {
false
}
val x8326 = if (x8317) {
false
} else {
false
}
val x8331 = if (x8326) {
true
} else {
false
}
val x8355 = if (x8331) {
x161
} else {
val x8330 = if (x8326) {
x935
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
x8072
}
val x8336 = x8330._2
val x8337 = x8336.defined
val x8347 = if (x8337) {
val x8338 = x8336.value
val x8340 = x8338.schema
x8340
} else {
""
}
val x8348 = if (x8337) {
val x8338 = x8336.value
val x8341 = x8338.hostName
x8341
} else {
""
}
val x8335 = x8330._1
val x8339 = "/"+x8335
val x8349 = if (x8337) {
x8339
} else {
x8339
}
val x8350 = if (x8337) {
val x8338 = x8336.value
val x8342 = x8338.queryString
x8342
} else {
""
}
val x8351 = if (x8337) {
val x8338 = x8336.value
val x8343 = x8338.fragment
x8343
} else {
""
}
val x8352 = if (x8337) {
val x8338 = x8336.value
val x8344 = x8338.port
x8344
} else {
80
}
val x8353 = new Anon1863173035(x8347,x8348,x8349,x8350,x8351,x8352)
x8353
}
x7510 = x8355
val x8356 = if (x8331) {
true
} else {
false
}
x7511 = x8356
val x8332 = if (x8326) {
x7518
} else {
val x8318 = if (x8311) {
x8159
} else {
x8312
}
val x8327 = if (x8317) {
x8318
} else {
x8318
}
x8327
}
val x8357 = if (x8331) {
x8332
} else {
x8332
}
x7512 = x8357
()
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8159
()
}
x8367
}
x8369
}
x8371
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
}
x8377
}
x8379
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
}
x8385
}
x8387
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
}
x8393
}
x8395
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
}
x8401
}
x8403
} else {
val x8072 = if (x8067) {
x935
} else {
val x8064 = if (x8058) {
x161
} else {
val x8061 = x8057.res
x8061
}
val x8065 = if (x8058) {
false
} else {
true
}
val x8066 = new OptionAnon1863173035(x8064,x8065)
val x8070 = new Tuple2StringOptionAnon1863173035(x7572,x8066)
x8070
}
val x8094 = x8072._2
val x8095 = x8094.defined
val x8105 = if (x8095) {
val x8096 = x8094.value
val x8098 = x8096.schema
x8098
} else {
""
}
val x8106 = if (x8095) {
val x8096 = x8094.value
val x8099 = x8096.hostName
x8099
} else {
""
}
val x8093 = x8072._1
val x8097 = "/"+x8093
val x8107 = if (x8095) {
x8097
} else {
x8097
}
val x8108 = if (x8095) {
val x8096 = x8094.value
val x8100 = x8096.queryString
x8100
} else {
""
}
val x8109 = if (x8095) {
val x8096 = x8094.value
val x8101 = x8096.fragment
x8101
} else {
""
}
val x8110 = if (x8095) {
val x8096 = x8094.value
val x8102 = x8096.port
x8102
} else {
80
}
val x8111 = new Anon1863173035(x8105,x8106,x8107,x8108,x8109,x8110)
x7510 = x8111
x7511 = false
x7512 = x8074
()
}
x8409
}
x8411
}
x8413
} else {
val x8417 = x8044.next
val x8421 = x8417 >= x3954
val x8738 = if (x8421) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
} else {
val x8423 = x3943(x8417)
val x8424 = x8423 == 'H'
val x8736 = if (x8424) {
val x8425 = x8417 + 1
val x8444 = x8425 >= x3954
val x8730 = if (x8444) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
} else {
val x8446 = x3943(x8425)
val x8447 = x8446 == 'T'
val x8728 = if (x8447) {
val x8448 = x8425 + 1
val x8456 = x8448 >= x3954
val x8722 = if (x8456) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
} else {
val x8458 = x3943(x8448)
val x8459 = x8458 == 'T'
val x8720 = if (x8459) {
val x8460 = x8448 + 1
val x8469 = x8460 >= x3954
val x8714 = if (x8469) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
} else {
val x8471 = x3943(x8460)
val x8472 = x8471 == 'P'
val x8712 = if (x8472) {
val x8473 = x8460 + 1
val x8482 = x8473 >= x3954
val x8706 = if (x8482) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
} else {
val x8484 = x3943(x8473)
val x8485 = x8484 == '/'
val x8704 = if (x8485) {
var x8517: Int = 0
var x8518: Boolean = false
val x8486 = x8473 + 1
var x8519: Int = x8486
var x8521: Int = -1
var x8522: Boolean = true
var x8523: Int = x8486
val x8564 = while ({val x8524 = x8522
val x8525 = x8521
val x8526 = x8523
val x8527 = x8525 != x8526
val x8528 = x8524 && x8527
x8528}) {
val x8530 = x8523
x8521 = x8530
val x8532 = x8530 >= x3954
val x8562 = if (x8532) {
x8522 = false
()
} else {
val x8534 = x3943(x8530)
val x8535 = x8534 >= '0'
val x8536 = x8534 <= '9'
val x8537 = x8535 && x8536
val x8560 = if (x8537) {
val x8546 = x8517
val x8547 = x8518
val x8548 = x8519
val x8543 = x8534 - '0'
val x8544 = x8543.toInt
val x8550 = x8546 * 10
val x8551 = x8550 + x8544
x8517 = x8551
x8518 = false
val x8538 = x8530 + 1
x8519 = x8538
x8523 = x8538
()
} else {
x8522 = false
()
}
x8560
}
x8562
}
val x8565 = x8517
val x8566 = x8518
val x8567 = x8519
val x8698 = if (x8566) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8486
()
} else {
val x8570 = x8567 >= x3954
val x8696 = if (x8570) {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8486
()
} else {
val x8572 = x3943(x8567)
val x8573 = x8572 == '.'
val x8694 = if (x8573) {
var x8589: Int = 0
var x8590: Boolean = false
val x8574 = x8567 + 1
var x8591: Int = x8574
var x8593: Int = -1
var x8594: Boolean = true
var x8595: Int = x8574
val x8636 = while ({val x8596 = x8594
val x8597 = x8593
val x8598 = x8595
val x8599 = x8597 != x8598
val x8600 = x8596 && x8599
x8600}) {
val x8602 = x8595
x8593 = x8602
val x8604 = x8602 >= x3954
val x8634 = if (x8604) {
x8594 = false
()
} else {
val x8606 = x3943(x8602)
val x8607 = x8606 >= '0'
val x8608 = x8606 <= '9'
val x8609 = x8607 && x8608
val x8632 = if (x8609) {
val x8618 = x8589
val x8619 = x8590
val x8620 = x8591
val x8615 = x8606 - '0'
val x8616 = x8615.toInt
val x8622 = x8618 * 10
val x8623 = x8622 + x8616
x8589 = x8623
x8590 = false
val x8610 = x8602 + 1
x8591 = x8610
x8595 = x8610
()
} else {
x8594 = false
()
}
x8632
}
x8634
}
val x8637 = x8589
val x8638 = x8590
val x8639 = x8591
val x8644 = if (x8638) {
true
} else {
false
}
val x8653 = if (x8644) {
false
} else {
false
}
val x8658 = if (x8653) {
true
} else {
false
}
val x8682 = if (x8658) {
x161
} else {
val x8657 = if (x8653) {
x935
} else {
val x8415 = x8044.res
val x8416 = new OptionAnon1863173035(x8415,true)
val x8419 = new Tuple2StringOptionAnon1863173035(x7572,x8416)
x8419
}
val x8663 = x8657._2
val x8664 = x8663.defined
val x8674 = if (x8664) {
val x8665 = x8663.value
val x8667 = x8665.schema
x8667
} else {
""
}
val x8675 = if (x8664) {
val x8665 = x8663.value
val x8668 = x8665.hostName
x8668
} else {
""
}
val x8662 = x8657._1
val x8666 = "/"+x8662
val x8676 = if (x8664) {
x8666
} else {
x8666
}
val x8677 = if (x8664) {
val x8665 = x8663.value
val x8669 = x8665.queryString
x8669
} else {
""
}
val x8678 = if (x8664) {
val x8665 = x8663.value
val x8670 = x8665.fragment
x8670
} else {
""
}
val x8679 = if (x8664) {
val x8665 = x8663.value
val x8671 = x8665.port
x8671
} else {
80
}
val x8680 = new Anon1863173035(x8674,x8675,x8676,x8677,x8678,x8679)
x8680
}
x7510 = x8682
val x8683 = if (x8658) {
true
} else {
false
}
x7511 = x8683
val x8659 = if (x8653) {
x7518
} else {
val x8645 = if (x8638) {
x8486
} else {
x8639
}
val x8654 = if (x8644) {
x8645
} else {
x8645
}
x8654
}
val x8684 = if (x8658) {
x8659
} else {
x8659
}
x7512 = x8684
()
} else {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8486
()
}
x8694
}
x8696
}
x8698
} else {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
}
x8704
}
x8706
} else {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
}
x8712
}
x8714
} else {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
}
x8720
}
x8722
} else {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
}
x8728
}
x8730
} else {
val x8432 = "/"+x7572
val x8415 = x8044.res
val x8433 = x8415.schema
val x8434 = x8415.hostName
val x8435 = x8415.queryString
val x8436 = x8415.fragment
val x8437 = x8415.port
val x8438 = new Anon1863173035(x8433,x8434,x8432,x8435,x8436,x8437)
x7510 = x8438
x7511 = false
x7512 = x8417
()
}
x8736
}
x8738
}
x8740
}
x8742
} else {
x7510 = x161
x7511 = true
x7512 = x7508
()
}
x8748
}
val x8751 = x7510
val x8752 = x7511
val x8753 = x7512
val x8754 = new ParseResultAnon1863173035(x8751,x8752,x8753)
x8754
}
val x9082 = x8756(x4182)
val x9083 = x9082.empty
val x9140 = if (x9083) {
val x9081 = {x8757: (Int) => 
var x8759: Anon1863173035 = x161
var x8760: Boolean = true
var x8761: Int = x8757
val x8763 = x8757 >= x3954
val x9075 = if (x8763) {
x8759 = x161
x8760 = true
x8761 = x8757
()
} else {
val x8765 = x3943(x8757)
val x8766 = x8765 == '?'
val x9073 = if (x8766) {
var x8774: java.lang.String = ""
var x8775: Boolean = false
val x8767 = x8757 + 1
var x8776: Int = x8767
var x8778: Int = -1
var x8779: Boolean = true
var x8780: Int = x8767
val x8814 = while ({val x8781 = x8779
val x8782 = x8778
val x8783 = x8780
val x8784 = x8782 != x8783
val x8785 = x8781 && x8784
x8785}) {
val x8787 = x8780
x8778 = x8787
val x8789 = x8787 >= x3954
val x8812 = if (x8789) {
x8779 = false
()
} else {
val x8791 = x3943(x8787)
val x8792 = x8791 == '?'
val x8810 = if (x8792) {
val x8797 = x8774
val x8798 = x8775
val x8799 = x8776
val x8801 = x8797+x8791
x8774 = x8801
x8775 = false
val x8793 = x8787 + 1
x8776 = x8793
x8780 = x8793
()
} else {
x8779 = false
()
}
x8810
}
x8812
}
val x8815 = x8774
val x8816 = x8775
val x8817 = x8776
val x9067 = if (x8816) {
x8759 = x161
x8760 = true
x8761 = x8767
()
} else {
var x8833: java.lang.String = ""
var x8834: Boolean = false
var x8835: Int = x8817
var x8837: Int = -1
var x8838: Boolean = true
var x8839: Int = x8817
val x8877 = while ({val x8840 = x8838
val x8841 = x8837
val x8842 = x8839
val x8843 = x8841 != x8842
val x8844 = x8840 && x8843
x8844}) {
val x8846 = x8839
x8837 = x8846
val x8848 = x8846 >= x3954
val x8875 = if (x8848) {
x8838 = false
()
} else {
val x8850 = x3943(x8846)
val x8851 = x8850 > ' '
val x8852 = x8850 != '#'
val x8853 = x8851 && x8852
val x8854 = x8850 != ''
val x8855 = x8853 && x8854
val x8873 = if (x8855) {
val x8860 = x8833
val x8861 = x8834
val x8862 = x8835
val x8864 = x8860+x8850
x8833 = x8864
x8834 = false
val x8856 = x8846 + 1
x8835 = x8856
x8839 = x8856
()
} else {
x8838 = false
()
}
x8873
}
x8875
}
val x8878 = x8833
val x8879 = x8834
val x8880 = x8835
val x9065 = if (x8879) {
x8759 = x161
x8760 = true
x8761 = x8767
()
} else {
val x8882 = x8880 >= x3954
val x9063 = if (x8882) {
val x8896 = new Anon1863173035("","","",x8878,"",80)
x8759 = x8896
x8760 = false
x8761 = x8880
()
} else {
val x8884 = x3943(x8880)
val x8885 = x8884 == '#'
val x9061 = if (x8885) {
var x8903: java.lang.String = ""
var x8904: Boolean = false
val x8886 = x8880 + 1
var x8905: Int = x8886
var x8907: Int = -1
var x8908: Boolean = true
var x8909: Int = x8886
val x8943 = while ({val x8910 = x8908
val x8911 = x8907
val x8912 = x8909
val x8913 = x8911 != x8912
val x8914 = x8910 && x8913
x8914}) {
val x8916 = x8909
x8907 = x8916
val x8918 = x8916 >= x3954
val x8941 = if (x8918) {
x8908 = false
()
} else {
val x8920 = x3943(x8916)
val x8921 = x8920 == '#'
val x8939 = if (x8921) {
val x8926 = x8903
val x8927 = x8904
val x8928 = x8905
val x8930 = x8926+x8920
x8903 = x8930
x8904 = false
val x8922 = x8916 + 1
x8905 = x8922
x8909 = x8922
()
} else {
x8908 = false
()
}
x8939
}
x8941
}
val x8944 = x8903
val x8945 = x8904
val x8946 = x8905
val x9055 = if (x8945) {
val x8896 = new Anon1863173035("","","",x8878,"",80)
x8759 = x8896
x8760 = false
x8761 = x8886
()
} else {
var x8958: java.lang.String = ""
var x8959: Boolean = false
var x8960: Int = x8946
var x8962: Int = -1
var x8963: Boolean = true
var x8964: Int = x8946
val x9000 = while ({val x8965 = x8963
val x8966 = x8962
val x8967 = x8964
val x8968 = x8966 != x8967
val x8969 = x8965 && x8968
x8969}) {
val x8971 = x8964
x8962 = x8971
val x8973 = x8971 >= x3954
val x8998 = if (x8973) {
x8963 = false
()
} else {
val x8975 = x3943(x8971)
val x8976 = x8975 > ' '
val x8977 = x8975 != ''
val x8978 = x8976 && x8977
val x8996 = if (x8978) {
val x8983 = x8958
val x8984 = x8959
val x8985 = x8960
val x8987 = x8983+x8975
x8958 = x8987
x8959 = false
val x8979 = x8971 + 1
x8960 = x8979
x8964 = x8979
()
} else {
x8963 = false
()
}
x8996
}
x8998
}
val x9001 = x8958
val x9002 = x8959
val x9003 = x8960
val x9009 = if (x9002) {
true
} else {
false
}
val x9018 = if (x9009) {
false
} else {
false
}
val x9024 = if (x9018) {
true
} else {
false
}
val x9047 = if (x9024) {
x161
} else {
val x9023 = if (x9018) {
x935
} else {
val x9015 = if (x9009) {
x161
} else {
val x9008 = if (x9002) {
x161
} else {
val x9006 = new Anon1863173035("","","","",x9001,80)
x9006
}
x9008
}
val x9016 = if (x9009) {
false
} else {
true
}
val x9017 = new OptionAnon1863173035(x9015,x9016)
val x9021 = new Tuple2StringOptionAnon1863173035(x8878,x9017)
x9021
}
val x9029 = x9023._2
val x9030 = x9029.defined
val x9039 = if (x9030) {
val x9031 = x9029.value
val x9032 = x9031.schema
x9032
} else {
""
}
val x9040 = if (x9030) {
val x9031 = x9029.value
val x9033 = x9031.hostName
x9033
} else {
""
}
val x9041 = if (x9030) {
val x9031 = x9029.value
val x9034 = x9031.path
x9034
} else {
""
}
val x9028 = x9023._1
val x9042 = if (x9030) {
x9028
} else {
x9028
}
val x9043 = if (x9030) {
val x9031 = x9029.value
val x9035 = x9031.fragment
x9035
} else {
""
}
val x9044 = if (x9030) {
val x9031 = x9029.value
val x9036 = x9031.port
x9036
} else {
80
}
val x9045 = new Anon1863173035(x9039,x9040,x9041,x9042,x9043,x9044)
x9045
}
x8759 = x9047
val x9048 = if (x9024) {
true
} else {
false
}
x8760 = x9048
val x9025 = if (x9018) {
x8767
} else {
val x9010 = if (x9002) {
x9003
} else {
x9003
}
val x9019 = if (x9009) {
x9010
} else {
x9010
}
x9019
}
val x9049 = if (x9024) {
x9025
} else {
x9025
}
x8761 = x9049
()
}
x9055
} else {
val x8896 = new Anon1863173035("","","",x8878,"",80)
x8759 = x8896
x8760 = false
x8761 = x8880
()
}
x9061
}
x9063
}
x9065
}
x9067
} else {
x8759 = x161
x8760 = true
x8761 = x8757
()
}
x9073
}
val x9076 = x8759
val x9077 = x8760
val x9078 = x8761
val x9079 = new ParseResultAnon1863173035(x9076,x9077,x9078)
x9079
}
val x9084 = x9081(x4182)
val x9085 = x9084.empty
val x9091 = if (x9085) {
true
} else {
false
}
val x9117 = if (x9091) {
x161
} else {
val x9090 = if (x9085) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x1006 = new OptionAnon1863173035(x161,false)
val x5790 = x4180.res
val x5791 = new Tuple2StringOptionAnon1863173035(x5790,x1006)
val x9086 = x9084.res
val x9087 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x5791,x9086)
x9087
}
val x9095 = x9090._1
val x9097 = x9095._1
val x9098 = x9095._2
val x9099 = x9098.defined
val x9109 = if (x9099) {
x9097
} else {
x9097
}
val x9096 = x9090._2
val x9110 = if (x9099) {
val x9100 = x9098.value
val x9101 = x9100.hostName
x9101
} else {
val x9107 = x9096.hostName
x9107
}
val x9102 = x9096.path
val x9111 = if (x9099) {
x9102
} else {
x9102
}
val x9103 = x9096.queryString
val x9112 = if (x9099) {
x9103
} else {
x9103
}
val x9104 = x9096.fragment
val x9113 = if (x9099) {
x9104
} else {
x9104
}
val x9105 = x9096.port
val x9114 = if (x9099) {
x9105
} else {
x9105
}
val x9115 = new Anon1863173035(x9109,x9110,x9111,x9112,x9113,x9114)
x9115
}
x3944 = x9117
val x9118 = if (x9091) {
true
} else {
false
}
x3945 = x9118
val x9092 = if (x9085) {
0
} else {
val x9088 = x9084.next
x9088
}
val x9119 = if (x9091) {
x9092
} else {
x9092
}
x3946 = x9119
()
} else {
val x5790 = x4180.res
val x9125 = x9082.res
val x9129 = x9125.hostName
val x9130 = x9125.path
val x9131 = x9125.queryString
val x9132 = x9125.fragment
val x9133 = x9125.port
val x9134 = new Anon1863173035(x5790,x9129,x9130,x9131,x9132,x9133)
x3944 = x9134
x3945 = false
val x9127 = x9082.next
x3946 = x9127
()
}
x9140
} else {
val x7491 = if (x7484) {
x4182
} else {
x7485
}
val x7500 = if (x7490) {
x7491
} else {
x7491
}
val x7502 = x7500 >= x3954
val x14172 = if (x7502) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x9545 = {x9221: (Int) => 
var x9223: Anon1863173035 = x161
var x9224: Boolean = true
var x9225: Int = x9221
val x9227 = x9221 >= x3954
val x9539 = if (x9227) {
x9223 = x161
x9224 = true
x9225 = x9221
()
} else {
val x9229 = x3943(x9221)
val x9230 = x9229 == '?'
val x9537 = if (x9230) {
var x9238: java.lang.String = ""
var x9239: Boolean = false
val x9231 = x9221 + 1
var x9240: Int = x9231
var x9242: Int = -1
var x9243: Boolean = true
var x9244: Int = x9231
val x9278 = while ({val x9245 = x9243
val x9246 = x9242
val x9247 = x9244
val x9248 = x9246 != x9247
val x9249 = x9245 && x9248
x9249}) {
val x9251 = x9244
x9242 = x9251
val x9253 = x9251 >= x3954
val x9276 = if (x9253) {
x9243 = false
()
} else {
val x9255 = x3943(x9251)
val x9256 = x9255 == '?'
val x9274 = if (x9256) {
val x9261 = x9238
val x9262 = x9239
val x9263 = x9240
val x9265 = x9261+x9255
x9238 = x9265
x9239 = false
val x9257 = x9251 + 1
x9240 = x9257
x9244 = x9257
()
} else {
x9243 = false
()
}
x9274
}
x9276
}
val x9279 = x9238
val x9280 = x9239
val x9281 = x9240
val x9531 = if (x9280) {
x9223 = x161
x9224 = true
x9225 = x9231
()
} else {
var x9297: java.lang.String = ""
var x9298: Boolean = false
var x9299: Int = x9281
var x9301: Int = -1
var x9302: Boolean = true
var x9303: Int = x9281
val x9341 = while ({val x9304 = x9302
val x9305 = x9301
val x9306 = x9303
val x9307 = x9305 != x9306
val x9308 = x9304 && x9307
x9308}) {
val x9310 = x9303
x9301 = x9310
val x9312 = x9310 >= x3954
val x9339 = if (x9312) {
x9302 = false
()
} else {
val x9314 = x3943(x9310)
val x9315 = x9314 > ' '
val x9316 = x9314 != '#'
val x9317 = x9315 && x9316
val x9318 = x9314 != ''
val x9319 = x9317 && x9318
val x9337 = if (x9319) {
val x9324 = x9297
val x9325 = x9298
val x9326 = x9299
val x9328 = x9324+x9314
x9297 = x9328
x9298 = false
val x9320 = x9310 + 1
x9299 = x9320
x9303 = x9320
()
} else {
x9302 = false
()
}
x9337
}
x9339
}
val x9342 = x9297
val x9343 = x9298
val x9344 = x9299
val x9529 = if (x9343) {
x9223 = x161
x9224 = true
x9225 = x9231
()
} else {
val x9346 = x9344 >= x3954
val x9527 = if (x9346) {
val x9360 = new Anon1863173035("","","",x9342,"",80)
x9223 = x9360
x9224 = false
x9225 = x9344
()
} else {
val x9348 = x3943(x9344)
val x9349 = x9348 == '#'
val x9525 = if (x9349) {
var x9367: java.lang.String = ""
var x9368: Boolean = false
val x9350 = x9344 + 1
var x9369: Int = x9350
var x9371: Int = -1
var x9372: Boolean = true
var x9373: Int = x9350
val x9407 = while ({val x9374 = x9372
val x9375 = x9371
val x9376 = x9373
val x9377 = x9375 != x9376
val x9378 = x9374 && x9377
x9378}) {
val x9380 = x9373
x9371 = x9380
val x9382 = x9380 >= x3954
val x9405 = if (x9382) {
x9372 = false
()
} else {
val x9384 = x3943(x9380)
val x9385 = x9384 == '#'
val x9403 = if (x9385) {
val x9390 = x9367
val x9391 = x9368
val x9392 = x9369
val x9394 = x9390+x9384
x9367 = x9394
x9368 = false
val x9386 = x9380 + 1
x9369 = x9386
x9373 = x9386
()
} else {
x9372 = false
()
}
x9403
}
x9405
}
val x9408 = x9367
val x9409 = x9368
val x9410 = x9369
val x9519 = if (x9409) {
val x9360 = new Anon1863173035("","","",x9342,"",80)
x9223 = x9360
x9224 = false
x9225 = x9350
()
} else {
var x9422: java.lang.String = ""
var x9423: Boolean = false
var x9424: Int = x9410
var x9426: Int = -1
var x9427: Boolean = true
var x9428: Int = x9410
val x9464 = while ({val x9429 = x9427
val x9430 = x9426
val x9431 = x9428
val x9432 = x9430 != x9431
val x9433 = x9429 && x9432
x9433}) {
val x9435 = x9428
x9426 = x9435
val x9437 = x9435 >= x3954
val x9462 = if (x9437) {
x9427 = false
()
} else {
val x9439 = x3943(x9435)
val x9440 = x9439 > ' '
val x9441 = x9439 != ''
val x9442 = x9440 && x9441
val x9460 = if (x9442) {
val x9447 = x9422
val x9448 = x9423
val x9449 = x9424
val x9451 = x9447+x9439
x9422 = x9451
x9423 = false
val x9443 = x9435 + 1
x9424 = x9443
x9428 = x9443
()
} else {
x9427 = false
()
}
x9460
}
x9462
}
val x9465 = x9422
val x9466 = x9423
val x9467 = x9424
val x9473 = if (x9466) {
true
} else {
false
}
val x9482 = if (x9473) {
false
} else {
false
}
val x9488 = if (x9482) {
true
} else {
false
}
val x9511 = if (x9488) {
x161
} else {
val x9487 = if (x9482) {
x935
} else {
val x9479 = if (x9473) {
x161
} else {
val x9472 = if (x9466) {
x161
} else {
val x9470 = new Anon1863173035("","","","",x9465,80)
x9470
}
x9472
}
val x9480 = if (x9473) {
false
} else {
true
}
val x9481 = new OptionAnon1863173035(x9479,x9480)
val x9485 = new Tuple2StringOptionAnon1863173035(x9342,x9481)
x9485
}
val x9493 = x9487._2
val x9494 = x9493.defined
val x9503 = if (x9494) {
val x9495 = x9493.value
val x9496 = x9495.schema
x9496
} else {
""
}
val x9504 = if (x9494) {
val x9495 = x9493.value
val x9497 = x9495.hostName
x9497
} else {
""
}
val x9505 = if (x9494) {
val x9495 = x9493.value
val x9498 = x9495.path
x9498
} else {
""
}
val x9492 = x9487._1
val x9506 = if (x9494) {
x9492
} else {
x9492
}
val x9507 = if (x9494) {
val x9495 = x9493.value
val x9499 = x9495.fragment
x9499
} else {
""
}
val x9508 = if (x9494) {
val x9495 = x9493.value
val x9500 = x9495.port
x9500
} else {
80
}
val x9509 = new Anon1863173035(x9503,x9504,x9505,x9506,x9507,x9508)
x9509
}
x9223 = x9511
val x9512 = if (x9488) {
true
} else {
false
}
x9224 = x9512
val x9489 = if (x9482) {
x9231
} else {
val x9474 = if (x9466) {
x9467
} else {
x9467
}
val x9483 = if (x9473) {
x9474
} else {
x9474
}
x9483
}
val x9513 = if (x9488) {
x9489
} else {
x9489
}
x9225 = x9513
()
}
x9519
} else {
val x9360 = new Anon1863173035("","","",x9342,"",80)
x9223 = x9360
x9224 = false
x9225 = x9344
()
}
x9525
}
x9527
}
x9529
}
x9531
} else {
x9223 = x161
x9224 = true
x9225 = x9221
()
}
x9537
}
val x9540 = x9223
val x9541 = x9224
val x9542 = x9225
val x9543 = new ParseResultAnon1863173035(x9540,x9541,x9542)
x9543
}
val x9687 = {x9546: (Int) => 
var x9548: Anon1863173035 = x161
var x9549: Boolean = true
var x9550: Int = x9546
val x9552 = x9546 >= x3954
val x9681 = if (x9552) {
x9548 = x161
x9549 = true
x9550 = x9546
()
} else {
val x9554 = x3943(x9546)
val x9555 = x9554 == '#'
val x9679 = if (x9555) {
var x9563: java.lang.String = ""
var x9564: Boolean = false
val x9556 = x9546 + 1
var x9565: Int = x9556
var x9567: Int = -1
var x9568: Boolean = true
var x9569: Int = x9556
val x9603 = while ({val x9570 = x9568
val x9571 = x9567
val x9572 = x9569
val x9573 = x9571 != x9572
val x9574 = x9570 && x9573
x9574}) {
val x9576 = x9569
x9567 = x9576
val x9578 = x9576 >= x3954
val x9601 = if (x9578) {
x9568 = false
()
} else {
val x9580 = x3943(x9576)
val x9581 = x9580 == '#'
val x9599 = if (x9581) {
val x9586 = x9563
val x9587 = x9564
val x9588 = x9565
val x9590 = x9586+x9580
x9563 = x9590
x9564 = false
val x9582 = x9576 + 1
x9565 = x9582
x9569 = x9582
()
} else {
x9568 = false
()
}
x9599
}
x9601
}
val x9604 = x9563
val x9605 = x9564
val x9606 = x9565
val x9673 = if (x9605) {
x9548 = x161
x9549 = true
x9550 = x9556
()
} else {
var x9615: java.lang.String = ""
var x9616: Boolean = false
var x9617: Int = x9606
var x9619: Int = -1
var x9620: Boolean = true
var x9621: Int = x9606
val x9657 = while ({val x9622 = x9620
val x9623 = x9619
val x9624 = x9621
val x9625 = x9623 != x9624
val x9626 = x9622 && x9625
x9626}) {
val x9628 = x9621
x9619 = x9628
val x9630 = x9628 >= x3954
val x9655 = if (x9630) {
x9620 = false
()
} else {
val x9632 = x3943(x9628)
val x9633 = x9632 > ' '
val x9634 = x9632 != ''
val x9635 = x9633 && x9634
val x9653 = if (x9635) {
val x9640 = x9615
val x9641 = x9616
val x9642 = x9617
val x9644 = x9640+x9632
x9615 = x9644
x9616 = false
val x9636 = x9628 + 1
x9617 = x9636
x9621 = x9636
()
} else {
x9620 = false
()
}
x9653
}
x9655
}
val x9658 = x9615
val x9659 = x9616
val x9660 = x9617
val x9665 = if (x9659) {
x161
} else {
val x9663 = new Anon1863173035("","","","",x9658,80)
x9663
}
x9548 = x9665
val x9666 = if (x9659) {
true
} else {
false
}
x9549 = x9666
val x9667 = if (x9659) {
x9660
} else {
x9660
}
x9550 = x9667
()
}
x9673
} else {
x9548 = x161
x9549 = true
x9550 = x9546
()
}
x9679
}
val x9682 = x9548
val x9683 = x9549
val x9684 = x9550
val x9685 = new ParseResultAnon1863173035(x9682,x9683,x9684)
x9685
}
val x10400 = {x9152: (Int) => 
var x9154: Anon1863173035 = x161
var x9155: Boolean = true
var x9156: Int = x9152
val x9158 = x9152 >= x3954
val x10394 = if (x9158) {
x9154 = x161
x9155 = true
x9156 = x9152
()
} else {
val x9160 = x3943(x9152)
val x9161 = x9160 == '/'
val x10392 = if (x9161) {
var x9169: java.lang.String = ""
var x9170: Boolean = false
val x9162 = x9152 + 1
var x9171: Int = x9162
var x9173: Int = -1
var x9174: Boolean = true
var x9175: Int = x9162
val x9215 = while ({val x9176 = x9174
val x9177 = x9173
val x9178 = x9175
val x9179 = x9177 != x9178
val x9180 = x9176 && x9179
x9180}) {
val x9182 = x9175
x9173 = x9182
val x9184 = x9182 >= x3954
val x9213 = if (x9184) {
x9174 = false
()
} else {
val x9186 = x3943(x9182)
val x9187 = x9186 > ' '
val x9188 = x9186 != '#'
val x9189 = x9187 && x9188
val x9190 = x9186 != '?'
val x9191 = x9189 && x9190
val x9192 = x9186 != ''
val x9193 = x9191 && x9192
val x9211 = if (x9193) {
val x9198 = x9169
val x9199 = x9170
val x9200 = x9171
val x9202 = x9198+x9186
x9169 = x9202
x9170 = false
val x9194 = x9182 + 1
x9171 = x9194
x9175 = x9194
()
} else {
x9174 = false
()
}
x9211
}
x9213
}
val x9216 = x9169
val x9217 = x9170
val x9218 = x9171
val x10386 = if (x9217) {
x9154 = x161
x9155 = true
x9156 = x9162
()
} else {
val x9688 = x9545(x9218)
val x9700 = x9688.empty
val x10384 = if (x9700) {
val x9701 = x9687(x9218)
val x9702 = x9701.empty
val x9711 = if (x9702) {
false
} else {
false
}
val x9717 = if (x9711) {
true
} else {
false
}
val x10057 = if (x9717) {
x9154 = x161
x9155 = true
val x9718 = if (x9711) {
x9162
} else {
val x9703 = x9701.next
val x9712 = if (x9702) {
x9703
} else {
x9703
}
x9712
}
x9156 = x9718
()
} else {
val x9718 = if (x9711) {
x9162
} else {
val x9703 = x9701.next
val x9712 = if (x9702) {
x9703
} else {
x9703
}
x9712
}
val x9720 = x9718 >= x3954
val x10055 = if (x9720) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
} else {
val x9722 = x3943(x9718)
val x9723 = x9722 == 'H'
val x10053 = if (x9723) {
val x9724 = x9718 + 1
val x9761 = x9724 >= x3954
val x10047 = if (x9761) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
} else {
val x9763 = x3943(x9724)
val x9764 = x9763 == 'T'
val x10045 = if (x9764) {
val x9765 = x9724 + 1
val x9773 = x9765 >= x3954
val x10039 = if (x9773) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
} else {
val x9775 = x3943(x9765)
val x9776 = x9775 == 'T'
val x10037 = if (x9776) {
val x9777 = x9765 + 1
val x9786 = x9777 >= x3954
val x10031 = if (x9786) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
} else {
val x9788 = x3943(x9777)
val x9789 = x9788 == 'P'
val x10029 = if (x9789) {
val x9790 = x9777 + 1
val x9799 = x9790 >= x3954
val x10023 = if (x9799) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
} else {
val x9801 = x3943(x9790)
val x9802 = x9801 == '/'
val x10021 = if (x9802) {
var x9834: Int = 0
var x9835: Boolean = false
val x9803 = x9790 + 1
var x9836: Int = x9803
var x9838: Int = -1
var x9839: Boolean = true
var x9840: Int = x9803
val x9881 = while ({val x9841 = x9839
val x9842 = x9838
val x9843 = x9840
val x9844 = x9842 != x9843
val x9845 = x9841 && x9844
x9845}) {
val x9847 = x9840
x9838 = x9847
val x9849 = x9847 >= x3954
val x9879 = if (x9849) {
x9839 = false
()
} else {
val x9851 = x3943(x9847)
val x9852 = x9851 >= '0'
val x9853 = x9851 <= '9'
val x9854 = x9852 && x9853
val x9877 = if (x9854) {
val x9863 = x9834
val x9864 = x9835
val x9865 = x9836
val x9860 = x9851 - '0'
val x9861 = x9860.toInt
val x9867 = x9863 * 10
val x9868 = x9867 + x9861
x9834 = x9868
x9835 = false
val x9855 = x9847 + 1
x9836 = x9855
x9840 = x9855
()
} else {
x9839 = false
()
}
x9877
}
x9879
}
val x9882 = x9834
val x9883 = x9835
val x9884 = x9836
val x10015 = if (x9883) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9803
()
} else {
val x9887 = x9884 >= x3954
val x10013 = if (x9887) {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9803
()
} else {
val x9889 = x3943(x9884)
val x9890 = x9889 == '.'
val x10011 = if (x9890) {
var x9906: Int = 0
var x9907: Boolean = false
val x9891 = x9884 + 1
var x9908: Int = x9891
var x9910: Int = -1
var x9911: Boolean = true
var x9912: Int = x9891
val x9953 = while ({val x9913 = x9911
val x9914 = x9910
val x9915 = x9912
val x9916 = x9914 != x9915
val x9917 = x9913 && x9916
x9917}) {
val x9919 = x9912
x9910 = x9919
val x9921 = x9919 >= x3954
val x9951 = if (x9921) {
x9911 = false
()
} else {
val x9923 = x3943(x9919)
val x9924 = x9923 >= '0'
val x9925 = x9923 <= '9'
val x9926 = x9924 && x9925
val x9949 = if (x9926) {
val x9935 = x9906
val x9936 = x9907
val x9937 = x9908
val x9932 = x9923 - '0'
val x9933 = x9932.toInt
val x9939 = x9935 * 10
val x9940 = x9939 + x9933
x9906 = x9940
x9907 = false
val x9927 = x9919 + 1
x9908 = x9927
x9912 = x9927
()
} else {
x9911 = false
()
}
x9949
}
x9951
}
val x9954 = x9906
val x9955 = x9907
val x9956 = x9908
val x9961 = if (x9955) {
true
} else {
false
}
val x9970 = if (x9961) {
false
} else {
false
}
val x9975 = if (x9970) {
true
} else {
false
}
val x9999 = if (x9975) {
x161
} else {
val x9974 = if (x9970) {
x935
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
x9716
}
val x9980 = x9974._2
val x9981 = x9980.defined
val x9991 = if (x9981) {
val x9982 = x9980.value
val x9984 = x9982.schema
x9984
} else {
""
}
val x9992 = if (x9981) {
val x9982 = x9980.value
val x9985 = x9982.hostName
x9985
} else {
""
}
val x9979 = x9974._1
val x9983 = "/"+x9979
val x9993 = if (x9981) {
x9983
} else {
x9983
}
val x9994 = if (x9981) {
val x9982 = x9980.value
val x9986 = x9982.queryString
x9986
} else {
""
}
val x9995 = if (x9981) {
val x9982 = x9980.value
val x9987 = x9982.fragment
x9987
} else {
""
}
val x9996 = if (x9981) {
val x9982 = x9980.value
val x9988 = x9982.port
x9988
} else {
80
}
val x9997 = new Anon1863173035(x9991,x9992,x9993,x9994,x9995,x9996)
x9997
}
x9154 = x9999
val x10000 = if (x9975) {
true
} else {
false
}
x9155 = x10000
val x9976 = if (x9970) {
x9162
} else {
val x9962 = if (x9955) {
x9803
} else {
x9956
}
val x9971 = if (x9961) {
x9962
} else {
x9962
}
x9971
}
val x10001 = if (x9975) {
x9976
} else {
x9976
}
x9156 = x10001
()
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9803
()
}
x10011
}
x10013
}
x10015
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
}
x10021
}
x10023
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
}
x10029
}
x10031
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
}
x10037
}
x10039
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
}
x10045
}
x10047
} else {
val x9716 = if (x9711) {
x935
} else {
val x9708 = if (x9702) {
x161
} else {
val x9705 = x9701.res
x9705
}
val x9709 = if (x9702) {
false
} else {
true
}
val x9710 = new OptionAnon1863173035(x9708,x9709)
val x9714 = new Tuple2StringOptionAnon1863173035(x9216,x9710)
x9714
}
val x9738 = x9716._2
val x9739 = x9738.defined
val x9749 = if (x9739) {
val x9740 = x9738.value
val x9742 = x9740.schema
x9742
} else {
""
}
val x9750 = if (x9739) {
val x9740 = x9738.value
val x9743 = x9740.hostName
x9743
} else {
""
}
val x9737 = x9716._1
val x9741 = "/"+x9737
val x9751 = if (x9739) {
x9741
} else {
x9741
}
val x9752 = if (x9739) {
val x9740 = x9738.value
val x9744 = x9740.queryString
x9744
} else {
""
}
val x9753 = if (x9739) {
val x9740 = x9738.value
val x9745 = x9740.fragment
x9745
} else {
""
}
val x9754 = if (x9739) {
val x9740 = x9738.value
val x9746 = x9740.port
x9746
} else {
80
}
val x9755 = new Anon1863173035(x9749,x9750,x9751,x9752,x9753,x9754)
x9154 = x9755
x9155 = false
x9156 = x9718
()
}
x10053
}
x10055
}
x10057
} else {
val x10061 = x9688.next
val x10065 = x10061 >= x3954
val x10382 = if (x10065) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
} else {
val x10067 = x3943(x10061)
val x10068 = x10067 == 'H'
val x10380 = if (x10068) {
val x10069 = x10061 + 1
val x10088 = x10069 >= x3954
val x10374 = if (x10088) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
} else {
val x10090 = x3943(x10069)
val x10091 = x10090 == 'T'
val x10372 = if (x10091) {
val x10092 = x10069 + 1
val x10100 = x10092 >= x3954
val x10366 = if (x10100) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
} else {
val x10102 = x3943(x10092)
val x10103 = x10102 == 'T'
val x10364 = if (x10103) {
val x10104 = x10092 + 1
val x10113 = x10104 >= x3954
val x10358 = if (x10113) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
} else {
val x10115 = x3943(x10104)
val x10116 = x10115 == 'P'
val x10356 = if (x10116) {
val x10117 = x10104 + 1
val x10126 = x10117 >= x3954
val x10350 = if (x10126) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
} else {
val x10128 = x3943(x10117)
val x10129 = x10128 == '/'
val x10348 = if (x10129) {
var x10161: Int = 0
var x10162: Boolean = false
val x10130 = x10117 + 1
var x10163: Int = x10130
var x10165: Int = -1
var x10166: Boolean = true
var x10167: Int = x10130
val x10208 = while ({val x10168 = x10166
val x10169 = x10165
val x10170 = x10167
val x10171 = x10169 != x10170
val x10172 = x10168 && x10171
x10172}) {
val x10174 = x10167
x10165 = x10174
val x10176 = x10174 >= x3954
val x10206 = if (x10176) {
x10166 = false
()
} else {
val x10178 = x3943(x10174)
val x10179 = x10178 >= '0'
val x10180 = x10178 <= '9'
val x10181 = x10179 && x10180
val x10204 = if (x10181) {
val x10190 = x10161
val x10191 = x10162
val x10192 = x10163
val x10187 = x10178 - '0'
val x10188 = x10187.toInt
val x10194 = x10190 * 10
val x10195 = x10194 + x10188
x10161 = x10195
x10162 = false
val x10182 = x10174 + 1
x10163 = x10182
x10167 = x10182
()
} else {
x10166 = false
()
}
x10204
}
x10206
}
val x10209 = x10161
val x10210 = x10162
val x10211 = x10163
val x10342 = if (x10210) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10130
()
} else {
val x10214 = x10211 >= x3954
val x10340 = if (x10214) {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10130
()
} else {
val x10216 = x3943(x10211)
val x10217 = x10216 == '.'
val x10338 = if (x10217) {
var x10233: Int = 0
var x10234: Boolean = false
val x10218 = x10211 + 1
var x10235: Int = x10218
var x10237: Int = -1
var x10238: Boolean = true
var x10239: Int = x10218
val x10280 = while ({val x10240 = x10238
val x10241 = x10237
val x10242 = x10239
val x10243 = x10241 != x10242
val x10244 = x10240 && x10243
x10244}) {
val x10246 = x10239
x10237 = x10246
val x10248 = x10246 >= x3954
val x10278 = if (x10248) {
x10238 = false
()
} else {
val x10250 = x3943(x10246)
val x10251 = x10250 >= '0'
val x10252 = x10250 <= '9'
val x10253 = x10251 && x10252
val x10276 = if (x10253) {
val x10262 = x10233
val x10263 = x10234
val x10264 = x10235
val x10259 = x10250 - '0'
val x10260 = x10259.toInt
val x10266 = x10262 * 10
val x10267 = x10266 + x10260
x10233 = x10267
x10234 = false
val x10254 = x10246 + 1
x10235 = x10254
x10239 = x10254
()
} else {
x10238 = false
()
}
x10276
}
x10278
}
val x10281 = x10233
val x10282 = x10234
val x10283 = x10235
val x10288 = if (x10282) {
true
} else {
false
}
val x10297 = if (x10288) {
false
} else {
false
}
val x10302 = if (x10297) {
true
} else {
false
}
val x10326 = if (x10302) {
x161
} else {
val x10301 = if (x10297) {
x935
} else {
val x10059 = x9688.res
val x10060 = new OptionAnon1863173035(x10059,true)
val x10063 = new Tuple2StringOptionAnon1863173035(x9216,x10060)
x10063
}
val x10307 = x10301._2
val x10308 = x10307.defined
val x10318 = if (x10308) {
val x10309 = x10307.value
val x10311 = x10309.schema
x10311
} else {
""
}
val x10319 = if (x10308) {
val x10309 = x10307.value
val x10312 = x10309.hostName
x10312
} else {
""
}
val x10306 = x10301._1
val x10310 = "/"+x10306
val x10320 = if (x10308) {
x10310
} else {
x10310
}
val x10321 = if (x10308) {
val x10309 = x10307.value
val x10313 = x10309.queryString
x10313
} else {
""
}
val x10322 = if (x10308) {
val x10309 = x10307.value
val x10314 = x10309.fragment
x10314
} else {
""
}
val x10323 = if (x10308) {
val x10309 = x10307.value
val x10315 = x10309.port
x10315
} else {
80
}
val x10324 = new Anon1863173035(x10318,x10319,x10320,x10321,x10322,x10323)
x10324
}
x9154 = x10326
val x10327 = if (x10302) {
true
} else {
false
}
x9155 = x10327
val x10303 = if (x10297) {
x9162
} else {
val x10289 = if (x10282) {
x10130
} else {
x10283
}
val x10298 = if (x10288) {
x10289
} else {
x10289
}
x10298
}
val x10328 = if (x10302) {
x10303
} else {
x10303
}
x9156 = x10328
()
} else {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10130
()
}
x10338
}
x10340
}
x10342
} else {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
}
x10348
}
x10350
} else {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
}
x10356
}
x10358
} else {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
}
x10364
}
x10366
} else {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
}
x10372
}
x10374
} else {
val x10076 = "/"+x9216
val x10059 = x9688.res
val x10077 = x10059.schema
val x10078 = x10059.hostName
val x10079 = x10059.queryString
val x10080 = x10059.fragment
val x10081 = x10059.port
val x10082 = new Anon1863173035(x10077,x10078,x10076,x10079,x10080,x10081)
x9154 = x10082
x9155 = false
x9156 = x10061
()
}
x10380
}
x10382
}
x10384
}
x10386
} else {
x9154 = x161
x9155 = true
x9156 = x9152
()
}
x10392
}
val x10395 = x9154
val x10396 = x9155
val x10397 = x9156
val x10398 = new ParseResultAnon1863173035(x10395,x10396,x10397)
x10398
}
val x10726 = x10400(x7500)
val x10727 = x10726.empty
val x10783 = if (x10727) {
val x10725 = {x10401: (Int) => 
var x10403: Anon1863173035 = x161
var x10404: Boolean = true
var x10405: Int = x10401
val x10407 = x10401 >= x3954
val x10719 = if (x10407) {
x10403 = x161
x10404 = true
x10405 = x10401
()
} else {
val x10409 = x3943(x10401)
val x10410 = x10409 == '?'
val x10717 = if (x10410) {
var x10418: java.lang.String = ""
var x10419: Boolean = false
val x10411 = x10401 + 1
var x10420: Int = x10411
var x10422: Int = -1
var x10423: Boolean = true
var x10424: Int = x10411
val x10458 = while ({val x10425 = x10423
val x10426 = x10422
val x10427 = x10424
val x10428 = x10426 != x10427
val x10429 = x10425 && x10428
x10429}) {
val x10431 = x10424
x10422 = x10431
val x10433 = x10431 >= x3954
val x10456 = if (x10433) {
x10423 = false
()
} else {
val x10435 = x3943(x10431)
val x10436 = x10435 == '?'
val x10454 = if (x10436) {
val x10441 = x10418
val x10442 = x10419
val x10443 = x10420
val x10445 = x10441+x10435
x10418 = x10445
x10419 = false
val x10437 = x10431 + 1
x10420 = x10437
x10424 = x10437
()
} else {
x10423 = false
()
}
x10454
}
x10456
}
val x10459 = x10418
val x10460 = x10419
val x10461 = x10420
val x10711 = if (x10460) {
x10403 = x161
x10404 = true
x10405 = x10411
()
} else {
var x10477: java.lang.String = ""
var x10478: Boolean = false
var x10479: Int = x10461
var x10481: Int = -1
var x10482: Boolean = true
var x10483: Int = x10461
val x10521 = while ({val x10484 = x10482
val x10485 = x10481
val x10486 = x10483
val x10487 = x10485 != x10486
val x10488 = x10484 && x10487
x10488}) {
val x10490 = x10483
x10481 = x10490
val x10492 = x10490 >= x3954
val x10519 = if (x10492) {
x10482 = false
()
} else {
val x10494 = x3943(x10490)
val x10495 = x10494 > ' '
val x10496 = x10494 != '#'
val x10497 = x10495 && x10496
val x10498 = x10494 != ''
val x10499 = x10497 && x10498
val x10517 = if (x10499) {
val x10504 = x10477
val x10505 = x10478
val x10506 = x10479
val x10508 = x10504+x10494
x10477 = x10508
x10478 = false
val x10500 = x10490 + 1
x10479 = x10500
x10483 = x10500
()
} else {
x10482 = false
()
}
x10517
}
x10519
}
val x10522 = x10477
val x10523 = x10478
val x10524 = x10479
val x10709 = if (x10523) {
x10403 = x161
x10404 = true
x10405 = x10411
()
} else {
val x10526 = x10524 >= x3954
val x10707 = if (x10526) {
val x10540 = new Anon1863173035("","","",x10522,"",80)
x10403 = x10540
x10404 = false
x10405 = x10524
()
} else {
val x10528 = x3943(x10524)
val x10529 = x10528 == '#'
val x10705 = if (x10529) {
var x10547: java.lang.String = ""
var x10548: Boolean = false
val x10530 = x10524 + 1
var x10549: Int = x10530
var x10551: Int = -1
var x10552: Boolean = true
var x10553: Int = x10530
val x10587 = while ({val x10554 = x10552
val x10555 = x10551
val x10556 = x10553
val x10557 = x10555 != x10556
val x10558 = x10554 && x10557
x10558}) {
val x10560 = x10553
x10551 = x10560
val x10562 = x10560 >= x3954
val x10585 = if (x10562) {
x10552 = false
()
} else {
val x10564 = x3943(x10560)
val x10565 = x10564 == '#'
val x10583 = if (x10565) {
val x10570 = x10547
val x10571 = x10548
val x10572 = x10549
val x10574 = x10570+x10564
x10547 = x10574
x10548 = false
val x10566 = x10560 + 1
x10549 = x10566
x10553 = x10566
()
} else {
x10552 = false
()
}
x10583
}
x10585
}
val x10588 = x10547
val x10589 = x10548
val x10590 = x10549
val x10699 = if (x10589) {
val x10540 = new Anon1863173035("","","",x10522,"",80)
x10403 = x10540
x10404 = false
x10405 = x10530
()
} else {
var x10602: java.lang.String = ""
var x10603: Boolean = false
var x10604: Int = x10590
var x10606: Int = -1
var x10607: Boolean = true
var x10608: Int = x10590
val x10644 = while ({val x10609 = x10607
val x10610 = x10606
val x10611 = x10608
val x10612 = x10610 != x10611
val x10613 = x10609 && x10612
x10613}) {
val x10615 = x10608
x10606 = x10615
val x10617 = x10615 >= x3954
val x10642 = if (x10617) {
x10607 = false
()
} else {
val x10619 = x3943(x10615)
val x10620 = x10619 > ' '
val x10621 = x10619 != ''
val x10622 = x10620 && x10621
val x10640 = if (x10622) {
val x10627 = x10602
val x10628 = x10603
val x10629 = x10604
val x10631 = x10627+x10619
x10602 = x10631
x10603 = false
val x10623 = x10615 + 1
x10604 = x10623
x10608 = x10623
()
} else {
x10607 = false
()
}
x10640
}
x10642
}
val x10645 = x10602
val x10646 = x10603
val x10647 = x10604
val x10653 = if (x10646) {
true
} else {
false
}
val x10662 = if (x10653) {
false
} else {
false
}
val x10668 = if (x10662) {
true
} else {
false
}
val x10691 = if (x10668) {
x161
} else {
val x10667 = if (x10662) {
x935
} else {
val x10659 = if (x10653) {
x161
} else {
val x10652 = if (x10646) {
x161
} else {
val x10650 = new Anon1863173035("","","","",x10645,80)
x10650
}
x10652
}
val x10660 = if (x10653) {
false
} else {
true
}
val x10661 = new OptionAnon1863173035(x10659,x10660)
val x10665 = new Tuple2StringOptionAnon1863173035(x10522,x10661)
x10665
}
val x10673 = x10667._2
val x10674 = x10673.defined
val x10683 = if (x10674) {
val x10675 = x10673.value
val x10676 = x10675.schema
x10676
} else {
""
}
val x10684 = if (x10674) {
val x10675 = x10673.value
val x10677 = x10675.hostName
x10677
} else {
""
}
val x10685 = if (x10674) {
val x10675 = x10673.value
val x10678 = x10675.path
x10678
} else {
""
}
val x10672 = x10667._1
val x10686 = if (x10674) {
x10672
} else {
x10672
}
val x10687 = if (x10674) {
val x10675 = x10673.value
val x10679 = x10675.fragment
x10679
} else {
""
}
val x10688 = if (x10674) {
val x10675 = x10673.value
val x10680 = x10675.port
x10680
} else {
80
}
val x10689 = new Anon1863173035(x10683,x10684,x10685,x10686,x10687,x10688)
x10689
}
x10403 = x10691
val x10692 = if (x10668) {
true
} else {
false
}
x10404 = x10692
val x10669 = if (x10662) {
x10411
} else {
val x10654 = if (x10646) {
x10647
} else {
x10647
}
val x10663 = if (x10653) {
x10654
} else {
x10654
}
x10663
}
val x10693 = if (x10668) {
x10669
} else {
x10669
}
x10405 = x10693
()
}
x10699
} else {
val x10540 = new Anon1863173035("","","",x10522,"",80)
x10403 = x10540
x10404 = false
x10405 = x10524
()
}
x10705
}
x10707
}
x10709
}
x10711
} else {
x10403 = x161
x10404 = true
x10405 = x10401
()
}
x10717
}
val x10720 = x10403
val x10721 = x10404
val x10722 = x10405
val x10723 = new ParseResultAnon1863173035(x10720,x10721,x10722)
x10723
}
val x10728 = x10725(x7500)
val x10729 = x10728.empty
val x10735 = if (x10729) {
true
} else {
false
}
val x10761 = if (x10735) {
x161
} else {
val x10734 = if (x10729) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x5790 = x4180.res
val x7498 = if (x7490) {
x1
} else {
val x7489 = if (x7484) {
x189
} else {
val x7487 = new Tuple2CharString(x4185,x7483)
x7487
}
val x7494 = x7489._1
val x7495 = x7489._2
val x7496 = x7494+x7495
x7496
}
val x9146 = new Anon1863173035("",x7498,"","","",80)
val x9148 = new OptionAnon1863173035(x9146,true)
val x9150 = new Tuple2StringOptionAnon1863173035(x5790,x9148)
val x10730 = x10728.res
val x10731 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x9150,x10730)
x10731
}
val x10739 = x10734._1
val x10741 = x10739._1
val x10742 = x10739._2
val x10743 = x10742.defined
val x10753 = if (x10743) {
x10741
} else {
x10741
}
val x10740 = x10734._2
val x10754 = if (x10743) {
val x10744 = x10742.value
val x10745 = x10744.hostName
x10745
} else {
val x10751 = x10740.hostName
x10751
}
val x10746 = x10740.path
val x10755 = if (x10743) {
x10746
} else {
x10746
}
val x10747 = x10740.queryString
val x10756 = if (x10743) {
x10747
} else {
x10747
}
val x10748 = x10740.fragment
val x10757 = if (x10743) {
x10748
} else {
x10748
}
val x10749 = x10740.port
val x10758 = if (x10743) {
x10749
} else {
x10749
}
val x10759 = new Anon1863173035(x10753,x10754,x10755,x10756,x10757,x10758)
x10759
}
x3944 = x10761
val x10762 = if (x10735) {
true
} else {
false
}
x3945 = x10762
val x10736 = if (x10729) {
0
} else {
val x10732 = x10728.next
x10732
}
val x10763 = if (x10735) {
x10736
} else {
x10736
}
x3946 = x10763
()
} else {
val x5790 = x4180.res
val x7498 = if (x7490) {
x1
} else {
val x7489 = if (x7484) {
x189
} else {
val x7487 = new Tuple2CharString(x4185,x7483)
x7487
}
val x7494 = x7489._1
val x7495 = x7489._2
val x7496 = x7494+x7495
x7496
}
val x10769 = x10726.res
val x10773 = x10769.path
val x10774 = x10769.queryString
val x10775 = x10769.fragment
val x10776 = x10769.port
val x10777 = new Anon1863173035(x5790,x7498,x10773,x10774,x10775,x10776)
x3944 = x10777
x3945 = false
val x10771 = x10726.next
x3946 = x10771
()
}
x10783
} else {
val x7504 = x3943(x7500)
val x7505 = x7504 == ':'
val x14170 = if (x7505) {
var x10786: Int = 0
var x10787: Boolean = false
val x7506 = x7500 + 1
var x10788: Int = x7506
var x10790: Int = -1
var x10791: Boolean = true
var x10792: Int = x7506
val x10833 = while ({val x10793 = x10791
val x10794 = x10790
val x10795 = x10792
val x10796 = x10794 != x10795
val x10797 = x10793 && x10796
x10797}) {
val x10799 = x10792
x10790 = x10799
val x10801 = x10799 >= x3954
val x10831 = if (x10801) {
x10791 = false
()
} else {
val x10803 = x3943(x10799)
val x10804 = x10803 >= '0'
val x10805 = x10803 <= '9'
val x10806 = x10804 && x10805
val x10829 = if (x10806) {
val x10815 = x10786
val x10816 = x10787
val x10817 = x10788
val x10812 = x10803 - '0'
val x10813 = x10812.toInt
val x10819 = x10815 * 10
val x10820 = x10819 + x10813
x10786 = x10820
x10787 = false
val x10807 = x10799 + 1
x10788 = x10807
x10792 = x10807
()
} else {
x10791 = false
()
}
x10829
}
x10831
}
val x10834 = x10786
val x10835 = x10787
val x10836 = x10788
val x10844 = if (x10835) {
false
} else {
false
}
val x10850 = if (x10844) {
true
} else {
false
}
val x10866 = if (x10850) {
true
} else {
false
}
val x10875 = if (x10866) {
false
} else {
false
}
val x10881 = if (x10875) {
true
} else {
false
}
val x12535 = if (x10881) {
x3944 = x161
x3945 = true
x3946 = 0
()
} else {
val x10882 = if (x10875) {
0
} else {
val x10851 = if (x10844) {
x4182
} else {
val x10845 = if (x10835) {
x10836
} else {
x10836
}
x10845
}
val x10867 = if (x10850) {
x10851
} else {
x10851
}
val x10876 = if (x10866) {
x10867
} else {
x10867
}
x10876
}
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x11277 = {x10953: (Int) => 
var x10955: Anon1863173035 = x161
var x10956: Boolean = true
var x10957: Int = x10953
val x10959 = x10953 >= x3954
val x11271 = if (x10959) {
x10955 = x161
x10956 = true
x10957 = x10953
()
} else {
val x10961 = x3943(x10953)
val x10962 = x10961 == '?'
val x11269 = if (x10962) {
var x10970: java.lang.String = ""
var x10971: Boolean = false
val x10963 = x10953 + 1
var x10972: Int = x10963
var x10974: Int = -1
var x10975: Boolean = true
var x10976: Int = x10963
val x11010 = while ({val x10977 = x10975
val x10978 = x10974
val x10979 = x10976
val x10980 = x10978 != x10979
val x10981 = x10977 && x10980
x10981}) {
val x10983 = x10976
x10974 = x10983
val x10985 = x10983 >= x3954
val x11008 = if (x10985) {
x10975 = false
()
} else {
val x10987 = x3943(x10983)
val x10988 = x10987 == '?'
val x11006 = if (x10988) {
val x10993 = x10970
val x10994 = x10971
val x10995 = x10972
val x10997 = x10993+x10987
x10970 = x10997
x10971 = false
val x10989 = x10983 + 1
x10972 = x10989
x10976 = x10989
()
} else {
x10975 = false
()
}
x11006
}
x11008
}
val x11011 = x10970
val x11012 = x10971
val x11013 = x10972
val x11263 = if (x11012) {
x10955 = x161
x10956 = true
x10957 = x10963
()
} else {
var x11029: java.lang.String = ""
var x11030: Boolean = false
var x11031: Int = x11013
var x11033: Int = -1
var x11034: Boolean = true
var x11035: Int = x11013
val x11073 = while ({val x11036 = x11034
val x11037 = x11033
val x11038 = x11035
val x11039 = x11037 != x11038
val x11040 = x11036 && x11039
x11040}) {
val x11042 = x11035
x11033 = x11042
val x11044 = x11042 >= x3954
val x11071 = if (x11044) {
x11034 = false
()
} else {
val x11046 = x3943(x11042)
val x11047 = x11046 > ' '
val x11048 = x11046 != '#'
val x11049 = x11047 && x11048
val x11050 = x11046 != ''
val x11051 = x11049 && x11050
val x11069 = if (x11051) {
val x11056 = x11029
val x11057 = x11030
val x11058 = x11031
val x11060 = x11056+x11046
x11029 = x11060
x11030 = false
val x11052 = x11042 + 1
x11031 = x11052
x11035 = x11052
()
} else {
x11034 = false
()
}
x11069
}
x11071
}
val x11074 = x11029
val x11075 = x11030
val x11076 = x11031
val x11261 = if (x11075) {
x10955 = x161
x10956 = true
x10957 = x10963
()
} else {
val x11078 = x11076 >= x3954
val x11259 = if (x11078) {
val x11092 = new Anon1863173035("","","",x11074,"",80)
x10955 = x11092
x10956 = false
x10957 = x11076
()
} else {
val x11080 = x3943(x11076)
val x11081 = x11080 == '#'
val x11257 = if (x11081) {
var x11099: java.lang.String = ""
var x11100: Boolean = false
val x11082 = x11076 + 1
var x11101: Int = x11082
var x11103: Int = -1
var x11104: Boolean = true
var x11105: Int = x11082
val x11139 = while ({val x11106 = x11104
val x11107 = x11103
val x11108 = x11105
val x11109 = x11107 != x11108
val x11110 = x11106 && x11109
x11110}) {
val x11112 = x11105
x11103 = x11112
val x11114 = x11112 >= x3954
val x11137 = if (x11114) {
x11104 = false
()
} else {
val x11116 = x3943(x11112)
val x11117 = x11116 == '#'
val x11135 = if (x11117) {
val x11122 = x11099
val x11123 = x11100
val x11124 = x11101
val x11126 = x11122+x11116
x11099 = x11126
x11100 = false
val x11118 = x11112 + 1
x11101 = x11118
x11105 = x11118
()
} else {
x11104 = false
()
}
x11135
}
x11137
}
val x11140 = x11099
val x11141 = x11100
val x11142 = x11101
val x11251 = if (x11141) {
val x11092 = new Anon1863173035("","","",x11074,"",80)
x10955 = x11092
x10956 = false
x10957 = x11082
()
} else {
var x11154: java.lang.String = ""
var x11155: Boolean = false
var x11156: Int = x11142
var x11158: Int = -1
var x11159: Boolean = true
var x11160: Int = x11142
val x11196 = while ({val x11161 = x11159
val x11162 = x11158
val x11163 = x11160
val x11164 = x11162 != x11163
val x11165 = x11161 && x11164
x11165}) {
val x11167 = x11160
x11158 = x11167
val x11169 = x11167 >= x3954
val x11194 = if (x11169) {
x11159 = false
()
} else {
val x11171 = x3943(x11167)
val x11172 = x11171 > ' '
val x11173 = x11171 != ''
val x11174 = x11172 && x11173
val x11192 = if (x11174) {
val x11179 = x11154
val x11180 = x11155
val x11181 = x11156
val x11183 = x11179+x11171
x11154 = x11183
x11155 = false
val x11175 = x11167 + 1
x11156 = x11175
x11160 = x11175
()
} else {
x11159 = false
()
}
x11192
}
x11194
}
val x11197 = x11154
val x11198 = x11155
val x11199 = x11156
val x11205 = if (x11198) {
true
} else {
false
}
val x11214 = if (x11205) {
false
} else {
false
}
val x11220 = if (x11214) {
true
} else {
false
}
val x11243 = if (x11220) {
x161
} else {
val x11219 = if (x11214) {
x935
} else {
val x11211 = if (x11205) {
x161
} else {
val x11204 = if (x11198) {
x161
} else {
val x11202 = new Anon1863173035("","","","",x11197,80)
x11202
}
x11204
}
val x11212 = if (x11205) {
false
} else {
true
}
val x11213 = new OptionAnon1863173035(x11211,x11212)
val x11217 = new Tuple2StringOptionAnon1863173035(x11074,x11213)
x11217
}
val x11225 = x11219._2
val x11226 = x11225.defined
val x11235 = if (x11226) {
val x11227 = x11225.value
val x11228 = x11227.schema
x11228
} else {
""
}
val x11236 = if (x11226) {
val x11227 = x11225.value
val x11229 = x11227.hostName
x11229
} else {
""
}
val x11237 = if (x11226) {
val x11227 = x11225.value
val x11230 = x11227.path
x11230
} else {
""
}
val x11224 = x11219._1
val x11238 = if (x11226) {
x11224
} else {
x11224
}
val x11239 = if (x11226) {
val x11227 = x11225.value
val x11231 = x11227.fragment
x11231
} else {
""
}
val x11240 = if (x11226) {
val x11227 = x11225.value
val x11232 = x11227.port
x11232
} else {
80
}
val x11241 = new Anon1863173035(x11235,x11236,x11237,x11238,x11239,x11240)
x11241
}
x10955 = x11243
val x11244 = if (x11220) {
true
} else {
false
}
x10956 = x11244
val x11221 = if (x11214) {
x10963
} else {
val x11206 = if (x11198) {
x11199
} else {
x11199
}
val x11215 = if (x11205) {
x11206
} else {
x11206
}
x11215
}
val x11245 = if (x11220) {
x11221
} else {
x11221
}
x10957 = x11245
()
}
x11251
} else {
val x11092 = new Anon1863173035("","","",x11074,"",80)
x10955 = x11092
x10956 = false
x10957 = x11076
()
}
x11257
}
x11259
}
x11261
}
x11263
} else {
x10955 = x161
x10956 = true
x10957 = x10953
()
}
x11269
}
val x11272 = x10955
val x11273 = x10956
val x11274 = x10957
val x11275 = new ParseResultAnon1863173035(x11272,x11273,x11274)
x11275
}
val x11419 = {x11278: (Int) => 
var x11280: Anon1863173035 = x161
var x11281: Boolean = true
var x11282: Int = x11278
val x11284 = x11278 >= x3954
val x11413 = if (x11284) {
x11280 = x161
x11281 = true
x11282 = x11278
()
} else {
val x11286 = x3943(x11278)
val x11287 = x11286 == '#'
val x11411 = if (x11287) {
var x11295: java.lang.String = ""
var x11296: Boolean = false
val x11288 = x11278 + 1
var x11297: Int = x11288
var x11299: Int = -1
var x11300: Boolean = true
var x11301: Int = x11288
val x11335 = while ({val x11302 = x11300
val x11303 = x11299
val x11304 = x11301
val x11305 = x11303 != x11304
val x11306 = x11302 && x11305
x11306}) {
val x11308 = x11301
x11299 = x11308
val x11310 = x11308 >= x3954
val x11333 = if (x11310) {
x11300 = false
()
} else {
val x11312 = x3943(x11308)
val x11313 = x11312 == '#'
val x11331 = if (x11313) {
val x11318 = x11295
val x11319 = x11296
val x11320 = x11297
val x11322 = x11318+x11312
x11295 = x11322
x11296 = false
val x11314 = x11308 + 1
x11297 = x11314
x11301 = x11314
()
} else {
x11300 = false
()
}
x11331
}
x11333
}
val x11336 = x11295
val x11337 = x11296
val x11338 = x11297
val x11405 = if (x11337) {
x11280 = x161
x11281 = true
x11282 = x11288
()
} else {
var x11347: java.lang.String = ""
var x11348: Boolean = false
var x11349: Int = x11338
var x11351: Int = -1
var x11352: Boolean = true
var x11353: Int = x11338
val x11389 = while ({val x11354 = x11352
val x11355 = x11351
val x11356 = x11353
val x11357 = x11355 != x11356
val x11358 = x11354 && x11357
x11358}) {
val x11360 = x11353
x11351 = x11360
val x11362 = x11360 >= x3954
val x11387 = if (x11362) {
x11352 = false
()
} else {
val x11364 = x3943(x11360)
val x11365 = x11364 > ' '
val x11366 = x11364 != ''
val x11367 = x11365 && x11366
val x11385 = if (x11367) {
val x11372 = x11347
val x11373 = x11348
val x11374 = x11349
val x11376 = x11372+x11364
x11347 = x11376
x11348 = false
val x11368 = x11360 + 1
x11349 = x11368
x11353 = x11368
()
} else {
x11352 = false
()
}
x11385
}
x11387
}
val x11390 = x11347
val x11391 = x11348
val x11392 = x11349
val x11397 = if (x11391) {
x161
} else {
val x11395 = new Anon1863173035("","","","",x11390,80)
x11395
}
x11280 = x11397
val x11398 = if (x11391) {
true
} else {
false
}
x11281 = x11398
val x11399 = if (x11391) {
x11392
} else {
x11392
}
x11282 = x11399
()
}
x11405
} else {
x11280 = x161
x11281 = true
x11282 = x11278
()
}
x11411
}
val x11414 = x11280
val x11415 = x11281
val x11416 = x11282
val x11417 = new ParseResultAnon1863173035(x11414,x11415,x11416)
x11417
}
val x12132 = {x10884: (Int) => 
var x10886: Anon1863173035 = x161
var x10887: Boolean = true
var x10888: Int = x10884
val x10890 = x10884 >= x3954
val x12126 = if (x10890) {
x10886 = x161
x10887 = true
x10888 = x10884
()
} else {
val x10892 = x3943(x10884)
val x10893 = x10892 == '/'
val x12124 = if (x10893) {
var x10901: java.lang.String = ""
var x10902: Boolean = false
val x10894 = x10884 + 1
var x10903: Int = x10894
var x10905: Int = -1
var x10906: Boolean = true
var x10907: Int = x10894
val x10947 = while ({val x10908 = x10906
val x10909 = x10905
val x10910 = x10907
val x10911 = x10909 != x10910
val x10912 = x10908 && x10911
x10912}) {
val x10914 = x10907
x10905 = x10914
val x10916 = x10914 >= x3954
val x10945 = if (x10916) {
x10906 = false
()
} else {
val x10918 = x3943(x10914)
val x10919 = x10918 > ' '
val x10920 = x10918 != '#'
val x10921 = x10919 && x10920
val x10922 = x10918 != '?'
val x10923 = x10921 && x10922
val x10924 = x10918 != ''
val x10925 = x10923 && x10924
val x10943 = if (x10925) {
val x10930 = x10901
val x10931 = x10902
val x10932 = x10903
val x10934 = x10930+x10918
x10901 = x10934
x10902 = false
val x10926 = x10914 + 1
x10903 = x10926
x10907 = x10926
()
} else {
x10906 = false
()
}
x10943
}
x10945
}
val x10948 = x10901
val x10949 = x10902
val x10950 = x10903
val x12118 = if (x10949) {
x10886 = x161
x10887 = true
x10888 = x10894
()
} else {
val x11420 = x11277(x10950)
val x11432 = x11420.empty
val x12116 = if (x11432) {
val x11433 = x11419(x10950)
val x11434 = x11433.empty
val x11443 = if (x11434) {
false
} else {
false
}
val x11449 = if (x11443) {
true
} else {
false
}
val x11789 = if (x11449) {
x10886 = x161
x10887 = true
val x11450 = if (x11443) {
x10894
} else {
val x11435 = x11433.next
val x11444 = if (x11434) {
x11435
} else {
x11435
}
x11444
}
x10888 = x11450
()
} else {
val x11450 = if (x11443) {
x10894
} else {
val x11435 = x11433.next
val x11444 = if (x11434) {
x11435
} else {
x11435
}
x11444
}
val x11452 = x11450 >= x3954
val x11787 = if (x11452) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
} else {
val x11454 = x3943(x11450)
val x11455 = x11454 == 'H'
val x11785 = if (x11455) {
val x11456 = x11450 + 1
val x11493 = x11456 >= x3954
val x11779 = if (x11493) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
} else {
val x11495 = x3943(x11456)
val x11496 = x11495 == 'T'
val x11777 = if (x11496) {
val x11497 = x11456 + 1
val x11505 = x11497 >= x3954
val x11771 = if (x11505) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
} else {
val x11507 = x3943(x11497)
val x11508 = x11507 == 'T'
val x11769 = if (x11508) {
val x11509 = x11497 + 1
val x11518 = x11509 >= x3954
val x11763 = if (x11518) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
} else {
val x11520 = x3943(x11509)
val x11521 = x11520 == 'P'
val x11761 = if (x11521) {
val x11522 = x11509 + 1
val x11531 = x11522 >= x3954
val x11755 = if (x11531) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
} else {
val x11533 = x3943(x11522)
val x11534 = x11533 == '/'
val x11753 = if (x11534) {
var x11566: Int = 0
var x11567: Boolean = false
val x11535 = x11522 + 1
var x11568: Int = x11535
var x11570: Int = -1
var x11571: Boolean = true
var x11572: Int = x11535
val x11613 = while ({val x11573 = x11571
val x11574 = x11570
val x11575 = x11572
val x11576 = x11574 != x11575
val x11577 = x11573 && x11576
x11577}) {
val x11579 = x11572
x11570 = x11579
val x11581 = x11579 >= x3954
val x11611 = if (x11581) {
x11571 = false
()
} else {
val x11583 = x3943(x11579)
val x11584 = x11583 >= '0'
val x11585 = x11583 <= '9'
val x11586 = x11584 && x11585
val x11609 = if (x11586) {
val x11595 = x11566
val x11596 = x11567
val x11597 = x11568
val x11592 = x11583 - '0'
val x11593 = x11592.toInt
val x11599 = x11595 * 10
val x11600 = x11599 + x11593
x11566 = x11600
x11567 = false
val x11587 = x11579 + 1
x11568 = x11587
x11572 = x11587
()
} else {
x11571 = false
()
}
x11609
}
x11611
}
val x11614 = x11566
val x11615 = x11567
val x11616 = x11568
val x11747 = if (x11615) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11535
()
} else {
val x11619 = x11616 >= x3954
val x11745 = if (x11619) {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11535
()
} else {
val x11621 = x3943(x11616)
val x11622 = x11621 == '.'
val x11743 = if (x11622) {
var x11638: Int = 0
var x11639: Boolean = false
val x11623 = x11616 + 1
var x11640: Int = x11623
var x11642: Int = -1
var x11643: Boolean = true
var x11644: Int = x11623
val x11685 = while ({val x11645 = x11643
val x11646 = x11642
val x11647 = x11644
val x11648 = x11646 != x11647
val x11649 = x11645 && x11648
x11649}) {
val x11651 = x11644
x11642 = x11651
val x11653 = x11651 >= x3954
val x11683 = if (x11653) {
x11643 = false
()
} else {
val x11655 = x3943(x11651)
val x11656 = x11655 >= '0'
val x11657 = x11655 <= '9'
val x11658 = x11656 && x11657
val x11681 = if (x11658) {
val x11667 = x11638
val x11668 = x11639
val x11669 = x11640
val x11664 = x11655 - '0'
val x11665 = x11664.toInt
val x11671 = x11667 * 10
val x11672 = x11671 + x11665
x11638 = x11672
x11639 = false
val x11659 = x11651 + 1
x11640 = x11659
x11644 = x11659
()
} else {
x11643 = false
()
}
x11681
}
x11683
}
val x11686 = x11638
val x11687 = x11639
val x11688 = x11640
val x11693 = if (x11687) {
true
} else {
false
}
val x11702 = if (x11693) {
false
} else {
false
}
val x11707 = if (x11702) {
true
} else {
false
}
val x11731 = if (x11707) {
x161
} else {
val x11706 = if (x11702) {
x935
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
x11448
}
val x11712 = x11706._2
val x11713 = x11712.defined
val x11723 = if (x11713) {
val x11714 = x11712.value
val x11716 = x11714.schema
x11716
} else {
""
}
val x11724 = if (x11713) {
val x11714 = x11712.value
val x11717 = x11714.hostName
x11717
} else {
""
}
val x11711 = x11706._1
val x11715 = "/"+x11711
val x11725 = if (x11713) {
x11715
} else {
x11715
}
val x11726 = if (x11713) {
val x11714 = x11712.value
val x11718 = x11714.queryString
x11718
} else {
""
}
val x11727 = if (x11713) {
val x11714 = x11712.value
val x11719 = x11714.fragment
x11719
} else {
""
}
val x11728 = if (x11713) {
val x11714 = x11712.value
val x11720 = x11714.port
x11720
} else {
80
}
val x11729 = new Anon1863173035(x11723,x11724,x11725,x11726,x11727,x11728)
x11729
}
x10886 = x11731
val x11732 = if (x11707) {
true
} else {
false
}
x10887 = x11732
val x11708 = if (x11702) {
x10894
} else {
val x11694 = if (x11687) {
x11535
} else {
x11688
}
val x11703 = if (x11693) {
x11694
} else {
x11694
}
x11703
}
val x11733 = if (x11707) {
x11708
} else {
x11708
}
x10888 = x11733
()
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11535
()
}
x11743
}
x11745
}
x11747
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
}
x11753
}
x11755
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
}
x11761
}
x11763
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
}
x11769
}
x11771
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
}
x11777
}
x11779
} else {
val x11448 = if (x11443) {
x935
} else {
val x11440 = if (x11434) {
x161
} else {
val x11437 = x11433.res
x11437
}
val x11441 = if (x11434) {
false
} else {
true
}
val x11442 = new OptionAnon1863173035(x11440,x11441)
val x11446 = new Tuple2StringOptionAnon1863173035(x10948,x11442)
x11446
}
val x11470 = x11448._2
val x11471 = x11470.defined
val x11481 = if (x11471) {
val x11472 = x11470.value
val x11474 = x11472.schema
x11474
} else {
""
}
val x11482 = if (x11471) {
val x11472 = x11470.value
val x11475 = x11472.hostName
x11475
} else {
""
}
val x11469 = x11448._1
val x11473 = "/"+x11469
val x11483 = if (x11471) {
x11473
} else {
x11473
}
val x11484 = if (x11471) {
val x11472 = x11470.value
val x11476 = x11472.queryString
x11476
} else {
""
}
val x11485 = if (x11471) {
val x11472 = x11470.value
val x11477 = x11472.fragment
x11477
} else {
""
}
val x11486 = if (x11471) {
val x11472 = x11470.value
val x11478 = x11472.port
x11478
} else {
80
}
val x11487 = new Anon1863173035(x11481,x11482,x11483,x11484,x11485,x11486)
x10886 = x11487
x10887 = false
x10888 = x11450
()
}
x11785
}
x11787
}
x11789
} else {
val x11793 = x11420.next
val x11797 = x11793 >= x3954
val x12114 = if (x11797) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
} else {
val x11799 = x3943(x11793)
val x11800 = x11799 == 'H'
val x12112 = if (x11800) {
val x11801 = x11793 + 1
val x11820 = x11801 >= x3954
val x12106 = if (x11820) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
} else {
val x11822 = x3943(x11801)
val x11823 = x11822 == 'T'
val x12104 = if (x11823) {
val x11824 = x11801 + 1
val x11832 = x11824 >= x3954
val x12098 = if (x11832) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
} else {
val x11834 = x3943(x11824)
val x11835 = x11834 == 'T'
val x12096 = if (x11835) {
val x11836 = x11824 + 1
val x11845 = x11836 >= x3954
val x12090 = if (x11845) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
} else {
val x11847 = x3943(x11836)
val x11848 = x11847 == 'P'
val x12088 = if (x11848) {
val x11849 = x11836 + 1
val x11858 = x11849 >= x3954
val x12082 = if (x11858) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
} else {
val x11860 = x3943(x11849)
val x11861 = x11860 == '/'
val x12080 = if (x11861) {
var x11893: Int = 0
var x11894: Boolean = false
val x11862 = x11849 + 1
var x11895: Int = x11862
var x11897: Int = -1
var x11898: Boolean = true
var x11899: Int = x11862
val x11940 = while ({val x11900 = x11898
val x11901 = x11897
val x11902 = x11899
val x11903 = x11901 != x11902
val x11904 = x11900 && x11903
x11904}) {
val x11906 = x11899
x11897 = x11906
val x11908 = x11906 >= x3954
val x11938 = if (x11908) {
x11898 = false
()
} else {
val x11910 = x3943(x11906)
val x11911 = x11910 >= '0'
val x11912 = x11910 <= '9'
val x11913 = x11911 && x11912
val x11936 = if (x11913) {
val x11922 = x11893
val x11923 = x11894
val x11924 = x11895
val x11919 = x11910 - '0'
val x11920 = x11919.toInt
val x11926 = x11922 * 10
val x11927 = x11926 + x11920
x11893 = x11927
x11894 = false
val x11914 = x11906 + 1
x11895 = x11914
x11899 = x11914
()
} else {
x11898 = false
()
}
x11936
}
x11938
}
val x11941 = x11893
val x11942 = x11894
val x11943 = x11895
val x12074 = if (x11942) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11862
()
} else {
val x11946 = x11943 >= x3954
val x12072 = if (x11946) {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11862
()
} else {
val x11948 = x3943(x11943)
val x11949 = x11948 == '.'
val x12070 = if (x11949) {
var x11965: Int = 0
var x11966: Boolean = false
val x11950 = x11943 + 1
var x11967: Int = x11950
var x11969: Int = -1
var x11970: Boolean = true
var x11971: Int = x11950
val x12012 = while ({val x11972 = x11970
val x11973 = x11969
val x11974 = x11971
val x11975 = x11973 != x11974
val x11976 = x11972 && x11975
x11976}) {
val x11978 = x11971
x11969 = x11978
val x11980 = x11978 >= x3954
val x12010 = if (x11980) {
x11970 = false
()
} else {
val x11982 = x3943(x11978)
val x11983 = x11982 >= '0'
val x11984 = x11982 <= '9'
val x11985 = x11983 && x11984
val x12008 = if (x11985) {
val x11994 = x11965
val x11995 = x11966
val x11996 = x11967
val x11991 = x11982 - '0'
val x11992 = x11991.toInt
val x11998 = x11994 * 10
val x11999 = x11998 + x11992
x11965 = x11999
x11966 = false
val x11986 = x11978 + 1
x11967 = x11986
x11971 = x11986
()
} else {
x11970 = false
()
}
x12008
}
x12010
}
val x12013 = x11965
val x12014 = x11966
val x12015 = x11967
val x12020 = if (x12014) {
true
} else {
false
}
val x12029 = if (x12020) {
false
} else {
false
}
val x12034 = if (x12029) {
true
} else {
false
}
val x12058 = if (x12034) {
x161
} else {
val x12033 = if (x12029) {
x935
} else {
val x11791 = x11420.res
val x11792 = new OptionAnon1863173035(x11791,true)
val x11795 = new Tuple2StringOptionAnon1863173035(x10948,x11792)
x11795
}
val x12039 = x12033._2
val x12040 = x12039.defined
val x12050 = if (x12040) {
val x12041 = x12039.value
val x12043 = x12041.schema
x12043
} else {
""
}
val x12051 = if (x12040) {
val x12041 = x12039.value
val x12044 = x12041.hostName
x12044
} else {
""
}
val x12038 = x12033._1
val x12042 = "/"+x12038
val x12052 = if (x12040) {
x12042
} else {
x12042
}
val x12053 = if (x12040) {
val x12041 = x12039.value
val x12045 = x12041.queryString
x12045
} else {
""
}
val x12054 = if (x12040) {
val x12041 = x12039.value
val x12046 = x12041.fragment
x12046
} else {
""
}
val x12055 = if (x12040) {
val x12041 = x12039.value
val x12047 = x12041.port
x12047
} else {
80
}
val x12056 = new Anon1863173035(x12050,x12051,x12052,x12053,x12054,x12055)
x12056
}
x10886 = x12058
val x12059 = if (x12034) {
true
} else {
false
}
x10887 = x12059
val x12035 = if (x12029) {
x10894
} else {
val x12021 = if (x12014) {
x11862
} else {
x12015
}
val x12030 = if (x12020) {
x12021
} else {
x12021
}
x12030
}
val x12060 = if (x12034) {
x12035
} else {
x12035
}
x10888 = x12060
()
} else {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11862
()
}
x12070
}
x12072
}
x12074
} else {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
}
x12080
}
x12082
} else {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
}
x12088
}
x12090
} else {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
}
x12096
}
x12098
} else {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
}
x12104
}
x12106
} else {
val x11808 = "/"+x10948
val x11791 = x11420.res
val x11809 = x11791.schema
val x11810 = x11791.hostName
val x11811 = x11791.queryString
val x11812 = x11791.fragment
val x11813 = x11791.port
val x11814 = new Anon1863173035(x11809,x11810,x11808,x11811,x11812,x11813)
x10886 = x11814
x10887 = false
x10888 = x11793
()
}
x12112
}
x12114
}
x12116
}
x12118
} else {
x10886 = x161
x10887 = true
x10888 = x10884
()
}
x12124
}
val x12127 = x10886
val x12128 = x10887
val x12129 = x10888
val x12130 = new ParseResultAnon1863173035(x12127,x12128,x12129)
x12130
}
val x12458 = x12132(x10882)
val x12463 = x12458.empty
val x12533 = if (x12463) {
val x12457 = {x12133: (Int) => 
var x12135: Anon1863173035 = x161
var x12136: Boolean = true
var x12137: Int = x12133
val x12139 = x12133 >= x3954
val x12451 = if (x12139) {
x12135 = x161
x12136 = true
x12137 = x12133
()
} else {
val x12141 = x3943(x12133)
val x12142 = x12141 == '?'
val x12449 = if (x12142) {
var x12150: java.lang.String = ""
var x12151: Boolean = false
val x12143 = x12133 + 1
var x12152: Int = x12143
var x12154: Int = -1
var x12155: Boolean = true
var x12156: Int = x12143
val x12190 = while ({val x12157 = x12155
val x12158 = x12154
val x12159 = x12156
val x12160 = x12158 != x12159
val x12161 = x12157 && x12160
x12161}) {
val x12163 = x12156
x12154 = x12163
val x12165 = x12163 >= x3954
val x12188 = if (x12165) {
x12155 = false
()
} else {
val x12167 = x3943(x12163)
val x12168 = x12167 == '?'
val x12186 = if (x12168) {
val x12173 = x12150
val x12174 = x12151
val x12175 = x12152
val x12177 = x12173+x12167
x12150 = x12177
x12151 = false
val x12169 = x12163 + 1
x12152 = x12169
x12156 = x12169
()
} else {
x12155 = false
()
}
x12186
}
x12188
}
val x12191 = x12150
val x12192 = x12151
val x12193 = x12152
val x12443 = if (x12192) {
x12135 = x161
x12136 = true
x12137 = x12143
()
} else {
var x12209: java.lang.String = ""
var x12210: Boolean = false
var x12211: Int = x12193
var x12213: Int = -1
var x12214: Boolean = true
var x12215: Int = x12193
val x12253 = while ({val x12216 = x12214
val x12217 = x12213
val x12218 = x12215
val x12219 = x12217 != x12218
val x12220 = x12216 && x12219
x12220}) {
val x12222 = x12215
x12213 = x12222
val x12224 = x12222 >= x3954
val x12251 = if (x12224) {
x12214 = false
()
} else {
val x12226 = x3943(x12222)
val x12227 = x12226 > ' '
val x12228 = x12226 != '#'
val x12229 = x12227 && x12228
val x12230 = x12226 != ''
val x12231 = x12229 && x12230
val x12249 = if (x12231) {
val x12236 = x12209
val x12237 = x12210
val x12238 = x12211
val x12240 = x12236+x12226
x12209 = x12240
x12210 = false
val x12232 = x12222 + 1
x12211 = x12232
x12215 = x12232
()
} else {
x12214 = false
()
}
x12249
}
x12251
}
val x12254 = x12209
val x12255 = x12210
val x12256 = x12211
val x12441 = if (x12255) {
x12135 = x161
x12136 = true
x12137 = x12143
()
} else {
val x12258 = x12256 >= x3954
val x12439 = if (x12258) {
val x12272 = new Anon1863173035("","","",x12254,"",80)
x12135 = x12272
x12136 = false
x12137 = x12256
()
} else {
val x12260 = x3943(x12256)
val x12261 = x12260 == '#'
val x12437 = if (x12261) {
var x12279: java.lang.String = ""
var x12280: Boolean = false
val x12262 = x12256 + 1
var x12281: Int = x12262
var x12283: Int = -1
var x12284: Boolean = true
var x12285: Int = x12262
val x12319 = while ({val x12286 = x12284
val x12287 = x12283
val x12288 = x12285
val x12289 = x12287 != x12288
val x12290 = x12286 && x12289
x12290}) {
val x12292 = x12285
x12283 = x12292
val x12294 = x12292 >= x3954
val x12317 = if (x12294) {
x12284 = false
()
} else {
val x12296 = x3943(x12292)
val x12297 = x12296 == '#'
val x12315 = if (x12297) {
val x12302 = x12279
val x12303 = x12280
val x12304 = x12281
val x12306 = x12302+x12296
x12279 = x12306
x12280 = false
val x12298 = x12292 + 1
x12281 = x12298
x12285 = x12298
()
} else {
x12284 = false
()
}
x12315
}
x12317
}
val x12320 = x12279
val x12321 = x12280
val x12322 = x12281
val x12431 = if (x12321) {
val x12272 = new Anon1863173035("","","",x12254,"",80)
x12135 = x12272
x12136 = false
x12137 = x12262
()
} else {
var x12334: java.lang.String = ""
var x12335: Boolean = false
var x12336: Int = x12322
var x12338: Int = -1
var x12339: Boolean = true
var x12340: Int = x12322
val x12376 = while ({val x12341 = x12339
val x12342 = x12338
val x12343 = x12340
val x12344 = x12342 != x12343
val x12345 = x12341 && x12344
x12345}) {
val x12347 = x12340
x12338 = x12347
val x12349 = x12347 >= x3954
val x12374 = if (x12349) {
x12339 = false
()
} else {
val x12351 = x3943(x12347)
val x12352 = x12351 > ' '
val x12353 = x12351 != ''
val x12354 = x12352 && x12353
val x12372 = if (x12354) {
val x12359 = x12334
val x12360 = x12335
val x12361 = x12336
val x12363 = x12359+x12351
x12334 = x12363
x12335 = false
val x12355 = x12347 + 1
x12336 = x12355
x12340 = x12355
()
} else {
x12339 = false
()
}
x12372
}
x12374
}
val x12377 = x12334
val x12378 = x12335
val x12379 = x12336
val x12385 = if (x12378) {
true
} else {
false
}
val x12394 = if (x12385) {
false
} else {
false
}
val x12400 = if (x12394) {
true
} else {
false
}
val x12423 = if (x12400) {
x161
} else {
val x12399 = if (x12394) {
x935
} else {
val x12391 = if (x12385) {
x161
} else {
val x12384 = if (x12378) {
x161
} else {
val x12382 = new Anon1863173035("","","","",x12377,80)
x12382
}
x12384
}
val x12392 = if (x12385) {
false
} else {
true
}
val x12393 = new OptionAnon1863173035(x12391,x12392)
val x12397 = new Tuple2StringOptionAnon1863173035(x12254,x12393)
x12397
}
val x12405 = x12399._2
val x12406 = x12405.defined
val x12415 = if (x12406) {
val x12407 = x12405.value
val x12408 = x12407.schema
x12408
} else {
""
}
val x12416 = if (x12406) {
val x12407 = x12405.value
val x12409 = x12407.hostName
x12409
} else {
""
}
val x12417 = if (x12406) {
val x12407 = x12405.value
val x12410 = x12407.path
x12410
} else {
""
}
val x12404 = x12399._1
val x12418 = if (x12406) {
x12404
} else {
x12404
}
val x12419 = if (x12406) {
val x12407 = x12405.value
val x12411 = x12407.fragment
x12411
} else {
""
}
val x12420 = if (x12406) {
val x12407 = x12405.value
val x12412 = x12407.port
x12412
} else {
80
}
val x12421 = new Anon1863173035(x12415,x12416,x12417,x12418,x12419,x12420)
x12421
}
x12135 = x12423
val x12424 = if (x12400) {
true
} else {
false
}
x12136 = x12424
val x12401 = if (x12394) {
x12143
} else {
val x12386 = if (x12378) {
x12379
} else {
x12379
}
val x12395 = if (x12385) {
x12386
} else {
x12386
}
x12395
}
val x12425 = if (x12400) {
x12401
} else {
x12401
}
x12137 = x12425
()
}
x12431
} else {
val x12272 = new Anon1863173035("","","",x12254,"",80)
x12135 = x12272
x12136 = false
x12137 = x12256
()
}
x12437
}
x12439
}
x12441
}
x12443
} else {
x12135 = x161
x12136 = true
x12137 = x12133
()
}
x12449
}
val x12452 = x12135
val x12453 = x12136
val x12454 = x12137
val x12455 = new ParseResultAnon1863173035(x12452,x12453,x12454)
x12455
}
val x12464 = x12457(x10882)
val x12465 = x12464.empty
val x12471 = if (x12465) {
true
} else {
false
}
val x12497 = if (x12471) {
x161
} else {
val x12470 = if (x12465) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x10880 = if (x10875) {
x935
} else {
val x5790 = x4180.res
val x10872 = if (x10866) {
x161
} else {
val x10865 = if (x10850) {
x161
} else {
val x10849 = if (x10844) {
val x192 = null.asInstanceOf[Tuple2StringOptionInt]
x192
} else {
val x7498 = if (x7490) {
x1
} else {
val x7489 = if (x7484) {
x189
} else {
val x7487 = new Tuple2CharString(x4185,x7483)
x7487
}
val x7494 = x7489._1
val x7495 = x7489._2
val x7496 = x7494+x7495
x7496
}
val x10841 = if (x10835) {
val x285 = null.asInstanceOf[Int]
x285
} else {
x10834
}
val x10842 = if (x10835) {
false
} else {
true
}
val x10843 = new OptionInt(x10841,x10842)
val x10847 = new Tuple2StringOptionInt(x7498,x10843)
x10847
}
val x10855 = x10849._2
val x10856 = x10855.defined
val x10860 = if (x10856) {
""
} else {
""
}
val x10854 = x10849._1
val x10861 = if (x10856) {
x10854
} else {
x10854
}
val x10862 = if (x10856) {
val x10857 = x10855.value
x10857
} else {
80
}
val x10863 = new Anon1863173035(x10860,x10861,x10860,x10860,x10860,x10862)
x10863
}
x10865
}
val x10873 = if (x10866) {
false
} else {
true
}
val x10874 = new OptionAnon1863173035(x10872,x10873)
val x10878 = new Tuple2StringOptionAnon1863173035(x5790,x10874)
x10878
}
val x12466 = x12464.res
val x12467 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x10880,x12466)
x12467
}
val x12475 = x12470._1
val x12477 = x12475._1
val x12478 = x12475._2
val x12479 = x12478.defined
val x12489 = if (x12479) {
x12477
} else {
x12477
}
val x12476 = x12470._2
val x12490 = if (x12479) {
val x12480 = x12478.value
val x12481 = x12480.hostName
x12481
} else {
val x12487 = x12476.hostName
x12487
}
val x12482 = x12476.path
val x12491 = if (x12479) {
x12482
} else {
x12482
}
val x12483 = x12476.queryString
val x12492 = if (x12479) {
x12483
} else {
x12483
}
val x12484 = x12476.fragment
val x12493 = if (x12479) {
x12484
} else {
x12484
}
val x12485 = x12476.port
val x12494 = if (x12479) {
x12485
} else {
x12485
}
val x12495 = new Anon1863173035(x12489,x12490,x12491,x12492,x12493,x12494)
x12495
}
x3944 = x12497
val x12498 = if (x12471) {
true
} else {
false
}
x3945 = x12498
val x12472 = if (x12465) {
0
} else {
val x12468 = x12464.next
x12468
}
val x12499 = if (x12471) {
x12472
} else {
x12472
}
x3946 = x12499
()
} else {
val x10880 = if (x10875) {
x935
} else {
val x5790 = x4180.res
val x10872 = if (x10866) {
x161
} else {
val x10865 = if (x10850) {
x161
} else {
val x10849 = if (x10844) {
val x192 = null.asInstanceOf[Tuple2StringOptionInt]
x192
} else {
val x7498 = if (x7490) {
x1
} else {
val x7489 = if (x7484) {
x189
} else {
val x7487 = new Tuple2CharString(x4185,x7483)
x7487
}
val x7494 = x7489._1
val x7495 = x7489._2
val x7496 = x7494+x7495
x7496
}
val x10841 = if (x10835) {
val x285 = null.asInstanceOf[Int]
x285
} else {
x10834
}
val x10842 = if (x10835) {
false
} else {
true
}
val x10843 = new OptionInt(x10841,x10842)
val x10847 = new Tuple2StringOptionInt(x7498,x10843)
x10847
}
val x10855 = x10849._2
val x10856 = x10855.defined
val x10860 = if (x10856) {
""
} else {
""
}
val x10854 = x10849._1
val x10861 = if (x10856) {
x10854
} else {
x10854
}
val x10862 = if (x10856) {
val x10857 = x10855.value
x10857
} else {
80
}
val x10863 = new Anon1863173035(x10860,x10861,x10860,x10860,x10860,x10862)
x10863
}
x10865
}
val x10873 = if (x10866) {
false
} else {
true
}
val x10874 = new OptionAnon1863173035(x10872,x10873)
val x10878 = new Tuple2StringOptionAnon1863173035(x5790,x10874)
x10878
}
val x12509 = x10880._1
val x12510 = x10880._2
val x12511 = x12510.defined
val x12521 = if (x12511) {
x12509
} else {
x12509
}
val x12505 = x12458.res
val x12522 = if (x12511) {
val x12512 = x12510.value
val x12513 = x12512.hostName
x12513
} else {
val x12519 = x12505.hostName
x12519
}
val x12514 = x12505.path
val x12523 = if (x12511) {
x12514
} else {
x12514
}
val x12515 = x12505.queryString
val x12524 = if (x12511) {
x12515
} else {
x12515
}
val x12516 = x12505.fragment
val x12525 = if (x12511) {
x12516
} else {
x12516
}
val x12517 = x12505.port
val x12526 = if (x12511) {
x12517
} else {
x12517
}
val x12527 = new Anon1863173035(x12521,x12522,x12523,x12524,x12525,x12526)
x3944 = x12527
x3945 = false
val x12507 = x12458.next
x3946 = x12507
()
}
x12533
}
x12535
} else {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x12930 = {x12606: (Int) => 
var x12608: Anon1863173035 = x161
var x12609: Boolean = true
var x12610: Int = x12606
val x12612 = x12606 >= x3954
val x12924 = if (x12612) {
x12608 = x161
x12609 = true
x12610 = x12606
()
} else {
val x12614 = x3943(x12606)
val x12615 = x12614 == '?'
val x12922 = if (x12615) {
var x12623: java.lang.String = ""
var x12624: Boolean = false
val x12616 = x12606 + 1
var x12625: Int = x12616
var x12627: Int = -1
var x12628: Boolean = true
var x12629: Int = x12616
val x12663 = while ({val x12630 = x12628
val x12631 = x12627
val x12632 = x12629
val x12633 = x12631 != x12632
val x12634 = x12630 && x12633
x12634}) {
val x12636 = x12629
x12627 = x12636
val x12638 = x12636 >= x3954
val x12661 = if (x12638) {
x12628 = false
()
} else {
val x12640 = x3943(x12636)
val x12641 = x12640 == '?'
val x12659 = if (x12641) {
val x12646 = x12623
val x12647 = x12624
val x12648 = x12625
val x12650 = x12646+x12640
x12623 = x12650
x12624 = false
val x12642 = x12636 + 1
x12625 = x12642
x12629 = x12642
()
} else {
x12628 = false
()
}
x12659
}
x12661
}
val x12664 = x12623
val x12665 = x12624
val x12666 = x12625
val x12916 = if (x12665) {
x12608 = x161
x12609 = true
x12610 = x12616
()
} else {
var x12682: java.lang.String = ""
var x12683: Boolean = false
var x12684: Int = x12666
var x12686: Int = -1
var x12687: Boolean = true
var x12688: Int = x12666
val x12726 = while ({val x12689 = x12687
val x12690 = x12686
val x12691 = x12688
val x12692 = x12690 != x12691
val x12693 = x12689 && x12692
x12693}) {
val x12695 = x12688
x12686 = x12695
val x12697 = x12695 >= x3954
val x12724 = if (x12697) {
x12687 = false
()
} else {
val x12699 = x3943(x12695)
val x12700 = x12699 > ' '
val x12701 = x12699 != '#'
val x12702 = x12700 && x12701
val x12703 = x12699 != ''
val x12704 = x12702 && x12703
val x12722 = if (x12704) {
val x12709 = x12682
val x12710 = x12683
val x12711 = x12684
val x12713 = x12709+x12699
x12682 = x12713
x12683 = false
val x12705 = x12695 + 1
x12684 = x12705
x12688 = x12705
()
} else {
x12687 = false
()
}
x12722
}
x12724
}
val x12727 = x12682
val x12728 = x12683
val x12729 = x12684
val x12914 = if (x12728) {
x12608 = x161
x12609 = true
x12610 = x12616
()
} else {
val x12731 = x12729 >= x3954
val x12912 = if (x12731) {
val x12745 = new Anon1863173035("","","",x12727,"",80)
x12608 = x12745
x12609 = false
x12610 = x12729
()
} else {
val x12733 = x3943(x12729)
val x12734 = x12733 == '#'
val x12910 = if (x12734) {
var x12752: java.lang.String = ""
var x12753: Boolean = false
val x12735 = x12729 + 1
var x12754: Int = x12735
var x12756: Int = -1
var x12757: Boolean = true
var x12758: Int = x12735
val x12792 = while ({val x12759 = x12757
val x12760 = x12756
val x12761 = x12758
val x12762 = x12760 != x12761
val x12763 = x12759 && x12762
x12763}) {
val x12765 = x12758
x12756 = x12765
val x12767 = x12765 >= x3954
val x12790 = if (x12767) {
x12757 = false
()
} else {
val x12769 = x3943(x12765)
val x12770 = x12769 == '#'
val x12788 = if (x12770) {
val x12775 = x12752
val x12776 = x12753
val x12777 = x12754
val x12779 = x12775+x12769
x12752 = x12779
x12753 = false
val x12771 = x12765 + 1
x12754 = x12771
x12758 = x12771
()
} else {
x12757 = false
()
}
x12788
}
x12790
}
val x12793 = x12752
val x12794 = x12753
val x12795 = x12754
val x12904 = if (x12794) {
val x12745 = new Anon1863173035("","","",x12727,"",80)
x12608 = x12745
x12609 = false
x12610 = x12735
()
} else {
var x12807: java.lang.String = ""
var x12808: Boolean = false
var x12809: Int = x12795
var x12811: Int = -1
var x12812: Boolean = true
var x12813: Int = x12795
val x12849 = while ({val x12814 = x12812
val x12815 = x12811
val x12816 = x12813
val x12817 = x12815 != x12816
val x12818 = x12814 && x12817
x12818}) {
val x12820 = x12813
x12811 = x12820
val x12822 = x12820 >= x3954
val x12847 = if (x12822) {
x12812 = false
()
} else {
val x12824 = x3943(x12820)
val x12825 = x12824 > ' '
val x12826 = x12824 != ''
val x12827 = x12825 && x12826
val x12845 = if (x12827) {
val x12832 = x12807
val x12833 = x12808
val x12834 = x12809
val x12836 = x12832+x12824
x12807 = x12836
x12808 = false
val x12828 = x12820 + 1
x12809 = x12828
x12813 = x12828
()
} else {
x12812 = false
()
}
x12845
}
x12847
}
val x12850 = x12807
val x12851 = x12808
val x12852 = x12809
val x12858 = if (x12851) {
true
} else {
false
}
val x12867 = if (x12858) {
false
} else {
false
}
val x12873 = if (x12867) {
true
} else {
false
}
val x12896 = if (x12873) {
x161
} else {
val x12872 = if (x12867) {
x935
} else {
val x12864 = if (x12858) {
x161
} else {
val x12857 = if (x12851) {
x161
} else {
val x12855 = new Anon1863173035("","","","",x12850,80)
x12855
}
x12857
}
val x12865 = if (x12858) {
false
} else {
true
}
val x12866 = new OptionAnon1863173035(x12864,x12865)
val x12870 = new Tuple2StringOptionAnon1863173035(x12727,x12866)
x12870
}
val x12878 = x12872._2
val x12879 = x12878.defined
val x12888 = if (x12879) {
val x12880 = x12878.value
val x12881 = x12880.schema
x12881
} else {
""
}
val x12889 = if (x12879) {
val x12880 = x12878.value
val x12882 = x12880.hostName
x12882
} else {
""
}
val x12890 = if (x12879) {
val x12880 = x12878.value
val x12883 = x12880.path
x12883
} else {
""
}
val x12877 = x12872._1
val x12891 = if (x12879) {
x12877
} else {
x12877
}
val x12892 = if (x12879) {
val x12880 = x12878.value
val x12884 = x12880.fragment
x12884
} else {
""
}
val x12893 = if (x12879) {
val x12880 = x12878.value
val x12885 = x12880.port
x12885
} else {
80
}
val x12894 = new Anon1863173035(x12888,x12889,x12890,x12891,x12892,x12893)
x12894
}
x12608 = x12896
val x12897 = if (x12873) {
true
} else {
false
}
x12609 = x12897
val x12874 = if (x12867) {
x12616
} else {
val x12859 = if (x12851) {
x12852
} else {
x12852
}
val x12868 = if (x12858) {
x12859
} else {
x12859
}
x12868
}
val x12898 = if (x12873) {
x12874
} else {
x12874
}
x12610 = x12898
()
}
x12904
} else {
val x12745 = new Anon1863173035("","","",x12727,"",80)
x12608 = x12745
x12609 = false
x12610 = x12729
()
}
x12910
}
x12912
}
x12914
}
x12916
} else {
x12608 = x161
x12609 = true
x12610 = x12606
()
}
x12922
}
val x12925 = x12608
val x12926 = x12609
val x12927 = x12610
val x12928 = new ParseResultAnon1863173035(x12925,x12926,x12927)
x12928
}
val x13072 = {x12931: (Int) => 
var x12933: Anon1863173035 = x161
var x12934: Boolean = true
var x12935: Int = x12931
val x12937 = x12931 >= x3954
val x13066 = if (x12937) {
x12933 = x161
x12934 = true
x12935 = x12931
()
} else {
val x12939 = x3943(x12931)
val x12940 = x12939 == '#'
val x13064 = if (x12940) {
var x12948: java.lang.String = ""
var x12949: Boolean = false
val x12941 = x12931 + 1
var x12950: Int = x12941
var x12952: Int = -1
var x12953: Boolean = true
var x12954: Int = x12941
val x12988 = while ({val x12955 = x12953
val x12956 = x12952
val x12957 = x12954
val x12958 = x12956 != x12957
val x12959 = x12955 && x12958
x12959}) {
val x12961 = x12954
x12952 = x12961
val x12963 = x12961 >= x3954
val x12986 = if (x12963) {
x12953 = false
()
} else {
val x12965 = x3943(x12961)
val x12966 = x12965 == '#'
val x12984 = if (x12966) {
val x12971 = x12948
val x12972 = x12949
val x12973 = x12950
val x12975 = x12971+x12965
x12948 = x12975
x12949 = false
val x12967 = x12961 + 1
x12950 = x12967
x12954 = x12967
()
} else {
x12953 = false
()
}
x12984
}
x12986
}
val x12989 = x12948
val x12990 = x12949
val x12991 = x12950
val x13058 = if (x12990) {
x12933 = x161
x12934 = true
x12935 = x12941
()
} else {
var x13000: java.lang.String = ""
var x13001: Boolean = false
var x13002: Int = x12991
var x13004: Int = -1
var x13005: Boolean = true
var x13006: Int = x12991
val x13042 = while ({val x13007 = x13005
val x13008 = x13004
val x13009 = x13006
val x13010 = x13008 != x13009
val x13011 = x13007 && x13010
x13011}) {
val x13013 = x13006
x13004 = x13013
val x13015 = x13013 >= x3954
val x13040 = if (x13015) {
x13005 = false
()
} else {
val x13017 = x3943(x13013)
val x13018 = x13017 > ' '
val x13019 = x13017 != ''
val x13020 = x13018 && x13019
val x13038 = if (x13020) {
val x13025 = x13000
val x13026 = x13001
val x13027 = x13002
val x13029 = x13025+x13017
x13000 = x13029
x13001 = false
val x13021 = x13013 + 1
x13002 = x13021
x13006 = x13021
()
} else {
x13005 = false
()
}
x13038
}
x13040
}
val x13043 = x13000
val x13044 = x13001
val x13045 = x13002
val x13050 = if (x13044) {
x161
} else {
val x13048 = new Anon1863173035("","","","",x13043,80)
x13048
}
x12933 = x13050
val x13051 = if (x13044) {
true
} else {
false
}
x12934 = x13051
val x13052 = if (x13044) {
x13045
} else {
x13045
}
x12935 = x13052
()
}
x13058
} else {
x12933 = x161
x12934 = true
x12935 = x12931
()
}
x13064
}
val x13067 = x12933
val x13068 = x12934
val x13069 = x12935
val x13070 = new ParseResultAnon1863173035(x13067,x13068,x13069)
x13070
}
val x13785 = {x12537: (Int) => 
var x12539: Anon1863173035 = x161
var x12540: Boolean = true
var x12541: Int = x12537
val x12543 = x12537 >= x3954
val x13779 = if (x12543) {
x12539 = x161
x12540 = true
x12541 = x12537
()
} else {
val x12545 = x3943(x12537)
val x12546 = x12545 == '/'
val x13777 = if (x12546) {
var x12554: java.lang.String = ""
var x12555: Boolean = false
val x12547 = x12537 + 1
var x12556: Int = x12547
var x12558: Int = -1
var x12559: Boolean = true
var x12560: Int = x12547
val x12600 = while ({val x12561 = x12559
val x12562 = x12558
val x12563 = x12560
val x12564 = x12562 != x12563
val x12565 = x12561 && x12564
x12565}) {
val x12567 = x12560
x12558 = x12567
val x12569 = x12567 >= x3954
val x12598 = if (x12569) {
x12559 = false
()
} else {
val x12571 = x3943(x12567)
val x12572 = x12571 > ' '
val x12573 = x12571 != '#'
val x12574 = x12572 && x12573
val x12575 = x12571 != '?'
val x12576 = x12574 && x12575
val x12577 = x12571 != ''
val x12578 = x12576 && x12577
val x12596 = if (x12578) {
val x12583 = x12554
val x12584 = x12555
val x12585 = x12556
val x12587 = x12583+x12571
x12554 = x12587
x12555 = false
val x12579 = x12567 + 1
x12556 = x12579
x12560 = x12579
()
} else {
x12559 = false
()
}
x12596
}
x12598
}
val x12601 = x12554
val x12602 = x12555
val x12603 = x12556
val x13771 = if (x12602) {
x12539 = x161
x12540 = true
x12541 = x12547
()
} else {
val x13073 = x12930(x12603)
val x13085 = x13073.empty
val x13769 = if (x13085) {
val x13086 = x13072(x12603)
val x13087 = x13086.empty
val x13096 = if (x13087) {
false
} else {
false
}
val x13102 = if (x13096) {
true
} else {
false
}
val x13442 = if (x13102) {
x12539 = x161
x12540 = true
val x13103 = if (x13096) {
x12547
} else {
val x13088 = x13086.next
val x13097 = if (x13087) {
x13088
} else {
x13088
}
x13097
}
x12541 = x13103
()
} else {
val x13103 = if (x13096) {
x12547
} else {
val x13088 = x13086.next
val x13097 = if (x13087) {
x13088
} else {
x13088
}
x13097
}
val x13105 = x13103 >= x3954
val x13440 = if (x13105) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
} else {
val x13107 = x3943(x13103)
val x13108 = x13107 == 'H'
val x13438 = if (x13108) {
val x13109 = x13103 + 1
val x13146 = x13109 >= x3954
val x13432 = if (x13146) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
} else {
val x13148 = x3943(x13109)
val x13149 = x13148 == 'T'
val x13430 = if (x13149) {
val x13150 = x13109 + 1
val x13158 = x13150 >= x3954
val x13424 = if (x13158) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
} else {
val x13160 = x3943(x13150)
val x13161 = x13160 == 'T'
val x13422 = if (x13161) {
val x13162 = x13150 + 1
val x13171 = x13162 >= x3954
val x13416 = if (x13171) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
} else {
val x13173 = x3943(x13162)
val x13174 = x13173 == 'P'
val x13414 = if (x13174) {
val x13175 = x13162 + 1
val x13184 = x13175 >= x3954
val x13408 = if (x13184) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
} else {
val x13186 = x3943(x13175)
val x13187 = x13186 == '/'
val x13406 = if (x13187) {
var x13219: Int = 0
var x13220: Boolean = false
val x13188 = x13175 + 1
var x13221: Int = x13188
var x13223: Int = -1
var x13224: Boolean = true
var x13225: Int = x13188
val x13266 = while ({val x13226 = x13224
val x13227 = x13223
val x13228 = x13225
val x13229 = x13227 != x13228
val x13230 = x13226 && x13229
x13230}) {
val x13232 = x13225
x13223 = x13232
val x13234 = x13232 >= x3954
val x13264 = if (x13234) {
x13224 = false
()
} else {
val x13236 = x3943(x13232)
val x13237 = x13236 >= '0'
val x13238 = x13236 <= '9'
val x13239 = x13237 && x13238
val x13262 = if (x13239) {
val x13248 = x13219
val x13249 = x13220
val x13250 = x13221
val x13245 = x13236 - '0'
val x13246 = x13245.toInt
val x13252 = x13248 * 10
val x13253 = x13252 + x13246
x13219 = x13253
x13220 = false
val x13240 = x13232 + 1
x13221 = x13240
x13225 = x13240
()
} else {
x13224 = false
()
}
x13262
}
x13264
}
val x13267 = x13219
val x13268 = x13220
val x13269 = x13221
val x13400 = if (x13268) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13188
()
} else {
val x13272 = x13269 >= x3954
val x13398 = if (x13272) {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13188
()
} else {
val x13274 = x3943(x13269)
val x13275 = x13274 == '.'
val x13396 = if (x13275) {
var x13291: Int = 0
var x13292: Boolean = false
val x13276 = x13269 + 1
var x13293: Int = x13276
var x13295: Int = -1
var x13296: Boolean = true
var x13297: Int = x13276
val x13338 = while ({val x13298 = x13296
val x13299 = x13295
val x13300 = x13297
val x13301 = x13299 != x13300
val x13302 = x13298 && x13301
x13302}) {
val x13304 = x13297
x13295 = x13304
val x13306 = x13304 >= x3954
val x13336 = if (x13306) {
x13296 = false
()
} else {
val x13308 = x3943(x13304)
val x13309 = x13308 >= '0'
val x13310 = x13308 <= '9'
val x13311 = x13309 && x13310
val x13334 = if (x13311) {
val x13320 = x13291
val x13321 = x13292
val x13322 = x13293
val x13317 = x13308 - '0'
val x13318 = x13317.toInt
val x13324 = x13320 * 10
val x13325 = x13324 + x13318
x13291 = x13325
x13292 = false
val x13312 = x13304 + 1
x13293 = x13312
x13297 = x13312
()
} else {
x13296 = false
()
}
x13334
}
x13336
}
val x13339 = x13291
val x13340 = x13292
val x13341 = x13293
val x13346 = if (x13340) {
true
} else {
false
}
val x13355 = if (x13346) {
false
} else {
false
}
val x13360 = if (x13355) {
true
} else {
false
}
val x13384 = if (x13360) {
x161
} else {
val x13359 = if (x13355) {
x935
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
x13101
}
val x13365 = x13359._2
val x13366 = x13365.defined
val x13376 = if (x13366) {
val x13367 = x13365.value
val x13369 = x13367.schema
x13369
} else {
""
}
val x13377 = if (x13366) {
val x13367 = x13365.value
val x13370 = x13367.hostName
x13370
} else {
""
}
val x13364 = x13359._1
val x13368 = "/"+x13364
val x13378 = if (x13366) {
x13368
} else {
x13368
}
val x13379 = if (x13366) {
val x13367 = x13365.value
val x13371 = x13367.queryString
x13371
} else {
""
}
val x13380 = if (x13366) {
val x13367 = x13365.value
val x13372 = x13367.fragment
x13372
} else {
""
}
val x13381 = if (x13366) {
val x13367 = x13365.value
val x13373 = x13367.port
x13373
} else {
80
}
val x13382 = new Anon1863173035(x13376,x13377,x13378,x13379,x13380,x13381)
x13382
}
x12539 = x13384
val x13385 = if (x13360) {
true
} else {
false
}
x12540 = x13385
val x13361 = if (x13355) {
x12547
} else {
val x13347 = if (x13340) {
x13188
} else {
x13341
}
val x13356 = if (x13346) {
x13347
} else {
x13347
}
x13356
}
val x13386 = if (x13360) {
x13361
} else {
x13361
}
x12541 = x13386
()
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13188
()
}
x13396
}
x13398
}
x13400
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
}
x13406
}
x13408
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
}
x13414
}
x13416
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
}
x13422
}
x13424
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
}
x13430
}
x13432
} else {
val x13101 = if (x13096) {
x935
} else {
val x13093 = if (x13087) {
x161
} else {
val x13090 = x13086.res
x13090
}
val x13094 = if (x13087) {
false
} else {
true
}
val x13095 = new OptionAnon1863173035(x13093,x13094)
val x13099 = new Tuple2StringOptionAnon1863173035(x12601,x13095)
x13099
}
val x13123 = x13101._2
val x13124 = x13123.defined
val x13134 = if (x13124) {
val x13125 = x13123.value
val x13127 = x13125.schema
x13127
} else {
""
}
val x13135 = if (x13124) {
val x13125 = x13123.value
val x13128 = x13125.hostName
x13128
} else {
""
}
val x13122 = x13101._1
val x13126 = "/"+x13122
val x13136 = if (x13124) {
x13126
} else {
x13126
}
val x13137 = if (x13124) {
val x13125 = x13123.value
val x13129 = x13125.queryString
x13129
} else {
""
}
val x13138 = if (x13124) {
val x13125 = x13123.value
val x13130 = x13125.fragment
x13130
} else {
""
}
val x13139 = if (x13124) {
val x13125 = x13123.value
val x13131 = x13125.port
x13131
} else {
80
}
val x13140 = new Anon1863173035(x13134,x13135,x13136,x13137,x13138,x13139)
x12539 = x13140
x12540 = false
x12541 = x13103
()
}
x13438
}
x13440
}
x13442
} else {
val x13446 = x13073.next
val x13450 = x13446 >= x3954
val x13767 = if (x13450) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
} else {
val x13452 = x3943(x13446)
val x13453 = x13452 == 'H'
val x13765 = if (x13453) {
val x13454 = x13446 + 1
val x13473 = x13454 >= x3954
val x13759 = if (x13473) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
} else {
val x13475 = x3943(x13454)
val x13476 = x13475 == 'T'
val x13757 = if (x13476) {
val x13477 = x13454 + 1
val x13485 = x13477 >= x3954
val x13751 = if (x13485) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
} else {
val x13487 = x3943(x13477)
val x13488 = x13487 == 'T'
val x13749 = if (x13488) {
val x13489 = x13477 + 1
val x13498 = x13489 >= x3954
val x13743 = if (x13498) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
} else {
val x13500 = x3943(x13489)
val x13501 = x13500 == 'P'
val x13741 = if (x13501) {
val x13502 = x13489 + 1
val x13511 = x13502 >= x3954
val x13735 = if (x13511) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
} else {
val x13513 = x3943(x13502)
val x13514 = x13513 == '/'
val x13733 = if (x13514) {
var x13546: Int = 0
var x13547: Boolean = false
val x13515 = x13502 + 1
var x13548: Int = x13515
var x13550: Int = -1
var x13551: Boolean = true
var x13552: Int = x13515
val x13593 = while ({val x13553 = x13551
val x13554 = x13550
val x13555 = x13552
val x13556 = x13554 != x13555
val x13557 = x13553 && x13556
x13557}) {
val x13559 = x13552
x13550 = x13559
val x13561 = x13559 >= x3954
val x13591 = if (x13561) {
x13551 = false
()
} else {
val x13563 = x3943(x13559)
val x13564 = x13563 >= '0'
val x13565 = x13563 <= '9'
val x13566 = x13564 && x13565
val x13589 = if (x13566) {
val x13575 = x13546
val x13576 = x13547
val x13577 = x13548
val x13572 = x13563 - '0'
val x13573 = x13572.toInt
val x13579 = x13575 * 10
val x13580 = x13579 + x13573
x13546 = x13580
x13547 = false
val x13567 = x13559 + 1
x13548 = x13567
x13552 = x13567
()
} else {
x13551 = false
()
}
x13589
}
x13591
}
val x13594 = x13546
val x13595 = x13547
val x13596 = x13548
val x13727 = if (x13595) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13515
()
} else {
val x13599 = x13596 >= x3954
val x13725 = if (x13599) {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13515
()
} else {
val x13601 = x3943(x13596)
val x13602 = x13601 == '.'
val x13723 = if (x13602) {
var x13618: Int = 0
var x13619: Boolean = false
val x13603 = x13596 + 1
var x13620: Int = x13603
var x13622: Int = -1
var x13623: Boolean = true
var x13624: Int = x13603
val x13665 = while ({val x13625 = x13623
val x13626 = x13622
val x13627 = x13624
val x13628 = x13626 != x13627
val x13629 = x13625 && x13628
x13629}) {
val x13631 = x13624
x13622 = x13631
val x13633 = x13631 >= x3954
val x13663 = if (x13633) {
x13623 = false
()
} else {
val x13635 = x3943(x13631)
val x13636 = x13635 >= '0'
val x13637 = x13635 <= '9'
val x13638 = x13636 && x13637
val x13661 = if (x13638) {
val x13647 = x13618
val x13648 = x13619
val x13649 = x13620
val x13644 = x13635 - '0'
val x13645 = x13644.toInt
val x13651 = x13647 * 10
val x13652 = x13651 + x13645
x13618 = x13652
x13619 = false
val x13639 = x13631 + 1
x13620 = x13639
x13624 = x13639
()
} else {
x13623 = false
()
}
x13661
}
x13663
}
val x13666 = x13618
val x13667 = x13619
val x13668 = x13620
val x13673 = if (x13667) {
true
} else {
false
}
val x13682 = if (x13673) {
false
} else {
false
}
val x13687 = if (x13682) {
true
} else {
false
}
val x13711 = if (x13687) {
x161
} else {
val x13686 = if (x13682) {
x935
} else {
val x13444 = x13073.res
val x13445 = new OptionAnon1863173035(x13444,true)
val x13448 = new Tuple2StringOptionAnon1863173035(x12601,x13445)
x13448
}
val x13692 = x13686._2
val x13693 = x13692.defined
val x13703 = if (x13693) {
val x13694 = x13692.value
val x13696 = x13694.schema
x13696
} else {
""
}
val x13704 = if (x13693) {
val x13694 = x13692.value
val x13697 = x13694.hostName
x13697
} else {
""
}
val x13691 = x13686._1
val x13695 = "/"+x13691
val x13705 = if (x13693) {
x13695
} else {
x13695
}
val x13706 = if (x13693) {
val x13694 = x13692.value
val x13698 = x13694.queryString
x13698
} else {
""
}
val x13707 = if (x13693) {
val x13694 = x13692.value
val x13699 = x13694.fragment
x13699
} else {
""
}
val x13708 = if (x13693) {
val x13694 = x13692.value
val x13700 = x13694.port
x13700
} else {
80
}
val x13709 = new Anon1863173035(x13703,x13704,x13705,x13706,x13707,x13708)
x13709
}
x12539 = x13711
val x13712 = if (x13687) {
true
} else {
false
}
x12540 = x13712
val x13688 = if (x13682) {
x12547
} else {
val x13674 = if (x13667) {
x13515
} else {
x13668
}
val x13683 = if (x13673) {
x13674
} else {
x13674
}
x13683
}
val x13713 = if (x13687) {
x13688
} else {
x13688
}
x12541 = x13713
()
} else {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13515
()
}
x13723
}
x13725
}
x13727
} else {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
}
x13733
}
x13735
} else {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
}
x13741
}
x13743
} else {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
}
x13749
}
x13751
} else {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
}
x13757
}
x13759
} else {
val x13461 = "/"+x12601
val x13444 = x13073.res
val x13462 = x13444.schema
val x13463 = x13444.hostName
val x13464 = x13444.queryString
val x13465 = x13444.fragment
val x13466 = x13444.port
val x13467 = new Anon1863173035(x13462,x13463,x13461,x13464,x13465,x13466)
x12539 = x13467
x12540 = false
x12541 = x13446
()
}
x13765
}
x13767
}
x13769
}
x13771
} else {
x12539 = x161
x12540 = true
x12541 = x12537
()
}
x13777
}
val x13780 = x12539
val x13781 = x12540
val x13782 = x12541
val x13783 = new ParseResultAnon1863173035(x13780,x13781,x13782)
x13783
}
val x14111 = x13785(x7500)
val x14112 = x14111.empty
val x14168 = if (x14112) {
val x14110 = {x13786: (Int) => 
var x13788: Anon1863173035 = x161
var x13789: Boolean = true
var x13790: Int = x13786
val x13792 = x13786 >= x3954
val x14104 = if (x13792) {
x13788 = x161
x13789 = true
x13790 = x13786
()
} else {
val x13794 = x3943(x13786)
val x13795 = x13794 == '?'
val x14102 = if (x13795) {
var x13803: java.lang.String = ""
var x13804: Boolean = false
val x13796 = x13786 + 1
var x13805: Int = x13796
var x13807: Int = -1
var x13808: Boolean = true
var x13809: Int = x13796
val x13843 = while ({val x13810 = x13808
val x13811 = x13807
val x13812 = x13809
val x13813 = x13811 != x13812
val x13814 = x13810 && x13813
x13814}) {
val x13816 = x13809
x13807 = x13816
val x13818 = x13816 >= x3954
val x13841 = if (x13818) {
x13808 = false
()
} else {
val x13820 = x3943(x13816)
val x13821 = x13820 == '?'
val x13839 = if (x13821) {
val x13826 = x13803
val x13827 = x13804
val x13828 = x13805
val x13830 = x13826+x13820
x13803 = x13830
x13804 = false
val x13822 = x13816 + 1
x13805 = x13822
x13809 = x13822
()
} else {
x13808 = false
()
}
x13839
}
x13841
}
val x13844 = x13803
val x13845 = x13804
val x13846 = x13805
val x14096 = if (x13845) {
x13788 = x161
x13789 = true
x13790 = x13796
()
} else {
var x13862: java.lang.String = ""
var x13863: Boolean = false
var x13864: Int = x13846
var x13866: Int = -1
var x13867: Boolean = true
var x13868: Int = x13846
val x13906 = while ({val x13869 = x13867
val x13870 = x13866
val x13871 = x13868
val x13872 = x13870 != x13871
val x13873 = x13869 && x13872
x13873}) {
val x13875 = x13868
x13866 = x13875
val x13877 = x13875 >= x3954
val x13904 = if (x13877) {
x13867 = false
()
} else {
val x13879 = x3943(x13875)
val x13880 = x13879 > ' '
val x13881 = x13879 != '#'
val x13882 = x13880 && x13881
val x13883 = x13879 != ''
val x13884 = x13882 && x13883
val x13902 = if (x13884) {
val x13889 = x13862
val x13890 = x13863
val x13891 = x13864
val x13893 = x13889+x13879
x13862 = x13893
x13863 = false
val x13885 = x13875 + 1
x13864 = x13885
x13868 = x13885
()
} else {
x13867 = false
()
}
x13902
}
x13904
}
val x13907 = x13862
val x13908 = x13863
val x13909 = x13864
val x14094 = if (x13908) {
x13788 = x161
x13789 = true
x13790 = x13796
()
} else {
val x13911 = x13909 >= x3954
val x14092 = if (x13911) {
val x13925 = new Anon1863173035("","","",x13907,"",80)
x13788 = x13925
x13789 = false
x13790 = x13909
()
} else {
val x13913 = x3943(x13909)
val x13914 = x13913 == '#'
val x14090 = if (x13914) {
var x13932: java.lang.String = ""
var x13933: Boolean = false
val x13915 = x13909 + 1
var x13934: Int = x13915
var x13936: Int = -1
var x13937: Boolean = true
var x13938: Int = x13915
val x13972 = while ({val x13939 = x13937
val x13940 = x13936
val x13941 = x13938
val x13942 = x13940 != x13941
val x13943 = x13939 && x13942
x13943}) {
val x13945 = x13938
x13936 = x13945
val x13947 = x13945 >= x3954
val x13970 = if (x13947) {
x13937 = false
()
} else {
val x13949 = x3943(x13945)
val x13950 = x13949 == '#'
val x13968 = if (x13950) {
val x13955 = x13932
val x13956 = x13933
val x13957 = x13934
val x13959 = x13955+x13949
x13932 = x13959
x13933 = false
val x13951 = x13945 + 1
x13934 = x13951
x13938 = x13951
()
} else {
x13937 = false
()
}
x13968
}
x13970
}
val x13973 = x13932
val x13974 = x13933
val x13975 = x13934
val x14084 = if (x13974) {
val x13925 = new Anon1863173035("","","",x13907,"",80)
x13788 = x13925
x13789 = false
x13790 = x13915
()
} else {
var x13987: java.lang.String = ""
var x13988: Boolean = false
var x13989: Int = x13975
var x13991: Int = -1
var x13992: Boolean = true
var x13993: Int = x13975
val x14029 = while ({val x13994 = x13992
val x13995 = x13991
val x13996 = x13993
val x13997 = x13995 != x13996
val x13998 = x13994 && x13997
x13998}) {
val x14000 = x13993
x13991 = x14000
val x14002 = x14000 >= x3954
val x14027 = if (x14002) {
x13992 = false
()
} else {
val x14004 = x3943(x14000)
val x14005 = x14004 > ' '
val x14006 = x14004 != ''
val x14007 = x14005 && x14006
val x14025 = if (x14007) {
val x14012 = x13987
val x14013 = x13988
val x14014 = x13989
val x14016 = x14012+x14004
x13987 = x14016
x13988 = false
val x14008 = x14000 + 1
x13989 = x14008
x13993 = x14008
()
} else {
x13992 = false
()
}
x14025
}
x14027
}
val x14030 = x13987
val x14031 = x13988
val x14032 = x13989
val x14038 = if (x14031) {
true
} else {
false
}
val x14047 = if (x14038) {
false
} else {
false
}
val x14053 = if (x14047) {
true
} else {
false
}
val x14076 = if (x14053) {
x161
} else {
val x14052 = if (x14047) {
x935
} else {
val x14044 = if (x14038) {
x161
} else {
val x14037 = if (x14031) {
x161
} else {
val x14035 = new Anon1863173035("","","","",x14030,80)
x14035
}
x14037
}
val x14045 = if (x14038) {
false
} else {
true
}
val x14046 = new OptionAnon1863173035(x14044,x14045)
val x14050 = new Tuple2StringOptionAnon1863173035(x13907,x14046)
x14050
}
val x14058 = x14052._2
val x14059 = x14058.defined
val x14068 = if (x14059) {
val x14060 = x14058.value
val x14061 = x14060.schema
x14061
} else {
""
}
val x14069 = if (x14059) {
val x14060 = x14058.value
val x14062 = x14060.hostName
x14062
} else {
""
}
val x14070 = if (x14059) {
val x14060 = x14058.value
val x14063 = x14060.path
x14063
} else {
""
}
val x14057 = x14052._1
val x14071 = if (x14059) {
x14057
} else {
x14057
}
val x14072 = if (x14059) {
val x14060 = x14058.value
val x14064 = x14060.fragment
x14064
} else {
""
}
val x14073 = if (x14059) {
val x14060 = x14058.value
val x14065 = x14060.port
x14065
} else {
80
}
val x14074 = new Anon1863173035(x14068,x14069,x14070,x14071,x14072,x14073)
x14074
}
x13788 = x14076
val x14077 = if (x14053) {
true
} else {
false
}
x13789 = x14077
val x14054 = if (x14047) {
x13796
} else {
val x14039 = if (x14031) {
x14032
} else {
x14032
}
val x14048 = if (x14038) {
x14039
} else {
x14039
}
x14048
}
val x14078 = if (x14053) {
x14054
} else {
x14054
}
x13790 = x14078
()
}
x14084
} else {
val x13925 = new Anon1863173035("","","",x13907,"",80)
x13788 = x13925
x13789 = false
x13790 = x13909
()
}
x14090
}
x14092
}
x14094
}
x14096
} else {
x13788 = x161
x13789 = true
x13790 = x13786
()
}
x14102
}
val x14105 = x13788
val x14106 = x13789
val x14107 = x13790
val x14108 = new ParseResultAnon1863173035(x14105,x14106,x14107)
x14108
}
val x14113 = x14110(x7500)
val x14114 = x14113.empty
val x14120 = if (x14114) {
true
} else {
false
}
val x14146 = if (x14120) {
x161
} else {
val x14119 = if (x14114) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x5790 = x4180.res
val x7498 = if (x7490) {
x1
} else {
val x7489 = if (x7484) {
x189
} else {
val x7487 = new Tuple2CharString(x4185,x7483)
x7487
}
val x7494 = x7489._1
val x7495 = x7489._2
val x7496 = x7494+x7495
x7496
}
val x9146 = new Anon1863173035("",x7498,"","","",80)
val x9148 = new OptionAnon1863173035(x9146,true)
val x9150 = new Tuple2StringOptionAnon1863173035(x5790,x9148)
val x14115 = x14113.res
val x14116 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x9150,x14115)
x14116
}
val x14124 = x14119._1
val x14126 = x14124._1
val x14127 = x14124._2
val x14128 = x14127.defined
val x14138 = if (x14128) {
x14126
} else {
x14126
}
val x14125 = x14119._2
val x14139 = if (x14128) {
val x14129 = x14127.value
val x14130 = x14129.hostName
x14130
} else {
val x14136 = x14125.hostName
x14136
}
val x14131 = x14125.path
val x14140 = if (x14128) {
x14131
} else {
x14131
}
val x14132 = x14125.queryString
val x14141 = if (x14128) {
x14132
} else {
x14132
}
val x14133 = x14125.fragment
val x14142 = if (x14128) {
x14133
} else {
x14133
}
val x14134 = x14125.port
val x14143 = if (x14128) {
x14134
} else {
x14134
}
val x14144 = new Anon1863173035(x14138,x14139,x14140,x14141,x14142,x14143)
x14144
}
x3944 = x14146
val x14147 = if (x14120) {
true
} else {
false
}
x3945 = x14147
val x14121 = if (x14114) {
0
} else {
val x14117 = x14113.next
x14117
}
val x14148 = if (x14120) {
x14121
} else {
x14121
}
x3946 = x14148
()
} else {
val x5790 = x4180.res
val x7498 = if (x7490) {
x1
} else {
val x7489 = if (x7484) {
x189
} else {
val x7487 = new Tuple2CharString(x4185,x7483)
x7487
}
val x7494 = x7489._1
val x7495 = x7489._2
val x7496 = x7494+x7495
x7496
}
val x14154 = x14111.res
val x14158 = x14154.path
val x14159 = x14154.queryString
val x14160 = x14154.fragment
val x14161 = x14154.port
val x14162 = new Anon1863173035(x5790,x7498,x14158,x14159,x14160,x14161)
x3944 = x14162
x3945 = false
val x14156 = x14111.next
x3946 = x14156
()
}
x14168
}
x14170
}
x14172
}
x14174
} else {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x14569 = {x14245: (Int) => 
var x14247: Anon1863173035 = x161
var x14248: Boolean = true
var x14249: Int = x14245
val x14251 = x14245 >= x3954
val x14563 = if (x14251) {
x14247 = x161
x14248 = true
x14249 = x14245
()
} else {
val x14253 = x3943(x14245)
val x14254 = x14253 == '?'
val x14561 = if (x14254) {
var x14262: java.lang.String = ""
var x14263: Boolean = false
val x14255 = x14245 + 1
var x14264: Int = x14255
var x14266: Int = -1
var x14267: Boolean = true
var x14268: Int = x14255
val x14302 = while ({val x14269 = x14267
val x14270 = x14266
val x14271 = x14268
val x14272 = x14270 != x14271
val x14273 = x14269 && x14272
x14273}) {
val x14275 = x14268
x14266 = x14275
val x14277 = x14275 >= x3954
val x14300 = if (x14277) {
x14267 = false
()
} else {
val x14279 = x3943(x14275)
val x14280 = x14279 == '?'
val x14298 = if (x14280) {
val x14285 = x14262
val x14286 = x14263
val x14287 = x14264
val x14289 = x14285+x14279
x14262 = x14289
x14263 = false
val x14281 = x14275 + 1
x14264 = x14281
x14268 = x14281
()
} else {
x14267 = false
()
}
x14298
}
x14300
}
val x14303 = x14262
val x14304 = x14263
val x14305 = x14264
val x14555 = if (x14304) {
x14247 = x161
x14248 = true
x14249 = x14255
()
} else {
var x14321: java.lang.String = ""
var x14322: Boolean = false
var x14323: Int = x14305
var x14325: Int = -1
var x14326: Boolean = true
var x14327: Int = x14305
val x14365 = while ({val x14328 = x14326
val x14329 = x14325
val x14330 = x14327
val x14331 = x14329 != x14330
val x14332 = x14328 && x14331
x14332}) {
val x14334 = x14327
x14325 = x14334
val x14336 = x14334 >= x3954
val x14363 = if (x14336) {
x14326 = false
()
} else {
val x14338 = x3943(x14334)
val x14339 = x14338 > ' '
val x14340 = x14338 != '#'
val x14341 = x14339 && x14340
val x14342 = x14338 != ''
val x14343 = x14341 && x14342
val x14361 = if (x14343) {
val x14348 = x14321
val x14349 = x14322
val x14350 = x14323
val x14352 = x14348+x14338
x14321 = x14352
x14322 = false
val x14344 = x14334 + 1
x14323 = x14344
x14327 = x14344
()
} else {
x14326 = false
()
}
x14361
}
x14363
}
val x14366 = x14321
val x14367 = x14322
val x14368 = x14323
val x14553 = if (x14367) {
x14247 = x161
x14248 = true
x14249 = x14255
()
} else {
val x14370 = x14368 >= x3954
val x14551 = if (x14370) {
val x14384 = new Anon1863173035("","","",x14366,"",80)
x14247 = x14384
x14248 = false
x14249 = x14368
()
} else {
val x14372 = x3943(x14368)
val x14373 = x14372 == '#'
val x14549 = if (x14373) {
var x14391: java.lang.String = ""
var x14392: Boolean = false
val x14374 = x14368 + 1
var x14393: Int = x14374
var x14395: Int = -1
var x14396: Boolean = true
var x14397: Int = x14374
val x14431 = while ({val x14398 = x14396
val x14399 = x14395
val x14400 = x14397
val x14401 = x14399 != x14400
val x14402 = x14398 && x14401
x14402}) {
val x14404 = x14397
x14395 = x14404
val x14406 = x14404 >= x3954
val x14429 = if (x14406) {
x14396 = false
()
} else {
val x14408 = x3943(x14404)
val x14409 = x14408 == '#'
val x14427 = if (x14409) {
val x14414 = x14391
val x14415 = x14392
val x14416 = x14393
val x14418 = x14414+x14408
x14391 = x14418
x14392 = false
val x14410 = x14404 + 1
x14393 = x14410
x14397 = x14410
()
} else {
x14396 = false
()
}
x14427
}
x14429
}
val x14432 = x14391
val x14433 = x14392
val x14434 = x14393
val x14543 = if (x14433) {
val x14384 = new Anon1863173035("","","",x14366,"",80)
x14247 = x14384
x14248 = false
x14249 = x14374
()
} else {
var x14446: java.lang.String = ""
var x14447: Boolean = false
var x14448: Int = x14434
var x14450: Int = -1
var x14451: Boolean = true
var x14452: Int = x14434
val x14488 = while ({val x14453 = x14451
val x14454 = x14450
val x14455 = x14452
val x14456 = x14454 != x14455
val x14457 = x14453 && x14456
x14457}) {
val x14459 = x14452
x14450 = x14459
val x14461 = x14459 >= x3954
val x14486 = if (x14461) {
x14451 = false
()
} else {
val x14463 = x3943(x14459)
val x14464 = x14463 > ' '
val x14465 = x14463 != ''
val x14466 = x14464 && x14465
val x14484 = if (x14466) {
val x14471 = x14446
val x14472 = x14447
val x14473 = x14448
val x14475 = x14471+x14463
x14446 = x14475
x14447 = false
val x14467 = x14459 + 1
x14448 = x14467
x14452 = x14467
()
} else {
x14451 = false
()
}
x14484
}
x14486
}
val x14489 = x14446
val x14490 = x14447
val x14491 = x14448
val x14497 = if (x14490) {
true
} else {
false
}
val x14506 = if (x14497) {
false
} else {
false
}
val x14512 = if (x14506) {
true
} else {
false
}
val x14535 = if (x14512) {
x161
} else {
val x14511 = if (x14506) {
x935
} else {
val x14503 = if (x14497) {
x161
} else {
val x14496 = if (x14490) {
x161
} else {
val x14494 = new Anon1863173035("","","","",x14489,80)
x14494
}
x14496
}
val x14504 = if (x14497) {
false
} else {
true
}
val x14505 = new OptionAnon1863173035(x14503,x14504)
val x14509 = new Tuple2StringOptionAnon1863173035(x14366,x14505)
x14509
}
val x14517 = x14511._2
val x14518 = x14517.defined
val x14527 = if (x14518) {
val x14519 = x14517.value
val x14520 = x14519.schema
x14520
} else {
""
}
val x14528 = if (x14518) {
val x14519 = x14517.value
val x14521 = x14519.hostName
x14521
} else {
""
}
val x14529 = if (x14518) {
val x14519 = x14517.value
val x14522 = x14519.path
x14522
} else {
""
}
val x14516 = x14511._1
val x14530 = if (x14518) {
x14516
} else {
x14516
}
val x14531 = if (x14518) {
val x14519 = x14517.value
val x14523 = x14519.fragment
x14523
} else {
""
}
val x14532 = if (x14518) {
val x14519 = x14517.value
val x14524 = x14519.port
x14524
} else {
80
}
val x14533 = new Anon1863173035(x14527,x14528,x14529,x14530,x14531,x14532)
x14533
}
x14247 = x14535
val x14536 = if (x14512) {
true
} else {
false
}
x14248 = x14536
val x14513 = if (x14506) {
x14255
} else {
val x14498 = if (x14490) {
x14491
} else {
x14491
}
val x14507 = if (x14497) {
x14498
} else {
x14498
}
x14507
}
val x14537 = if (x14512) {
x14513
} else {
x14513
}
x14249 = x14537
()
}
x14543
} else {
val x14384 = new Anon1863173035("","","",x14366,"",80)
x14247 = x14384
x14248 = false
x14249 = x14368
()
}
x14549
}
x14551
}
x14553
}
x14555
} else {
x14247 = x161
x14248 = true
x14249 = x14245
()
}
x14561
}
val x14564 = x14247
val x14565 = x14248
val x14566 = x14249
val x14567 = new ParseResultAnon1863173035(x14564,x14565,x14566)
x14567
}
val x14711 = {x14570: (Int) => 
var x14572: Anon1863173035 = x161
var x14573: Boolean = true
var x14574: Int = x14570
val x14576 = x14570 >= x3954
val x14705 = if (x14576) {
x14572 = x161
x14573 = true
x14574 = x14570
()
} else {
val x14578 = x3943(x14570)
val x14579 = x14578 == '#'
val x14703 = if (x14579) {
var x14587: java.lang.String = ""
var x14588: Boolean = false
val x14580 = x14570 + 1
var x14589: Int = x14580
var x14591: Int = -1
var x14592: Boolean = true
var x14593: Int = x14580
val x14627 = while ({val x14594 = x14592
val x14595 = x14591
val x14596 = x14593
val x14597 = x14595 != x14596
val x14598 = x14594 && x14597
x14598}) {
val x14600 = x14593
x14591 = x14600
val x14602 = x14600 >= x3954
val x14625 = if (x14602) {
x14592 = false
()
} else {
val x14604 = x3943(x14600)
val x14605 = x14604 == '#'
val x14623 = if (x14605) {
val x14610 = x14587
val x14611 = x14588
val x14612 = x14589
val x14614 = x14610+x14604
x14587 = x14614
x14588 = false
val x14606 = x14600 + 1
x14589 = x14606
x14593 = x14606
()
} else {
x14592 = false
()
}
x14623
}
x14625
}
val x14628 = x14587
val x14629 = x14588
val x14630 = x14589
val x14697 = if (x14629) {
x14572 = x161
x14573 = true
x14574 = x14580
()
} else {
var x14639: java.lang.String = ""
var x14640: Boolean = false
var x14641: Int = x14630
var x14643: Int = -1
var x14644: Boolean = true
var x14645: Int = x14630
val x14681 = while ({val x14646 = x14644
val x14647 = x14643
val x14648 = x14645
val x14649 = x14647 != x14648
val x14650 = x14646 && x14649
x14650}) {
val x14652 = x14645
x14643 = x14652
val x14654 = x14652 >= x3954
val x14679 = if (x14654) {
x14644 = false
()
} else {
val x14656 = x3943(x14652)
val x14657 = x14656 > ' '
val x14658 = x14656 != ''
val x14659 = x14657 && x14658
val x14677 = if (x14659) {
val x14664 = x14639
val x14665 = x14640
val x14666 = x14641
val x14668 = x14664+x14656
x14639 = x14668
x14640 = false
val x14660 = x14652 + 1
x14641 = x14660
x14645 = x14660
()
} else {
x14644 = false
()
}
x14677
}
x14679
}
val x14682 = x14639
val x14683 = x14640
val x14684 = x14641
val x14689 = if (x14683) {
x161
} else {
val x14687 = new Anon1863173035("","","","",x14682,80)
x14687
}
x14572 = x14689
val x14690 = if (x14683) {
true
} else {
false
}
x14573 = x14690
val x14691 = if (x14683) {
x14684
} else {
x14684
}
x14574 = x14691
()
}
x14697
} else {
x14572 = x161
x14573 = true
x14574 = x14570
()
}
x14703
}
val x14706 = x14572
val x14707 = x14573
val x14708 = x14574
val x14709 = new ParseResultAnon1863173035(x14706,x14707,x14708)
x14709
}
val x15424 = {x14176: (Int) => 
var x14178: Anon1863173035 = x161
var x14179: Boolean = true
var x14180: Int = x14176
val x14182 = x14176 >= x3954
val x15418 = if (x14182) {
x14178 = x161
x14179 = true
x14180 = x14176
()
} else {
val x14184 = x3943(x14176)
val x14185 = x14184 == '/'
val x15416 = if (x14185) {
var x14193: java.lang.String = ""
var x14194: Boolean = false
val x14186 = x14176 + 1
var x14195: Int = x14186
var x14197: Int = -1
var x14198: Boolean = true
var x14199: Int = x14186
val x14239 = while ({val x14200 = x14198
val x14201 = x14197
val x14202 = x14199
val x14203 = x14201 != x14202
val x14204 = x14200 && x14203
x14204}) {
val x14206 = x14199
x14197 = x14206
val x14208 = x14206 >= x3954
val x14237 = if (x14208) {
x14198 = false
()
} else {
val x14210 = x3943(x14206)
val x14211 = x14210 > ' '
val x14212 = x14210 != '#'
val x14213 = x14211 && x14212
val x14214 = x14210 != '?'
val x14215 = x14213 && x14214
val x14216 = x14210 != ''
val x14217 = x14215 && x14216
val x14235 = if (x14217) {
val x14222 = x14193
val x14223 = x14194
val x14224 = x14195
val x14226 = x14222+x14210
x14193 = x14226
x14194 = false
val x14218 = x14206 + 1
x14195 = x14218
x14199 = x14218
()
} else {
x14198 = false
()
}
x14235
}
x14237
}
val x14240 = x14193
val x14241 = x14194
val x14242 = x14195
val x15410 = if (x14241) {
x14178 = x161
x14179 = true
x14180 = x14186
()
} else {
val x14712 = x14569(x14242)
val x14724 = x14712.empty
val x15408 = if (x14724) {
val x14725 = x14711(x14242)
val x14726 = x14725.empty
val x14735 = if (x14726) {
false
} else {
false
}
val x14741 = if (x14735) {
true
} else {
false
}
val x15081 = if (x14741) {
x14178 = x161
x14179 = true
val x14742 = if (x14735) {
x14186
} else {
val x14727 = x14725.next
val x14736 = if (x14726) {
x14727
} else {
x14727
}
x14736
}
x14180 = x14742
()
} else {
val x14742 = if (x14735) {
x14186
} else {
val x14727 = x14725.next
val x14736 = if (x14726) {
x14727
} else {
x14727
}
x14736
}
val x14744 = x14742 >= x3954
val x15079 = if (x14744) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
} else {
val x14746 = x3943(x14742)
val x14747 = x14746 == 'H'
val x15077 = if (x14747) {
val x14748 = x14742 + 1
val x14785 = x14748 >= x3954
val x15071 = if (x14785) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
} else {
val x14787 = x3943(x14748)
val x14788 = x14787 == 'T'
val x15069 = if (x14788) {
val x14789 = x14748 + 1
val x14797 = x14789 >= x3954
val x15063 = if (x14797) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
} else {
val x14799 = x3943(x14789)
val x14800 = x14799 == 'T'
val x15061 = if (x14800) {
val x14801 = x14789 + 1
val x14810 = x14801 >= x3954
val x15055 = if (x14810) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
} else {
val x14812 = x3943(x14801)
val x14813 = x14812 == 'P'
val x15053 = if (x14813) {
val x14814 = x14801 + 1
val x14823 = x14814 >= x3954
val x15047 = if (x14823) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
} else {
val x14825 = x3943(x14814)
val x14826 = x14825 == '/'
val x15045 = if (x14826) {
var x14858: Int = 0
var x14859: Boolean = false
val x14827 = x14814 + 1
var x14860: Int = x14827
var x14862: Int = -1
var x14863: Boolean = true
var x14864: Int = x14827
val x14905 = while ({val x14865 = x14863
val x14866 = x14862
val x14867 = x14864
val x14868 = x14866 != x14867
val x14869 = x14865 && x14868
x14869}) {
val x14871 = x14864
x14862 = x14871
val x14873 = x14871 >= x3954
val x14903 = if (x14873) {
x14863 = false
()
} else {
val x14875 = x3943(x14871)
val x14876 = x14875 >= '0'
val x14877 = x14875 <= '9'
val x14878 = x14876 && x14877
val x14901 = if (x14878) {
val x14887 = x14858
val x14888 = x14859
val x14889 = x14860
val x14884 = x14875 - '0'
val x14885 = x14884.toInt
val x14891 = x14887 * 10
val x14892 = x14891 + x14885
x14858 = x14892
x14859 = false
val x14879 = x14871 + 1
x14860 = x14879
x14864 = x14879
()
} else {
x14863 = false
()
}
x14901
}
x14903
}
val x14906 = x14858
val x14907 = x14859
val x14908 = x14860
val x15039 = if (x14907) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14827
()
} else {
val x14911 = x14908 >= x3954
val x15037 = if (x14911) {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14827
()
} else {
val x14913 = x3943(x14908)
val x14914 = x14913 == '.'
val x15035 = if (x14914) {
var x14930: Int = 0
var x14931: Boolean = false
val x14915 = x14908 + 1
var x14932: Int = x14915
var x14934: Int = -1
var x14935: Boolean = true
var x14936: Int = x14915
val x14977 = while ({val x14937 = x14935
val x14938 = x14934
val x14939 = x14936
val x14940 = x14938 != x14939
val x14941 = x14937 && x14940
x14941}) {
val x14943 = x14936
x14934 = x14943
val x14945 = x14943 >= x3954
val x14975 = if (x14945) {
x14935 = false
()
} else {
val x14947 = x3943(x14943)
val x14948 = x14947 >= '0'
val x14949 = x14947 <= '9'
val x14950 = x14948 && x14949
val x14973 = if (x14950) {
val x14959 = x14930
val x14960 = x14931
val x14961 = x14932
val x14956 = x14947 - '0'
val x14957 = x14956.toInt
val x14963 = x14959 * 10
val x14964 = x14963 + x14957
x14930 = x14964
x14931 = false
val x14951 = x14943 + 1
x14932 = x14951
x14936 = x14951
()
} else {
x14935 = false
()
}
x14973
}
x14975
}
val x14978 = x14930
val x14979 = x14931
val x14980 = x14932
val x14985 = if (x14979) {
true
} else {
false
}
val x14994 = if (x14985) {
false
} else {
false
}
val x14999 = if (x14994) {
true
} else {
false
}
val x15023 = if (x14999) {
x161
} else {
val x14998 = if (x14994) {
x935
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
x14740
}
val x15004 = x14998._2
val x15005 = x15004.defined
val x15015 = if (x15005) {
val x15006 = x15004.value
val x15008 = x15006.schema
x15008
} else {
""
}
val x15016 = if (x15005) {
val x15006 = x15004.value
val x15009 = x15006.hostName
x15009
} else {
""
}
val x15003 = x14998._1
val x15007 = "/"+x15003
val x15017 = if (x15005) {
x15007
} else {
x15007
}
val x15018 = if (x15005) {
val x15006 = x15004.value
val x15010 = x15006.queryString
x15010
} else {
""
}
val x15019 = if (x15005) {
val x15006 = x15004.value
val x15011 = x15006.fragment
x15011
} else {
""
}
val x15020 = if (x15005) {
val x15006 = x15004.value
val x15012 = x15006.port
x15012
} else {
80
}
val x15021 = new Anon1863173035(x15015,x15016,x15017,x15018,x15019,x15020)
x15021
}
x14178 = x15023
val x15024 = if (x14999) {
true
} else {
false
}
x14179 = x15024
val x15000 = if (x14994) {
x14186
} else {
val x14986 = if (x14979) {
x14827
} else {
x14980
}
val x14995 = if (x14985) {
x14986
} else {
x14986
}
x14995
}
val x15025 = if (x14999) {
x15000
} else {
x15000
}
x14180 = x15025
()
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14827
()
}
x15035
}
x15037
}
x15039
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
}
x15045
}
x15047
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
}
x15053
}
x15055
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
}
x15061
}
x15063
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
}
x15069
}
x15071
} else {
val x14740 = if (x14735) {
x935
} else {
val x14732 = if (x14726) {
x161
} else {
val x14729 = x14725.res
x14729
}
val x14733 = if (x14726) {
false
} else {
true
}
val x14734 = new OptionAnon1863173035(x14732,x14733)
val x14738 = new Tuple2StringOptionAnon1863173035(x14240,x14734)
x14738
}
val x14762 = x14740._2
val x14763 = x14762.defined
val x14773 = if (x14763) {
val x14764 = x14762.value
val x14766 = x14764.schema
x14766
} else {
""
}
val x14774 = if (x14763) {
val x14764 = x14762.value
val x14767 = x14764.hostName
x14767
} else {
""
}
val x14761 = x14740._1
val x14765 = "/"+x14761
val x14775 = if (x14763) {
x14765
} else {
x14765
}
val x14776 = if (x14763) {
val x14764 = x14762.value
val x14768 = x14764.queryString
x14768
} else {
""
}
val x14777 = if (x14763) {
val x14764 = x14762.value
val x14769 = x14764.fragment
x14769
} else {
""
}
val x14778 = if (x14763) {
val x14764 = x14762.value
val x14770 = x14764.port
x14770
} else {
80
}
val x14779 = new Anon1863173035(x14773,x14774,x14775,x14776,x14777,x14778)
x14178 = x14779
x14179 = false
x14180 = x14742
()
}
x15077
}
x15079
}
x15081
} else {
val x15085 = x14712.next
val x15089 = x15085 >= x3954
val x15406 = if (x15089) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
} else {
val x15091 = x3943(x15085)
val x15092 = x15091 == 'H'
val x15404 = if (x15092) {
val x15093 = x15085 + 1
val x15112 = x15093 >= x3954
val x15398 = if (x15112) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
} else {
val x15114 = x3943(x15093)
val x15115 = x15114 == 'T'
val x15396 = if (x15115) {
val x15116 = x15093 + 1
val x15124 = x15116 >= x3954
val x15390 = if (x15124) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
} else {
val x15126 = x3943(x15116)
val x15127 = x15126 == 'T'
val x15388 = if (x15127) {
val x15128 = x15116 + 1
val x15137 = x15128 >= x3954
val x15382 = if (x15137) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
} else {
val x15139 = x3943(x15128)
val x15140 = x15139 == 'P'
val x15380 = if (x15140) {
val x15141 = x15128 + 1
val x15150 = x15141 >= x3954
val x15374 = if (x15150) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
} else {
val x15152 = x3943(x15141)
val x15153 = x15152 == '/'
val x15372 = if (x15153) {
var x15185: Int = 0
var x15186: Boolean = false
val x15154 = x15141 + 1
var x15187: Int = x15154
var x15189: Int = -1
var x15190: Boolean = true
var x15191: Int = x15154
val x15232 = while ({val x15192 = x15190
val x15193 = x15189
val x15194 = x15191
val x15195 = x15193 != x15194
val x15196 = x15192 && x15195
x15196}) {
val x15198 = x15191
x15189 = x15198
val x15200 = x15198 >= x3954
val x15230 = if (x15200) {
x15190 = false
()
} else {
val x15202 = x3943(x15198)
val x15203 = x15202 >= '0'
val x15204 = x15202 <= '9'
val x15205 = x15203 && x15204
val x15228 = if (x15205) {
val x15214 = x15185
val x15215 = x15186
val x15216 = x15187
val x15211 = x15202 - '0'
val x15212 = x15211.toInt
val x15218 = x15214 * 10
val x15219 = x15218 + x15212
x15185 = x15219
x15186 = false
val x15206 = x15198 + 1
x15187 = x15206
x15191 = x15206
()
} else {
x15190 = false
()
}
x15228
}
x15230
}
val x15233 = x15185
val x15234 = x15186
val x15235 = x15187
val x15366 = if (x15234) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15154
()
} else {
val x15238 = x15235 >= x3954
val x15364 = if (x15238) {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15154
()
} else {
val x15240 = x3943(x15235)
val x15241 = x15240 == '.'
val x15362 = if (x15241) {
var x15257: Int = 0
var x15258: Boolean = false
val x15242 = x15235 + 1
var x15259: Int = x15242
var x15261: Int = -1
var x15262: Boolean = true
var x15263: Int = x15242
val x15304 = while ({val x15264 = x15262
val x15265 = x15261
val x15266 = x15263
val x15267 = x15265 != x15266
val x15268 = x15264 && x15267
x15268}) {
val x15270 = x15263
x15261 = x15270
val x15272 = x15270 >= x3954
val x15302 = if (x15272) {
x15262 = false
()
} else {
val x15274 = x3943(x15270)
val x15275 = x15274 >= '0'
val x15276 = x15274 <= '9'
val x15277 = x15275 && x15276
val x15300 = if (x15277) {
val x15286 = x15257
val x15287 = x15258
val x15288 = x15259
val x15283 = x15274 - '0'
val x15284 = x15283.toInt
val x15290 = x15286 * 10
val x15291 = x15290 + x15284
x15257 = x15291
x15258 = false
val x15278 = x15270 + 1
x15259 = x15278
x15263 = x15278
()
} else {
x15262 = false
()
}
x15300
}
x15302
}
val x15305 = x15257
val x15306 = x15258
val x15307 = x15259
val x15312 = if (x15306) {
true
} else {
false
}
val x15321 = if (x15312) {
false
} else {
false
}
val x15326 = if (x15321) {
true
} else {
false
}
val x15350 = if (x15326) {
x161
} else {
val x15325 = if (x15321) {
x935
} else {
val x15083 = x14712.res
val x15084 = new OptionAnon1863173035(x15083,true)
val x15087 = new Tuple2StringOptionAnon1863173035(x14240,x15084)
x15087
}
val x15331 = x15325._2
val x15332 = x15331.defined
val x15342 = if (x15332) {
val x15333 = x15331.value
val x15335 = x15333.schema
x15335
} else {
""
}
val x15343 = if (x15332) {
val x15333 = x15331.value
val x15336 = x15333.hostName
x15336
} else {
""
}
val x15330 = x15325._1
val x15334 = "/"+x15330
val x15344 = if (x15332) {
x15334
} else {
x15334
}
val x15345 = if (x15332) {
val x15333 = x15331.value
val x15337 = x15333.queryString
x15337
} else {
""
}
val x15346 = if (x15332) {
val x15333 = x15331.value
val x15338 = x15333.fragment
x15338
} else {
""
}
val x15347 = if (x15332) {
val x15333 = x15331.value
val x15339 = x15333.port
x15339
} else {
80
}
val x15348 = new Anon1863173035(x15342,x15343,x15344,x15345,x15346,x15347)
x15348
}
x14178 = x15350
val x15351 = if (x15326) {
true
} else {
false
}
x14179 = x15351
val x15327 = if (x15321) {
x14186
} else {
val x15313 = if (x15306) {
x15154
} else {
x15307
}
val x15322 = if (x15312) {
x15313
} else {
x15313
}
x15322
}
val x15352 = if (x15326) {
x15327
} else {
x15327
}
x14180 = x15352
()
} else {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15154
()
}
x15362
}
x15364
}
x15366
} else {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
}
x15372
}
x15374
} else {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
}
x15380
}
x15382
} else {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
}
x15388
}
x15390
} else {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
}
x15396
}
x15398
} else {
val x15100 = "/"+x14240
val x15083 = x14712.res
val x15101 = x15083.schema
val x15102 = x15083.hostName
val x15103 = x15083.queryString
val x15104 = x15083.fragment
val x15105 = x15083.port
val x15106 = new Anon1863173035(x15101,x15102,x15100,x15103,x15104,x15105)
x14178 = x15106
x14179 = false
x14180 = x15085
()
}
x15404
}
x15406
}
x15408
}
x15410
} else {
x14178 = x161
x14179 = true
x14180 = x14176
()
}
x15416
}
val x15419 = x14178
val x15420 = x14179
val x15421 = x14180
val x15422 = new ParseResultAnon1863173035(x15419,x15420,x15421)
x15422
}
val x15750 = x15424(x4182)
val x15751 = x15750.empty
val x15808 = if (x15751) {
val x15749 = {x15425: (Int) => 
var x15427: Anon1863173035 = x161
var x15428: Boolean = true
var x15429: Int = x15425
val x15431 = x15425 >= x3954
val x15743 = if (x15431) {
x15427 = x161
x15428 = true
x15429 = x15425
()
} else {
val x15433 = x3943(x15425)
val x15434 = x15433 == '?'
val x15741 = if (x15434) {
var x15442: java.lang.String = ""
var x15443: Boolean = false
val x15435 = x15425 + 1
var x15444: Int = x15435
var x15446: Int = -1
var x15447: Boolean = true
var x15448: Int = x15435
val x15482 = while ({val x15449 = x15447
val x15450 = x15446
val x15451 = x15448
val x15452 = x15450 != x15451
val x15453 = x15449 && x15452
x15453}) {
val x15455 = x15448
x15446 = x15455
val x15457 = x15455 >= x3954
val x15480 = if (x15457) {
x15447 = false
()
} else {
val x15459 = x3943(x15455)
val x15460 = x15459 == '?'
val x15478 = if (x15460) {
val x15465 = x15442
val x15466 = x15443
val x15467 = x15444
val x15469 = x15465+x15459
x15442 = x15469
x15443 = false
val x15461 = x15455 + 1
x15444 = x15461
x15448 = x15461
()
} else {
x15447 = false
()
}
x15478
}
x15480
}
val x15483 = x15442
val x15484 = x15443
val x15485 = x15444
val x15735 = if (x15484) {
x15427 = x161
x15428 = true
x15429 = x15435
()
} else {
var x15501: java.lang.String = ""
var x15502: Boolean = false
var x15503: Int = x15485
var x15505: Int = -1
var x15506: Boolean = true
var x15507: Int = x15485
val x15545 = while ({val x15508 = x15506
val x15509 = x15505
val x15510 = x15507
val x15511 = x15509 != x15510
val x15512 = x15508 && x15511
x15512}) {
val x15514 = x15507
x15505 = x15514
val x15516 = x15514 >= x3954
val x15543 = if (x15516) {
x15506 = false
()
} else {
val x15518 = x3943(x15514)
val x15519 = x15518 > ' '
val x15520 = x15518 != '#'
val x15521 = x15519 && x15520
val x15522 = x15518 != ''
val x15523 = x15521 && x15522
val x15541 = if (x15523) {
val x15528 = x15501
val x15529 = x15502
val x15530 = x15503
val x15532 = x15528+x15518
x15501 = x15532
x15502 = false
val x15524 = x15514 + 1
x15503 = x15524
x15507 = x15524
()
} else {
x15506 = false
()
}
x15541
}
x15543
}
val x15546 = x15501
val x15547 = x15502
val x15548 = x15503
val x15733 = if (x15547) {
x15427 = x161
x15428 = true
x15429 = x15435
()
} else {
val x15550 = x15548 >= x3954
val x15731 = if (x15550) {
val x15564 = new Anon1863173035("","","",x15546,"",80)
x15427 = x15564
x15428 = false
x15429 = x15548
()
} else {
val x15552 = x3943(x15548)
val x15553 = x15552 == '#'
val x15729 = if (x15553) {
var x15571: java.lang.String = ""
var x15572: Boolean = false
val x15554 = x15548 + 1
var x15573: Int = x15554
var x15575: Int = -1
var x15576: Boolean = true
var x15577: Int = x15554
val x15611 = while ({val x15578 = x15576
val x15579 = x15575
val x15580 = x15577
val x15581 = x15579 != x15580
val x15582 = x15578 && x15581
x15582}) {
val x15584 = x15577
x15575 = x15584
val x15586 = x15584 >= x3954
val x15609 = if (x15586) {
x15576 = false
()
} else {
val x15588 = x3943(x15584)
val x15589 = x15588 == '#'
val x15607 = if (x15589) {
val x15594 = x15571
val x15595 = x15572
val x15596 = x15573
val x15598 = x15594+x15588
x15571 = x15598
x15572 = false
val x15590 = x15584 + 1
x15573 = x15590
x15577 = x15590
()
} else {
x15576 = false
()
}
x15607
}
x15609
}
val x15612 = x15571
val x15613 = x15572
val x15614 = x15573
val x15723 = if (x15613) {
val x15564 = new Anon1863173035("","","",x15546,"",80)
x15427 = x15564
x15428 = false
x15429 = x15554
()
} else {
var x15626: java.lang.String = ""
var x15627: Boolean = false
var x15628: Int = x15614
var x15630: Int = -1
var x15631: Boolean = true
var x15632: Int = x15614
val x15668 = while ({val x15633 = x15631
val x15634 = x15630
val x15635 = x15632
val x15636 = x15634 != x15635
val x15637 = x15633 && x15636
x15637}) {
val x15639 = x15632
x15630 = x15639
val x15641 = x15639 >= x3954
val x15666 = if (x15641) {
x15631 = false
()
} else {
val x15643 = x3943(x15639)
val x15644 = x15643 > ' '
val x15645 = x15643 != ''
val x15646 = x15644 && x15645
val x15664 = if (x15646) {
val x15651 = x15626
val x15652 = x15627
val x15653 = x15628
val x15655 = x15651+x15643
x15626 = x15655
x15627 = false
val x15647 = x15639 + 1
x15628 = x15647
x15632 = x15647
()
} else {
x15631 = false
()
}
x15664
}
x15666
}
val x15669 = x15626
val x15670 = x15627
val x15671 = x15628
val x15677 = if (x15670) {
true
} else {
false
}
val x15686 = if (x15677) {
false
} else {
false
}
val x15692 = if (x15686) {
true
} else {
false
}
val x15715 = if (x15692) {
x161
} else {
val x15691 = if (x15686) {
x935
} else {
val x15683 = if (x15677) {
x161
} else {
val x15676 = if (x15670) {
x161
} else {
val x15674 = new Anon1863173035("","","","",x15669,80)
x15674
}
x15676
}
val x15684 = if (x15677) {
false
} else {
true
}
val x15685 = new OptionAnon1863173035(x15683,x15684)
val x15689 = new Tuple2StringOptionAnon1863173035(x15546,x15685)
x15689
}
val x15697 = x15691._2
val x15698 = x15697.defined
val x15707 = if (x15698) {
val x15699 = x15697.value
val x15700 = x15699.schema
x15700
} else {
""
}
val x15708 = if (x15698) {
val x15699 = x15697.value
val x15701 = x15699.hostName
x15701
} else {
""
}
val x15709 = if (x15698) {
val x15699 = x15697.value
val x15702 = x15699.path
x15702
} else {
""
}
val x15696 = x15691._1
val x15710 = if (x15698) {
x15696
} else {
x15696
}
val x15711 = if (x15698) {
val x15699 = x15697.value
val x15703 = x15699.fragment
x15703
} else {
""
}
val x15712 = if (x15698) {
val x15699 = x15697.value
val x15704 = x15699.port
x15704
} else {
80
}
val x15713 = new Anon1863173035(x15707,x15708,x15709,x15710,x15711,x15712)
x15713
}
x15427 = x15715
val x15716 = if (x15692) {
true
} else {
false
}
x15428 = x15716
val x15693 = if (x15686) {
x15435
} else {
val x15678 = if (x15670) {
x15671
} else {
x15671
}
val x15687 = if (x15677) {
x15678
} else {
x15678
}
x15687
}
val x15717 = if (x15692) {
x15693
} else {
x15693
}
x15429 = x15717
()
}
x15723
} else {
val x15564 = new Anon1863173035("","","",x15546,"",80)
x15427 = x15564
x15428 = false
x15429 = x15548
()
}
x15729
}
x15731
}
x15733
}
x15735
} else {
x15427 = x161
x15428 = true
x15429 = x15425
()
}
x15741
}
val x15744 = x15427
val x15745 = x15428
val x15746 = x15429
val x15747 = new ParseResultAnon1863173035(x15744,x15745,x15746)
x15747
}
val x15752 = x15749(x4182)
val x15753 = x15752.empty
val x15759 = if (x15753) {
true
} else {
false
}
val x15785 = if (x15759) {
x161
} else {
val x15758 = if (x15753) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x1006 = new OptionAnon1863173035(x161,false)
val x5790 = x4180.res
val x5791 = new Tuple2StringOptionAnon1863173035(x5790,x1006)
val x15754 = x15752.res
val x15755 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x5791,x15754)
x15755
}
val x15763 = x15758._1
val x15765 = x15763._1
val x15766 = x15763._2
val x15767 = x15766.defined
val x15777 = if (x15767) {
x15765
} else {
x15765
}
val x15764 = x15758._2
val x15778 = if (x15767) {
val x15768 = x15766.value
val x15769 = x15768.hostName
x15769
} else {
val x15775 = x15764.hostName
x15775
}
val x15770 = x15764.path
val x15779 = if (x15767) {
x15770
} else {
x15770
}
val x15771 = x15764.queryString
val x15780 = if (x15767) {
x15771
} else {
x15771
}
val x15772 = x15764.fragment
val x15781 = if (x15767) {
x15772
} else {
x15772
}
val x15773 = x15764.port
val x15782 = if (x15767) {
x15773
} else {
x15773
}
val x15783 = new Anon1863173035(x15777,x15778,x15779,x15780,x15781,x15782)
x15783
}
x3944 = x15785
val x15786 = if (x15759) {
true
} else {
false
}
x3945 = x15786
val x15760 = if (x15753) {
0
} else {
val x15756 = x15752.next
x15756
}
val x15787 = if (x15759) {
x15760
} else {
x15760
}
x3946 = x15787
()
} else {
val x5790 = x4180.res
val x15793 = x15750.res
val x15797 = x15793.hostName
val x15798 = x15793.path
val x15799 = x15793.queryString
val x15800 = x15793.fragment
val x15801 = x15793.port
val x15802 = new Anon1863173035(x5790,x15797,x15798,x15799,x15800,x15801)
x3944 = x15802
x3945 = false
val x15795 = x15750.next
x3946 = x15795
()
}
x15808
}
x15810
}
x15812
}
x15814
} else {
val x15816 = x4178.next
val x15817 = x15816 >= x3954
val x25865 = if (x15817) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x16239 = {x15915: (Int) => 
var x15917: Anon1863173035 = x161
var x15918: Boolean = true
var x15919: Int = x15915
val x15921 = x15915 >= x3954
val x16233 = if (x15921) {
x15917 = x161
x15918 = true
x15919 = x15915
()
} else {
val x15923 = x3943(x15915)
val x15924 = x15923 == '?'
val x16231 = if (x15924) {
var x15932: java.lang.String = ""
var x15933: Boolean = false
val x15925 = x15915 + 1
var x15934: Int = x15925
var x15936: Int = -1
var x15937: Boolean = true
var x15938: Int = x15925
val x15972 = while ({val x15939 = x15937
val x15940 = x15936
val x15941 = x15938
val x15942 = x15940 != x15941
val x15943 = x15939 && x15942
x15943}) {
val x15945 = x15938
x15936 = x15945
val x15947 = x15945 >= x3954
val x15970 = if (x15947) {
x15937 = false
()
} else {
val x15949 = x3943(x15945)
val x15950 = x15949 == '?'
val x15968 = if (x15950) {
val x15955 = x15932
val x15956 = x15933
val x15957 = x15934
val x15959 = x15955+x15949
x15932 = x15959
x15933 = false
val x15951 = x15945 + 1
x15934 = x15951
x15938 = x15951
()
} else {
x15937 = false
()
}
x15968
}
x15970
}
val x15973 = x15932
val x15974 = x15933
val x15975 = x15934
val x16225 = if (x15974) {
x15917 = x161
x15918 = true
x15919 = x15925
()
} else {
var x15991: java.lang.String = ""
var x15992: Boolean = false
var x15993: Int = x15975
var x15995: Int = -1
var x15996: Boolean = true
var x15997: Int = x15975
val x16035 = while ({val x15998 = x15996
val x15999 = x15995
val x16000 = x15997
val x16001 = x15999 != x16000
val x16002 = x15998 && x16001
x16002}) {
val x16004 = x15997
x15995 = x16004
val x16006 = x16004 >= x3954
val x16033 = if (x16006) {
x15996 = false
()
} else {
val x16008 = x3943(x16004)
val x16009 = x16008 > ' '
val x16010 = x16008 != '#'
val x16011 = x16009 && x16010
val x16012 = x16008 != ''
val x16013 = x16011 && x16012
val x16031 = if (x16013) {
val x16018 = x15991
val x16019 = x15992
val x16020 = x15993
val x16022 = x16018+x16008
x15991 = x16022
x15992 = false
val x16014 = x16004 + 1
x15993 = x16014
x15997 = x16014
()
} else {
x15996 = false
()
}
x16031
}
x16033
}
val x16036 = x15991
val x16037 = x15992
val x16038 = x15993
val x16223 = if (x16037) {
x15917 = x161
x15918 = true
x15919 = x15925
()
} else {
val x16040 = x16038 >= x3954
val x16221 = if (x16040) {
val x16054 = new Anon1863173035("","","",x16036,"",80)
x15917 = x16054
x15918 = false
x15919 = x16038
()
} else {
val x16042 = x3943(x16038)
val x16043 = x16042 == '#'
val x16219 = if (x16043) {
var x16061: java.lang.String = ""
var x16062: Boolean = false
val x16044 = x16038 + 1
var x16063: Int = x16044
var x16065: Int = -1
var x16066: Boolean = true
var x16067: Int = x16044
val x16101 = while ({val x16068 = x16066
val x16069 = x16065
val x16070 = x16067
val x16071 = x16069 != x16070
val x16072 = x16068 && x16071
x16072}) {
val x16074 = x16067
x16065 = x16074
val x16076 = x16074 >= x3954
val x16099 = if (x16076) {
x16066 = false
()
} else {
val x16078 = x3943(x16074)
val x16079 = x16078 == '#'
val x16097 = if (x16079) {
val x16084 = x16061
val x16085 = x16062
val x16086 = x16063
val x16088 = x16084+x16078
x16061 = x16088
x16062 = false
val x16080 = x16074 + 1
x16063 = x16080
x16067 = x16080
()
} else {
x16066 = false
()
}
x16097
}
x16099
}
val x16102 = x16061
val x16103 = x16062
val x16104 = x16063
val x16213 = if (x16103) {
val x16054 = new Anon1863173035("","","",x16036,"",80)
x15917 = x16054
x15918 = false
x15919 = x16044
()
} else {
var x16116: java.lang.String = ""
var x16117: Boolean = false
var x16118: Int = x16104
var x16120: Int = -1
var x16121: Boolean = true
var x16122: Int = x16104
val x16158 = while ({val x16123 = x16121
val x16124 = x16120
val x16125 = x16122
val x16126 = x16124 != x16125
val x16127 = x16123 && x16126
x16127}) {
val x16129 = x16122
x16120 = x16129
val x16131 = x16129 >= x3954
val x16156 = if (x16131) {
x16121 = false
()
} else {
val x16133 = x3943(x16129)
val x16134 = x16133 > ' '
val x16135 = x16133 != ''
val x16136 = x16134 && x16135
val x16154 = if (x16136) {
val x16141 = x16116
val x16142 = x16117
val x16143 = x16118
val x16145 = x16141+x16133
x16116 = x16145
x16117 = false
val x16137 = x16129 + 1
x16118 = x16137
x16122 = x16137
()
} else {
x16121 = false
()
}
x16154
}
x16156
}
val x16159 = x16116
val x16160 = x16117
val x16161 = x16118
val x16167 = if (x16160) {
true
} else {
false
}
val x16176 = if (x16167) {
false
} else {
false
}
val x16182 = if (x16176) {
true
} else {
false
}
val x16205 = if (x16182) {
x161
} else {
val x16181 = if (x16176) {
x935
} else {
val x16173 = if (x16167) {
x161
} else {
val x16166 = if (x16160) {
x161
} else {
val x16164 = new Anon1863173035("","","","",x16159,80)
x16164
}
x16166
}
val x16174 = if (x16167) {
false
} else {
true
}
val x16175 = new OptionAnon1863173035(x16173,x16174)
val x16179 = new Tuple2StringOptionAnon1863173035(x16036,x16175)
x16179
}
val x16187 = x16181._2
val x16188 = x16187.defined
val x16197 = if (x16188) {
val x16189 = x16187.value
val x16190 = x16189.schema
x16190
} else {
""
}
val x16198 = if (x16188) {
val x16189 = x16187.value
val x16191 = x16189.hostName
x16191
} else {
""
}
val x16199 = if (x16188) {
val x16189 = x16187.value
val x16192 = x16189.path
x16192
} else {
""
}
val x16186 = x16181._1
val x16200 = if (x16188) {
x16186
} else {
x16186
}
val x16201 = if (x16188) {
val x16189 = x16187.value
val x16193 = x16189.fragment
x16193
} else {
""
}
val x16202 = if (x16188) {
val x16189 = x16187.value
val x16194 = x16189.port
x16194
} else {
80
}
val x16203 = new Anon1863173035(x16197,x16198,x16199,x16200,x16201,x16202)
x16203
}
x15917 = x16205
val x16206 = if (x16182) {
true
} else {
false
}
x15918 = x16206
val x16183 = if (x16176) {
x15925
} else {
val x16168 = if (x16160) {
x16161
} else {
x16161
}
val x16177 = if (x16167) {
x16168
} else {
x16168
}
x16177
}
val x16207 = if (x16182) {
x16183
} else {
x16183
}
x15919 = x16207
()
}
x16213
} else {
val x16054 = new Anon1863173035("","","",x16036,"",80)
x15917 = x16054
x15918 = false
x15919 = x16038
()
}
x16219
}
x16221
}
x16223
}
x16225
} else {
x15917 = x161
x15918 = true
x15919 = x15915
()
}
x16231
}
val x16234 = x15917
val x16235 = x15918
val x16236 = x15919
val x16237 = new ParseResultAnon1863173035(x16234,x16235,x16236)
x16237
}
val x16381 = {x16240: (Int) => 
var x16242: Anon1863173035 = x161
var x16243: Boolean = true
var x16244: Int = x16240
val x16246 = x16240 >= x3954
val x16375 = if (x16246) {
x16242 = x161
x16243 = true
x16244 = x16240
()
} else {
val x16248 = x3943(x16240)
val x16249 = x16248 == '#'
val x16373 = if (x16249) {
var x16257: java.lang.String = ""
var x16258: Boolean = false
val x16250 = x16240 + 1
var x16259: Int = x16250
var x16261: Int = -1
var x16262: Boolean = true
var x16263: Int = x16250
val x16297 = while ({val x16264 = x16262
val x16265 = x16261
val x16266 = x16263
val x16267 = x16265 != x16266
val x16268 = x16264 && x16267
x16268}) {
val x16270 = x16263
x16261 = x16270
val x16272 = x16270 >= x3954
val x16295 = if (x16272) {
x16262 = false
()
} else {
val x16274 = x3943(x16270)
val x16275 = x16274 == '#'
val x16293 = if (x16275) {
val x16280 = x16257
val x16281 = x16258
val x16282 = x16259
val x16284 = x16280+x16274
x16257 = x16284
x16258 = false
val x16276 = x16270 + 1
x16259 = x16276
x16263 = x16276
()
} else {
x16262 = false
()
}
x16293
}
x16295
}
val x16298 = x16257
val x16299 = x16258
val x16300 = x16259
val x16367 = if (x16299) {
x16242 = x161
x16243 = true
x16244 = x16250
()
} else {
var x16309: java.lang.String = ""
var x16310: Boolean = false
var x16311: Int = x16300
var x16313: Int = -1
var x16314: Boolean = true
var x16315: Int = x16300
val x16351 = while ({val x16316 = x16314
val x16317 = x16313
val x16318 = x16315
val x16319 = x16317 != x16318
val x16320 = x16316 && x16319
x16320}) {
val x16322 = x16315
x16313 = x16322
val x16324 = x16322 >= x3954
val x16349 = if (x16324) {
x16314 = false
()
} else {
val x16326 = x3943(x16322)
val x16327 = x16326 > ' '
val x16328 = x16326 != ''
val x16329 = x16327 && x16328
val x16347 = if (x16329) {
val x16334 = x16309
val x16335 = x16310
val x16336 = x16311
val x16338 = x16334+x16326
x16309 = x16338
x16310 = false
val x16330 = x16322 + 1
x16311 = x16330
x16315 = x16330
()
} else {
x16314 = false
()
}
x16347
}
x16349
}
val x16352 = x16309
val x16353 = x16310
val x16354 = x16311
val x16359 = if (x16353) {
x161
} else {
val x16357 = new Anon1863173035("","","","",x16352,80)
x16357
}
x16242 = x16359
val x16360 = if (x16353) {
true
} else {
false
}
x16243 = x16360
val x16361 = if (x16353) {
x16354
} else {
x16354
}
x16244 = x16361
()
}
x16367
} else {
x16242 = x161
x16243 = true
x16244 = x16240
()
}
x16373
}
val x16376 = x16242
val x16377 = x16243
val x16378 = x16244
val x16379 = new ParseResultAnon1863173035(x16376,x16377,x16378)
x16379
}
val x17094 = {x15846: (Int) => 
var x15848: Anon1863173035 = x161
var x15849: Boolean = true
var x15850: Int = x15846
val x15852 = x15846 >= x3954
val x17088 = if (x15852) {
x15848 = x161
x15849 = true
x15850 = x15846
()
} else {
val x15854 = x3943(x15846)
val x15855 = x15854 == '/'
val x17086 = if (x15855) {
var x15863: java.lang.String = ""
var x15864: Boolean = false
val x15856 = x15846 + 1
var x15865: Int = x15856
var x15867: Int = -1
var x15868: Boolean = true
var x15869: Int = x15856
val x15909 = while ({val x15870 = x15868
val x15871 = x15867
val x15872 = x15869
val x15873 = x15871 != x15872
val x15874 = x15870 && x15873
x15874}) {
val x15876 = x15869
x15867 = x15876
val x15878 = x15876 >= x3954
val x15907 = if (x15878) {
x15868 = false
()
} else {
val x15880 = x3943(x15876)
val x15881 = x15880 > ' '
val x15882 = x15880 != '#'
val x15883 = x15881 && x15882
val x15884 = x15880 != '?'
val x15885 = x15883 && x15884
val x15886 = x15880 != ''
val x15887 = x15885 && x15886
val x15905 = if (x15887) {
val x15892 = x15863
val x15893 = x15864
val x15894 = x15865
val x15896 = x15892+x15880
x15863 = x15896
x15864 = false
val x15888 = x15876 + 1
x15865 = x15888
x15869 = x15888
()
} else {
x15868 = false
()
}
x15905
}
x15907
}
val x15910 = x15863
val x15911 = x15864
val x15912 = x15865
val x17080 = if (x15911) {
x15848 = x161
x15849 = true
x15850 = x15856
()
} else {
val x16382 = x16239(x15912)
val x16394 = x16382.empty
val x17078 = if (x16394) {
val x16395 = x16381(x15912)
val x16396 = x16395.empty
val x16405 = if (x16396) {
false
} else {
false
}
val x16411 = if (x16405) {
true
} else {
false
}
val x16751 = if (x16411) {
x15848 = x161
x15849 = true
val x16412 = if (x16405) {
x15856
} else {
val x16397 = x16395.next
val x16406 = if (x16396) {
x16397
} else {
x16397
}
x16406
}
x15850 = x16412
()
} else {
val x16412 = if (x16405) {
x15856
} else {
val x16397 = x16395.next
val x16406 = if (x16396) {
x16397
} else {
x16397
}
x16406
}
val x16414 = x16412 >= x3954
val x16749 = if (x16414) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
} else {
val x16416 = x3943(x16412)
val x16417 = x16416 == 'H'
val x16747 = if (x16417) {
val x16418 = x16412 + 1
val x16455 = x16418 >= x3954
val x16741 = if (x16455) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
} else {
val x16457 = x3943(x16418)
val x16458 = x16457 == 'T'
val x16739 = if (x16458) {
val x16459 = x16418 + 1
val x16467 = x16459 >= x3954
val x16733 = if (x16467) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
} else {
val x16469 = x3943(x16459)
val x16470 = x16469 == 'T'
val x16731 = if (x16470) {
val x16471 = x16459 + 1
val x16480 = x16471 >= x3954
val x16725 = if (x16480) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
} else {
val x16482 = x3943(x16471)
val x16483 = x16482 == 'P'
val x16723 = if (x16483) {
val x16484 = x16471 + 1
val x16493 = x16484 >= x3954
val x16717 = if (x16493) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
} else {
val x16495 = x3943(x16484)
val x16496 = x16495 == '/'
val x16715 = if (x16496) {
var x16528: Int = 0
var x16529: Boolean = false
val x16497 = x16484 + 1
var x16530: Int = x16497
var x16532: Int = -1
var x16533: Boolean = true
var x16534: Int = x16497
val x16575 = while ({val x16535 = x16533
val x16536 = x16532
val x16537 = x16534
val x16538 = x16536 != x16537
val x16539 = x16535 && x16538
x16539}) {
val x16541 = x16534
x16532 = x16541
val x16543 = x16541 >= x3954
val x16573 = if (x16543) {
x16533 = false
()
} else {
val x16545 = x3943(x16541)
val x16546 = x16545 >= '0'
val x16547 = x16545 <= '9'
val x16548 = x16546 && x16547
val x16571 = if (x16548) {
val x16557 = x16528
val x16558 = x16529
val x16559 = x16530
val x16554 = x16545 - '0'
val x16555 = x16554.toInt
val x16561 = x16557 * 10
val x16562 = x16561 + x16555
x16528 = x16562
x16529 = false
val x16549 = x16541 + 1
x16530 = x16549
x16534 = x16549
()
} else {
x16533 = false
()
}
x16571
}
x16573
}
val x16576 = x16528
val x16577 = x16529
val x16578 = x16530
val x16709 = if (x16577) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16497
()
} else {
val x16581 = x16578 >= x3954
val x16707 = if (x16581) {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16497
()
} else {
val x16583 = x3943(x16578)
val x16584 = x16583 == '.'
val x16705 = if (x16584) {
var x16600: Int = 0
var x16601: Boolean = false
val x16585 = x16578 + 1
var x16602: Int = x16585
var x16604: Int = -1
var x16605: Boolean = true
var x16606: Int = x16585
val x16647 = while ({val x16607 = x16605
val x16608 = x16604
val x16609 = x16606
val x16610 = x16608 != x16609
val x16611 = x16607 && x16610
x16611}) {
val x16613 = x16606
x16604 = x16613
val x16615 = x16613 >= x3954
val x16645 = if (x16615) {
x16605 = false
()
} else {
val x16617 = x3943(x16613)
val x16618 = x16617 >= '0'
val x16619 = x16617 <= '9'
val x16620 = x16618 && x16619
val x16643 = if (x16620) {
val x16629 = x16600
val x16630 = x16601
val x16631 = x16602
val x16626 = x16617 - '0'
val x16627 = x16626.toInt
val x16633 = x16629 * 10
val x16634 = x16633 + x16627
x16600 = x16634
x16601 = false
val x16621 = x16613 + 1
x16602 = x16621
x16606 = x16621
()
} else {
x16605 = false
()
}
x16643
}
x16645
}
val x16648 = x16600
val x16649 = x16601
val x16650 = x16602
val x16655 = if (x16649) {
true
} else {
false
}
val x16664 = if (x16655) {
false
} else {
false
}
val x16669 = if (x16664) {
true
} else {
false
}
val x16693 = if (x16669) {
x161
} else {
val x16668 = if (x16664) {
x935
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
x16410
}
val x16674 = x16668._2
val x16675 = x16674.defined
val x16685 = if (x16675) {
val x16676 = x16674.value
val x16678 = x16676.schema
x16678
} else {
""
}
val x16686 = if (x16675) {
val x16676 = x16674.value
val x16679 = x16676.hostName
x16679
} else {
""
}
val x16673 = x16668._1
val x16677 = "/"+x16673
val x16687 = if (x16675) {
x16677
} else {
x16677
}
val x16688 = if (x16675) {
val x16676 = x16674.value
val x16680 = x16676.queryString
x16680
} else {
""
}
val x16689 = if (x16675) {
val x16676 = x16674.value
val x16681 = x16676.fragment
x16681
} else {
""
}
val x16690 = if (x16675) {
val x16676 = x16674.value
val x16682 = x16676.port
x16682
} else {
80
}
val x16691 = new Anon1863173035(x16685,x16686,x16687,x16688,x16689,x16690)
x16691
}
x15848 = x16693
val x16694 = if (x16669) {
true
} else {
false
}
x15849 = x16694
val x16670 = if (x16664) {
x15856
} else {
val x16656 = if (x16649) {
x16497
} else {
x16650
}
val x16665 = if (x16655) {
x16656
} else {
x16656
}
x16665
}
val x16695 = if (x16669) {
x16670
} else {
x16670
}
x15850 = x16695
()
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16497
()
}
x16705
}
x16707
}
x16709
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
}
x16715
}
x16717
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
}
x16723
}
x16725
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
}
x16731
}
x16733
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
}
x16739
}
x16741
} else {
val x16410 = if (x16405) {
x935
} else {
val x16402 = if (x16396) {
x161
} else {
val x16399 = x16395.res
x16399
}
val x16403 = if (x16396) {
false
} else {
true
}
val x16404 = new OptionAnon1863173035(x16402,x16403)
val x16408 = new Tuple2StringOptionAnon1863173035(x15910,x16404)
x16408
}
val x16432 = x16410._2
val x16433 = x16432.defined
val x16443 = if (x16433) {
val x16434 = x16432.value
val x16436 = x16434.schema
x16436
} else {
""
}
val x16444 = if (x16433) {
val x16434 = x16432.value
val x16437 = x16434.hostName
x16437
} else {
""
}
val x16431 = x16410._1
val x16435 = "/"+x16431
val x16445 = if (x16433) {
x16435
} else {
x16435
}
val x16446 = if (x16433) {
val x16434 = x16432.value
val x16438 = x16434.queryString
x16438
} else {
""
}
val x16447 = if (x16433) {
val x16434 = x16432.value
val x16439 = x16434.fragment
x16439
} else {
""
}
val x16448 = if (x16433) {
val x16434 = x16432.value
val x16440 = x16434.port
x16440
} else {
80
}
val x16449 = new Anon1863173035(x16443,x16444,x16445,x16446,x16447,x16448)
x15848 = x16449
x15849 = false
x15850 = x16412
()
}
x16747
}
x16749
}
x16751
} else {
val x16755 = x16382.next
val x16759 = x16755 >= x3954
val x17076 = if (x16759) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
} else {
val x16761 = x3943(x16755)
val x16762 = x16761 == 'H'
val x17074 = if (x16762) {
val x16763 = x16755 + 1
val x16782 = x16763 >= x3954
val x17068 = if (x16782) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
} else {
val x16784 = x3943(x16763)
val x16785 = x16784 == 'T'
val x17066 = if (x16785) {
val x16786 = x16763 + 1
val x16794 = x16786 >= x3954
val x17060 = if (x16794) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
} else {
val x16796 = x3943(x16786)
val x16797 = x16796 == 'T'
val x17058 = if (x16797) {
val x16798 = x16786 + 1
val x16807 = x16798 >= x3954
val x17052 = if (x16807) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
} else {
val x16809 = x3943(x16798)
val x16810 = x16809 == 'P'
val x17050 = if (x16810) {
val x16811 = x16798 + 1
val x16820 = x16811 >= x3954
val x17044 = if (x16820) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
} else {
val x16822 = x3943(x16811)
val x16823 = x16822 == '/'
val x17042 = if (x16823) {
var x16855: Int = 0
var x16856: Boolean = false
val x16824 = x16811 + 1
var x16857: Int = x16824
var x16859: Int = -1
var x16860: Boolean = true
var x16861: Int = x16824
val x16902 = while ({val x16862 = x16860
val x16863 = x16859
val x16864 = x16861
val x16865 = x16863 != x16864
val x16866 = x16862 && x16865
x16866}) {
val x16868 = x16861
x16859 = x16868
val x16870 = x16868 >= x3954
val x16900 = if (x16870) {
x16860 = false
()
} else {
val x16872 = x3943(x16868)
val x16873 = x16872 >= '0'
val x16874 = x16872 <= '9'
val x16875 = x16873 && x16874
val x16898 = if (x16875) {
val x16884 = x16855
val x16885 = x16856
val x16886 = x16857
val x16881 = x16872 - '0'
val x16882 = x16881.toInt
val x16888 = x16884 * 10
val x16889 = x16888 + x16882
x16855 = x16889
x16856 = false
val x16876 = x16868 + 1
x16857 = x16876
x16861 = x16876
()
} else {
x16860 = false
()
}
x16898
}
x16900
}
val x16903 = x16855
val x16904 = x16856
val x16905 = x16857
val x17036 = if (x16904) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16824
()
} else {
val x16908 = x16905 >= x3954
val x17034 = if (x16908) {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16824
()
} else {
val x16910 = x3943(x16905)
val x16911 = x16910 == '.'
val x17032 = if (x16911) {
var x16927: Int = 0
var x16928: Boolean = false
val x16912 = x16905 + 1
var x16929: Int = x16912
var x16931: Int = -1
var x16932: Boolean = true
var x16933: Int = x16912
val x16974 = while ({val x16934 = x16932
val x16935 = x16931
val x16936 = x16933
val x16937 = x16935 != x16936
val x16938 = x16934 && x16937
x16938}) {
val x16940 = x16933
x16931 = x16940
val x16942 = x16940 >= x3954
val x16972 = if (x16942) {
x16932 = false
()
} else {
val x16944 = x3943(x16940)
val x16945 = x16944 >= '0'
val x16946 = x16944 <= '9'
val x16947 = x16945 && x16946
val x16970 = if (x16947) {
val x16956 = x16927
val x16957 = x16928
val x16958 = x16929
val x16953 = x16944 - '0'
val x16954 = x16953.toInt
val x16960 = x16956 * 10
val x16961 = x16960 + x16954
x16927 = x16961
x16928 = false
val x16948 = x16940 + 1
x16929 = x16948
x16933 = x16948
()
} else {
x16932 = false
()
}
x16970
}
x16972
}
val x16975 = x16927
val x16976 = x16928
val x16977 = x16929
val x16982 = if (x16976) {
true
} else {
false
}
val x16991 = if (x16982) {
false
} else {
false
}
val x16996 = if (x16991) {
true
} else {
false
}
val x17020 = if (x16996) {
x161
} else {
val x16995 = if (x16991) {
x935
} else {
val x16753 = x16382.res
val x16754 = new OptionAnon1863173035(x16753,true)
val x16757 = new Tuple2StringOptionAnon1863173035(x15910,x16754)
x16757
}
val x17001 = x16995._2
val x17002 = x17001.defined
val x17012 = if (x17002) {
val x17003 = x17001.value
val x17005 = x17003.schema
x17005
} else {
""
}
val x17013 = if (x17002) {
val x17003 = x17001.value
val x17006 = x17003.hostName
x17006
} else {
""
}
val x17000 = x16995._1
val x17004 = "/"+x17000
val x17014 = if (x17002) {
x17004
} else {
x17004
}
val x17015 = if (x17002) {
val x17003 = x17001.value
val x17007 = x17003.queryString
x17007
} else {
""
}
val x17016 = if (x17002) {
val x17003 = x17001.value
val x17008 = x17003.fragment
x17008
} else {
""
}
val x17017 = if (x17002) {
val x17003 = x17001.value
val x17009 = x17003.port
x17009
} else {
80
}
val x17018 = new Anon1863173035(x17012,x17013,x17014,x17015,x17016,x17017)
x17018
}
x15848 = x17020
val x17021 = if (x16996) {
true
} else {
false
}
x15849 = x17021
val x16997 = if (x16991) {
x15856
} else {
val x16983 = if (x16976) {
x16824
} else {
x16977
}
val x16992 = if (x16982) {
x16983
} else {
x16983
}
x16992
}
val x17022 = if (x16996) {
x16997
} else {
x16997
}
x15850 = x17022
()
} else {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16824
()
}
x17032
}
x17034
}
x17036
} else {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
}
x17042
}
x17044
} else {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
}
x17050
}
x17052
} else {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
}
x17058
}
x17060
} else {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
}
x17066
}
x17068
} else {
val x16770 = "/"+x15910
val x16753 = x16382.res
val x16771 = x16753.schema
val x16772 = x16753.hostName
val x16773 = x16753.queryString
val x16774 = x16753.fragment
val x16775 = x16753.port
val x16776 = new Anon1863173035(x16771,x16772,x16770,x16773,x16774,x16775)
x15848 = x16776
x15849 = false
x15850 = x16755
()
}
x17074
}
x17076
}
x17078
}
x17080
} else {
x15848 = x161
x15849 = true
x15850 = x15846
()
}
x17086
}
val x17089 = x15848
val x17090 = x15849
val x17091 = x15850
val x17092 = new ParseResultAnon1863173035(x17089,x17090,x17091)
x17092
}
val x17420 = x17094(x15816)
val x17421 = x17420.empty
val x17478 = if (x17421) {
val x17419 = {x17095: (Int) => 
var x17097: Anon1863173035 = x161
var x17098: Boolean = true
var x17099: Int = x17095
val x17101 = x17095 >= x3954
val x17413 = if (x17101) {
x17097 = x161
x17098 = true
x17099 = x17095
()
} else {
val x17103 = x3943(x17095)
val x17104 = x17103 == '?'
val x17411 = if (x17104) {
var x17112: java.lang.String = ""
var x17113: Boolean = false
val x17105 = x17095 + 1
var x17114: Int = x17105
var x17116: Int = -1
var x17117: Boolean = true
var x17118: Int = x17105
val x17152 = while ({val x17119 = x17117
val x17120 = x17116
val x17121 = x17118
val x17122 = x17120 != x17121
val x17123 = x17119 && x17122
x17123}) {
val x17125 = x17118
x17116 = x17125
val x17127 = x17125 >= x3954
val x17150 = if (x17127) {
x17117 = false
()
} else {
val x17129 = x3943(x17125)
val x17130 = x17129 == '?'
val x17148 = if (x17130) {
val x17135 = x17112
val x17136 = x17113
val x17137 = x17114
val x17139 = x17135+x17129
x17112 = x17139
x17113 = false
val x17131 = x17125 + 1
x17114 = x17131
x17118 = x17131
()
} else {
x17117 = false
()
}
x17148
}
x17150
}
val x17153 = x17112
val x17154 = x17113
val x17155 = x17114
val x17405 = if (x17154) {
x17097 = x161
x17098 = true
x17099 = x17105
()
} else {
var x17171: java.lang.String = ""
var x17172: Boolean = false
var x17173: Int = x17155
var x17175: Int = -1
var x17176: Boolean = true
var x17177: Int = x17155
val x17215 = while ({val x17178 = x17176
val x17179 = x17175
val x17180 = x17177
val x17181 = x17179 != x17180
val x17182 = x17178 && x17181
x17182}) {
val x17184 = x17177
x17175 = x17184
val x17186 = x17184 >= x3954
val x17213 = if (x17186) {
x17176 = false
()
} else {
val x17188 = x3943(x17184)
val x17189 = x17188 > ' '
val x17190 = x17188 != '#'
val x17191 = x17189 && x17190
val x17192 = x17188 != ''
val x17193 = x17191 && x17192
val x17211 = if (x17193) {
val x17198 = x17171
val x17199 = x17172
val x17200 = x17173
val x17202 = x17198+x17188
x17171 = x17202
x17172 = false
val x17194 = x17184 + 1
x17173 = x17194
x17177 = x17194
()
} else {
x17176 = false
()
}
x17211
}
x17213
}
val x17216 = x17171
val x17217 = x17172
val x17218 = x17173
val x17403 = if (x17217) {
x17097 = x161
x17098 = true
x17099 = x17105
()
} else {
val x17220 = x17218 >= x3954
val x17401 = if (x17220) {
val x17234 = new Anon1863173035("","","",x17216,"",80)
x17097 = x17234
x17098 = false
x17099 = x17218
()
} else {
val x17222 = x3943(x17218)
val x17223 = x17222 == '#'
val x17399 = if (x17223) {
var x17241: java.lang.String = ""
var x17242: Boolean = false
val x17224 = x17218 + 1
var x17243: Int = x17224
var x17245: Int = -1
var x17246: Boolean = true
var x17247: Int = x17224
val x17281 = while ({val x17248 = x17246
val x17249 = x17245
val x17250 = x17247
val x17251 = x17249 != x17250
val x17252 = x17248 && x17251
x17252}) {
val x17254 = x17247
x17245 = x17254
val x17256 = x17254 >= x3954
val x17279 = if (x17256) {
x17246 = false
()
} else {
val x17258 = x3943(x17254)
val x17259 = x17258 == '#'
val x17277 = if (x17259) {
val x17264 = x17241
val x17265 = x17242
val x17266 = x17243
val x17268 = x17264+x17258
x17241 = x17268
x17242 = false
val x17260 = x17254 + 1
x17243 = x17260
x17247 = x17260
()
} else {
x17246 = false
()
}
x17277
}
x17279
}
val x17282 = x17241
val x17283 = x17242
val x17284 = x17243
val x17393 = if (x17283) {
val x17234 = new Anon1863173035("","","",x17216,"",80)
x17097 = x17234
x17098 = false
x17099 = x17224
()
} else {
var x17296: java.lang.String = ""
var x17297: Boolean = false
var x17298: Int = x17284
var x17300: Int = -1
var x17301: Boolean = true
var x17302: Int = x17284
val x17338 = while ({val x17303 = x17301
val x17304 = x17300
val x17305 = x17302
val x17306 = x17304 != x17305
val x17307 = x17303 && x17306
x17307}) {
val x17309 = x17302
x17300 = x17309
val x17311 = x17309 >= x3954
val x17336 = if (x17311) {
x17301 = false
()
} else {
val x17313 = x3943(x17309)
val x17314 = x17313 > ' '
val x17315 = x17313 != ''
val x17316 = x17314 && x17315
val x17334 = if (x17316) {
val x17321 = x17296
val x17322 = x17297
val x17323 = x17298
val x17325 = x17321+x17313
x17296 = x17325
x17297 = false
val x17317 = x17309 + 1
x17298 = x17317
x17302 = x17317
()
} else {
x17301 = false
()
}
x17334
}
x17336
}
val x17339 = x17296
val x17340 = x17297
val x17341 = x17298
val x17347 = if (x17340) {
true
} else {
false
}
val x17356 = if (x17347) {
false
} else {
false
}
val x17362 = if (x17356) {
true
} else {
false
}
val x17385 = if (x17362) {
x161
} else {
val x17361 = if (x17356) {
x935
} else {
val x17353 = if (x17347) {
x161
} else {
val x17346 = if (x17340) {
x161
} else {
val x17344 = new Anon1863173035("","","","",x17339,80)
x17344
}
x17346
}
val x17354 = if (x17347) {
false
} else {
true
}
val x17355 = new OptionAnon1863173035(x17353,x17354)
val x17359 = new Tuple2StringOptionAnon1863173035(x17216,x17355)
x17359
}
val x17367 = x17361._2
val x17368 = x17367.defined
val x17377 = if (x17368) {
val x17369 = x17367.value
val x17370 = x17369.schema
x17370
} else {
""
}
val x17378 = if (x17368) {
val x17369 = x17367.value
val x17371 = x17369.hostName
x17371
} else {
""
}
val x17379 = if (x17368) {
val x17369 = x17367.value
val x17372 = x17369.path
x17372
} else {
""
}
val x17366 = x17361._1
val x17380 = if (x17368) {
x17366
} else {
x17366
}
val x17381 = if (x17368) {
val x17369 = x17367.value
val x17373 = x17369.fragment
x17373
} else {
""
}
val x17382 = if (x17368) {
val x17369 = x17367.value
val x17374 = x17369.port
x17374
} else {
80
}
val x17383 = new Anon1863173035(x17377,x17378,x17379,x17380,x17381,x17382)
x17383
}
x17097 = x17385
val x17386 = if (x17362) {
true
} else {
false
}
x17098 = x17386
val x17363 = if (x17356) {
x17105
} else {
val x17348 = if (x17340) {
x17341
} else {
x17341
}
val x17357 = if (x17347) {
x17348
} else {
x17348
}
x17357
}
val x17387 = if (x17362) {
x17363
} else {
x17363
}
x17099 = x17387
()
}
x17393
} else {
val x17234 = new Anon1863173035("","","",x17216,"",80)
x17097 = x17234
x17098 = false
x17099 = x17218
()
}
x17399
}
x17401
}
x17403
}
x17405
} else {
x17097 = x161
x17098 = true
x17099 = x17095
()
}
x17411
}
val x17414 = x17097
val x17415 = x17098
val x17416 = x17099
val x17417 = new ParseResultAnon1863173035(x17414,x17415,x17416)
x17417
}
val x17422 = x17419(x15816)
val x17423 = x17422.empty
val x17429 = if (x17423) {
true
} else {
false
}
val x17455 = if (x17429) {
x161
} else {
val x17428 = if (x17423) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x1006 = new OptionAnon1863173035(x161,false)
val x15843 = x4178.res
val x15844 = new Tuple2StringOptionAnon1863173035(x15843,x1006)
val x17424 = x17422.res
val x17425 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x15844,x17424)
x17425
}
val x17433 = x17428._1
val x17435 = x17433._1
val x17436 = x17433._2
val x17437 = x17436.defined
val x17447 = if (x17437) {
x17435
} else {
x17435
}
val x17434 = x17428._2
val x17448 = if (x17437) {
val x17438 = x17436.value
val x17439 = x17438.hostName
x17439
} else {
val x17445 = x17434.hostName
x17445
}
val x17440 = x17434.path
val x17449 = if (x17437) {
x17440
} else {
x17440
}
val x17441 = x17434.queryString
val x17450 = if (x17437) {
x17441
} else {
x17441
}
val x17442 = x17434.fragment
val x17451 = if (x17437) {
x17442
} else {
x17442
}
val x17443 = x17434.port
val x17452 = if (x17437) {
x17443
} else {
x17443
}
val x17453 = new Anon1863173035(x17447,x17448,x17449,x17450,x17451,x17452)
x17453
}
x3944 = x17455
val x17456 = if (x17429) {
true
} else {
false
}
x3945 = x17456
val x17430 = if (x17423) {
0
} else {
val x17426 = x17422.next
x17426
}
val x17457 = if (x17429) {
x17430
} else {
x17430
}
x3946 = x17457
()
} else {
val x15843 = x4178.res
val x17463 = x17420.res
val x17467 = x17463.hostName
val x17468 = x17463.path
val x17469 = x17463.queryString
val x17470 = x17463.fragment
val x17471 = x17463.port
val x17472 = new Anon1863173035(x15843,x17467,x17468,x17469,x17470,x17471)
x3944 = x17472
x3945 = false
val x17465 = x17420.next
x3946 = x17465
()
}
x17478
} else {
val x15819 = x3943(x15816)
val x15820 = x15819 >= '0'
val x15821 = x15819 <= '9'
val x15822 = x15820 && x15821
val x15823 = x15819 >= 'a'
val x15824 = x15819 <= 'z'
val x15825 = x15823 && x15824
val x15826 = x15819 >= 'A'
val x15827 = x15819 <= 'Z'
val x15828 = x15826 && x15827
val x15829 = x15825 || x15828
val x15830 = x15822 || x15829
val x15831 = x15819 == '-'
val x15832 = x15830 || x15831
val x15833 = x15819 == '.'
val x15834 = x15832 || x15833
val x25863 = if (x15834) {
var x17481: java.lang.String = ""
var x17482: Boolean = false
val x15835 = x15816 + 1
var x17483: Int = x15835
var x17485: Int = -1
var x17486: Boolean = true
var x17487: Int = x15835
val x17535 = while ({val x17488 = x17486
val x17489 = x17485
val x17490 = x17487
val x17491 = x17489 != x17490
val x17492 = x17488 && x17491
x17492}) {
val x17494 = x17487
x17485 = x17494
val x17496 = x17494 >= x3954
val x17533 = if (x17496) {
x17486 = false
()
} else {
val x17498 = x3943(x17494)
val x17499 = x17498 >= '0'
val x17500 = x17498 <= '9'
val x17501 = x17499 && x17500
val x17502 = x17498 >= 'a'
val x17503 = x17498 <= 'z'
val x17504 = x17502 && x17503
val x17505 = x17498 >= 'A'
val x17506 = x17498 <= 'Z'
val x17507 = x17505 && x17506
val x17508 = x17504 || x17507
val x17509 = x17501 || x17508
val x17510 = x17498 == '-'
val x17511 = x17509 || x17510
val x17512 = x17498 == '.'
val x17513 = x17511 || x17512
val x17531 = if (x17513) {
val x17518 = x17481
val x17519 = x17482
val x17520 = x17483
val x17522 = x17518+x17498
x17481 = x17522
x17482 = false
val x17514 = x17494 + 1
x17483 = x17514
x17487 = x17514
()
} else {
x17486 = false
()
}
x17531
}
x17533
}
val x17536 = x17481
val x17537 = x17482
val x17538 = x17483
val x17543 = if (x17537) {
true
} else {
false
}
val x17552 = if (x17543) {
true
} else {
false
}
val x24227 = if (x17552) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x17954 = {x17630: (Int) => 
var x17632: Anon1863173035 = x161
var x17633: Boolean = true
var x17634: Int = x17630
val x17636 = x17630 >= x3954
val x17948 = if (x17636) {
x17632 = x161
x17633 = true
x17634 = x17630
()
} else {
val x17638 = x3943(x17630)
val x17639 = x17638 == '?'
val x17946 = if (x17639) {
var x17647: java.lang.String = ""
var x17648: Boolean = false
val x17640 = x17630 + 1
var x17649: Int = x17640
var x17651: Int = -1
var x17652: Boolean = true
var x17653: Int = x17640
val x17687 = while ({val x17654 = x17652
val x17655 = x17651
val x17656 = x17653
val x17657 = x17655 != x17656
val x17658 = x17654 && x17657
x17658}) {
val x17660 = x17653
x17651 = x17660
val x17662 = x17660 >= x3954
val x17685 = if (x17662) {
x17652 = false
()
} else {
val x17664 = x3943(x17660)
val x17665 = x17664 == '?'
val x17683 = if (x17665) {
val x17670 = x17647
val x17671 = x17648
val x17672 = x17649
val x17674 = x17670+x17664
x17647 = x17674
x17648 = false
val x17666 = x17660 + 1
x17649 = x17666
x17653 = x17666
()
} else {
x17652 = false
()
}
x17683
}
x17685
}
val x17688 = x17647
val x17689 = x17648
val x17690 = x17649
val x17940 = if (x17689) {
x17632 = x161
x17633 = true
x17634 = x17640
()
} else {
var x17706: java.lang.String = ""
var x17707: Boolean = false
var x17708: Int = x17690
var x17710: Int = -1
var x17711: Boolean = true
var x17712: Int = x17690
val x17750 = while ({val x17713 = x17711
val x17714 = x17710
val x17715 = x17712
val x17716 = x17714 != x17715
val x17717 = x17713 && x17716
x17717}) {
val x17719 = x17712
x17710 = x17719
val x17721 = x17719 >= x3954
val x17748 = if (x17721) {
x17711 = false
()
} else {
val x17723 = x3943(x17719)
val x17724 = x17723 > ' '
val x17725 = x17723 != '#'
val x17726 = x17724 && x17725
val x17727 = x17723 != ''
val x17728 = x17726 && x17727
val x17746 = if (x17728) {
val x17733 = x17706
val x17734 = x17707
val x17735 = x17708
val x17737 = x17733+x17723
x17706 = x17737
x17707 = false
val x17729 = x17719 + 1
x17708 = x17729
x17712 = x17729
()
} else {
x17711 = false
()
}
x17746
}
x17748
}
val x17751 = x17706
val x17752 = x17707
val x17753 = x17708
val x17938 = if (x17752) {
x17632 = x161
x17633 = true
x17634 = x17640
()
} else {
val x17755 = x17753 >= x3954
val x17936 = if (x17755) {
val x17769 = new Anon1863173035("","","",x17751,"",80)
x17632 = x17769
x17633 = false
x17634 = x17753
()
} else {
val x17757 = x3943(x17753)
val x17758 = x17757 == '#'
val x17934 = if (x17758) {
var x17776: java.lang.String = ""
var x17777: Boolean = false
val x17759 = x17753 + 1
var x17778: Int = x17759
var x17780: Int = -1
var x17781: Boolean = true
var x17782: Int = x17759
val x17816 = while ({val x17783 = x17781
val x17784 = x17780
val x17785 = x17782
val x17786 = x17784 != x17785
val x17787 = x17783 && x17786
x17787}) {
val x17789 = x17782
x17780 = x17789
val x17791 = x17789 >= x3954
val x17814 = if (x17791) {
x17781 = false
()
} else {
val x17793 = x3943(x17789)
val x17794 = x17793 == '#'
val x17812 = if (x17794) {
val x17799 = x17776
val x17800 = x17777
val x17801 = x17778
val x17803 = x17799+x17793
x17776 = x17803
x17777 = false
val x17795 = x17789 + 1
x17778 = x17795
x17782 = x17795
()
} else {
x17781 = false
()
}
x17812
}
x17814
}
val x17817 = x17776
val x17818 = x17777
val x17819 = x17778
val x17928 = if (x17818) {
val x17769 = new Anon1863173035("","","",x17751,"",80)
x17632 = x17769
x17633 = false
x17634 = x17759
()
} else {
var x17831: java.lang.String = ""
var x17832: Boolean = false
var x17833: Int = x17819
var x17835: Int = -1
var x17836: Boolean = true
var x17837: Int = x17819
val x17873 = while ({val x17838 = x17836
val x17839 = x17835
val x17840 = x17837
val x17841 = x17839 != x17840
val x17842 = x17838 && x17841
x17842}) {
val x17844 = x17837
x17835 = x17844
val x17846 = x17844 >= x3954
val x17871 = if (x17846) {
x17836 = false
()
} else {
val x17848 = x3943(x17844)
val x17849 = x17848 > ' '
val x17850 = x17848 != ''
val x17851 = x17849 && x17850
val x17869 = if (x17851) {
val x17856 = x17831
val x17857 = x17832
val x17858 = x17833
val x17860 = x17856+x17848
x17831 = x17860
x17832 = false
val x17852 = x17844 + 1
x17833 = x17852
x17837 = x17852
()
} else {
x17836 = false
()
}
x17869
}
x17871
}
val x17874 = x17831
val x17875 = x17832
val x17876 = x17833
val x17882 = if (x17875) {
true
} else {
false
}
val x17891 = if (x17882) {
false
} else {
false
}
val x17897 = if (x17891) {
true
} else {
false
}
val x17920 = if (x17897) {
x161
} else {
val x17896 = if (x17891) {
x935
} else {
val x17888 = if (x17882) {
x161
} else {
val x17881 = if (x17875) {
x161
} else {
val x17879 = new Anon1863173035("","","","",x17874,80)
x17879
}
x17881
}
val x17889 = if (x17882) {
false
} else {
true
}
val x17890 = new OptionAnon1863173035(x17888,x17889)
val x17894 = new Tuple2StringOptionAnon1863173035(x17751,x17890)
x17894
}
val x17902 = x17896._2
val x17903 = x17902.defined
val x17912 = if (x17903) {
val x17904 = x17902.value
val x17905 = x17904.schema
x17905
} else {
""
}
val x17913 = if (x17903) {
val x17904 = x17902.value
val x17906 = x17904.hostName
x17906
} else {
""
}
val x17914 = if (x17903) {
val x17904 = x17902.value
val x17907 = x17904.path
x17907
} else {
""
}
val x17901 = x17896._1
val x17915 = if (x17903) {
x17901
} else {
x17901
}
val x17916 = if (x17903) {
val x17904 = x17902.value
val x17908 = x17904.fragment
x17908
} else {
""
}
val x17917 = if (x17903) {
val x17904 = x17902.value
val x17909 = x17904.port
x17909
} else {
80
}
val x17918 = new Anon1863173035(x17912,x17913,x17914,x17915,x17916,x17917)
x17918
}
x17632 = x17920
val x17921 = if (x17897) {
true
} else {
false
}
x17633 = x17921
val x17898 = if (x17891) {
x17640
} else {
val x17883 = if (x17875) {
x17876
} else {
x17876
}
val x17892 = if (x17882) {
x17883
} else {
x17883
}
x17892
}
val x17922 = if (x17897) {
x17898
} else {
x17898
}
x17634 = x17922
()
}
x17928
} else {
val x17769 = new Anon1863173035("","","",x17751,"",80)
x17632 = x17769
x17633 = false
x17634 = x17753
()
}
x17934
}
x17936
}
x17938
}
x17940
} else {
x17632 = x161
x17633 = true
x17634 = x17630
()
}
x17946
}
val x17949 = x17632
val x17950 = x17633
val x17951 = x17634
val x17952 = new ParseResultAnon1863173035(x17949,x17950,x17951)
x17952
}
val x18096 = {x17955: (Int) => 
var x17957: Anon1863173035 = x161
var x17958: Boolean = true
var x17959: Int = x17955
val x17961 = x17955 >= x3954
val x18090 = if (x17961) {
x17957 = x161
x17958 = true
x17959 = x17955
()
} else {
val x17963 = x3943(x17955)
val x17964 = x17963 == '#'
val x18088 = if (x17964) {
var x17972: java.lang.String = ""
var x17973: Boolean = false
val x17965 = x17955 + 1
var x17974: Int = x17965
var x17976: Int = -1
var x17977: Boolean = true
var x17978: Int = x17965
val x18012 = while ({val x17979 = x17977
val x17980 = x17976
val x17981 = x17978
val x17982 = x17980 != x17981
val x17983 = x17979 && x17982
x17983}) {
val x17985 = x17978
x17976 = x17985
val x17987 = x17985 >= x3954
val x18010 = if (x17987) {
x17977 = false
()
} else {
val x17989 = x3943(x17985)
val x17990 = x17989 == '#'
val x18008 = if (x17990) {
val x17995 = x17972
val x17996 = x17973
val x17997 = x17974
val x17999 = x17995+x17989
x17972 = x17999
x17973 = false
val x17991 = x17985 + 1
x17974 = x17991
x17978 = x17991
()
} else {
x17977 = false
()
}
x18008
}
x18010
}
val x18013 = x17972
val x18014 = x17973
val x18015 = x17974
val x18082 = if (x18014) {
x17957 = x161
x17958 = true
x17959 = x17965
()
} else {
var x18024: java.lang.String = ""
var x18025: Boolean = false
var x18026: Int = x18015
var x18028: Int = -1
var x18029: Boolean = true
var x18030: Int = x18015
val x18066 = while ({val x18031 = x18029
val x18032 = x18028
val x18033 = x18030
val x18034 = x18032 != x18033
val x18035 = x18031 && x18034
x18035}) {
val x18037 = x18030
x18028 = x18037
val x18039 = x18037 >= x3954
val x18064 = if (x18039) {
x18029 = false
()
} else {
val x18041 = x3943(x18037)
val x18042 = x18041 > ' '
val x18043 = x18041 != ''
val x18044 = x18042 && x18043
val x18062 = if (x18044) {
val x18049 = x18024
val x18050 = x18025
val x18051 = x18026
val x18053 = x18049+x18041
x18024 = x18053
x18025 = false
val x18045 = x18037 + 1
x18026 = x18045
x18030 = x18045
()
} else {
x18029 = false
()
}
x18062
}
x18064
}
val x18067 = x18024
val x18068 = x18025
val x18069 = x18026
val x18074 = if (x18068) {
x161
} else {
val x18072 = new Anon1863173035("","","","",x18067,80)
x18072
}
x17957 = x18074
val x18075 = if (x18068) {
true
} else {
false
}
x17958 = x18075
val x18076 = if (x18068) {
x18069
} else {
x18069
}
x17959 = x18076
()
}
x18082
} else {
x17957 = x161
x17958 = true
x17959 = x17955
()
}
x18088
}
val x18091 = x17957
val x18092 = x17958
val x18093 = x17959
val x18094 = new ParseResultAnon1863173035(x18091,x18092,x18093)
x18094
}
val x18809 = {x17561: (Int) => 
var x17563: Anon1863173035 = x161
var x17564: Boolean = true
var x17565: Int = x17561
val x17567 = x17561 >= x3954
val x18803 = if (x17567) {
x17563 = x161
x17564 = true
x17565 = x17561
()
} else {
val x17569 = x3943(x17561)
val x17570 = x17569 == '/'
val x18801 = if (x17570) {
var x17578: java.lang.String = ""
var x17579: Boolean = false
val x17571 = x17561 + 1
var x17580: Int = x17571
var x17582: Int = -1
var x17583: Boolean = true
var x17584: Int = x17571
val x17624 = while ({val x17585 = x17583
val x17586 = x17582
val x17587 = x17584
val x17588 = x17586 != x17587
val x17589 = x17585 && x17588
x17589}) {
val x17591 = x17584
x17582 = x17591
val x17593 = x17591 >= x3954
val x17622 = if (x17593) {
x17583 = false
()
} else {
val x17595 = x3943(x17591)
val x17596 = x17595 > ' '
val x17597 = x17595 != '#'
val x17598 = x17596 && x17597
val x17599 = x17595 != '?'
val x17600 = x17598 && x17599
val x17601 = x17595 != ''
val x17602 = x17600 && x17601
val x17620 = if (x17602) {
val x17607 = x17578
val x17608 = x17579
val x17609 = x17580
val x17611 = x17607+x17595
x17578 = x17611
x17579 = false
val x17603 = x17591 + 1
x17580 = x17603
x17584 = x17603
()
} else {
x17583 = false
()
}
x17620
}
x17622
}
val x17625 = x17578
val x17626 = x17579
val x17627 = x17580
val x18795 = if (x17626) {
x17563 = x161
x17564 = true
x17565 = x17571
()
} else {
val x18097 = x17954(x17627)
val x18109 = x18097.empty
val x18793 = if (x18109) {
val x18110 = x18096(x17627)
val x18111 = x18110.empty
val x18120 = if (x18111) {
false
} else {
false
}
val x18126 = if (x18120) {
true
} else {
false
}
val x18466 = if (x18126) {
x17563 = x161
x17564 = true
val x18127 = if (x18120) {
x17571
} else {
val x18112 = x18110.next
val x18121 = if (x18111) {
x18112
} else {
x18112
}
x18121
}
x17565 = x18127
()
} else {
val x18127 = if (x18120) {
x17571
} else {
val x18112 = x18110.next
val x18121 = if (x18111) {
x18112
} else {
x18112
}
x18121
}
val x18129 = x18127 >= x3954
val x18464 = if (x18129) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
} else {
val x18131 = x3943(x18127)
val x18132 = x18131 == 'H'
val x18462 = if (x18132) {
val x18133 = x18127 + 1
val x18170 = x18133 >= x3954
val x18456 = if (x18170) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
} else {
val x18172 = x3943(x18133)
val x18173 = x18172 == 'T'
val x18454 = if (x18173) {
val x18174 = x18133 + 1
val x18182 = x18174 >= x3954
val x18448 = if (x18182) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
} else {
val x18184 = x3943(x18174)
val x18185 = x18184 == 'T'
val x18446 = if (x18185) {
val x18186 = x18174 + 1
val x18195 = x18186 >= x3954
val x18440 = if (x18195) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
} else {
val x18197 = x3943(x18186)
val x18198 = x18197 == 'P'
val x18438 = if (x18198) {
val x18199 = x18186 + 1
val x18208 = x18199 >= x3954
val x18432 = if (x18208) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
} else {
val x18210 = x3943(x18199)
val x18211 = x18210 == '/'
val x18430 = if (x18211) {
var x18243: Int = 0
var x18244: Boolean = false
val x18212 = x18199 + 1
var x18245: Int = x18212
var x18247: Int = -1
var x18248: Boolean = true
var x18249: Int = x18212
val x18290 = while ({val x18250 = x18248
val x18251 = x18247
val x18252 = x18249
val x18253 = x18251 != x18252
val x18254 = x18250 && x18253
x18254}) {
val x18256 = x18249
x18247 = x18256
val x18258 = x18256 >= x3954
val x18288 = if (x18258) {
x18248 = false
()
} else {
val x18260 = x3943(x18256)
val x18261 = x18260 >= '0'
val x18262 = x18260 <= '9'
val x18263 = x18261 && x18262
val x18286 = if (x18263) {
val x18272 = x18243
val x18273 = x18244
val x18274 = x18245
val x18269 = x18260 - '0'
val x18270 = x18269.toInt
val x18276 = x18272 * 10
val x18277 = x18276 + x18270
x18243 = x18277
x18244 = false
val x18264 = x18256 + 1
x18245 = x18264
x18249 = x18264
()
} else {
x18248 = false
()
}
x18286
}
x18288
}
val x18291 = x18243
val x18292 = x18244
val x18293 = x18245
val x18424 = if (x18292) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18212
()
} else {
val x18296 = x18293 >= x3954
val x18422 = if (x18296) {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18212
()
} else {
val x18298 = x3943(x18293)
val x18299 = x18298 == '.'
val x18420 = if (x18299) {
var x18315: Int = 0
var x18316: Boolean = false
val x18300 = x18293 + 1
var x18317: Int = x18300
var x18319: Int = -1
var x18320: Boolean = true
var x18321: Int = x18300
val x18362 = while ({val x18322 = x18320
val x18323 = x18319
val x18324 = x18321
val x18325 = x18323 != x18324
val x18326 = x18322 && x18325
x18326}) {
val x18328 = x18321
x18319 = x18328
val x18330 = x18328 >= x3954
val x18360 = if (x18330) {
x18320 = false
()
} else {
val x18332 = x3943(x18328)
val x18333 = x18332 >= '0'
val x18334 = x18332 <= '9'
val x18335 = x18333 && x18334
val x18358 = if (x18335) {
val x18344 = x18315
val x18345 = x18316
val x18346 = x18317
val x18341 = x18332 - '0'
val x18342 = x18341.toInt
val x18348 = x18344 * 10
val x18349 = x18348 + x18342
x18315 = x18349
x18316 = false
val x18336 = x18328 + 1
x18317 = x18336
x18321 = x18336
()
} else {
x18320 = false
()
}
x18358
}
x18360
}
val x18363 = x18315
val x18364 = x18316
val x18365 = x18317
val x18370 = if (x18364) {
true
} else {
false
}
val x18379 = if (x18370) {
false
} else {
false
}
val x18384 = if (x18379) {
true
} else {
false
}
val x18408 = if (x18384) {
x161
} else {
val x18383 = if (x18379) {
x935
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
x18125
}
val x18389 = x18383._2
val x18390 = x18389.defined
val x18400 = if (x18390) {
val x18391 = x18389.value
val x18393 = x18391.schema
x18393
} else {
""
}
val x18401 = if (x18390) {
val x18391 = x18389.value
val x18394 = x18391.hostName
x18394
} else {
""
}
val x18388 = x18383._1
val x18392 = "/"+x18388
val x18402 = if (x18390) {
x18392
} else {
x18392
}
val x18403 = if (x18390) {
val x18391 = x18389.value
val x18395 = x18391.queryString
x18395
} else {
""
}
val x18404 = if (x18390) {
val x18391 = x18389.value
val x18396 = x18391.fragment
x18396
} else {
""
}
val x18405 = if (x18390) {
val x18391 = x18389.value
val x18397 = x18391.port
x18397
} else {
80
}
val x18406 = new Anon1863173035(x18400,x18401,x18402,x18403,x18404,x18405)
x18406
}
x17563 = x18408
val x18409 = if (x18384) {
true
} else {
false
}
x17564 = x18409
val x18385 = if (x18379) {
x17571
} else {
val x18371 = if (x18364) {
x18212
} else {
x18365
}
val x18380 = if (x18370) {
x18371
} else {
x18371
}
x18380
}
val x18410 = if (x18384) {
x18385
} else {
x18385
}
x17565 = x18410
()
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18212
()
}
x18420
}
x18422
}
x18424
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
}
x18430
}
x18432
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
}
x18438
}
x18440
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
}
x18446
}
x18448
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
}
x18454
}
x18456
} else {
val x18125 = if (x18120) {
x935
} else {
val x18117 = if (x18111) {
x161
} else {
val x18114 = x18110.res
x18114
}
val x18118 = if (x18111) {
false
} else {
true
}
val x18119 = new OptionAnon1863173035(x18117,x18118)
val x18123 = new Tuple2StringOptionAnon1863173035(x17625,x18119)
x18123
}
val x18147 = x18125._2
val x18148 = x18147.defined
val x18158 = if (x18148) {
val x18149 = x18147.value
val x18151 = x18149.schema
x18151
} else {
""
}
val x18159 = if (x18148) {
val x18149 = x18147.value
val x18152 = x18149.hostName
x18152
} else {
""
}
val x18146 = x18125._1
val x18150 = "/"+x18146
val x18160 = if (x18148) {
x18150
} else {
x18150
}
val x18161 = if (x18148) {
val x18149 = x18147.value
val x18153 = x18149.queryString
x18153
} else {
""
}
val x18162 = if (x18148) {
val x18149 = x18147.value
val x18154 = x18149.fragment
x18154
} else {
""
}
val x18163 = if (x18148) {
val x18149 = x18147.value
val x18155 = x18149.port
x18155
} else {
80
}
val x18164 = new Anon1863173035(x18158,x18159,x18160,x18161,x18162,x18163)
x17563 = x18164
x17564 = false
x17565 = x18127
()
}
x18462
}
x18464
}
x18466
} else {
val x18470 = x18097.next
val x18474 = x18470 >= x3954
val x18791 = if (x18474) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
} else {
val x18476 = x3943(x18470)
val x18477 = x18476 == 'H'
val x18789 = if (x18477) {
val x18478 = x18470 + 1
val x18497 = x18478 >= x3954
val x18783 = if (x18497) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
} else {
val x18499 = x3943(x18478)
val x18500 = x18499 == 'T'
val x18781 = if (x18500) {
val x18501 = x18478 + 1
val x18509 = x18501 >= x3954
val x18775 = if (x18509) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
} else {
val x18511 = x3943(x18501)
val x18512 = x18511 == 'T'
val x18773 = if (x18512) {
val x18513 = x18501 + 1
val x18522 = x18513 >= x3954
val x18767 = if (x18522) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
} else {
val x18524 = x3943(x18513)
val x18525 = x18524 == 'P'
val x18765 = if (x18525) {
val x18526 = x18513 + 1
val x18535 = x18526 >= x3954
val x18759 = if (x18535) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
} else {
val x18537 = x3943(x18526)
val x18538 = x18537 == '/'
val x18757 = if (x18538) {
var x18570: Int = 0
var x18571: Boolean = false
val x18539 = x18526 + 1
var x18572: Int = x18539
var x18574: Int = -1
var x18575: Boolean = true
var x18576: Int = x18539
val x18617 = while ({val x18577 = x18575
val x18578 = x18574
val x18579 = x18576
val x18580 = x18578 != x18579
val x18581 = x18577 && x18580
x18581}) {
val x18583 = x18576
x18574 = x18583
val x18585 = x18583 >= x3954
val x18615 = if (x18585) {
x18575 = false
()
} else {
val x18587 = x3943(x18583)
val x18588 = x18587 >= '0'
val x18589 = x18587 <= '9'
val x18590 = x18588 && x18589
val x18613 = if (x18590) {
val x18599 = x18570
val x18600 = x18571
val x18601 = x18572
val x18596 = x18587 - '0'
val x18597 = x18596.toInt
val x18603 = x18599 * 10
val x18604 = x18603 + x18597
x18570 = x18604
x18571 = false
val x18591 = x18583 + 1
x18572 = x18591
x18576 = x18591
()
} else {
x18575 = false
()
}
x18613
}
x18615
}
val x18618 = x18570
val x18619 = x18571
val x18620 = x18572
val x18751 = if (x18619) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18539
()
} else {
val x18623 = x18620 >= x3954
val x18749 = if (x18623) {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18539
()
} else {
val x18625 = x3943(x18620)
val x18626 = x18625 == '.'
val x18747 = if (x18626) {
var x18642: Int = 0
var x18643: Boolean = false
val x18627 = x18620 + 1
var x18644: Int = x18627
var x18646: Int = -1
var x18647: Boolean = true
var x18648: Int = x18627
val x18689 = while ({val x18649 = x18647
val x18650 = x18646
val x18651 = x18648
val x18652 = x18650 != x18651
val x18653 = x18649 && x18652
x18653}) {
val x18655 = x18648
x18646 = x18655
val x18657 = x18655 >= x3954
val x18687 = if (x18657) {
x18647 = false
()
} else {
val x18659 = x3943(x18655)
val x18660 = x18659 >= '0'
val x18661 = x18659 <= '9'
val x18662 = x18660 && x18661
val x18685 = if (x18662) {
val x18671 = x18642
val x18672 = x18643
val x18673 = x18644
val x18668 = x18659 - '0'
val x18669 = x18668.toInt
val x18675 = x18671 * 10
val x18676 = x18675 + x18669
x18642 = x18676
x18643 = false
val x18663 = x18655 + 1
x18644 = x18663
x18648 = x18663
()
} else {
x18647 = false
()
}
x18685
}
x18687
}
val x18690 = x18642
val x18691 = x18643
val x18692 = x18644
val x18697 = if (x18691) {
true
} else {
false
}
val x18706 = if (x18697) {
false
} else {
false
}
val x18711 = if (x18706) {
true
} else {
false
}
val x18735 = if (x18711) {
x161
} else {
val x18710 = if (x18706) {
x935
} else {
val x18468 = x18097.res
val x18469 = new OptionAnon1863173035(x18468,true)
val x18472 = new Tuple2StringOptionAnon1863173035(x17625,x18469)
x18472
}
val x18716 = x18710._2
val x18717 = x18716.defined
val x18727 = if (x18717) {
val x18718 = x18716.value
val x18720 = x18718.schema
x18720
} else {
""
}
val x18728 = if (x18717) {
val x18718 = x18716.value
val x18721 = x18718.hostName
x18721
} else {
""
}
val x18715 = x18710._1
val x18719 = "/"+x18715
val x18729 = if (x18717) {
x18719
} else {
x18719
}
val x18730 = if (x18717) {
val x18718 = x18716.value
val x18722 = x18718.queryString
x18722
} else {
""
}
val x18731 = if (x18717) {
val x18718 = x18716.value
val x18723 = x18718.fragment
x18723
} else {
""
}
val x18732 = if (x18717) {
val x18718 = x18716.value
val x18724 = x18718.port
x18724
} else {
80
}
val x18733 = new Anon1863173035(x18727,x18728,x18729,x18730,x18731,x18732)
x18733
}
x17563 = x18735
val x18736 = if (x18711) {
true
} else {
false
}
x17564 = x18736
val x18712 = if (x18706) {
x17571
} else {
val x18698 = if (x18691) {
x18539
} else {
x18692
}
val x18707 = if (x18697) {
x18698
} else {
x18698
}
x18707
}
val x18737 = if (x18711) {
x18712
} else {
x18712
}
x17565 = x18737
()
} else {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18539
()
}
x18747
}
x18749
}
x18751
} else {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
}
x18757
}
x18759
} else {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
}
x18765
}
x18767
} else {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
}
x18773
}
x18775
} else {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
}
x18781
}
x18783
} else {
val x18485 = "/"+x17625
val x18468 = x18097.res
val x18486 = x18468.schema
val x18487 = x18468.hostName
val x18488 = x18468.queryString
val x18489 = x18468.fragment
val x18490 = x18468.port
val x18491 = new Anon1863173035(x18486,x18487,x18485,x18488,x18489,x18490)
x17563 = x18491
x17564 = false
x17565 = x18470
()
}
x18789
}
x18791
}
x18793
}
x18795
} else {
x17563 = x161
x17564 = true
x17565 = x17561
()
}
x18801
}
val x18804 = x17563
val x18805 = x17564
val x18806 = x17565
val x18807 = new ParseResultAnon1863173035(x18804,x18805,x18806)
x18807
}
val x19135 = x18809(x15816)
val x19136 = x19135.empty
val x19193 = if (x19136) {
val x19134 = {x18810: (Int) => 
var x18812: Anon1863173035 = x161
var x18813: Boolean = true
var x18814: Int = x18810
val x18816 = x18810 >= x3954
val x19128 = if (x18816) {
x18812 = x161
x18813 = true
x18814 = x18810
()
} else {
val x18818 = x3943(x18810)
val x18819 = x18818 == '?'
val x19126 = if (x18819) {
var x18827: java.lang.String = ""
var x18828: Boolean = false
val x18820 = x18810 + 1
var x18829: Int = x18820
var x18831: Int = -1
var x18832: Boolean = true
var x18833: Int = x18820
val x18867 = while ({val x18834 = x18832
val x18835 = x18831
val x18836 = x18833
val x18837 = x18835 != x18836
val x18838 = x18834 && x18837
x18838}) {
val x18840 = x18833
x18831 = x18840
val x18842 = x18840 >= x3954
val x18865 = if (x18842) {
x18832 = false
()
} else {
val x18844 = x3943(x18840)
val x18845 = x18844 == '?'
val x18863 = if (x18845) {
val x18850 = x18827
val x18851 = x18828
val x18852 = x18829
val x18854 = x18850+x18844
x18827 = x18854
x18828 = false
val x18846 = x18840 + 1
x18829 = x18846
x18833 = x18846
()
} else {
x18832 = false
()
}
x18863
}
x18865
}
val x18868 = x18827
val x18869 = x18828
val x18870 = x18829
val x19120 = if (x18869) {
x18812 = x161
x18813 = true
x18814 = x18820
()
} else {
var x18886: java.lang.String = ""
var x18887: Boolean = false
var x18888: Int = x18870
var x18890: Int = -1
var x18891: Boolean = true
var x18892: Int = x18870
val x18930 = while ({val x18893 = x18891
val x18894 = x18890
val x18895 = x18892
val x18896 = x18894 != x18895
val x18897 = x18893 && x18896
x18897}) {
val x18899 = x18892
x18890 = x18899
val x18901 = x18899 >= x3954
val x18928 = if (x18901) {
x18891 = false
()
} else {
val x18903 = x3943(x18899)
val x18904 = x18903 > ' '
val x18905 = x18903 != '#'
val x18906 = x18904 && x18905
val x18907 = x18903 != ''
val x18908 = x18906 && x18907
val x18926 = if (x18908) {
val x18913 = x18886
val x18914 = x18887
val x18915 = x18888
val x18917 = x18913+x18903
x18886 = x18917
x18887 = false
val x18909 = x18899 + 1
x18888 = x18909
x18892 = x18909
()
} else {
x18891 = false
()
}
x18926
}
x18928
}
val x18931 = x18886
val x18932 = x18887
val x18933 = x18888
val x19118 = if (x18932) {
x18812 = x161
x18813 = true
x18814 = x18820
()
} else {
val x18935 = x18933 >= x3954
val x19116 = if (x18935) {
val x18949 = new Anon1863173035("","","",x18931,"",80)
x18812 = x18949
x18813 = false
x18814 = x18933
()
} else {
val x18937 = x3943(x18933)
val x18938 = x18937 == '#'
val x19114 = if (x18938) {
var x18956: java.lang.String = ""
var x18957: Boolean = false
val x18939 = x18933 + 1
var x18958: Int = x18939
var x18960: Int = -1
var x18961: Boolean = true
var x18962: Int = x18939
val x18996 = while ({val x18963 = x18961
val x18964 = x18960
val x18965 = x18962
val x18966 = x18964 != x18965
val x18967 = x18963 && x18966
x18967}) {
val x18969 = x18962
x18960 = x18969
val x18971 = x18969 >= x3954
val x18994 = if (x18971) {
x18961 = false
()
} else {
val x18973 = x3943(x18969)
val x18974 = x18973 == '#'
val x18992 = if (x18974) {
val x18979 = x18956
val x18980 = x18957
val x18981 = x18958
val x18983 = x18979+x18973
x18956 = x18983
x18957 = false
val x18975 = x18969 + 1
x18958 = x18975
x18962 = x18975
()
} else {
x18961 = false
()
}
x18992
}
x18994
}
val x18997 = x18956
val x18998 = x18957
val x18999 = x18958
val x19108 = if (x18998) {
val x18949 = new Anon1863173035("","","",x18931,"",80)
x18812 = x18949
x18813 = false
x18814 = x18939
()
} else {
var x19011: java.lang.String = ""
var x19012: Boolean = false
var x19013: Int = x18999
var x19015: Int = -1
var x19016: Boolean = true
var x19017: Int = x18999
val x19053 = while ({val x19018 = x19016
val x19019 = x19015
val x19020 = x19017
val x19021 = x19019 != x19020
val x19022 = x19018 && x19021
x19022}) {
val x19024 = x19017
x19015 = x19024
val x19026 = x19024 >= x3954
val x19051 = if (x19026) {
x19016 = false
()
} else {
val x19028 = x3943(x19024)
val x19029 = x19028 > ' '
val x19030 = x19028 != ''
val x19031 = x19029 && x19030
val x19049 = if (x19031) {
val x19036 = x19011
val x19037 = x19012
val x19038 = x19013
val x19040 = x19036+x19028
x19011 = x19040
x19012 = false
val x19032 = x19024 + 1
x19013 = x19032
x19017 = x19032
()
} else {
x19016 = false
()
}
x19049
}
x19051
}
val x19054 = x19011
val x19055 = x19012
val x19056 = x19013
val x19062 = if (x19055) {
true
} else {
false
}
val x19071 = if (x19062) {
false
} else {
false
}
val x19077 = if (x19071) {
true
} else {
false
}
val x19100 = if (x19077) {
x161
} else {
val x19076 = if (x19071) {
x935
} else {
val x19068 = if (x19062) {
x161
} else {
val x19061 = if (x19055) {
x161
} else {
val x19059 = new Anon1863173035("","","","",x19054,80)
x19059
}
x19061
}
val x19069 = if (x19062) {
false
} else {
true
}
val x19070 = new OptionAnon1863173035(x19068,x19069)
val x19074 = new Tuple2StringOptionAnon1863173035(x18931,x19070)
x19074
}
val x19082 = x19076._2
val x19083 = x19082.defined
val x19092 = if (x19083) {
val x19084 = x19082.value
val x19085 = x19084.schema
x19085
} else {
""
}
val x19093 = if (x19083) {
val x19084 = x19082.value
val x19086 = x19084.hostName
x19086
} else {
""
}
val x19094 = if (x19083) {
val x19084 = x19082.value
val x19087 = x19084.path
x19087
} else {
""
}
val x19081 = x19076._1
val x19095 = if (x19083) {
x19081
} else {
x19081
}
val x19096 = if (x19083) {
val x19084 = x19082.value
val x19088 = x19084.fragment
x19088
} else {
""
}
val x19097 = if (x19083) {
val x19084 = x19082.value
val x19089 = x19084.port
x19089
} else {
80
}
val x19098 = new Anon1863173035(x19092,x19093,x19094,x19095,x19096,x19097)
x19098
}
x18812 = x19100
val x19101 = if (x19077) {
true
} else {
false
}
x18813 = x19101
val x19078 = if (x19071) {
x18820
} else {
val x19063 = if (x19055) {
x19056
} else {
x19056
}
val x19072 = if (x19062) {
x19063
} else {
x19063
}
x19072
}
val x19102 = if (x19077) {
x19078
} else {
x19078
}
x18814 = x19102
()
}
x19108
} else {
val x18949 = new Anon1863173035("","","",x18931,"",80)
x18812 = x18949
x18813 = false
x18814 = x18933
()
}
x19114
}
x19116
}
x19118
}
x19120
} else {
x18812 = x161
x18813 = true
x18814 = x18810
()
}
x19126
}
val x19129 = x18812
val x19130 = x18813
val x19131 = x18814
val x19132 = new ParseResultAnon1863173035(x19129,x19130,x19131)
x19132
}
val x19137 = x19134(x15816)
val x19138 = x19137.empty
val x19144 = if (x19138) {
true
} else {
false
}
val x19170 = if (x19144) {
x161
} else {
val x19143 = if (x19138) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x1006 = new OptionAnon1863173035(x161,false)
val x15843 = x4178.res
val x15844 = new Tuple2StringOptionAnon1863173035(x15843,x1006)
val x19139 = x19137.res
val x19140 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x15844,x19139)
x19140
}
val x19148 = x19143._1
val x19150 = x19148._1
val x19151 = x19148._2
val x19152 = x19151.defined
val x19162 = if (x19152) {
x19150
} else {
x19150
}
val x19149 = x19143._2
val x19163 = if (x19152) {
val x19153 = x19151.value
val x19154 = x19153.hostName
x19154
} else {
val x19160 = x19149.hostName
x19160
}
val x19155 = x19149.path
val x19164 = if (x19152) {
x19155
} else {
x19155
}
val x19156 = x19149.queryString
val x19165 = if (x19152) {
x19156
} else {
x19156
}
val x19157 = x19149.fragment
val x19166 = if (x19152) {
x19157
} else {
x19157
}
val x19158 = x19149.port
val x19167 = if (x19152) {
x19158
} else {
x19158
}
val x19168 = new Anon1863173035(x19162,x19163,x19164,x19165,x19166,x19167)
x19168
}
x3944 = x19170
val x19171 = if (x19144) {
true
} else {
false
}
x3945 = x19171
val x19145 = if (x19138) {
0
} else {
val x19141 = x19137.next
x19141
}
val x19172 = if (x19144) {
x19145
} else {
x19145
}
x3946 = x19172
()
} else {
val x15843 = x4178.res
val x19178 = x19135.res
val x19182 = x19178.hostName
val x19183 = x19178.path
val x19184 = x19178.queryString
val x19185 = x19178.fragment
val x19186 = x19178.port
val x19187 = new Anon1863173035(x15843,x19182,x19183,x19184,x19185,x19186)
x3944 = x19187
x3945 = false
val x19180 = x19135.next
x3946 = x19180
()
}
x19193
} else {
val x17544 = if (x17537) {
x15816
} else {
x17538
}
val x17553 = if (x17543) {
x17544
} else {
x17544
}
val x17555 = x17553 >= x3954
val x24225 = if (x17555) {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x19598 = {x19274: (Int) => 
var x19276: Anon1863173035 = x161
var x19277: Boolean = true
var x19278: Int = x19274
val x19280 = x19274 >= x3954
val x19592 = if (x19280) {
x19276 = x161
x19277 = true
x19278 = x19274
()
} else {
val x19282 = x3943(x19274)
val x19283 = x19282 == '?'
val x19590 = if (x19283) {
var x19291: java.lang.String = ""
var x19292: Boolean = false
val x19284 = x19274 + 1
var x19293: Int = x19284
var x19295: Int = -1
var x19296: Boolean = true
var x19297: Int = x19284
val x19331 = while ({val x19298 = x19296
val x19299 = x19295
val x19300 = x19297
val x19301 = x19299 != x19300
val x19302 = x19298 && x19301
x19302}) {
val x19304 = x19297
x19295 = x19304
val x19306 = x19304 >= x3954
val x19329 = if (x19306) {
x19296 = false
()
} else {
val x19308 = x3943(x19304)
val x19309 = x19308 == '?'
val x19327 = if (x19309) {
val x19314 = x19291
val x19315 = x19292
val x19316 = x19293
val x19318 = x19314+x19308
x19291 = x19318
x19292 = false
val x19310 = x19304 + 1
x19293 = x19310
x19297 = x19310
()
} else {
x19296 = false
()
}
x19327
}
x19329
}
val x19332 = x19291
val x19333 = x19292
val x19334 = x19293
val x19584 = if (x19333) {
x19276 = x161
x19277 = true
x19278 = x19284
()
} else {
var x19350: java.lang.String = ""
var x19351: Boolean = false
var x19352: Int = x19334
var x19354: Int = -1
var x19355: Boolean = true
var x19356: Int = x19334
val x19394 = while ({val x19357 = x19355
val x19358 = x19354
val x19359 = x19356
val x19360 = x19358 != x19359
val x19361 = x19357 && x19360
x19361}) {
val x19363 = x19356
x19354 = x19363
val x19365 = x19363 >= x3954
val x19392 = if (x19365) {
x19355 = false
()
} else {
val x19367 = x3943(x19363)
val x19368 = x19367 > ' '
val x19369 = x19367 != '#'
val x19370 = x19368 && x19369
val x19371 = x19367 != ''
val x19372 = x19370 && x19371
val x19390 = if (x19372) {
val x19377 = x19350
val x19378 = x19351
val x19379 = x19352
val x19381 = x19377+x19367
x19350 = x19381
x19351 = false
val x19373 = x19363 + 1
x19352 = x19373
x19356 = x19373
()
} else {
x19355 = false
()
}
x19390
}
x19392
}
val x19395 = x19350
val x19396 = x19351
val x19397 = x19352
val x19582 = if (x19396) {
x19276 = x161
x19277 = true
x19278 = x19284
()
} else {
val x19399 = x19397 >= x3954
val x19580 = if (x19399) {
val x19413 = new Anon1863173035("","","",x19395,"",80)
x19276 = x19413
x19277 = false
x19278 = x19397
()
} else {
val x19401 = x3943(x19397)
val x19402 = x19401 == '#'
val x19578 = if (x19402) {
var x19420: java.lang.String = ""
var x19421: Boolean = false
val x19403 = x19397 + 1
var x19422: Int = x19403
var x19424: Int = -1
var x19425: Boolean = true
var x19426: Int = x19403
val x19460 = while ({val x19427 = x19425
val x19428 = x19424
val x19429 = x19426
val x19430 = x19428 != x19429
val x19431 = x19427 && x19430
x19431}) {
val x19433 = x19426
x19424 = x19433
val x19435 = x19433 >= x3954
val x19458 = if (x19435) {
x19425 = false
()
} else {
val x19437 = x3943(x19433)
val x19438 = x19437 == '#'
val x19456 = if (x19438) {
val x19443 = x19420
val x19444 = x19421
val x19445 = x19422
val x19447 = x19443+x19437
x19420 = x19447
x19421 = false
val x19439 = x19433 + 1
x19422 = x19439
x19426 = x19439
()
} else {
x19425 = false
()
}
x19456
}
x19458
}
val x19461 = x19420
val x19462 = x19421
val x19463 = x19422
val x19572 = if (x19462) {
val x19413 = new Anon1863173035("","","",x19395,"",80)
x19276 = x19413
x19277 = false
x19278 = x19403
()
} else {
var x19475: java.lang.String = ""
var x19476: Boolean = false
var x19477: Int = x19463
var x19479: Int = -1
var x19480: Boolean = true
var x19481: Int = x19463
val x19517 = while ({val x19482 = x19480
val x19483 = x19479
val x19484 = x19481
val x19485 = x19483 != x19484
val x19486 = x19482 && x19485
x19486}) {
val x19488 = x19481
x19479 = x19488
val x19490 = x19488 >= x3954
val x19515 = if (x19490) {
x19480 = false
()
} else {
val x19492 = x3943(x19488)
val x19493 = x19492 > ' '
val x19494 = x19492 != ''
val x19495 = x19493 && x19494
val x19513 = if (x19495) {
val x19500 = x19475
val x19501 = x19476
val x19502 = x19477
val x19504 = x19500+x19492
x19475 = x19504
x19476 = false
val x19496 = x19488 + 1
x19477 = x19496
x19481 = x19496
()
} else {
x19480 = false
()
}
x19513
}
x19515
}
val x19518 = x19475
val x19519 = x19476
val x19520 = x19477
val x19526 = if (x19519) {
true
} else {
false
}
val x19535 = if (x19526) {
false
} else {
false
}
val x19541 = if (x19535) {
true
} else {
false
}
val x19564 = if (x19541) {
x161
} else {
val x19540 = if (x19535) {
x935
} else {
val x19532 = if (x19526) {
x161
} else {
val x19525 = if (x19519) {
x161
} else {
val x19523 = new Anon1863173035("","","","",x19518,80)
x19523
}
x19525
}
val x19533 = if (x19526) {
false
} else {
true
}
val x19534 = new OptionAnon1863173035(x19532,x19533)
val x19538 = new Tuple2StringOptionAnon1863173035(x19395,x19534)
x19538
}
val x19546 = x19540._2
val x19547 = x19546.defined
val x19556 = if (x19547) {
val x19548 = x19546.value
val x19549 = x19548.schema
x19549
} else {
""
}
val x19557 = if (x19547) {
val x19548 = x19546.value
val x19550 = x19548.hostName
x19550
} else {
""
}
val x19558 = if (x19547) {
val x19548 = x19546.value
val x19551 = x19548.path
x19551
} else {
""
}
val x19545 = x19540._1
val x19559 = if (x19547) {
x19545
} else {
x19545
}
val x19560 = if (x19547) {
val x19548 = x19546.value
val x19552 = x19548.fragment
x19552
} else {
""
}
val x19561 = if (x19547) {
val x19548 = x19546.value
val x19553 = x19548.port
x19553
} else {
80
}
val x19562 = new Anon1863173035(x19556,x19557,x19558,x19559,x19560,x19561)
x19562
}
x19276 = x19564
val x19565 = if (x19541) {
true
} else {
false
}
x19277 = x19565
val x19542 = if (x19535) {
x19284
} else {
val x19527 = if (x19519) {
x19520
} else {
x19520
}
val x19536 = if (x19526) {
x19527
} else {
x19527
}
x19536
}
val x19566 = if (x19541) {
x19542
} else {
x19542
}
x19278 = x19566
()
}
x19572
} else {
val x19413 = new Anon1863173035("","","",x19395,"",80)
x19276 = x19413
x19277 = false
x19278 = x19397
()
}
x19578
}
x19580
}
x19582
}
x19584
} else {
x19276 = x161
x19277 = true
x19278 = x19274
()
}
x19590
}
val x19593 = x19276
val x19594 = x19277
val x19595 = x19278
val x19596 = new ParseResultAnon1863173035(x19593,x19594,x19595)
x19596
}
val x19740 = {x19599: (Int) => 
var x19601: Anon1863173035 = x161
var x19602: Boolean = true
var x19603: Int = x19599
val x19605 = x19599 >= x3954
val x19734 = if (x19605) {
x19601 = x161
x19602 = true
x19603 = x19599
()
} else {
val x19607 = x3943(x19599)
val x19608 = x19607 == '#'
val x19732 = if (x19608) {
var x19616: java.lang.String = ""
var x19617: Boolean = false
val x19609 = x19599 + 1
var x19618: Int = x19609
var x19620: Int = -1
var x19621: Boolean = true
var x19622: Int = x19609
val x19656 = while ({val x19623 = x19621
val x19624 = x19620
val x19625 = x19622
val x19626 = x19624 != x19625
val x19627 = x19623 && x19626
x19627}) {
val x19629 = x19622
x19620 = x19629
val x19631 = x19629 >= x3954
val x19654 = if (x19631) {
x19621 = false
()
} else {
val x19633 = x3943(x19629)
val x19634 = x19633 == '#'
val x19652 = if (x19634) {
val x19639 = x19616
val x19640 = x19617
val x19641 = x19618
val x19643 = x19639+x19633
x19616 = x19643
x19617 = false
val x19635 = x19629 + 1
x19618 = x19635
x19622 = x19635
()
} else {
x19621 = false
()
}
x19652
}
x19654
}
val x19657 = x19616
val x19658 = x19617
val x19659 = x19618
val x19726 = if (x19658) {
x19601 = x161
x19602 = true
x19603 = x19609
()
} else {
var x19668: java.lang.String = ""
var x19669: Boolean = false
var x19670: Int = x19659
var x19672: Int = -1
var x19673: Boolean = true
var x19674: Int = x19659
val x19710 = while ({val x19675 = x19673
val x19676 = x19672
val x19677 = x19674
val x19678 = x19676 != x19677
val x19679 = x19675 && x19678
x19679}) {
val x19681 = x19674
x19672 = x19681
val x19683 = x19681 >= x3954
val x19708 = if (x19683) {
x19673 = false
()
} else {
val x19685 = x3943(x19681)
val x19686 = x19685 > ' '
val x19687 = x19685 != ''
val x19688 = x19686 && x19687
val x19706 = if (x19688) {
val x19693 = x19668
val x19694 = x19669
val x19695 = x19670
val x19697 = x19693+x19685
x19668 = x19697
x19669 = false
val x19689 = x19681 + 1
x19670 = x19689
x19674 = x19689
()
} else {
x19673 = false
()
}
x19706
}
x19708
}
val x19711 = x19668
val x19712 = x19669
val x19713 = x19670
val x19718 = if (x19712) {
x161
} else {
val x19716 = new Anon1863173035("","","","",x19711,80)
x19716
}
x19601 = x19718
val x19719 = if (x19712) {
true
} else {
false
}
x19602 = x19719
val x19720 = if (x19712) {
x19713
} else {
x19713
}
x19603 = x19720
()
}
x19726
} else {
x19601 = x161
x19602 = true
x19603 = x19599
()
}
x19732
}
val x19735 = x19601
val x19736 = x19602
val x19737 = x19603
val x19738 = new ParseResultAnon1863173035(x19735,x19736,x19737)
x19738
}
val x20453 = {x19205: (Int) => 
var x19207: Anon1863173035 = x161
var x19208: Boolean = true
var x19209: Int = x19205
val x19211 = x19205 >= x3954
val x20447 = if (x19211) {
x19207 = x161
x19208 = true
x19209 = x19205
()
} else {
val x19213 = x3943(x19205)
val x19214 = x19213 == '/'
val x20445 = if (x19214) {
var x19222: java.lang.String = ""
var x19223: Boolean = false
val x19215 = x19205 + 1
var x19224: Int = x19215
var x19226: Int = -1
var x19227: Boolean = true
var x19228: Int = x19215
val x19268 = while ({val x19229 = x19227
val x19230 = x19226
val x19231 = x19228
val x19232 = x19230 != x19231
val x19233 = x19229 && x19232
x19233}) {
val x19235 = x19228
x19226 = x19235
val x19237 = x19235 >= x3954
val x19266 = if (x19237) {
x19227 = false
()
} else {
val x19239 = x3943(x19235)
val x19240 = x19239 > ' '
val x19241 = x19239 != '#'
val x19242 = x19240 && x19241
val x19243 = x19239 != '?'
val x19244 = x19242 && x19243
val x19245 = x19239 != ''
val x19246 = x19244 && x19245
val x19264 = if (x19246) {
val x19251 = x19222
val x19252 = x19223
val x19253 = x19224
val x19255 = x19251+x19239
x19222 = x19255
x19223 = false
val x19247 = x19235 + 1
x19224 = x19247
x19228 = x19247
()
} else {
x19227 = false
()
}
x19264
}
x19266
}
val x19269 = x19222
val x19270 = x19223
val x19271 = x19224
val x20439 = if (x19270) {
x19207 = x161
x19208 = true
x19209 = x19215
()
} else {
val x19741 = x19598(x19271)
val x19753 = x19741.empty
val x20437 = if (x19753) {
val x19754 = x19740(x19271)
val x19755 = x19754.empty
val x19764 = if (x19755) {
false
} else {
false
}
val x19770 = if (x19764) {
true
} else {
false
}
val x20110 = if (x19770) {
x19207 = x161
x19208 = true
val x19771 = if (x19764) {
x19215
} else {
val x19756 = x19754.next
val x19765 = if (x19755) {
x19756
} else {
x19756
}
x19765
}
x19209 = x19771
()
} else {
val x19771 = if (x19764) {
x19215
} else {
val x19756 = x19754.next
val x19765 = if (x19755) {
x19756
} else {
x19756
}
x19765
}
val x19773 = x19771 >= x3954
val x20108 = if (x19773) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
} else {
val x19775 = x3943(x19771)
val x19776 = x19775 == 'H'
val x20106 = if (x19776) {
val x19777 = x19771 + 1
val x19814 = x19777 >= x3954
val x20100 = if (x19814) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
} else {
val x19816 = x3943(x19777)
val x19817 = x19816 == 'T'
val x20098 = if (x19817) {
val x19818 = x19777 + 1
val x19826 = x19818 >= x3954
val x20092 = if (x19826) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
} else {
val x19828 = x3943(x19818)
val x19829 = x19828 == 'T'
val x20090 = if (x19829) {
val x19830 = x19818 + 1
val x19839 = x19830 >= x3954
val x20084 = if (x19839) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
} else {
val x19841 = x3943(x19830)
val x19842 = x19841 == 'P'
val x20082 = if (x19842) {
val x19843 = x19830 + 1
val x19852 = x19843 >= x3954
val x20076 = if (x19852) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
} else {
val x19854 = x3943(x19843)
val x19855 = x19854 == '/'
val x20074 = if (x19855) {
var x19887: Int = 0
var x19888: Boolean = false
val x19856 = x19843 + 1
var x19889: Int = x19856
var x19891: Int = -1
var x19892: Boolean = true
var x19893: Int = x19856
val x19934 = while ({val x19894 = x19892
val x19895 = x19891
val x19896 = x19893
val x19897 = x19895 != x19896
val x19898 = x19894 && x19897
x19898}) {
val x19900 = x19893
x19891 = x19900
val x19902 = x19900 >= x3954
val x19932 = if (x19902) {
x19892 = false
()
} else {
val x19904 = x3943(x19900)
val x19905 = x19904 >= '0'
val x19906 = x19904 <= '9'
val x19907 = x19905 && x19906
val x19930 = if (x19907) {
val x19916 = x19887
val x19917 = x19888
val x19918 = x19889
val x19913 = x19904 - '0'
val x19914 = x19913.toInt
val x19920 = x19916 * 10
val x19921 = x19920 + x19914
x19887 = x19921
x19888 = false
val x19908 = x19900 + 1
x19889 = x19908
x19893 = x19908
()
} else {
x19892 = false
()
}
x19930
}
x19932
}
val x19935 = x19887
val x19936 = x19888
val x19937 = x19889
val x20068 = if (x19936) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19856
()
} else {
val x19940 = x19937 >= x3954
val x20066 = if (x19940) {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19856
()
} else {
val x19942 = x3943(x19937)
val x19943 = x19942 == '.'
val x20064 = if (x19943) {
var x19959: Int = 0
var x19960: Boolean = false
val x19944 = x19937 + 1
var x19961: Int = x19944
var x19963: Int = -1
var x19964: Boolean = true
var x19965: Int = x19944
val x20006 = while ({val x19966 = x19964
val x19967 = x19963
val x19968 = x19965
val x19969 = x19967 != x19968
val x19970 = x19966 && x19969
x19970}) {
val x19972 = x19965
x19963 = x19972
val x19974 = x19972 >= x3954
val x20004 = if (x19974) {
x19964 = false
()
} else {
val x19976 = x3943(x19972)
val x19977 = x19976 >= '0'
val x19978 = x19976 <= '9'
val x19979 = x19977 && x19978
val x20002 = if (x19979) {
val x19988 = x19959
val x19989 = x19960
val x19990 = x19961
val x19985 = x19976 - '0'
val x19986 = x19985.toInt
val x19992 = x19988 * 10
val x19993 = x19992 + x19986
x19959 = x19993
x19960 = false
val x19980 = x19972 + 1
x19961 = x19980
x19965 = x19980
()
} else {
x19964 = false
()
}
x20002
}
x20004
}
val x20007 = x19959
val x20008 = x19960
val x20009 = x19961
val x20014 = if (x20008) {
true
} else {
false
}
val x20023 = if (x20014) {
false
} else {
false
}
val x20028 = if (x20023) {
true
} else {
false
}
val x20052 = if (x20028) {
x161
} else {
val x20027 = if (x20023) {
x935
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
x19769
}
val x20033 = x20027._2
val x20034 = x20033.defined
val x20044 = if (x20034) {
val x20035 = x20033.value
val x20037 = x20035.schema
x20037
} else {
""
}
val x20045 = if (x20034) {
val x20035 = x20033.value
val x20038 = x20035.hostName
x20038
} else {
""
}
val x20032 = x20027._1
val x20036 = "/"+x20032
val x20046 = if (x20034) {
x20036
} else {
x20036
}
val x20047 = if (x20034) {
val x20035 = x20033.value
val x20039 = x20035.queryString
x20039
} else {
""
}
val x20048 = if (x20034) {
val x20035 = x20033.value
val x20040 = x20035.fragment
x20040
} else {
""
}
val x20049 = if (x20034) {
val x20035 = x20033.value
val x20041 = x20035.port
x20041
} else {
80
}
val x20050 = new Anon1863173035(x20044,x20045,x20046,x20047,x20048,x20049)
x20050
}
x19207 = x20052
val x20053 = if (x20028) {
true
} else {
false
}
x19208 = x20053
val x20029 = if (x20023) {
x19215
} else {
val x20015 = if (x20008) {
x19856
} else {
x20009
}
val x20024 = if (x20014) {
x20015
} else {
x20015
}
x20024
}
val x20054 = if (x20028) {
x20029
} else {
x20029
}
x19209 = x20054
()
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19856
()
}
x20064
}
x20066
}
x20068
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
}
x20074
}
x20076
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
}
x20082
}
x20084
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
}
x20090
}
x20092
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
}
x20098
}
x20100
} else {
val x19769 = if (x19764) {
x935
} else {
val x19761 = if (x19755) {
x161
} else {
val x19758 = x19754.res
x19758
}
val x19762 = if (x19755) {
false
} else {
true
}
val x19763 = new OptionAnon1863173035(x19761,x19762)
val x19767 = new Tuple2StringOptionAnon1863173035(x19269,x19763)
x19767
}
val x19791 = x19769._2
val x19792 = x19791.defined
val x19802 = if (x19792) {
val x19793 = x19791.value
val x19795 = x19793.schema
x19795
} else {
""
}
val x19803 = if (x19792) {
val x19793 = x19791.value
val x19796 = x19793.hostName
x19796
} else {
""
}
val x19790 = x19769._1
val x19794 = "/"+x19790
val x19804 = if (x19792) {
x19794
} else {
x19794
}
val x19805 = if (x19792) {
val x19793 = x19791.value
val x19797 = x19793.queryString
x19797
} else {
""
}
val x19806 = if (x19792) {
val x19793 = x19791.value
val x19798 = x19793.fragment
x19798
} else {
""
}
val x19807 = if (x19792) {
val x19793 = x19791.value
val x19799 = x19793.port
x19799
} else {
80
}
val x19808 = new Anon1863173035(x19802,x19803,x19804,x19805,x19806,x19807)
x19207 = x19808
x19208 = false
x19209 = x19771
()
}
x20106
}
x20108
}
x20110
} else {
val x20114 = x19741.next
val x20118 = x20114 >= x3954
val x20435 = if (x20118) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
} else {
val x20120 = x3943(x20114)
val x20121 = x20120 == 'H'
val x20433 = if (x20121) {
val x20122 = x20114 + 1
val x20141 = x20122 >= x3954
val x20427 = if (x20141) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
} else {
val x20143 = x3943(x20122)
val x20144 = x20143 == 'T'
val x20425 = if (x20144) {
val x20145 = x20122 + 1
val x20153 = x20145 >= x3954
val x20419 = if (x20153) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
} else {
val x20155 = x3943(x20145)
val x20156 = x20155 == 'T'
val x20417 = if (x20156) {
val x20157 = x20145 + 1
val x20166 = x20157 >= x3954
val x20411 = if (x20166) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
} else {
val x20168 = x3943(x20157)
val x20169 = x20168 == 'P'
val x20409 = if (x20169) {
val x20170 = x20157 + 1
val x20179 = x20170 >= x3954
val x20403 = if (x20179) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
} else {
val x20181 = x3943(x20170)
val x20182 = x20181 == '/'
val x20401 = if (x20182) {
var x20214: Int = 0
var x20215: Boolean = false
val x20183 = x20170 + 1
var x20216: Int = x20183
var x20218: Int = -1
var x20219: Boolean = true
var x20220: Int = x20183
val x20261 = while ({val x20221 = x20219
val x20222 = x20218
val x20223 = x20220
val x20224 = x20222 != x20223
val x20225 = x20221 && x20224
x20225}) {
val x20227 = x20220
x20218 = x20227
val x20229 = x20227 >= x3954
val x20259 = if (x20229) {
x20219 = false
()
} else {
val x20231 = x3943(x20227)
val x20232 = x20231 >= '0'
val x20233 = x20231 <= '9'
val x20234 = x20232 && x20233
val x20257 = if (x20234) {
val x20243 = x20214
val x20244 = x20215
val x20245 = x20216
val x20240 = x20231 - '0'
val x20241 = x20240.toInt
val x20247 = x20243 * 10
val x20248 = x20247 + x20241
x20214 = x20248
x20215 = false
val x20235 = x20227 + 1
x20216 = x20235
x20220 = x20235
()
} else {
x20219 = false
()
}
x20257
}
x20259
}
val x20262 = x20214
val x20263 = x20215
val x20264 = x20216
val x20395 = if (x20263) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20183
()
} else {
val x20267 = x20264 >= x3954
val x20393 = if (x20267) {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20183
()
} else {
val x20269 = x3943(x20264)
val x20270 = x20269 == '.'
val x20391 = if (x20270) {
var x20286: Int = 0
var x20287: Boolean = false
val x20271 = x20264 + 1
var x20288: Int = x20271
var x20290: Int = -1
var x20291: Boolean = true
var x20292: Int = x20271
val x20333 = while ({val x20293 = x20291
val x20294 = x20290
val x20295 = x20292
val x20296 = x20294 != x20295
val x20297 = x20293 && x20296
x20297}) {
val x20299 = x20292
x20290 = x20299
val x20301 = x20299 >= x3954
val x20331 = if (x20301) {
x20291 = false
()
} else {
val x20303 = x3943(x20299)
val x20304 = x20303 >= '0'
val x20305 = x20303 <= '9'
val x20306 = x20304 && x20305
val x20329 = if (x20306) {
val x20315 = x20286
val x20316 = x20287
val x20317 = x20288
val x20312 = x20303 - '0'
val x20313 = x20312.toInt
val x20319 = x20315 * 10
val x20320 = x20319 + x20313
x20286 = x20320
x20287 = false
val x20307 = x20299 + 1
x20288 = x20307
x20292 = x20307
()
} else {
x20291 = false
()
}
x20329
}
x20331
}
val x20334 = x20286
val x20335 = x20287
val x20336 = x20288
val x20341 = if (x20335) {
true
} else {
false
}
val x20350 = if (x20341) {
false
} else {
false
}
val x20355 = if (x20350) {
true
} else {
false
}
val x20379 = if (x20355) {
x161
} else {
val x20354 = if (x20350) {
x935
} else {
val x20112 = x19741.res
val x20113 = new OptionAnon1863173035(x20112,true)
val x20116 = new Tuple2StringOptionAnon1863173035(x19269,x20113)
x20116
}
val x20360 = x20354._2
val x20361 = x20360.defined
val x20371 = if (x20361) {
val x20362 = x20360.value
val x20364 = x20362.schema
x20364
} else {
""
}
val x20372 = if (x20361) {
val x20362 = x20360.value
val x20365 = x20362.hostName
x20365
} else {
""
}
val x20359 = x20354._1
val x20363 = "/"+x20359
val x20373 = if (x20361) {
x20363
} else {
x20363
}
val x20374 = if (x20361) {
val x20362 = x20360.value
val x20366 = x20362.queryString
x20366
} else {
""
}
val x20375 = if (x20361) {
val x20362 = x20360.value
val x20367 = x20362.fragment
x20367
} else {
""
}
val x20376 = if (x20361) {
val x20362 = x20360.value
val x20368 = x20362.port
x20368
} else {
80
}
val x20377 = new Anon1863173035(x20371,x20372,x20373,x20374,x20375,x20376)
x20377
}
x19207 = x20379
val x20380 = if (x20355) {
true
} else {
false
}
x19208 = x20380
val x20356 = if (x20350) {
x19215
} else {
val x20342 = if (x20335) {
x20183
} else {
x20336
}
val x20351 = if (x20341) {
x20342
} else {
x20342
}
x20351
}
val x20381 = if (x20355) {
x20356
} else {
x20356
}
x19209 = x20381
()
} else {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20183
()
}
x20391
}
x20393
}
x20395
} else {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
}
x20401
}
x20403
} else {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
}
x20409
}
x20411
} else {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
}
x20417
}
x20419
} else {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
}
x20425
}
x20427
} else {
val x20129 = "/"+x19269
val x20112 = x19741.res
val x20130 = x20112.schema
val x20131 = x20112.hostName
val x20132 = x20112.queryString
val x20133 = x20112.fragment
val x20134 = x20112.port
val x20135 = new Anon1863173035(x20130,x20131,x20129,x20132,x20133,x20134)
x19207 = x20135
x19208 = false
x19209 = x20114
()
}
x20433
}
x20435
}
x20437
}
x20439
} else {
x19207 = x161
x19208 = true
x19209 = x19205
()
}
x20445
}
val x20448 = x19207
val x20449 = x19208
val x20450 = x19209
val x20451 = new ParseResultAnon1863173035(x20448,x20449,x20450)
x20451
}
val x20779 = x20453(x17553)
val x20780 = x20779.empty
val x20836 = if (x20780) {
val x20778 = {x20454: (Int) => 
var x20456: Anon1863173035 = x161
var x20457: Boolean = true
var x20458: Int = x20454
val x20460 = x20454 >= x3954
val x20772 = if (x20460) {
x20456 = x161
x20457 = true
x20458 = x20454
()
} else {
val x20462 = x3943(x20454)
val x20463 = x20462 == '?'
val x20770 = if (x20463) {
var x20471: java.lang.String = ""
var x20472: Boolean = false
val x20464 = x20454 + 1
var x20473: Int = x20464
var x20475: Int = -1
var x20476: Boolean = true
var x20477: Int = x20464
val x20511 = while ({val x20478 = x20476
val x20479 = x20475
val x20480 = x20477
val x20481 = x20479 != x20480
val x20482 = x20478 && x20481
x20482}) {
val x20484 = x20477
x20475 = x20484
val x20486 = x20484 >= x3954
val x20509 = if (x20486) {
x20476 = false
()
} else {
val x20488 = x3943(x20484)
val x20489 = x20488 == '?'
val x20507 = if (x20489) {
val x20494 = x20471
val x20495 = x20472
val x20496 = x20473
val x20498 = x20494+x20488
x20471 = x20498
x20472 = false
val x20490 = x20484 + 1
x20473 = x20490
x20477 = x20490
()
} else {
x20476 = false
()
}
x20507
}
x20509
}
val x20512 = x20471
val x20513 = x20472
val x20514 = x20473
val x20764 = if (x20513) {
x20456 = x161
x20457 = true
x20458 = x20464
()
} else {
var x20530: java.lang.String = ""
var x20531: Boolean = false
var x20532: Int = x20514
var x20534: Int = -1
var x20535: Boolean = true
var x20536: Int = x20514
val x20574 = while ({val x20537 = x20535
val x20538 = x20534
val x20539 = x20536
val x20540 = x20538 != x20539
val x20541 = x20537 && x20540
x20541}) {
val x20543 = x20536
x20534 = x20543
val x20545 = x20543 >= x3954
val x20572 = if (x20545) {
x20535 = false
()
} else {
val x20547 = x3943(x20543)
val x20548 = x20547 > ' '
val x20549 = x20547 != '#'
val x20550 = x20548 && x20549
val x20551 = x20547 != ''
val x20552 = x20550 && x20551
val x20570 = if (x20552) {
val x20557 = x20530
val x20558 = x20531
val x20559 = x20532
val x20561 = x20557+x20547
x20530 = x20561
x20531 = false
val x20553 = x20543 + 1
x20532 = x20553
x20536 = x20553
()
} else {
x20535 = false
()
}
x20570
}
x20572
}
val x20575 = x20530
val x20576 = x20531
val x20577 = x20532
val x20762 = if (x20576) {
x20456 = x161
x20457 = true
x20458 = x20464
()
} else {
val x20579 = x20577 >= x3954
val x20760 = if (x20579) {
val x20593 = new Anon1863173035("","","",x20575,"",80)
x20456 = x20593
x20457 = false
x20458 = x20577
()
} else {
val x20581 = x3943(x20577)
val x20582 = x20581 == '#'
val x20758 = if (x20582) {
var x20600: java.lang.String = ""
var x20601: Boolean = false
val x20583 = x20577 + 1
var x20602: Int = x20583
var x20604: Int = -1
var x20605: Boolean = true
var x20606: Int = x20583
val x20640 = while ({val x20607 = x20605
val x20608 = x20604
val x20609 = x20606
val x20610 = x20608 != x20609
val x20611 = x20607 && x20610
x20611}) {
val x20613 = x20606
x20604 = x20613
val x20615 = x20613 >= x3954
val x20638 = if (x20615) {
x20605 = false
()
} else {
val x20617 = x3943(x20613)
val x20618 = x20617 == '#'
val x20636 = if (x20618) {
val x20623 = x20600
val x20624 = x20601
val x20625 = x20602
val x20627 = x20623+x20617
x20600 = x20627
x20601 = false
val x20619 = x20613 + 1
x20602 = x20619
x20606 = x20619
()
} else {
x20605 = false
()
}
x20636
}
x20638
}
val x20641 = x20600
val x20642 = x20601
val x20643 = x20602
val x20752 = if (x20642) {
val x20593 = new Anon1863173035("","","",x20575,"",80)
x20456 = x20593
x20457 = false
x20458 = x20583
()
} else {
var x20655: java.lang.String = ""
var x20656: Boolean = false
var x20657: Int = x20643
var x20659: Int = -1
var x20660: Boolean = true
var x20661: Int = x20643
val x20697 = while ({val x20662 = x20660
val x20663 = x20659
val x20664 = x20661
val x20665 = x20663 != x20664
val x20666 = x20662 && x20665
x20666}) {
val x20668 = x20661
x20659 = x20668
val x20670 = x20668 >= x3954
val x20695 = if (x20670) {
x20660 = false
()
} else {
val x20672 = x3943(x20668)
val x20673 = x20672 > ' '
val x20674 = x20672 != ''
val x20675 = x20673 && x20674
val x20693 = if (x20675) {
val x20680 = x20655
val x20681 = x20656
val x20682 = x20657
val x20684 = x20680+x20672
x20655 = x20684
x20656 = false
val x20676 = x20668 + 1
x20657 = x20676
x20661 = x20676
()
} else {
x20660 = false
()
}
x20693
}
x20695
}
val x20698 = x20655
val x20699 = x20656
val x20700 = x20657
val x20706 = if (x20699) {
true
} else {
false
}
val x20715 = if (x20706) {
false
} else {
false
}
val x20721 = if (x20715) {
true
} else {
false
}
val x20744 = if (x20721) {
x161
} else {
val x20720 = if (x20715) {
x935
} else {
val x20712 = if (x20706) {
x161
} else {
val x20705 = if (x20699) {
x161
} else {
val x20703 = new Anon1863173035("","","","",x20698,80)
x20703
}
x20705
}
val x20713 = if (x20706) {
false
} else {
true
}
val x20714 = new OptionAnon1863173035(x20712,x20713)
val x20718 = new Tuple2StringOptionAnon1863173035(x20575,x20714)
x20718
}
val x20726 = x20720._2
val x20727 = x20726.defined
val x20736 = if (x20727) {
val x20728 = x20726.value
val x20729 = x20728.schema
x20729
} else {
""
}
val x20737 = if (x20727) {
val x20728 = x20726.value
val x20730 = x20728.hostName
x20730
} else {
""
}
val x20738 = if (x20727) {
val x20728 = x20726.value
val x20731 = x20728.path
x20731
} else {
""
}
val x20725 = x20720._1
val x20739 = if (x20727) {
x20725
} else {
x20725
}
val x20740 = if (x20727) {
val x20728 = x20726.value
val x20732 = x20728.fragment
x20732
} else {
""
}
val x20741 = if (x20727) {
val x20728 = x20726.value
val x20733 = x20728.port
x20733
} else {
80
}
val x20742 = new Anon1863173035(x20736,x20737,x20738,x20739,x20740,x20741)
x20742
}
x20456 = x20744
val x20745 = if (x20721) {
true
} else {
false
}
x20457 = x20745
val x20722 = if (x20715) {
x20464
} else {
val x20707 = if (x20699) {
x20700
} else {
x20700
}
val x20716 = if (x20706) {
x20707
} else {
x20707
}
x20716
}
val x20746 = if (x20721) {
x20722
} else {
x20722
}
x20458 = x20746
()
}
x20752
} else {
val x20593 = new Anon1863173035("","","",x20575,"",80)
x20456 = x20593
x20457 = false
x20458 = x20577
()
}
x20758
}
x20760
}
x20762
}
x20764
} else {
x20456 = x161
x20457 = true
x20458 = x20454
()
}
x20770
}
val x20773 = x20456
val x20774 = x20457
val x20775 = x20458
val x20776 = new ParseResultAnon1863173035(x20773,x20774,x20775)
x20776
}
val x20781 = x20778(x17553)
val x20782 = x20781.empty
val x20788 = if (x20782) {
true
} else {
false
}
val x20814 = if (x20788) {
x161
} else {
val x20787 = if (x20782) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x15843 = x4178.res
val x17551 = if (x17543) {
x1
} else {
val x17542 = if (x17537) {
x189
} else {
val x17540 = new Tuple2CharString(x15819,x17536)
x17540
}
val x17547 = x17542._1
val x17548 = x17542._2
val x17549 = x17547+x17548
x17549
}
val x19199 = new Anon1863173035("",x17551,"","","",80)
val x19201 = new OptionAnon1863173035(x19199,true)
val x19203 = new Tuple2StringOptionAnon1863173035(x15843,x19201)
val x20783 = x20781.res
val x20784 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x19203,x20783)
x20784
}
val x20792 = x20787._1
val x20794 = x20792._1
val x20795 = x20792._2
val x20796 = x20795.defined
val x20806 = if (x20796) {
x20794
} else {
x20794
}
val x20793 = x20787._2
val x20807 = if (x20796) {
val x20797 = x20795.value
val x20798 = x20797.hostName
x20798
} else {
val x20804 = x20793.hostName
x20804
}
val x20799 = x20793.path
val x20808 = if (x20796) {
x20799
} else {
x20799
}
val x20800 = x20793.queryString
val x20809 = if (x20796) {
x20800
} else {
x20800
}
val x20801 = x20793.fragment
val x20810 = if (x20796) {
x20801
} else {
x20801
}
val x20802 = x20793.port
val x20811 = if (x20796) {
x20802
} else {
x20802
}
val x20812 = new Anon1863173035(x20806,x20807,x20808,x20809,x20810,x20811)
x20812
}
x3944 = x20814
val x20815 = if (x20788) {
true
} else {
false
}
x3945 = x20815
val x20789 = if (x20782) {
0
} else {
val x20785 = x20781.next
x20785
}
val x20816 = if (x20788) {
x20789
} else {
x20789
}
x3946 = x20816
()
} else {
val x15843 = x4178.res
val x17551 = if (x17543) {
x1
} else {
val x17542 = if (x17537) {
x189
} else {
val x17540 = new Tuple2CharString(x15819,x17536)
x17540
}
val x17547 = x17542._1
val x17548 = x17542._2
val x17549 = x17547+x17548
x17549
}
val x20822 = x20779.res
val x20826 = x20822.path
val x20827 = x20822.queryString
val x20828 = x20822.fragment
val x20829 = x20822.port
val x20830 = new Anon1863173035(x15843,x17551,x20826,x20827,x20828,x20829)
x3944 = x20830
x3945 = false
val x20824 = x20779.next
x3946 = x20824
()
}
x20836
} else {
val x17557 = x3943(x17553)
val x17558 = x17557 == ':'
val x24223 = if (x17558) {
var x20839: Int = 0
var x20840: Boolean = false
val x17559 = x17553 + 1
var x20841: Int = x17559
var x20843: Int = -1
var x20844: Boolean = true
var x20845: Int = x17559
val x20886 = while ({val x20846 = x20844
val x20847 = x20843
val x20848 = x20845
val x20849 = x20847 != x20848
val x20850 = x20846 && x20849
x20850}) {
val x20852 = x20845
x20843 = x20852
val x20854 = x20852 >= x3954
val x20884 = if (x20854) {
x20844 = false
()
} else {
val x20856 = x3943(x20852)
val x20857 = x20856 >= '0'
val x20858 = x20856 <= '9'
val x20859 = x20857 && x20858
val x20882 = if (x20859) {
val x20868 = x20839
val x20869 = x20840
val x20870 = x20841
val x20865 = x20856 - '0'
val x20866 = x20865.toInt
val x20872 = x20868 * 10
val x20873 = x20872 + x20866
x20839 = x20873
x20840 = false
val x20860 = x20852 + 1
x20841 = x20860
x20845 = x20860
()
} else {
x20844 = false
()
}
x20882
}
x20884
}
val x20887 = x20839
val x20888 = x20840
val x20889 = x20841
val x20897 = if (x20888) {
false
} else {
false
}
val x20903 = if (x20897) {
true
} else {
false
}
val x20919 = if (x20903) {
true
} else {
false
}
val x20928 = if (x20919) {
false
} else {
false
}
val x20934 = if (x20928) {
true
} else {
false
}
val x22588 = if (x20934) {
x3944 = x161
x3945 = true
x3946 = 0
()
} else {
val x20935 = if (x20928) {
0
} else {
val x20904 = if (x20897) {
x15816
} else {
val x20898 = if (x20888) {
x20889
} else {
x20889
}
x20898
}
val x20920 = if (x20903) {
x20904
} else {
x20904
}
val x20929 = if (x20919) {
x20920
} else {
x20920
}
x20929
}
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x21330 = {x21006: (Int) => 
var x21008: Anon1863173035 = x161
var x21009: Boolean = true
var x21010: Int = x21006
val x21012 = x21006 >= x3954
val x21324 = if (x21012) {
x21008 = x161
x21009 = true
x21010 = x21006
()
} else {
val x21014 = x3943(x21006)
val x21015 = x21014 == '?'
val x21322 = if (x21015) {
var x21023: java.lang.String = ""
var x21024: Boolean = false
val x21016 = x21006 + 1
var x21025: Int = x21016
var x21027: Int = -1
var x21028: Boolean = true
var x21029: Int = x21016
val x21063 = while ({val x21030 = x21028
val x21031 = x21027
val x21032 = x21029
val x21033 = x21031 != x21032
val x21034 = x21030 && x21033
x21034}) {
val x21036 = x21029
x21027 = x21036
val x21038 = x21036 >= x3954
val x21061 = if (x21038) {
x21028 = false
()
} else {
val x21040 = x3943(x21036)
val x21041 = x21040 == '?'
val x21059 = if (x21041) {
val x21046 = x21023
val x21047 = x21024
val x21048 = x21025
val x21050 = x21046+x21040
x21023 = x21050
x21024 = false
val x21042 = x21036 + 1
x21025 = x21042
x21029 = x21042
()
} else {
x21028 = false
()
}
x21059
}
x21061
}
val x21064 = x21023
val x21065 = x21024
val x21066 = x21025
val x21316 = if (x21065) {
x21008 = x161
x21009 = true
x21010 = x21016
()
} else {
var x21082: java.lang.String = ""
var x21083: Boolean = false
var x21084: Int = x21066
var x21086: Int = -1
var x21087: Boolean = true
var x21088: Int = x21066
val x21126 = while ({val x21089 = x21087
val x21090 = x21086
val x21091 = x21088
val x21092 = x21090 != x21091
val x21093 = x21089 && x21092
x21093}) {
val x21095 = x21088
x21086 = x21095
val x21097 = x21095 >= x3954
val x21124 = if (x21097) {
x21087 = false
()
} else {
val x21099 = x3943(x21095)
val x21100 = x21099 > ' '
val x21101 = x21099 != '#'
val x21102 = x21100 && x21101
val x21103 = x21099 != ''
val x21104 = x21102 && x21103
val x21122 = if (x21104) {
val x21109 = x21082
val x21110 = x21083
val x21111 = x21084
val x21113 = x21109+x21099
x21082 = x21113
x21083 = false
val x21105 = x21095 + 1
x21084 = x21105
x21088 = x21105
()
} else {
x21087 = false
()
}
x21122
}
x21124
}
val x21127 = x21082
val x21128 = x21083
val x21129 = x21084
val x21314 = if (x21128) {
x21008 = x161
x21009 = true
x21010 = x21016
()
} else {
val x21131 = x21129 >= x3954
val x21312 = if (x21131) {
val x21145 = new Anon1863173035("","","",x21127,"",80)
x21008 = x21145
x21009 = false
x21010 = x21129
()
} else {
val x21133 = x3943(x21129)
val x21134 = x21133 == '#'
val x21310 = if (x21134) {
var x21152: java.lang.String = ""
var x21153: Boolean = false
val x21135 = x21129 + 1
var x21154: Int = x21135
var x21156: Int = -1
var x21157: Boolean = true
var x21158: Int = x21135
val x21192 = while ({val x21159 = x21157
val x21160 = x21156
val x21161 = x21158
val x21162 = x21160 != x21161
val x21163 = x21159 && x21162
x21163}) {
val x21165 = x21158
x21156 = x21165
val x21167 = x21165 >= x3954
val x21190 = if (x21167) {
x21157 = false
()
} else {
val x21169 = x3943(x21165)
val x21170 = x21169 == '#'
val x21188 = if (x21170) {
val x21175 = x21152
val x21176 = x21153
val x21177 = x21154
val x21179 = x21175+x21169
x21152 = x21179
x21153 = false
val x21171 = x21165 + 1
x21154 = x21171
x21158 = x21171
()
} else {
x21157 = false
()
}
x21188
}
x21190
}
val x21193 = x21152
val x21194 = x21153
val x21195 = x21154
val x21304 = if (x21194) {
val x21145 = new Anon1863173035("","","",x21127,"",80)
x21008 = x21145
x21009 = false
x21010 = x21135
()
} else {
var x21207: java.lang.String = ""
var x21208: Boolean = false
var x21209: Int = x21195
var x21211: Int = -1
var x21212: Boolean = true
var x21213: Int = x21195
val x21249 = while ({val x21214 = x21212
val x21215 = x21211
val x21216 = x21213
val x21217 = x21215 != x21216
val x21218 = x21214 && x21217
x21218}) {
val x21220 = x21213
x21211 = x21220
val x21222 = x21220 >= x3954
val x21247 = if (x21222) {
x21212 = false
()
} else {
val x21224 = x3943(x21220)
val x21225 = x21224 > ' '
val x21226 = x21224 != ''
val x21227 = x21225 && x21226
val x21245 = if (x21227) {
val x21232 = x21207
val x21233 = x21208
val x21234 = x21209
val x21236 = x21232+x21224
x21207 = x21236
x21208 = false
val x21228 = x21220 + 1
x21209 = x21228
x21213 = x21228
()
} else {
x21212 = false
()
}
x21245
}
x21247
}
val x21250 = x21207
val x21251 = x21208
val x21252 = x21209
val x21258 = if (x21251) {
true
} else {
false
}
val x21267 = if (x21258) {
false
} else {
false
}
val x21273 = if (x21267) {
true
} else {
false
}
val x21296 = if (x21273) {
x161
} else {
val x21272 = if (x21267) {
x935
} else {
val x21264 = if (x21258) {
x161
} else {
val x21257 = if (x21251) {
x161
} else {
val x21255 = new Anon1863173035("","","","",x21250,80)
x21255
}
x21257
}
val x21265 = if (x21258) {
false
} else {
true
}
val x21266 = new OptionAnon1863173035(x21264,x21265)
val x21270 = new Tuple2StringOptionAnon1863173035(x21127,x21266)
x21270
}
val x21278 = x21272._2
val x21279 = x21278.defined
val x21288 = if (x21279) {
val x21280 = x21278.value
val x21281 = x21280.schema
x21281
} else {
""
}
val x21289 = if (x21279) {
val x21280 = x21278.value
val x21282 = x21280.hostName
x21282
} else {
""
}
val x21290 = if (x21279) {
val x21280 = x21278.value
val x21283 = x21280.path
x21283
} else {
""
}
val x21277 = x21272._1
val x21291 = if (x21279) {
x21277
} else {
x21277
}
val x21292 = if (x21279) {
val x21280 = x21278.value
val x21284 = x21280.fragment
x21284
} else {
""
}
val x21293 = if (x21279) {
val x21280 = x21278.value
val x21285 = x21280.port
x21285
} else {
80
}
val x21294 = new Anon1863173035(x21288,x21289,x21290,x21291,x21292,x21293)
x21294
}
x21008 = x21296
val x21297 = if (x21273) {
true
} else {
false
}
x21009 = x21297
val x21274 = if (x21267) {
x21016
} else {
val x21259 = if (x21251) {
x21252
} else {
x21252
}
val x21268 = if (x21258) {
x21259
} else {
x21259
}
x21268
}
val x21298 = if (x21273) {
x21274
} else {
x21274
}
x21010 = x21298
()
}
x21304
} else {
val x21145 = new Anon1863173035("","","",x21127,"",80)
x21008 = x21145
x21009 = false
x21010 = x21129
()
}
x21310
}
x21312
}
x21314
}
x21316
} else {
x21008 = x161
x21009 = true
x21010 = x21006
()
}
x21322
}
val x21325 = x21008
val x21326 = x21009
val x21327 = x21010
val x21328 = new ParseResultAnon1863173035(x21325,x21326,x21327)
x21328
}
val x21472 = {x21331: (Int) => 
var x21333: Anon1863173035 = x161
var x21334: Boolean = true
var x21335: Int = x21331
val x21337 = x21331 >= x3954
val x21466 = if (x21337) {
x21333 = x161
x21334 = true
x21335 = x21331
()
} else {
val x21339 = x3943(x21331)
val x21340 = x21339 == '#'
val x21464 = if (x21340) {
var x21348: java.lang.String = ""
var x21349: Boolean = false
val x21341 = x21331 + 1
var x21350: Int = x21341
var x21352: Int = -1
var x21353: Boolean = true
var x21354: Int = x21341
val x21388 = while ({val x21355 = x21353
val x21356 = x21352
val x21357 = x21354
val x21358 = x21356 != x21357
val x21359 = x21355 && x21358
x21359}) {
val x21361 = x21354
x21352 = x21361
val x21363 = x21361 >= x3954
val x21386 = if (x21363) {
x21353 = false
()
} else {
val x21365 = x3943(x21361)
val x21366 = x21365 == '#'
val x21384 = if (x21366) {
val x21371 = x21348
val x21372 = x21349
val x21373 = x21350
val x21375 = x21371+x21365
x21348 = x21375
x21349 = false
val x21367 = x21361 + 1
x21350 = x21367
x21354 = x21367
()
} else {
x21353 = false
()
}
x21384
}
x21386
}
val x21389 = x21348
val x21390 = x21349
val x21391 = x21350
val x21458 = if (x21390) {
x21333 = x161
x21334 = true
x21335 = x21341
()
} else {
var x21400: java.lang.String = ""
var x21401: Boolean = false
var x21402: Int = x21391
var x21404: Int = -1
var x21405: Boolean = true
var x21406: Int = x21391
val x21442 = while ({val x21407 = x21405
val x21408 = x21404
val x21409 = x21406
val x21410 = x21408 != x21409
val x21411 = x21407 && x21410
x21411}) {
val x21413 = x21406
x21404 = x21413
val x21415 = x21413 >= x3954
val x21440 = if (x21415) {
x21405 = false
()
} else {
val x21417 = x3943(x21413)
val x21418 = x21417 > ' '
val x21419 = x21417 != ''
val x21420 = x21418 && x21419
val x21438 = if (x21420) {
val x21425 = x21400
val x21426 = x21401
val x21427 = x21402
val x21429 = x21425+x21417
x21400 = x21429
x21401 = false
val x21421 = x21413 + 1
x21402 = x21421
x21406 = x21421
()
} else {
x21405 = false
()
}
x21438
}
x21440
}
val x21443 = x21400
val x21444 = x21401
val x21445 = x21402
val x21450 = if (x21444) {
x161
} else {
val x21448 = new Anon1863173035("","","","",x21443,80)
x21448
}
x21333 = x21450
val x21451 = if (x21444) {
true
} else {
false
}
x21334 = x21451
val x21452 = if (x21444) {
x21445
} else {
x21445
}
x21335 = x21452
()
}
x21458
} else {
x21333 = x161
x21334 = true
x21335 = x21331
()
}
x21464
}
val x21467 = x21333
val x21468 = x21334
val x21469 = x21335
val x21470 = new ParseResultAnon1863173035(x21467,x21468,x21469)
x21470
}
val x22185 = {x20937: (Int) => 
var x20939: Anon1863173035 = x161
var x20940: Boolean = true
var x20941: Int = x20937
val x20943 = x20937 >= x3954
val x22179 = if (x20943) {
x20939 = x161
x20940 = true
x20941 = x20937
()
} else {
val x20945 = x3943(x20937)
val x20946 = x20945 == '/'
val x22177 = if (x20946) {
var x20954: java.lang.String = ""
var x20955: Boolean = false
val x20947 = x20937 + 1
var x20956: Int = x20947
var x20958: Int = -1
var x20959: Boolean = true
var x20960: Int = x20947
val x21000 = while ({val x20961 = x20959
val x20962 = x20958
val x20963 = x20960
val x20964 = x20962 != x20963
val x20965 = x20961 && x20964
x20965}) {
val x20967 = x20960
x20958 = x20967
val x20969 = x20967 >= x3954
val x20998 = if (x20969) {
x20959 = false
()
} else {
val x20971 = x3943(x20967)
val x20972 = x20971 > ' '
val x20973 = x20971 != '#'
val x20974 = x20972 && x20973
val x20975 = x20971 != '?'
val x20976 = x20974 && x20975
val x20977 = x20971 != ''
val x20978 = x20976 && x20977
val x20996 = if (x20978) {
val x20983 = x20954
val x20984 = x20955
val x20985 = x20956
val x20987 = x20983+x20971
x20954 = x20987
x20955 = false
val x20979 = x20967 + 1
x20956 = x20979
x20960 = x20979
()
} else {
x20959 = false
()
}
x20996
}
x20998
}
val x21001 = x20954
val x21002 = x20955
val x21003 = x20956
val x22171 = if (x21002) {
x20939 = x161
x20940 = true
x20941 = x20947
()
} else {
val x21473 = x21330(x21003)
val x21485 = x21473.empty
val x22169 = if (x21485) {
val x21486 = x21472(x21003)
val x21487 = x21486.empty
val x21496 = if (x21487) {
false
} else {
false
}
val x21502 = if (x21496) {
true
} else {
false
}
val x21842 = if (x21502) {
x20939 = x161
x20940 = true
val x21503 = if (x21496) {
x20947
} else {
val x21488 = x21486.next
val x21497 = if (x21487) {
x21488
} else {
x21488
}
x21497
}
x20941 = x21503
()
} else {
val x21503 = if (x21496) {
x20947
} else {
val x21488 = x21486.next
val x21497 = if (x21487) {
x21488
} else {
x21488
}
x21497
}
val x21505 = x21503 >= x3954
val x21840 = if (x21505) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
} else {
val x21507 = x3943(x21503)
val x21508 = x21507 == 'H'
val x21838 = if (x21508) {
val x21509 = x21503 + 1
val x21546 = x21509 >= x3954
val x21832 = if (x21546) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
} else {
val x21548 = x3943(x21509)
val x21549 = x21548 == 'T'
val x21830 = if (x21549) {
val x21550 = x21509 + 1
val x21558 = x21550 >= x3954
val x21824 = if (x21558) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
} else {
val x21560 = x3943(x21550)
val x21561 = x21560 == 'T'
val x21822 = if (x21561) {
val x21562 = x21550 + 1
val x21571 = x21562 >= x3954
val x21816 = if (x21571) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
} else {
val x21573 = x3943(x21562)
val x21574 = x21573 == 'P'
val x21814 = if (x21574) {
val x21575 = x21562 + 1
val x21584 = x21575 >= x3954
val x21808 = if (x21584) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
} else {
val x21586 = x3943(x21575)
val x21587 = x21586 == '/'
val x21806 = if (x21587) {
var x21619: Int = 0
var x21620: Boolean = false
val x21588 = x21575 + 1
var x21621: Int = x21588
var x21623: Int = -1
var x21624: Boolean = true
var x21625: Int = x21588
val x21666 = while ({val x21626 = x21624
val x21627 = x21623
val x21628 = x21625
val x21629 = x21627 != x21628
val x21630 = x21626 && x21629
x21630}) {
val x21632 = x21625
x21623 = x21632
val x21634 = x21632 >= x3954
val x21664 = if (x21634) {
x21624 = false
()
} else {
val x21636 = x3943(x21632)
val x21637 = x21636 >= '0'
val x21638 = x21636 <= '9'
val x21639 = x21637 && x21638
val x21662 = if (x21639) {
val x21648 = x21619
val x21649 = x21620
val x21650 = x21621
val x21645 = x21636 - '0'
val x21646 = x21645.toInt
val x21652 = x21648 * 10
val x21653 = x21652 + x21646
x21619 = x21653
x21620 = false
val x21640 = x21632 + 1
x21621 = x21640
x21625 = x21640
()
} else {
x21624 = false
()
}
x21662
}
x21664
}
val x21667 = x21619
val x21668 = x21620
val x21669 = x21621
val x21800 = if (x21668) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21588
()
} else {
val x21672 = x21669 >= x3954
val x21798 = if (x21672) {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21588
()
} else {
val x21674 = x3943(x21669)
val x21675 = x21674 == '.'
val x21796 = if (x21675) {
var x21691: Int = 0
var x21692: Boolean = false
val x21676 = x21669 + 1
var x21693: Int = x21676
var x21695: Int = -1
var x21696: Boolean = true
var x21697: Int = x21676
val x21738 = while ({val x21698 = x21696
val x21699 = x21695
val x21700 = x21697
val x21701 = x21699 != x21700
val x21702 = x21698 && x21701
x21702}) {
val x21704 = x21697
x21695 = x21704
val x21706 = x21704 >= x3954
val x21736 = if (x21706) {
x21696 = false
()
} else {
val x21708 = x3943(x21704)
val x21709 = x21708 >= '0'
val x21710 = x21708 <= '9'
val x21711 = x21709 && x21710
val x21734 = if (x21711) {
val x21720 = x21691
val x21721 = x21692
val x21722 = x21693
val x21717 = x21708 - '0'
val x21718 = x21717.toInt
val x21724 = x21720 * 10
val x21725 = x21724 + x21718
x21691 = x21725
x21692 = false
val x21712 = x21704 + 1
x21693 = x21712
x21697 = x21712
()
} else {
x21696 = false
()
}
x21734
}
x21736
}
val x21739 = x21691
val x21740 = x21692
val x21741 = x21693
val x21746 = if (x21740) {
true
} else {
false
}
val x21755 = if (x21746) {
false
} else {
false
}
val x21760 = if (x21755) {
true
} else {
false
}
val x21784 = if (x21760) {
x161
} else {
val x21759 = if (x21755) {
x935
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
x21501
}
val x21765 = x21759._2
val x21766 = x21765.defined
val x21776 = if (x21766) {
val x21767 = x21765.value
val x21769 = x21767.schema
x21769
} else {
""
}
val x21777 = if (x21766) {
val x21767 = x21765.value
val x21770 = x21767.hostName
x21770
} else {
""
}
val x21764 = x21759._1
val x21768 = "/"+x21764
val x21778 = if (x21766) {
x21768
} else {
x21768
}
val x21779 = if (x21766) {
val x21767 = x21765.value
val x21771 = x21767.queryString
x21771
} else {
""
}
val x21780 = if (x21766) {
val x21767 = x21765.value
val x21772 = x21767.fragment
x21772
} else {
""
}
val x21781 = if (x21766) {
val x21767 = x21765.value
val x21773 = x21767.port
x21773
} else {
80
}
val x21782 = new Anon1863173035(x21776,x21777,x21778,x21779,x21780,x21781)
x21782
}
x20939 = x21784
val x21785 = if (x21760) {
true
} else {
false
}
x20940 = x21785
val x21761 = if (x21755) {
x20947
} else {
val x21747 = if (x21740) {
x21588
} else {
x21741
}
val x21756 = if (x21746) {
x21747
} else {
x21747
}
x21756
}
val x21786 = if (x21760) {
x21761
} else {
x21761
}
x20941 = x21786
()
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21588
()
}
x21796
}
x21798
}
x21800
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
}
x21806
}
x21808
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
}
x21814
}
x21816
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
}
x21822
}
x21824
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
}
x21830
}
x21832
} else {
val x21501 = if (x21496) {
x935
} else {
val x21493 = if (x21487) {
x161
} else {
val x21490 = x21486.res
x21490
}
val x21494 = if (x21487) {
false
} else {
true
}
val x21495 = new OptionAnon1863173035(x21493,x21494)
val x21499 = new Tuple2StringOptionAnon1863173035(x21001,x21495)
x21499
}
val x21523 = x21501._2
val x21524 = x21523.defined
val x21534 = if (x21524) {
val x21525 = x21523.value
val x21527 = x21525.schema
x21527
} else {
""
}
val x21535 = if (x21524) {
val x21525 = x21523.value
val x21528 = x21525.hostName
x21528
} else {
""
}
val x21522 = x21501._1
val x21526 = "/"+x21522
val x21536 = if (x21524) {
x21526
} else {
x21526
}
val x21537 = if (x21524) {
val x21525 = x21523.value
val x21529 = x21525.queryString
x21529
} else {
""
}
val x21538 = if (x21524) {
val x21525 = x21523.value
val x21530 = x21525.fragment
x21530
} else {
""
}
val x21539 = if (x21524) {
val x21525 = x21523.value
val x21531 = x21525.port
x21531
} else {
80
}
val x21540 = new Anon1863173035(x21534,x21535,x21536,x21537,x21538,x21539)
x20939 = x21540
x20940 = false
x20941 = x21503
()
}
x21838
}
x21840
}
x21842
} else {
val x21846 = x21473.next
val x21850 = x21846 >= x3954
val x22167 = if (x21850) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
} else {
val x21852 = x3943(x21846)
val x21853 = x21852 == 'H'
val x22165 = if (x21853) {
val x21854 = x21846 + 1
val x21873 = x21854 >= x3954
val x22159 = if (x21873) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
} else {
val x21875 = x3943(x21854)
val x21876 = x21875 == 'T'
val x22157 = if (x21876) {
val x21877 = x21854 + 1
val x21885 = x21877 >= x3954
val x22151 = if (x21885) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
} else {
val x21887 = x3943(x21877)
val x21888 = x21887 == 'T'
val x22149 = if (x21888) {
val x21889 = x21877 + 1
val x21898 = x21889 >= x3954
val x22143 = if (x21898) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
} else {
val x21900 = x3943(x21889)
val x21901 = x21900 == 'P'
val x22141 = if (x21901) {
val x21902 = x21889 + 1
val x21911 = x21902 >= x3954
val x22135 = if (x21911) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
} else {
val x21913 = x3943(x21902)
val x21914 = x21913 == '/'
val x22133 = if (x21914) {
var x21946: Int = 0
var x21947: Boolean = false
val x21915 = x21902 + 1
var x21948: Int = x21915
var x21950: Int = -1
var x21951: Boolean = true
var x21952: Int = x21915
val x21993 = while ({val x21953 = x21951
val x21954 = x21950
val x21955 = x21952
val x21956 = x21954 != x21955
val x21957 = x21953 && x21956
x21957}) {
val x21959 = x21952
x21950 = x21959
val x21961 = x21959 >= x3954
val x21991 = if (x21961) {
x21951 = false
()
} else {
val x21963 = x3943(x21959)
val x21964 = x21963 >= '0'
val x21965 = x21963 <= '9'
val x21966 = x21964 && x21965
val x21989 = if (x21966) {
val x21975 = x21946
val x21976 = x21947
val x21977 = x21948
val x21972 = x21963 - '0'
val x21973 = x21972.toInt
val x21979 = x21975 * 10
val x21980 = x21979 + x21973
x21946 = x21980
x21947 = false
val x21967 = x21959 + 1
x21948 = x21967
x21952 = x21967
()
} else {
x21951 = false
()
}
x21989
}
x21991
}
val x21994 = x21946
val x21995 = x21947
val x21996 = x21948
val x22127 = if (x21995) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21915
()
} else {
val x21999 = x21996 >= x3954
val x22125 = if (x21999) {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21915
()
} else {
val x22001 = x3943(x21996)
val x22002 = x22001 == '.'
val x22123 = if (x22002) {
var x22018: Int = 0
var x22019: Boolean = false
val x22003 = x21996 + 1
var x22020: Int = x22003
var x22022: Int = -1
var x22023: Boolean = true
var x22024: Int = x22003
val x22065 = while ({val x22025 = x22023
val x22026 = x22022
val x22027 = x22024
val x22028 = x22026 != x22027
val x22029 = x22025 && x22028
x22029}) {
val x22031 = x22024
x22022 = x22031
val x22033 = x22031 >= x3954
val x22063 = if (x22033) {
x22023 = false
()
} else {
val x22035 = x3943(x22031)
val x22036 = x22035 >= '0'
val x22037 = x22035 <= '9'
val x22038 = x22036 && x22037
val x22061 = if (x22038) {
val x22047 = x22018
val x22048 = x22019
val x22049 = x22020
val x22044 = x22035 - '0'
val x22045 = x22044.toInt
val x22051 = x22047 * 10
val x22052 = x22051 + x22045
x22018 = x22052
x22019 = false
val x22039 = x22031 + 1
x22020 = x22039
x22024 = x22039
()
} else {
x22023 = false
()
}
x22061
}
x22063
}
val x22066 = x22018
val x22067 = x22019
val x22068 = x22020
val x22073 = if (x22067) {
true
} else {
false
}
val x22082 = if (x22073) {
false
} else {
false
}
val x22087 = if (x22082) {
true
} else {
false
}
val x22111 = if (x22087) {
x161
} else {
val x22086 = if (x22082) {
x935
} else {
val x21844 = x21473.res
val x21845 = new OptionAnon1863173035(x21844,true)
val x21848 = new Tuple2StringOptionAnon1863173035(x21001,x21845)
x21848
}
val x22092 = x22086._2
val x22093 = x22092.defined
val x22103 = if (x22093) {
val x22094 = x22092.value
val x22096 = x22094.schema
x22096
} else {
""
}
val x22104 = if (x22093) {
val x22094 = x22092.value
val x22097 = x22094.hostName
x22097
} else {
""
}
val x22091 = x22086._1
val x22095 = "/"+x22091
val x22105 = if (x22093) {
x22095
} else {
x22095
}
val x22106 = if (x22093) {
val x22094 = x22092.value
val x22098 = x22094.queryString
x22098
} else {
""
}
val x22107 = if (x22093) {
val x22094 = x22092.value
val x22099 = x22094.fragment
x22099
} else {
""
}
val x22108 = if (x22093) {
val x22094 = x22092.value
val x22100 = x22094.port
x22100
} else {
80
}
val x22109 = new Anon1863173035(x22103,x22104,x22105,x22106,x22107,x22108)
x22109
}
x20939 = x22111
val x22112 = if (x22087) {
true
} else {
false
}
x20940 = x22112
val x22088 = if (x22082) {
x20947
} else {
val x22074 = if (x22067) {
x21915
} else {
x22068
}
val x22083 = if (x22073) {
x22074
} else {
x22074
}
x22083
}
val x22113 = if (x22087) {
x22088
} else {
x22088
}
x20941 = x22113
()
} else {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21915
()
}
x22123
}
x22125
}
x22127
} else {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
}
x22133
}
x22135
} else {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
}
x22141
}
x22143
} else {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
}
x22149
}
x22151
} else {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
}
x22157
}
x22159
} else {
val x21861 = "/"+x21001
val x21844 = x21473.res
val x21862 = x21844.schema
val x21863 = x21844.hostName
val x21864 = x21844.queryString
val x21865 = x21844.fragment
val x21866 = x21844.port
val x21867 = new Anon1863173035(x21862,x21863,x21861,x21864,x21865,x21866)
x20939 = x21867
x20940 = false
x20941 = x21846
()
}
x22165
}
x22167
}
x22169
}
x22171
} else {
x20939 = x161
x20940 = true
x20941 = x20937
()
}
x22177
}
val x22180 = x20939
val x22181 = x20940
val x22182 = x20941
val x22183 = new ParseResultAnon1863173035(x22180,x22181,x22182)
x22183
}
val x22511 = x22185(x20935)
val x22516 = x22511.empty
val x22586 = if (x22516) {
val x22510 = {x22186: (Int) => 
var x22188: Anon1863173035 = x161
var x22189: Boolean = true
var x22190: Int = x22186
val x22192 = x22186 >= x3954
val x22504 = if (x22192) {
x22188 = x161
x22189 = true
x22190 = x22186
()
} else {
val x22194 = x3943(x22186)
val x22195 = x22194 == '?'
val x22502 = if (x22195) {
var x22203: java.lang.String = ""
var x22204: Boolean = false
val x22196 = x22186 + 1
var x22205: Int = x22196
var x22207: Int = -1
var x22208: Boolean = true
var x22209: Int = x22196
val x22243 = while ({val x22210 = x22208
val x22211 = x22207
val x22212 = x22209
val x22213 = x22211 != x22212
val x22214 = x22210 && x22213
x22214}) {
val x22216 = x22209
x22207 = x22216
val x22218 = x22216 >= x3954
val x22241 = if (x22218) {
x22208 = false
()
} else {
val x22220 = x3943(x22216)
val x22221 = x22220 == '?'
val x22239 = if (x22221) {
val x22226 = x22203
val x22227 = x22204
val x22228 = x22205
val x22230 = x22226+x22220
x22203 = x22230
x22204 = false
val x22222 = x22216 + 1
x22205 = x22222
x22209 = x22222
()
} else {
x22208 = false
()
}
x22239
}
x22241
}
val x22244 = x22203
val x22245 = x22204
val x22246 = x22205
val x22496 = if (x22245) {
x22188 = x161
x22189 = true
x22190 = x22196
()
} else {
var x22262: java.lang.String = ""
var x22263: Boolean = false
var x22264: Int = x22246
var x22266: Int = -1
var x22267: Boolean = true
var x22268: Int = x22246
val x22306 = while ({val x22269 = x22267
val x22270 = x22266
val x22271 = x22268
val x22272 = x22270 != x22271
val x22273 = x22269 && x22272
x22273}) {
val x22275 = x22268
x22266 = x22275
val x22277 = x22275 >= x3954
val x22304 = if (x22277) {
x22267 = false
()
} else {
val x22279 = x3943(x22275)
val x22280 = x22279 > ' '
val x22281 = x22279 != '#'
val x22282 = x22280 && x22281
val x22283 = x22279 != ''
val x22284 = x22282 && x22283
val x22302 = if (x22284) {
val x22289 = x22262
val x22290 = x22263
val x22291 = x22264
val x22293 = x22289+x22279
x22262 = x22293
x22263 = false
val x22285 = x22275 + 1
x22264 = x22285
x22268 = x22285
()
} else {
x22267 = false
()
}
x22302
}
x22304
}
val x22307 = x22262
val x22308 = x22263
val x22309 = x22264
val x22494 = if (x22308) {
x22188 = x161
x22189 = true
x22190 = x22196
()
} else {
val x22311 = x22309 >= x3954
val x22492 = if (x22311) {
val x22325 = new Anon1863173035("","","",x22307,"",80)
x22188 = x22325
x22189 = false
x22190 = x22309
()
} else {
val x22313 = x3943(x22309)
val x22314 = x22313 == '#'
val x22490 = if (x22314) {
var x22332: java.lang.String = ""
var x22333: Boolean = false
val x22315 = x22309 + 1
var x22334: Int = x22315
var x22336: Int = -1
var x22337: Boolean = true
var x22338: Int = x22315
val x22372 = while ({val x22339 = x22337
val x22340 = x22336
val x22341 = x22338
val x22342 = x22340 != x22341
val x22343 = x22339 && x22342
x22343}) {
val x22345 = x22338
x22336 = x22345
val x22347 = x22345 >= x3954
val x22370 = if (x22347) {
x22337 = false
()
} else {
val x22349 = x3943(x22345)
val x22350 = x22349 == '#'
val x22368 = if (x22350) {
val x22355 = x22332
val x22356 = x22333
val x22357 = x22334
val x22359 = x22355+x22349
x22332 = x22359
x22333 = false
val x22351 = x22345 + 1
x22334 = x22351
x22338 = x22351
()
} else {
x22337 = false
()
}
x22368
}
x22370
}
val x22373 = x22332
val x22374 = x22333
val x22375 = x22334
val x22484 = if (x22374) {
val x22325 = new Anon1863173035("","","",x22307,"",80)
x22188 = x22325
x22189 = false
x22190 = x22315
()
} else {
var x22387: java.lang.String = ""
var x22388: Boolean = false
var x22389: Int = x22375
var x22391: Int = -1
var x22392: Boolean = true
var x22393: Int = x22375
val x22429 = while ({val x22394 = x22392
val x22395 = x22391
val x22396 = x22393
val x22397 = x22395 != x22396
val x22398 = x22394 && x22397
x22398}) {
val x22400 = x22393
x22391 = x22400
val x22402 = x22400 >= x3954
val x22427 = if (x22402) {
x22392 = false
()
} else {
val x22404 = x3943(x22400)
val x22405 = x22404 > ' '
val x22406 = x22404 != ''
val x22407 = x22405 && x22406
val x22425 = if (x22407) {
val x22412 = x22387
val x22413 = x22388
val x22414 = x22389
val x22416 = x22412+x22404
x22387 = x22416
x22388 = false
val x22408 = x22400 + 1
x22389 = x22408
x22393 = x22408
()
} else {
x22392 = false
()
}
x22425
}
x22427
}
val x22430 = x22387
val x22431 = x22388
val x22432 = x22389
val x22438 = if (x22431) {
true
} else {
false
}
val x22447 = if (x22438) {
false
} else {
false
}
val x22453 = if (x22447) {
true
} else {
false
}
val x22476 = if (x22453) {
x161
} else {
val x22452 = if (x22447) {
x935
} else {
val x22444 = if (x22438) {
x161
} else {
val x22437 = if (x22431) {
x161
} else {
val x22435 = new Anon1863173035("","","","",x22430,80)
x22435
}
x22437
}
val x22445 = if (x22438) {
false
} else {
true
}
val x22446 = new OptionAnon1863173035(x22444,x22445)
val x22450 = new Tuple2StringOptionAnon1863173035(x22307,x22446)
x22450
}
val x22458 = x22452._2
val x22459 = x22458.defined
val x22468 = if (x22459) {
val x22460 = x22458.value
val x22461 = x22460.schema
x22461
} else {
""
}
val x22469 = if (x22459) {
val x22460 = x22458.value
val x22462 = x22460.hostName
x22462
} else {
""
}
val x22470 = if (x22459) {
val x22460 = x22458.value
val x22463 = x22460.path
x22463
} else {
""
}
val x22457 = x22452._1
val x22471 = if (x22459) {
x22457
} else {
x22457
}
val x22472 = if (x22459) {
val x22460 = x22458.value
val x22464 = x22460.fragment
x22464
} else {
""
}
val x22473 = if (x22459) {
val x22460 = x22458.value
val x22465 = x22460.port
x22465
} else {
80
}
val x22474 = new Anon1863173035(x22468,x22469,x22470,x22471,x22472,x22473)
x22474
}
x22188 = x22476
val x22477 = if (x22453) {
true
} else {
false
}
x22189 = x22477
val x22454 = if (x22447) {
x22196
} else {
val x22439 = if (x22431) {
x22432
} else {
x22432
}
val x22448 = if (x22438) {
x22439
} else {
x22439
}
x22448
}
val x22478 = if (x22453) {
x22454
} else {
x22454
}
x22190 = x22478
()
}
x22484
} else {
val x22325 = new Anon1863173035("","","",x22307,"",80)
x22188 = x22325
x22189 = false
x22190 = x22309
()
}
x22490
}
x22492
}
x22494
}
x22496
} else {
x22188 = x161
x22189 = true
x22190 = x22186
()
}
x22502
}
val x22505 = x22188
val x22506 = x22189
val x22507 = x22190
val x22508 = new ParseResultAnon1863173035(x22505,x22506,x22507)
x22508
}
val x22517 = x22510(x20935)
val x22518 = x22517.empty
val x22524 = if (x22518) {
true
} else {
false
}
val x22550 = if (x22524) {
x161
} else {
val x22523 = if (x22518) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x20933 = if (x20928) {
x935
} else {
val x15843 = x4178.res
val x20925 = if (x20919) {
x161
} else {
val x20918 = if (x20903) {
x161
} else {
val x20902 = if (x20897) {
val x192 = null.asInstanceOf[Tuple2StringOptionInt]
x192
} else {
val x17551 = if (x17543) {
x1
} else {
val x17542 = if (x17537) {
x189
} else {
val x17540 = new Tuple2CharString(x15819,x17536)
x17540
}
val x17547 = x17542._1
val x17548 = x17542._2
val x17549 = x17547+x17548
x17549
}
val x20894 = if (x20888) {
val x285 = null.asInstanceOf[Int]
x285
} else {
x20887
}
val x20895 = if (x20888) {
false
} else {
true
}
val x20896 = new OptionInt(x20894,x20895)
val x20900 = new Tuple2StringOptionInt(x17551,x20896)
x20900
}
val x20908 = x20902._2
val x20909 = x20908.defined
val x20913 = if (x20909) {
""
} else {
""
}
val x20907 = x20902._1
val x20914 = if (x20909) {
x20907
} else {
x20907
}
val x20915 = if (x20909) {
val x20910 = x20908.value
x20910
} else {
80
}
val x20916 = new Anon1863173035(x20913,x20914,x20913,x20913,x20913,x20915)
x20916
}
x20918
}
val x20926 = if (x20919) {
false
} else {
true
}
val x20927 = new OptionAnon1863173035(x20925,x20926)
val x20931 = new Tuple2StringOptionAnon1863173035(x15843,x20927)
x20931
}
val x22519 = x22517.res
val x22520 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x20933,x22519)
x22520
}
val x22528 = x22523._1
val x22530 = x22528._1
val x22531 = x22528._2
val x22532 = x22531.defined
val x22542 = if (x22532) {
x22530
} else {
x22530
}
val x22529 = x22523._2
val x22543 = if (x22532) {
val x22533 = x22531.value
val x22534 = x22533.hostName
x22534
} else {
val x22540 = x22529.hostName
x22540
}
val x22535 = x22529.path
val x22544 = if (x22532) {
x22535
} else {
x22535
}
val x22536 = x22529.queryString
val x22545 = if (x22532) {
x22536
} else {
x22536
}
val x22537 = x22529.fragment
val x22546 = if (x22532) {
x22537
} else {
x22537
}
val x22538 = x22529.port
val x22547 = if (x22532) {
x22538
} else {
x22538
}
val x22548 = new Anon1863173035(x22542,x22543,x22544,x22545,x22546,x22547)
x22548
}
x3944 = x22550
val x22551 = if (x22524) {
true
} else {
false
}
x3945 = x22551
val x22525 = if (x22518) {
0
} else {
val x22521 = x22517.next
x22521
}
val x22552 = if (x22524) {
x22525
} else {
x22525
}
x3946 = x22552
()
} else {
val x20933 = if (x20928) {
x935
} else {
val x15843 = x4178.res
val x20925 = if (x20919) {
x161
} else {
val x20918 = if (x20903) {
x161
} else {
val x20902 = if (x20897) {
val x192 = null.asInstanceOf[Tuple2StringOptionInt]
x192
} else {
val x17551 = if (x17543) {
x1
} else {
val x17542 = if (x17537) {
x189
} else {
val x17540 = new Tuple2CharString(x15819,x17536)
x17540
}
val x17547 = x17542._1
val x17548 = x17542._2
val x17549 = x17547+x17548
x17549
}
val x20894 = if (x20888) {
val x285 = null.asInstanceOf[Int]
x285
} else {
x20887
}
val x20895 = if (x20888) {
false
} else {
true
}
val x20896 = new OptionInt(x20894,x20895)
val x20900 = new Tuple2StringOptionInt(x17551,x20896)
x20900
}
val x20908 = x20902._2
val x20909 = x20908.defined
val x20913 = if (x20909) {
""
} else {
""
}
val x20907 = x20902._1
val x20914 = if (x20909) {
x20907
} else {
x20907
}
val x20915 = if (x20909) {
val x20910 = x20908.value
x20910
} else {
80
}
val x20916 = new Anon1863173035(x20913,x20914,x20913,x20913,x20913,x20915)
x20916
}
x20918
}
val x20926 = if (x20919) {
false
} else {
true
}
val x20927 = new OptionAnon1863173035(x20925,x20926)
val x20931 = new Tuple2StringOptionAnon1863173035(x15843,x20927)
x20931
}
val x22562 = x20933._1
val x22563 = x20933._2
val x22564 = x22563.defined
val x22574 = if (x22564) {
x22562
} else {
x22562
}
val x22558 = x22511.res
val x22575 = if (x22564) {
val x22565 = x22563.value
val x22566 = x22565.hostName
x22566
} else {
val x22572 = x22558.hostName
x22572
}
val x22567 = x22558.path
val x22576 = if (x22564) {
x22567
} else {
x22567
}
val x22568 = x22558.queryString
val x22577 = if (x22564) {
x22568
} else {
x22568
}
val x22569 = x22558.fragment
val x22578 = if (x22564) {
x22569
} else {
x22569
}
val x22570 = x22558.port
val x22579 = if (x22564) {
x22570
} else {
x22570
}
val x22580 = new Anon1863173035(x22574,x22575,x22576,x22577,x22578,x22579)
x3944 = x22580
x3945 = false
val x22560 = x22511.next
x3946 = x22560
()
}
x22586
}
x22588
} else {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x22983 = {x22659: (Int) => 
var x22661: Anon1863173035 = x161
var x22662: Boolean = true
var x22663: Int = x22659
val x22665 = x22659 >= x3954
val x22977 = if (x22665) {
x22661 = x161
x22662 = true
x22663 = x22659
()
} else {
val x22667 = x3943(x22659)
val x22668 = x22667 == '?'
val x22975 = if (x22668) {
var x22676: java.lang.String = ""
var x22677: Boolean = false
val x22669 = x22659 + 1
var x22678: Int = x22669
var x22680: Int = -1
var x22681: Boolean = true
var x22682: Int = x22669
val x22716 = while ({val x22683 = x22681
val x22684 = x22680
val x22685 = x22682
val x22686 = x22684 != x22685
val x22687 = x22683 && x22686
x22687}) {
val x22689 = x22682
x22680 = x22689
val x22691 = x22689 >= x3954
val x22714 = if (x22691) {
x22681 = false
()
} else {
val x22693 = x3943(x22689)
val x22694 = x22693 == '?'
val x22712 = if (x22694) {
val x22699 = x22676
val x22700 = x22677
val x22701 = x22678
val x22703 = x22699+x22693
x22676 = x22703
x22677 = false
val x22695 = x22689 + 1
x22678 = x22695
x22682 = x22695
()
} else {
x22681 = false
()
}
x22712
}
x22714
}
val x22717 = x22676
val x22718 = x22677
val x22719 = x22678
val x22969 = if (x22718) {
x22661 = x161
x22662 = true
x22663 = x22669
()
} else {
var x22735: java.lang.String = ""
var x22736: Boolean = false
var x22737: Int = x22719
var x22739: Int = -1
var x22740: Boolean = true
var x22741: Int = x22719
val x22779 = while ({val x22742 = x22740
val x22743 = x22739
val x22744 = x22741
val x22745 = x22743 != x22744
val x22746 = x22742 && x22745
x22746}) {
val x22748 = x22741
x22739 = x22748
val x22750 = x22748 >= x3954
val x22777 = if (x22750) {
x22740 = false
()
} else {
val x22752 = x3943(x22748)
val x22753 = x22752 > ' '
val x22754 = x22752 != '#'
val x22755 = x22753 && x22754
val x22756 = x22752 != ''
val x22757 = x22755 && x22756
val x22775 = if (x22757) {
val x22762 = x22735
val x22763 = x22736
val x22764 = x22737
val x22766 = x22762+x22752
x22735 = x22766
x22736 = false
val x22758 = x22748 + 1
x22737 = x22758
x22741 = x22758
()
} else {
x22740 = false
()
}
x22775
}
x22777
}
val x22780 = x22735
val x22781 = x22736
val x22782 = x22737
val x22967 = if (x22781) {
x22661 = x161
x22662 = true
x22663 = x22669
()
} else {
val x22784 = x22782 >= x3954
val x22965 = if (x22784) {
val x22798 = new Anon1863173035("","","",x22780,"",80)
x22661 = x22798
x22662 = false
x22663 = x22782
()
} else {
val x22786 = x3943(x22782)
val x22787 = x22786 == '#'
val x22963 = if (x22787) {
var x22805: java.lang.String = ""
var x22806: Boolean = false
val x22788 = x22782 + 1
var x22807: Int = x22788
var x22809: Int = -1
var x22810: Boolean = true
var x22811: Int = x22788
val x22845 = while ({val x22812 = x22810
val x22813 = x22809
val x22814 = x22811
val x22815 = x22813 != x22814
val x22816 = x22812 && x22815
x22816}) {
val x22818 = x22811
x22809 = x22818
val x22820 = x22818 >= x3954
val x22843 = if (x22820) {
x22810 = false
()
} else {
val x22822 = x3943(x22818)
val x22823 = x22822 == '#'
val x22841 = if (x22823) {
val x22828 = x22805
val x22829 = x22806
val x22830 = x22807
val x22832 = x22828+x22822
x22805 = x22832
x22806 = false
val x22824 = x22818 + 1
x22807 = x22824
x22811 = x22824
()
} else {
x22810 = false
()
}
x22841
}
x22843
}
val x22846 = x22805
val x22847 = x22806
val x22848 = x22807
val x22957 = if (x22847) {
val x22798 = new Anon1863173035("","","",x22780,"",80)
x22661 = x22798
x22662 = false
x22663 = x22788
()
} else {
var x22860: java.lang.String = ""
var x22861: Boolean = false
var x22862: Int = x22848
var x22864: Int = -1
var x22865: Boolean = true
var x22866: Int = x22848
val x22902 = while ({val x22867 = x22865
val x22868 = x22864
val x22869 = x22866
val x22870 = x22868 != x22869
val x22871 = x22867 && x22870
x22871}) {
val x22873 = x22866
x22864 = x22873
val x22875 = x22873 >= x3954
val x22900 = if (x22875) {
x22865 = false
()
} else {
val x22877 = x3943(x22873)
val x22878 = x22877 > ' '
val x22879 = x22877 != ''
val x22880 = x22878 && x22879
val x22898 = if (x22880) {
val x22885 = x22860
val x22886 = x22861
val x22887 = x22862
val x22889 = x22885+x22877
x22860 = x22889
x22861 = false
val x22881 = x22873 + 1
x22862 = x22881
x22866 = x22881
()
} else {
x22865 = false
()
}
x22898
}
x22900
}
val x22903 = x22860
val x22904 = x22861
val x22905 = x22862
val x22911 = if (x22904) {
true
} else {
false
}
val x22920 = if (x22911) {
false
} else {
false
}
val x22926 = if (x22920) {
true
} else {
false
}
val x22949 = if (x22926) {
x161
} else {
val x22925 = if (x22920) {
x935
} else {
val x22917 = if (x22911) {
x161
} else {
val x22910 = if (x22904) {
x161
} else {
val x22908 = new Anon1863173035("","","","",x22903,80)
x22908
}
x22910
}
val x22918 = if (x22911) {
false
} else {
true
}
val x22919 = new OptionAnon1863173035(x22917,x22918)
val x22923 = new Tuple2StringOptionAnon1863173035(x22780,x22919)
x22923
}
val x22931 = x22925._2
val x22932 = x22931.defined
val x22941 = if (x22932) {
val x22933 = x22931.value
val x22934 = x22933.schema
x22934
} else {
""
}
val x22942 = if (x22932) {
val x22933 = x22931.value
val x22935 = x22933.hostName
x22935
} else {
""
}
val x22943 = if (x22932) {
val x22933 = x22931.value
val x22936 = x22933.path
x22936
} else {
""
}
val x22930 = x22925._1
val x22944 = if (x22932) {
x22930
} else {
x22930
}
val x22945 = if (x22932) {
val x22933 = x22931.value
val x22937 = x22933.fragment
x22937
} else {
""
}
val x22946 = if (x22932) {
val x22933 = x22931.value
val x22938 = x22933.port
x22938
} else {
80
}
val x22947 = new Anon1863173035(x22941,x22942,x22943,x22944,x22945,x22946)
x22947
}
x22661 = x22949
val x22950 = if (x22926) {
true
} else {
false
}
x22662 = x22950
val x22927 = if (x22920) {
x22669
} else {
val x22912 = if (x22904) {
x22905
} else {
x22905
}
val x22921 = if (x22911) {
x22912
} else {
x22912
}
x22921
}
val x22951 = if (x22926) {
x22927
} else {
x22927
}
x22663 = x22951
()
}
x22957
} else {
val x22798 = new Anon1863173035("","","",x22780,"",80)
x22661 = x22798
x22662 = false
x22663 = x22782
()
}
x22963
}
x22965
}
x22967
}
x22969
} else {
x22661 = x161
x22662 = true
x22663 = x22659
()
}
x22975
}
val x22978 = x22661
val x22979 = x22662
val x22980 = x22663
val x22981 = new ParseResultAnon1863173035(x22978,x22979,x22980)
x22981
}
val x23125 = {x22984: (Int) => 
var x22986: Anon1863173035 = x161
var x22987: Boolean = true
var x22988: Int = x22984
val x22990 = x22984 >= x3954
val x23119 = if (x22990) {
x22986 = x161
x22987 = true
x22988 = x22984
()
} else {
val x22992 = x3943(x22984)
val x22993 = x22992 == '#'
val x23117 = if (x22993) {
var x23001: java.lang.String = ""
var x23002: Boolean = false
val x22994 = x22984 + 1
var x23003: Int = x22994
var x23005: Int = -1
var x23006: Boolean = true
var x23007: Int = x22994
val x23041 = while ({val x23008 = x23006
val x23009 = x23005
val x23010 = x23007
val x23011 = x23009 != x23010
val x23012 = x23008 && x23011
x23012}) {
val x23014 = x23007
x23005 = x23014
val x23016 = x23014 >= x3954
val x23039 = if (x23016) {
x23006 = false
()
} else {
val x23018 = x3943(x23014)
val x23019 = x23018 == '#'
val x23037 = if (x23019) {
val x23024 = x23001
val x23025 = x23002
val x23026 = x23003
val x23028 = x23024+x23018
x23001 = x23028
x23002 = false
val x23020 = x23014 + 1
x23003 = x23020
x23007 = x23020
()
} else {
x23006 = false
()
}
x23037
}
x23039
}
val x23042 = x23001
val x23043 = x23002
val x23044 = x23003
val x23111 = if (x23043) {
x22986 = x161
x22987 = true
x22988 = x22994
()
} else {
var x23053: java.lang.String = ""
var x23054: Boolean = false
var x23055: Int = x23044
var x23057: Int = -1
var x23058: Boolean = true
var x23059: Int = x23044
val x23095 = while ({val x23060 = x23058
val x23061 = x23057
val x23062 = x23059
val x23063 = x23061 != x23062
val x23064 = x23060 && x23063
x23064}) {
val x23066 = x23059
x23057 = x23066
val x23068 = x23066 >= x3954
val x23093 = if (x23068) {
x23058 = false
()
} else {
val x23070 = x3943(x23066)
val x23071 = x23070 > ' '
val x23072 = x23070 != ''
val x23073 = x23071 && x23072
val x23091 = if (x23073) {
val x23078 = x23053
val x23079 = x23054
val x23080 = x23055
val x23082 = x23078+x23070
x23053 = x23082
x23054 = false
val x23074 = x23066 + 1
x23055 = x23074
x23059 = x23074
()
} else {
x23058 = false
()
}
x23091
}
x23093
}
val x23096 = x23053
val x23097 = x23054
val x23098 = x23055
val x23103 = if (x23097) {
x161
} else {
val x23101 = new Anon1863173035("","","","",x23096,80)
x23101
}
x22986 = x23103
val x23104 = if (x23097) {
true
} else {
false
}
x22987 = x23104
val x23105 = if (x23097) {
x23098
} else {
x23098
}
x22988 = x23105
()
}
x23111
} else {
x22986 = x161
x22987 = true
x22988 = x22984
()
}
x23117
}
val x23120 = x22986
val x23121 = x22987
val x23122 = x22988
val x23123 = new ParseResultAnon1863173035(x23120,x23121,x23122)
x23123
}
val x23838 = {x22590: (Int) => 
var x22592: Anon1863173035 = x161
var x22593: Boolean = true
var x22594: Int = x22590
val x22596 = x22590 >= x3954
val x23832 = if (x22596) {
x22592 = x161
x22593 = true
x22594 = x22590
()
} else {
val x22598 = x3943(x22590)
val x22599 = x22598 == '/'
val x23830 = if (x22599) {
var x22607: java.lang.String = ""
var x22608: Boolean = false
val x22600 = x22590 + 1
var x22609: Int = x22600
var x22611: Int = -1
var x22612: Boolean = true
var x22613: Int = x22600
val x22653 = while ({val x22614 = x22612
val x22615 = x22611
val x22616 = x22613
val x22617 = x22615 != x22616
val x22618 = x22614 && x22617
x22618}) {
val x22620 = x22613
x22611 = x22620
val x22622 = x22620 >= x3954
val x22651 = if (x22622) {
x22612 = false
()
} else {
val x22624 = x3943(x22620)
val x22625 = x22624 > ' '
val x22626 = x22624 != '#'
val x22627 = x22625 && x22626
val x22628 = x22624 != '?'
val x22629 = x22627 && x22628
val x22630 = x22624 != ''
val x22631 = x22629 && x22630
val x22649 = if (x22631) {
val x22636 = x22607
val x22637 = x22608
val x22638 = x22609
val x22640 = x22636+x22624
x22607 = x22640
x22608 = false
val x22632 = x22620 + 1
x22609 = x22632
x22613 = x22632
()
} else {
x22612 = false
()
}
x22649
}
x22651
}
val x22654 = x22607
val x22655 = x22608
val x22656 = x22609
val x23824 = if (x22655) {
x22592 = x161
x22593 = true
x22594 = x22600
()
} else {
val x23126 = x22983(x22656)
val x23138 = x23126.empty
val x23822 = if (x23138) {
val x23139 = x23125(x22656)
val x23140 = x23139.empty
val x23149 = if (x23140) {
false
} else {
false
}
val x23155 = if (x23149) {
true
} else {
false
}
val x23495 = if (x23155) {
x22592 = x161
x22593 = true
val x23156 = if (x23149) {
x22600
} else {
val x23141 = x23139.next
val x23150 = if (x23140) {
x23141
} else {
x23141
}
x23150
}
x22594 = x23156
()
} else {
val x23156 = if (x23149) {
x22600
} else {
val x23141 = x23139.next
val x23150 = if (x23140) {
x23141
} else {
x23141
}
x23150
}
val x23158 = x23156 >= x3954
val x23493 = if (x23158) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
} else {
val x23160 = x3943(x23156)
val x23161 = x23160 == 'H'
val x23491 = if (x23161) {
val x23162 = x23156 + 1
val x23199 = x23162 >= x3954
val x23485 = if (x23199) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
} else {
val x23201 = x3943(x23162)
val x23202 = x23201 == 'T'
val x23483 = if (x23202) {
val x23203 = x23162 + 1
val x23211 = x23203 >= x3954
val x23477 = if (x23211) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
} else {
val x23213 = x3943(x23203)
val x23214 = x23213 == 'T'
val x23475 = if (x23214) {
val x23215 = x23203 + 1
val x23224 = x23215 >= x3954
val x23469 = if (x23224) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
} else {
val x23226 = x3943(x23215)
val x23227 = x23226 == 'P'
val x23467 = if (x23227) {
val x23228 = x23215 + 1
val x23237 = x23228 >= x3954
val x23461 = if (x23237) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
} else {
val x23239 = x3943(x23228)
val x23240 = x23239 == '/'
val x23459 = if (x23240) {
var x23272: Int = 0
var x23273: Boolean = false
val x23241 = x23228 + 1
var x23274: Int = x23241
var x23276: Int = -1
var x23277: Boolean = true
var x23278: Int = x23241
val x23319 = while ({val x23279 = x23277
val x23280 = x23276
val x23281 = x23278
val x23282 = x23280 != x23281
val x23283 = x23279 && x23282
x23283}) {
val x23285 = x23278
x23276 = x23285
val x23287 = x23285 >= x3954
val x23317 = if (x23287) {
x23277 = false
()
} else {
val x23289 = x3943(x23285)
val x23290 = x23289 >= '0'
val x23291 = x23289 <= '9'
val x23292 = x23290 && x23291
val x23315 = if (x23292) {
val x23301 = x23272
val x23302 = x23273
val x23303 = x23274
val x23298 = x23289 - '0'
val x23299 = x23298.toInt
val x23305 = x23301 * 10
val x23306 = x23305 + x23299
x23272 = x23306
x23273 = false
val x23293 = x23285 + 1
x23274 = x23293
x23278 = x23293
()
} else {
x23277 = false
()
}
x23315
}
x23317
}
val x23320 = x23272
val x23321 = x23273
val x23322 = x23274
val x23453 = if (x23321) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23241
()
} else {
val x23325 = x23322 >= x3954
val x23451 = if (x23325) {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23241
()
} else {
val x23327 = x3943(x23322)
val x23328 = x23327 == '.'
val x23449 = if (x23328) {
var x23344: Int = 0
var x23345: Boolean = false
val x23329 = x23322 + 1
var x23346: Int = x23329
var x23348: Int = -1
var x23349: Boolean = true
var x23350: Int = x23329
val x23391 = while ({val x23351 = x23349
val x23352 = x23348
val x23353 = x23350
val x23354 = x23352 != x23353
val x23355 = x23351 && x23354
x23355}) {
val x23357 = x23350
x23348 = x23357
val x23359 = x23357 >= x3954
val x23389 = if (x23359) {
x23349 = false
()
} else {
val x23361 = x3943(x23357)
val x23362 = x23361 >= '0'
val x23363 = x23361 <= '9'
val x23364 = x23362 && x23363
val x23387 = if (x23364) {
val x23373 = x23344
val x23374 = x23345
val x23375 = x23346
val x23370 = x23361 - '0'
val x23371 = x23370.toInt
val x23377 = x23373 * 10
val x23378 = x23377 + x23371
x23344 = x23378
x23345 = false
val x23365 = x23357 + 1
x23346 = x23365
x23350 = x23365
()
} else {
x23349 = false
()
}
x23387
}
x23389
}
val x23392 = x23344
val x23393 = x23345
val x23394 = x23346
val x23399 = if (x23393) {
true
} else {
false
}
val x23408 = if (x23399) {
false
} else {
false
}
val x23413 = if (x23408) {
true
} else {
false
}
val x23437 = if (x23413) {
x161
} else {
val x23412 = if (x23408) {
x935
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
x23154
}
val x23418 = x23412._2
val x23419 = x23418.defined
val x23429 = if (x23419) {
val x23420 = x23418.value
val x23422 = x23420.schema
x23422
} else {
""
}
val x23430 = if (x23419) {
val x23420 = x23418.value
val x23423 = x23420.hostName
x23423
} else {
""
}
val x23417 = x23412._1
val x23421 = "/"+x23417
val x23431 = if (x23419) {
x23421
} else {
x23421
}
val x23432 = if (x23419) {
val x23420 = x23418.value
val x23424 = x23420.queryString
x23424
} else {
""
}
val x23433 = if (x23419) {
val x23420 = x23418.value
val x23425 = x23420.fragment
x23425
} else {
""
}
val x23434 = if (x23419) {
val x23420 = x23418.value
val x23426 = x23420.port
x23426
} else {
80
}
val x23435 = new Anon1863173035(x23429,x23430,x23431,x23432,x23433,x23434)
x23435
}
x22592 = x23437
val x23438 = if (x23413) {
true
} else {
false
}
x22593 = x23438
val x23414 = if (x23408) {
x22600
} else {
val x23400 = if (x23393) {
x23241
} else {
x23394
}
val x23409 = if (x23399) {
x23400
} else {
x23400
}
x23409
}
val x23439 = if (x23413) {
x23414
} else {
x23414
}
x22594 = x23439
()
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23241
()
}
x23449
}
x23451
}
x23453
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
}
x23459
}
x23461
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
}
x23467
}
x23469
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
}
x23475
}
x23477
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
}
x23483
}
x23485
} else {
val x23154 = if (x23149) {
x935
} else {
val x23146 = if (x23140) {
x161
} else {
val x23143 = x23139.res
x23143
}
val x23147 = if (x23140) {
false
} else {
true
}
val x23148 = new OptionAnon1863173035(x23146,x23147)
val x23152 = new Tuple2StringOptionAnon1863173035(x22654,x23148)
x23152
}
val x23176 = x23154._2
val x23177 = x23176.defined
val x23187 = if (x23177) {
val x23178 = x23176.value
val x23180 = x23178.schema
x23180
} else {
""
}
val x23188 = if (x23177) {
val x23178 = x23176.value
val x23181 = x23178.hostName
x23181
} else {
""
}
val x23175 = x23154._1
val x23179 = "/"+x23175
val x23189 = if (x23177) {
x23179
} else {
x23179
}
val x23190 = if (x23177) {
val x23178 = x23176.value
val x23182 = x23178.queryString
x23182
} else {
""
}
val x23191 = if (x23177) {
val x23178 = x23176.value
val x23183 = x23178.fragment
x23183
} else {
""
}
val x23192 = if (x23177) {
val x23178 = x23176.value
val x23184 = x23178.port
x23184
} else {
80
}
val x23193 = new Anon1863173035(x23187,x23188,x23189,x23190,x23191,x23192)
x22592 = x23193
x22593 = false
x22594 = x23156
()
}
x23491
}
x23493
}
x23495
} else {
val x23499 = x23126.next
val x23503 = x23499 >= x3954
val x23820 = if (x23503) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
} else {
val x23505 = x3943(x23499)
val x23506 = x23505 == 'H'
val x23818 = if (x23506) {
val x23507 = x23499 + 1
val x23526 = x23507 >= x3954
val x23812 = if (x23526) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
} else {
val x23528 = x3943(x23507)
val x23529 = x23528 == 'T'
val x23810 = if (x23529) {
val x23530 = x23507 + 1
val x23538 = x23530 >= x3954
val x23804 = if (x23538) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
} else {
val x23540 = x3943(x23530)
val x23541 = x23540 == 'T'
val x23802 = if (x23541) {
val x23542 = x23530 + 1
val x23551 = x23542 >= x3954
val x23796 = if (x23551) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
} else {
val x23553 = x3943(x23542)
val x23554 = x23553 == 'P'
val x23794 = if (x23554) {
val x23555 = x23542 + 1
val x23564 = x23555 >= x3954
val x23788 = if (x23564) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
} else {
val x23566 = x3943(x23555)
val x23567 = x23566 == '/'
val x23786 = if (x23567) {
var x23599: Int = 0
var x23600: Boolean = false
val x23568 = x23555 + 1
var x23601: Int = x23568
var x23603: Int = -1
var x23604: Boolean = true
var x23605: Int = x23568
val x23646 = while ({val x23606 = x23604
val x23607 = x23603
val x23608 = x23605
val x23609 = x23607 != x23608
val x23610 = x23606 && x23609
x23610}) {
val x23612 = x23605
x23603 = x23612
val x23614 = x23612 >= x3954
val x23644 = if (x23614) {
x23604 = false
()
} else {
val x23616 = x3943(x23612)
val x23617 = x23616 >= '0'
val x23618 = x23616 <= '9'
val x23619 = x23617 && x23618
val x23642 = if (x23619) {
val x23628 = x23599
val x23629 = x23600
val x23630 = x23601
val x23625 = x23616 - '0'
val x23626 = x23625.toInt
val x23632 = x23628 * 10
val x23633 = x23632 + x23626
x23599 = x23633
x23600 = false
val x23620 = x23612 + 1
x23601 = x23620
x23605 = x23620
()
} else {
x23604 = false
()
}
x23642
}
x23644
}
val x23647 = x23599
val x23648 = x23600
val x23649 = x23601
val x23780 = if (x23648) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23568
()
} else {
val x23652 = x23649 >= x3954
val x23778 = if (x23652) {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23568
()
} else {
val x23654 = x3943(x23649)
val x23655 = x23654 == '.'
val x23776 = if (x23655) {
var x23671: Int = 0
var x23672: Boolean = false
val x23656 = x23649 + 1
var x23673: Int = x23656
var x23675: Int = -1
var x23676: Boolean = true
var x23677: Int = x23656
val x23718 = while ({val x23678 = x23676
val x23679 = x23675
val x23680 = x23677
val x23681 = x23679 != x23680
val x23682 = x23678 && x23681
x23682}) {
val x23684 = x23677
x23675 = x23684
val x23686 = x23684 >= x3954
val x23716 = if (x23686) {
x23676 = false
()
} else {
val x23688 = x3943(x23684)
val x23689 = x23688 >= '0'
val x23690 = x23688 <= '9'
val x23691 = x23689 && x23690
val x23714 = if (x23691) {
val x23700 = x23671
val x23701 = x23672
val x23702 = x23673
val x23697 = x23688 - '0'
val x23698 = x23697.toInt
val x23704 = x23700 * 10
val x23705 = x23704 + x23698
x23671 = x23705
x23672 = false
val x23692 = x23684 + 1
x23673 = x23692
x23677 = x23692
()
} else {
x23676 = false
()
}
x23714
}
x23716
}
val x23719 = x23671
val x23720 = x23672
val x23721 = x23673
val x23726 = if (x23720) {
true
} else {
false
}
val x23735 = if (x23726) {
false
} else {
false
}
val x23740 = if (x23735) {
true
} else {
false
}
val x23764 = if (x23740) {
x161
} else {
val x23739 = if (x23735) {
x935
} else {
val x23497 = x23126.res
val x23498 = new OptionAnon1863173035(x23497,true)
val x23501 = new Tuple2StringOptionAnon1863173035(x22654,x23498)
x23501
}
val x23745 = x23739._2
val x23746 = x23745.defined
val x23756 = if (x23746) {
val x23747 = x23745.value
val x23749 = x23747.schema
x23749
} else {
""
}
val x23757 = if (x23746) {
val x23747 = x23745.value
val x23750 = x23747.hostName
x23750
} else {
""
}
val x23744 = x23739._1
val x23748 = "/"+x23744
val x23758 = if (x23746) {
x23748
} else {
x23748
}
val x23759 = if (x23746) {
val x23747 = x23745.value
val x23751 = x23747.queryString
x23751
} else {
""
}
val x23760 = if (x23746) {
val x23747 = x23745.value
val x23752 = x23747.fragment
x23752
} else {
""
}
val x23761 = if (x23746) {
val x23747 = x23745.value
val x23753 = x23747.port
x23753
} else {
80
}
val x23762 = new Anon1863173035(x23756,x23757,x23758,x23759,x23760,x23761)
x23762
}
x22592 = x23764
val x23765 = if (x23740) {
true
} else {
false
}
x22593 = x23765
val x23741 = if (x23735) {
x22600
} else {
val x23727 = if (x23720) {
x23568
} else {
x23721
}
val x23736 = if (x23726) {
x23727
} else {
x23727
}
x23736
}
val x23766 = if (x23740) {
x23741
} else {
x23741
}
x22594 = x23766
()
} else {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23568
()
}
x23776
}
x23778
}
x23780
} else {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
}
x23786
}
x23788
} else {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
}
x23794
}
x23796
} else {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
}
x23802
}
x23804
} else {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
}
x23810
}
x23812
} else {
val x23514 = "/"+x22654
val x23497 = x23126.res
val x23515 = x23497.schema
val x23516 = x23497.hostName
val x23517 = x23497.queryString
val x23518 = x23497.fragment
val x23519 = x23497.port
val x23520 = new Anon1863173035(x23515,x23516,x23514,x23517,x23518,x23519)
x22592 = x23520
x22593 = false
x22594 = x23499
()
}
x23818
}
x23820
}
x23822
}
x23824
} else {
x22592 = x161
x22593 = true
x22594 = x22590
()
}
x23830
}
val x23833 = x22592
val x23834 = x22593
val x23835 = x22594
val x23836 = new ParseResultAnon1863173035(x23833,x23834,x23835)
x23836
}
val x24164 = x23838(x17553)
val x24165 = x24164.empty
val x24221 = if (x24165) {
val x24163 = {x23839: (Int) => 
var x23841: Anon1863173035 = x161
var x23842: Boolean = true
var x23843: Int = x23839
val x23845 = x23839 >= x3954
val x24157 = if (x23845) {
x23841 = x161
x23842 = true
x23843 = x23839
()
} else {
val x23847 = x3943(x23839)
val x23848 = x23847 == '?'
val x24155 = if (x23848) {
var x23856: java.lang.String = ""
var x23857: Boolean = false
val x23849 = x23839 + 1
var x23858: Int = x23849
var x23860: Int = -1
var x23861: Boolean = true
var x23862: Int = x23849
val x23896 = while ({val x23863 = x23861
val x23864 = x23860
val x23865 = x23862
val x23866 = x23864 != x23865
val x23867 = x23863 && x23866
x23867}) {
val x23869 = x23862
x23860 = x23869
val x23871 = x23869 >= x3954
val x23894 = if (x23871) {
x23861 = false
()
} else {
val x23873 = x3943(x23869)
val x23874 = x23873 == '?'
val x23892 = if (x23874) {
val x23879 = x23856
val x23880 = x23857
val x23881 = x23858
val x23883 = x23879+x23873
x23856 = x23883
x23857 = false
val x23875 = x23869 + 1
x23858 = x23875
x23862 = x23875
()
} else {
x23861 = false
()
}
x23892
}
x23894
}
val x23897 = x23856
val x23898 = x23857
val x23899 = x23858
val x24149 = if (x23898) {
x23841 = x161
x23842 = true
x23843 = x23849
()
} else {
var x23915: java.lang.String = ""
var x23916: Boolean = false
var x23917: Int = x23899
var x23919: Int = -1
var x23920: Boolean = true
var x23921: Int = x23899
val x23959 = while ({val x23922 = x23920
val x23923 = x23919
val x23924 = x23921
val x23925 = x23923 != x23924
val x23926 = x23922 && x23925
x23926}) {
val x23928 = x23921
x23919 = x23928
val x23930 = x23928 >= x3954
val x23957 = if (x23930) {
x23920 = false
()
} else {
val x23932 = x3943(x23928)
val x23933 = x23932 > ' '
val x23934 = x23932 != '#'
val x23935 = x23933 && x23934
val x23936 = x23932 != ''
val x23937 = x23935 && x23936
val x23955 = if (x23937) {
val x23942 = x23915
val x23943 = x23916
val x23944 = x23917
val x23946 = x23942+x23932
x23915 = x23946
x23916 = false
val x23938 = x23928 + 1
x23917 = x23938
x23921 = x23938
()
} else {
x23920 = false
()
}
x23955
}
x23957
}
val x23960 = x23915
val x23961 = x23916
val x23962 = x23917
val x24147 = if (x23961) {
x23841 = x161
x23842 = true
x23843 = x23849
()
} else {
val x23964 = x23962 >= x3954
val x24145 = if (x23964) {
val x23978 = new Anon1863173035("","","",x23960,"",80)
x23841 = x23978
x23842 = false
x23843 = x23962
()
} else {
val x23966 = x3943(x23962)
val x23967 = x23966 == '#'
val x24143 = if (x23967) {
var x23985: java.lang.String = ""
var x23986: Boolean = false
val x23968 = x23962 + 1
var x23987: Int = x23968
var x23989: Int = -1
var x23990: Boolean = true
var x23991: Int = x23968
val x24025 = while ({val x23992 = x23990
val x23993 = x23989
val x23994 = x23991
val x23995 = x23993 != x23994
val x23996 = x23992 && x23995
x23996}) {
val x23998 = x23991
x23989 = x23998
val x24000 = x23998 >= x3954
val x24023 = if (x24000) {
x23990 = false
()
} else {
val x24002 = x3943(x23998)
val x24003 = x24002 == '#'
val x24021 = if (x24003) {
val x24008 = x23985
val x24009 = x23986
val x24010 = x23987
val x24012 = x24008+x24002
x23985 = x24012
x23986 = false
val x24004 = x23998 + 1
x23987 = x24004
x23991 = x24004
()
} else {
x23990 = false
()
}
x24021
}
x24023
}
val x24026 = x23985
val x24027 = x23986
val x24028 = x23987
val x24137 = if (x24027) {
val x23978 = new Anon1863173035("","","",x23960,"",80)
x23841 = x23978
x23842 = false
x23843 = x23968
()
} else {
var x24040: java.lang.String = ""
var x24041: Boolean = false
var x24042: Int = x24028
var x24044: Int = -1
var x24045: Boolean = true
var x24046: Int = x24028
val x24082 = while ({val x24047 = x24045
val x24048 = x24044
val x24049 = x24046
val x24050 = x24048 != x24049
val x24051 = x24047 && x24050
x24051}) {
val x24053 = x24046
x24044 = x24053
val x24055 = x24053 >= x3954
val x24080 = if (x24055) {
x24045 = false
()
} else {
val x24057 = x3943(x24053)
val x24058 = x24057 > ' '
val x24059 = x24057 != ''
val x24060 = x24058 && x24059
val x24078 = if (x24060) {
val x24065 = x24040
val x24066 = x24041
val x24067 = x24042
val x24069 = x24065+x24057
x24040 = x24069
x24041 = false
val x24061 = x24053 + 1
x24042 = x24061
x24046 = x24061
()
} else {
x24045 = false
()
}
x24078
}
x24080
}
val x24083 = x24040
val x24084 = x24041
val x24085 = x24042
val x24091 = if (x24084) {
true
} else {
false
}
val x24100 = if (x24091) {
false
} else {
false
}
val x24106 = if (x24100) {
true
} else {
false
}
val x24129 = if (x24106) {
x161
} else {
val x24105 = if (x24100) {
x935
} else {
val x24097 = if (x24091) {
x161
} else {
val x24090 = if (x24084) {
x161
} else {
val x24088 = new Anon1863173035("","","","",x24083,80)
x24088
}
x24090
}
val x24098 = if (x24091) {
false
} else {
true
}
val x24099 = new OptionAnon1863173035(x24097,x24098)
val x24103 = new Tuple2StringOptionAnon1863173035(x23960,x24099)
x24103
}
val x24111 = x24105._2
val x24112 = x24111.defined
val x24121 = if (x24112) {
val x24113 = x24111.value
val x24114 = x24113.schema
x24114
} else {
""
}
val x24122 = if (x24112) {
val x24113 = x24111.value
val x24115 = x24113.hostName
x24115
} else {
""
}
val x24123 = if (x24112) {
val x24113 = x24111.value
val x24116 = x24113.path
x24116
} else {
""
}
val x24110 = x24105._1
val x24124 = if (x24112) {
x24110
} else {
x24110
}
val x24125 = if (x24112) {
val x24113 = x24111.value
val x24117 = x24113.fragment
x24117
} else {
""
}
val x24126 = if (x24112) {
val x24113 = x24111.value
val x24118 = x24113.port
x24118
} else {
80
}
val x24127 = new Anon1863173035(x24121,x24122,x24123,x24124,x24125,x24126)
x24127
}
x23841 = x24129
val x24130 = if (x24106) {
true
} else {
false
}
x23842 = x24130
val x24107 = if (x24100) {
x23849
} else {
val x24092 = if (x24084) {
x24085
} else {
x24085
}
val x24101 = if (x24091) {
x24092
} else {
x24092
}
x24101
}
val x24131 = if (x24106) {
x24107
} else {
x24107
}
x23843 = x24131
()
}
x24137
} else {
val x23978 = new Anon1863173035("","","",x23960,"",80)
x23841 = x23978
x23842 = false
x23843 = x23962
()
}
x24143
}
x24145
}
x24147
}
x24149
} else {
x23841 = x161
x23842 = true
x23843 = x23839
()
}
x24155
}
val x24158 = x23841
val x24159 = x23842
val x24160 = x23843
val x24161 = new ParseResultAnon1863173035(x24158,x24159,x24160)
x24161
}
val x24166 = x24163(x17553)
val x24167 = x24166.empty
val x24173 = if (x24167) {
true
} else {
false
}
val x24199 = if (x24173) {
x161
} else {
val x24172 = if (x24167) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x15843 = x4178.res
val x17551 = if (x17543) {
x1
} else {
val x17542 = if (x17537) {
x189
} else {
val x17540 = new Tuple2CharString(x15819,x17536)
x17540
}
val x17547 = x17542._1
val x17548 = x17542._2
val x17549 = x17547+x17548
x17549
}
val x19199 = new Anon1863173035("",x17551,"","","",80)
val x19201 = new OptionAnon1863173035(x19199,true)
val x19203 = new Tuple2StringOptionAnon1863173035(x15843,x19201)
val x24168 = x24166.res
val x24169 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x19203,x24168)
x24169
}
val x24177 = x24172._1
val x24179 = x24177._1
val x24180 = x24177._2
val x24181 = x24180.defined
val x24191 = if (x24181) {
x24179
} else {
x24179
}
val x24178 = x24172._2
val x24192 = if (x24181) {
val x24182 = x24180.value
val x24183 = x24182.hostName
x24183
} else {
val x24189 = x24178.hostName
x24189
}
val x24184 = x24178.path
val x24193 = if (x24181) {
x24184
} else {
x24184
}
val x24185 = x24178.queryString
val x24194 = if (x24181) {
x24185
} else {
x24185
}
val x24186 = x24178.fragment
val x24195 = if (x24181) {
x24186
} else {
x24186
}
val x24187 = x24178.port
val x24196 = if (x24181) {
x24187
} else {
x24187
}
val x24197 = new Anon1863173035(x24191,x24192,x24193,x24194,x24195,x24196)
x24197
}
x3944 = x24199
val x24200 = if (x24173) {
true
} else {
false
}
x3945 = x24200
val x24174 = if (x24167) {
0
} else {
val x24170 = x24166.next
x24170
}
val x24201 = if (x24173) {
x24174
} else {
x24174
}
x3946 = x24201
()
} else {
val x15843 = x4178.res
val x17551 = if (x17543) {
x1
} else {
val x17542 = if (x17537) {
x189
} else {
val x17540 = new Tuple2CharString(x15819,x17536)
x17540
}
val x17547 = x17542._1
val x17548 = x17542._2
val x17549 = x17547+x17548
x17549
}
val x24207 = x24164.res
val x24211 = x24207.path
val x24212 = x24207.queryString
val x24213 = x24207.fragment
val x24214 = x24207.port
val x24215 = new Anon1863173035(x15843,x17551,x24211,x24212,x24213,x24214)
x3944 = x24215
x3945 = false
val x24209 = x24164.next
x3946 = x24209
()
}
x24221
}
x24223
}
x24225
}
x24227
} else {
val x935 = null.asInstanceOf[Tuple2StringOptionAnon1863173035]
val x24622 = {x24298: (Int) => 
var x24300: Anon1863173035 = x161
var x24301: Boolean = true
var x24302: Int = x24298
val x24304 = x24298 >= x3954
val x24616 = if (x24304) {
x24300 = x161
x24301 = true
x24302 = x24298
()
} else {
val x24306 = x3943(x24298)
val x24307 = x24306 == '?'
val x24614 = if (x24307) {
var x24315: java.lang.String = ""
var x24316: Boolean = false
val x24308 = x24298 + 1
var x24317: Int = x24308
var x24319: Int = -1
var x24320: Boolean = true
var x24321: Int = x24308
val x24355 = while ({val x24322 = x24320
val x24323 = x24319
val x24324 = x24321
val x24325 = x24323 != x24324
val x24326 = x24322 && x24325
x24326}) {
val x24328 = x24321
x24319 = x24328
val x24330 = x24328 >= x3954
val x24353 = if (x24330) {
x24320 = false
()
} else {
val x24332 = x3943(x24328)
val x24333 = x24332 == '?'
val x24351 = if (x24333) {
val x24338 = x24315
val x24339 = x24316
val x24340 = x24317
val x24342 = x24338+x24332
x24315 = x24342
x24316 = false
val x24334 = x24328 + 1
x24317 = x24334
x24321 = x24334
()
} else {
x24320 = false
()
}
x24351
}
x24353
}
val x24356 = x24315
val x24357 = x24316
val x24358 = x24317
val x24608 = if (x24357) {
x24300 = x161
x24301 = true
x24302 = x24308
()
} else {
var x24374: java.lang.String = ""
var x24375: Boolean = false
var x24376: Int = x24358
var x24378: Int = -1
var x24379: Boolean = true
var x24380: Int = x24358
val x24418 = while ({val x24381 = x24379
val x24382 = x24378
val x24383 = x24380
val x24384 = x24382 != x24383
val x24385 = x24381 && x24384
x24385}) {
val x24387 = x24380
x24378 = x24387
val x24389 = x24387 >= x3954
val x24416 = if (x24389) {
x24379 = false
()
} else {
val x24391 = x3943(x24387)
val x24392 = x24391 > ' '
val x24393 = x24391 != '#'
val x24394 = x24392 && x24393
val x24395 = x24391 != ''
val x24396 = x24394 && x24395
val x24414 = if (x24396) {
val x24401 = x24374
val x24402 = x24375
val x24403 = x24376
val x24405 = x24401+x24391
x24374 = x24405
x24375 = false
val x24397 = x24387 + 1
x24376 = x24397
x24380 = x24397
()
} else {
x24379 = false
()
}
x24414
}
x24416
}
val x24419 = x24374
val x24420 = x24375
val x24421 = x24376
val x24606 = if (x24420) {
x24300 = x161
x24301 = true
x24302 = x24308
()
} else {
val x24423 = x24421 >= x3954
val x24604 = if (x24423) {
val x24437 = new Anon1863173035("","","",x24419,"",80)
x24300 = x24437
x24301 = false
x24302 = x24421
()
} else {
val x24425 = x3943(x24421)
val x24426 = x24425 == '#'
val x24602 = if (x24426) {
var x24444: java.lang.String = ""
var x24445: Boolean = false
val x24427 = x24421 + 1
var x24446: Int = x24427
var x24448: Int = -1
var x24449: Boolean = true
var x24450: Int = x24427
val x24484 = while ({val x24451 = x24449
val x24452 = x24448
val x24453 = x24450
val x24454 = x24452 != x24453
val x24455 = x24451 && x24454
x24455}) {
val x24457 = x24450
x24448 = x24457
val x24459 = x24457 >= x3954
val x24482 = if (x24459) {
x24449 = false
()
} else {
val x24461 = x3943(x24457)
val x24462 = x24461 == '#'
val x24480 = if (x24462) {
val x24467 = x24444
val x24468 = x24445
val x24469 = x24446
val x24471 = x24467+x24461
x24444 = x24471
x24445 = false
val x24463 = x24457 + 1
x24446 = x24463
x24450 = x24463
()
} else {
x24449 = false
()
}
x24480
}
x24482
}
val x24485 = x24444
val x24486 = x24445
val x24487 = x24446
val x24596 = if (x24486) {
val x24437 = new Anon1863173035("","","",x24419,"",80)
x24300 = x24437
x24301 = false
x24302 = x24427
()
} else {
var x24499: java.lang.String = ""
var x24500: Boolean = false
var x24501: Int = x24487
var x24503: Int = -1
var x24504: Boolean = true
var x24505: Int = x24487
val x24541 = while ({val x24506 = x24504
val x24507 = x24503
val x24508 = x24505
val x24509 = x24507 != x24508
val x24510 = x24506 && x24509
x24510}) {
val x24512 = x24505
x24503 = x24512
val x24514 = x24512 >= x3954
val x24539 = if (x24514) {
x24504 = false
()
} else {
val x24516 = x3943(x24512)
val x24517 = x24516 > ' '
val x24518 = x24516 != ''
val x24519 = x24517 && x24518
val x24537 = if (x24519) {
val x24524 = x24499
val x24525 = x24500
val x24526 = x24501
val x24528 = x24524+x24516
x24499 = x24528
x24500 = false
val x24520 = x24512 + 1
x24501 = x24520
x24505 = x24520
()
} else {
x24504 = false
()
}
x24537
}
x24539
}
val x24542 = x24499
val x24543 = x24500
val x24544 = x24501
val x24550 = if (x24543) {
true
} else {
false
}
val x24559 = if (x24550) {
false
} else {
false
}
val x24565 = if (x24559) {
true
} else {
false
}
val x24588 = if (x24565) {
x161
} else {
val x24564 = if (x24559) {
x935
} else {
val x24556 = if (x24550) {
x161
} else {
val x24549 = if (x24543) {
x161
} else {
val x24547 = new Anon1863173035("","","","",x24542,80)
x24547
}
x24549
}
val x24557 = if (x24550) {
false
} else {
true
}
val x24558 = new OptionAnon1863173035(x24556,x24557)
val x24562 = new Tuple2StringOptionAnon1863173035(x24419,x24558)
x24562
}
val x24570 = x24564._2
val x24571 = x24570.defined
val x24580 = if (x24571) {
val x24572 = x24570.value
val x24573 = x24572.schema
x24573
} else {
""
}
val x24581 = if (x24571) {
val x24572 = x24570.value
val x24574 = x24572.hostName
x24574
} else {
""
}
val x24582 = if (x24571) {
val x24572 = x24570.value
val x24575 = x24572.path
x24575
} else {
""
}
val x24569 = x24564._1
val x24583 = if (x24571) {
x24569
} else {
x24569
}
val x24584 = if (x24571) {
val x24572 = x24570.value
val x24576 = x24572.fragment
x24576
} else {
""
}
val x24585 = if (x24571) {
val x24572 = x24570.value
val x24577 = x24572.port
x24577
} else {
80
}
val x24586 = new Anon1863173035(x24580,x24581,x24582,x24583,x24584,x24585)
x24586
}
x24300 = x24588
val x24589 = if (x24565) {
true
} else {
false
}
x24301 = x24589
val x24566 = if (x24559) {
x24308
} else {
val x24551 = if (x24543) {
x24544
} else {
x24544
}
val x24560 = if (x24550) {
x24551
} else {
x24551
}
x24560
}
val x24590 = if (x24565) {
x24566
} else {
x24566
}
x24302 = x24590
()
}
x24596
} else {
val x24437 = new Anon1863173035("","","",x24419,"",80)
x24300 = x24437
x24301 = false
x24302 = x24421
()
}
x24602
}
x24604
}
x24606
}
x24608
} else {
x24300 = x161
x24301 = true
x24302 = x24298
()
}
x24614
}
val x24617 = x24300
val x24618 = x24301
val x24619 = x24302
val x24620 = new ParseResultAnon1863173035(x24617,x24618,x24619)
x24620
}
val x24764 = {x24623: (Int) => 
var x24625: Anon1863173035 = x161
var x24626: Boolean = true
var x24627: Int = x24623
val x24629 = x24623 >= x3954
val x24758 = if (x24629) {
x24625 = x161
x24626 = true
x24627 = x24623
()
} else {
val x24631 = x3943(x24623)
val x24632 = x24631 == '#'
val x24756 = if (x24632) {
var x24640: java.lang.String = ""
var x24641: Boolean = false
val x24633 = x24623 + 1
var x24642: Int = x24633
var x24644: Int = -1
var x24645: Boolean = true
var x24646: Int = x24633
val x24680 = while ({val x24647 = x24645
val x24648 = x24644
val x24649 = x24646
val x24650 = x24648 != x24649
val x24651 = x24647 && x24650
x24651}) {
val x24653 = x24646
x24644 = x24653
val x24655 = x24653 >= x3954
val x24678 = if (x24655) {
x24645 = false
()
} else {
val x24657 = x3943(x24653)
val x24658 = x24657 == '#'
val x24676 = if (x24658) {
val x24663 = x24640
val x24664 = x24641
val x24665 = x24642
val x24667 = x24663+x24657
x24640 = x24667
x24641 = false
val x24659 = x24653 + 1
x24642 = x24659
x24646 = x24659
()
} else {
x24645 = false
()
}
x24676
}
x24678
}
val x24681 = x24640
val x24682 = x24641
val x24683 = x24642
val x24750 = if (x24682) {
x24625 = x161
x24626 = true
x24627 = x24633
()
} else {
var x24692: java.lang.String = ""
var x24693: Boolean = false
var x24694: Int = x24683
var x24696: Int = -1
var x24697: Boolean = true
var x24698: Int = x24683
val x24734 = while ({val x24699 = x24697
val x24700 = x24696
val x24701 = x24698
val x24702 = x24700 != x24701
val x24703 = x24699 && x24702
x24703}) {
val x24705 = x24698
x24696 = x24705
val x24707 = x24705 >= x3954
val x24732 = if (x24707) {
x24697 = false
()
} else {
val x24709 = x3943(x24705)
val x24710 = x24709 > ' '
val x24711 = x24709 != ''
val x24712 = x24710 && x24711
val x24730 = if (x24712) {
val x24717 = x24692
val x24718 = x24693
val x24719 = x24694
val x24721 = x24717+x24709
x24692 = x24721
x24693 = false
val x24713 = x24705 + 1
x24694 = x24713
x24698 = x24713
()
} else {
x24697 = false
()
}
x24730
}
x24732
}
val x24735 = x24692
val x24736 = x24693
val x24737 = x24694
val x24742 = if (x24736) {
x161
} else {
val x24740 = new Anon1863173035("","","","",x24735,80)
x24740
}
x24625 = x24742
val x24743 = if (x24736) {
true
} else {
false
}
x24626 = x24743
val x24744 = if (x24736) {
x24737
} else {
x24737
}
x24627 = x24744
()
}
x24750
} else {
x24625 = x161
x24626 = true
x24627 = x24623
()
}
x24756
}
val x24759 = x24625
val x24760 = x24626
val x24761 = x24627
val x24762 = new ParseResultAnon1863173035(x24759,x24760,x24761)
x24762
}
val x25477 = {x24229: (Int) => 
var x24231: Anon1863173035 = x161
var x24232: Boolean = true
var x24233: Int = x24229
val x24235 = x24229 >= x3954
val x25471 = if (x24235) {
x24231 = x161
x24232 = true
x24233 = x24229
()
} else {
val x24237 = x3943(x24229)
val x24238 = x24237 == '/'
val x25469 = if (x24238) {
var x24246: java.lang.String = ""
var x24247: Boolean = false
val x24239 = x24229 + 1
var x24248: Int = x24239
var x24250: Int = -1
var x24251: Boolean = true
var x24252: Int = x24239
val x24292 = while ({val x24253 = x24251
val x24254 = x24250
val x24255 = x24252
val x24256 = x24254 != x24255
val x24257 = x24253 && x24256
x24257}) {
val x24259 = x24252
x24250 = x24259
val x24261 = x24259 >= x3954
val x24290 = if (x24261) {
x24251 = false
()
} else {
val x24263 = x3943(x24259)
val x24264 = x24263 > ' '
val x24265 = x24263 != '#'
val x24266 = x24264 && x24265
val x24267 = x24263 != '?'
val x24268 = x24266 && x24267
val x24269 = x24263 != ''
val x24270 = x24268 && x24269
val x24288 = if (x24270) {
val x24275 = x24246
val x24276 = x24247
val x24277 = x24248
val x24279 = x24275+x24263
x24246 = x24279
x24247 = false
val x24271 = x24259 + 1
x24248 = x24271
x24252 = x24271
()
} else {
x24251 = false
()
}
x24288
}
x24290
}
val x24293 = x24246
val x24294 = x24247
val x24295 = x24248
val x25463 = if (x24294) {
x24231 = x161
x24232 = true
x24233 = x24239
()
} else {
val x24765 = x24622(x24295)
val x24777 = x24765.empty
val x25461 = if (x24777) {
val x24778 = x24764(x24295)
val x24779 = x24778.empty
val x24788 = if (x24779) {
false
} else {
false
}
val x24794 = if (x24788) {
true
} else {
false
}
val x25134 = if (x24794) {
x24231 = x161
x24232 = true
val x24795 = if (x24788) {
x24239
} else {
val x24780 = x24778.next
val x24789 = if (x24779) {
x24780
} else {
x24780
}
x24789
}
x24233 = x24795
()
} else {
val x24795 = if (x24788) {
x24239
} else {
val x24780 = x24778.next
val x24789 = if (x24779) {
x24780
} else {
x24780
}
x24789
}
val x24797 = x24795 >= x3954
val x25132 = if (x24797) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
} else {
val x24799 = x3943(x24795)
val x24800 = x24799 == 'H'
val x25130 = if (x24800) {
val x24801 = x24795 + 1
val x24838 = x24801 >= x3954
val x25124 = if (x24838) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
} else {
val x24840 = x3943(x24801)
val x24841 = x24840 == 'T'
val x25122 = if (x24841) {
val x24842 = x24801 + 1
val x24850 = x24842 >= x3954
val x25116 = if (x24850) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
} else {
val x24852 = x3943(x24842)
val x24853 = x24852 == 'T'
val x25114 = if (x24853) {
val x24854 = x24842 + 1
val x24863 = x24854 >= x3954
val x25108 = if (x24863) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
} else {
val x24865 = x3943(x24854)
val x24866 = x24865 == 'P'
val x25106 = if (x24866) {
val x24867 = x24854 + 1
val x24876 = x24867 >= x3954
val x25100 = if (x24876) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
} else {
val x24878 = x3943(x24867)
val x24879 = x24878 == '/'
val x25098 = if (x24879) {
var x24911: Int = 0
var x24912: Boolean = false
val x24880 = x24867 + 1
var x24913: Int = x24880
var x24915: Int = -1
var x24916: Boolean = true
var x24917: Int = x24880
val x24958 = while ({val x24918 = x24916
val x24919 = x24915
val x24920 = x24917
val x24921 = x24919 != x24920
val x24922 = x24918 && x24921
x24922}) {
val x24924 = x24917
x24915 = x24924
val x24926 = x24924 >= x3954
val x24956 = if (x24926) {
x24916 = false
()
} else {
val x24928 = x3943(x24924)
val x24929 = x24928 >= '0'
val x24930 = x24928 <= '9'
val x24931 = x24929 && x24930
val x24954 = if (x24931) {
val x24940 = x24911
val x24941 = x24912
val x24942 = x24913
val x24937 = x24928 - '0'
val x24938 = x24937.toInt
val x24944 = x24940 * 10
val x24945 = x24944 + x24938
x24911 = x24945
x24912 = false
val x24932 = x24924 + 1
x24913 = x24932
x24917 = x24932
()
} else {
x24916 = false
()
}
x24954
}
x24956
}
val x24959 = x24911
val x24960 = x24912
val x24961 = x24913
val x25092 = if (x24960) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24880
()
} else {
val x24964 = x24961 >= x3954
val x25090 = if (x24964) {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24880
()
} else {
val x24966 = x3943(x24961)
val x24967 = x24966 == '.'
val x25088 = if (x24967) {
var x24983: Int = 0
var x24984: Boolean = false
val x24968 = x24961 + 1
var x24985: Int = x24968
var x24987: Int = -1
var x24988: Boolean = true
var x24989: Int = x24968
val x25030 = while ({val x24990 = x24988
val x24991 = x24987
val x24992 = x24989
val x24993 = x24991 != x24992
val x24994 = x24990 && x24993
x24994}) {
val x24996 = x24989
x24987 = x24996
val x24998 = x24996 >= x3954
val x25028 = if (x24998) {
x24988 = false
()
} else {
val x25000 = x3943(x24996)
val x25001 = x25000 >= '0'
val x25002 = x25000 <= '9'
val x25003 = x25001 && x25002
val x25026 = if (x25003) {
val x25012 = x24983
val x25013 = x24984
val x25014 = x24985
val x25009 = x25000 - '0'
val x25010 = x25009.toInt
val x25016 = x25012 * 10
val x25017 = x25016 + x25010
x24983 = x25017
x24984 = false
val x25004 = x24996 + 1
x24985 = x25004
x24989 = x25004
()
} else {
x24988 = false
()
}
x25026
}
x25028
}
val x25031 = x24983
val x25032 = x24984
val x25033 = x24985
val x25038 = if (x25032) {
true
} else {
false
}
val x25047 = if (x25038) {
false
} else {
false
}
val x25052 = if (x25047) {
true
} else {
false
}
val x25076 = if (x25052) {
x161
} else {
val x25051 = if (x25047) {
x935
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
x24793
}
val x25057 = x25051._2
val x25058 = x25057.defined
val x25068 = if (x25058) {
val x25059 = x25057.value
val x25061 = x25059.schema
x25061
} else {
""
}
val x25069 = if (x25058) {
val x25059 = x25057.value
val x25062 = x25059.hostName
x25062
} else {
""
}
val x25056 = x25051._1
val x25060 = "/"+x25056
val x25070 = if (x25058) {
x25060
} else {
x25060
}
val x25071 = if (x25058) {
val x25059 = x25057.value
val x25063 = x25059.queryString
x25063
} else {
""
}
val x25072 = if (x25058) {
val x25059 = x25057.value
val x25064 = x25059.fragment
x25064
} else {
""
}
val x25073 = if (x25058) {
val x25059 = x25057.value
val x25065 = x25059.port
x25065
} else {
80
}
val x25074 = new Anon1863173035(x25068,x25069,x25070,x25071,x25072,x25073)
x25074
}
x24231 = x25076
val x25077 = if (x25052) {
true
} else {
false
}
x24232 = x25077
val x25053 = if (x25047) {
x24239
} else {
val x25039 = if (x25032) {
x24880
} else {
x25033
}
val x25048 = if (x25038) {
x25039
} else {
x25039
}
x25048
}
val x25078 = if (x25052) {
x25053
} else {
x25053
}
x24233 = x25078
()
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24880
()
}
x25088
}
x25090
}
x25092
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
}
x25098
}
x25100
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
}
x25106
}
x25108
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
}
x25114
}
x25116
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
}
x25122
}
x25124
} else {
val x24793 = if (x24788) {
x935
} else {
val x24785 = if (x24779) {
x161
} else {
val x24782 = x24778.res
x24782
}
val x24786 = if (x24779) {
false
} else {
true
}
val x24787 = new OptionAnon1863173035(x24785,x24786)
val x24791 = new Tuple2StringOptionAnon1863173035(x24293,x24787)
x24791
}
val x24815 = x24793._2
val x24816 = x24815.defined
val x24826 = if (x24816) {
val x24817 = x24815.value
val x24819 = x24817.schema
x24819
} else {
""
}
val x24827 = if (x24816) {
val x24817 = x24815.value
val x24820 = x24817.hostName
x24820
} else {
""
}
val x24814 = x24793._1
val x24818 = "/"+x24814
val x24828 = if (x24816) {
x24818
} else {
x24818
}
val x24829 = if (x24816) {
val x24817 = x24815.value
val x24821 = x24817.queryString
x24821
} else {
""
}
val x24830 = if (x24816) {
val x24817 = x24815.value
val x24822 = x24817.fragment
x24822
} else {
""
}
val x24831 = if (x24816) {
val x24817 = x24815.value
val x24823 = x24817.port
x24823
} else {
80
}
val x24832 = new Anon1863173035(x24826,x24827,x24828,x24829,x24830,x24831)
x24231 = x24832
x24232 = false
x24233 = x24795
()
}
x25130
}
x25132
}
x25134
} else {
val x25138 = x24765.next
val x25142 = x25138 >= x3954
val x25459 = if (x25142) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
} else {
val x25144 = x3943(x25138)
val x25145 = x25144 == 'H'
val x25457 = if (x25145) {
val x25146 = x25138 + 1
val x25165 = x25146 >= x3954
val x25451 = if (x25165) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
} else {
val x25167 = x3943(x25146)
val x25168 = x25167 == 'T'
val x25449 = if (x25168) {
val x25169 = x25146 + 1
val x25177 = x25169 >= x3954
val x25443 = if (x25177) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
} else {
val x25179 = x3943(x25169)
val x25180 = x25179 == 'T'
val x25441 = if (x25180) {
val x25181 = x25169 + 1
val x25190 = x25181 >= x3954
val x25435 = if (x25190) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
} else {
val x25192 = x3943(x25181)
val x25193 = x25192 == 'P'
val x25433 = if (x25193) {
val x25194 = x25181 + 1
val x25203 = x25194 >= x3954
val x25427 = if (x25203) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
} else {
val x25205 = x3943(x25194)
val x25206 = x25205 == '/'
val x25425 = if (x25206) {
var x25238: Int = 0
var x25239: Boolean = false
val x25207 = x25194 + 1
var x25240: Int = x25207
var x25242: Int = -1
var x25243: Boolean = true
var x25244: Int = x25207
val x25285 = while ({val x25245 = x25243
val x25246 = x25242
val x25247 = x25244
val x25248 = x25246 != x25247
val x25249 = x25245 && x25248
x25249}) {
val x25251 = x25244
x25242 = x25251
val x25253 = x25251 >= x3954
val x25283 = if (x25253) {
x25243 = false
()
} else {
val x25255 = x3943(x25251)
val x25256 = x25255 >= '0'
val x25257 = x25255 <= '9'
val x25258 = x25256 && x25257
val x25281 = if (x25258) {
val x25267 = x25238
val x25268 = x25239
val x25269 = x25240
val x25264 = x25255 - '0'
val x25265 = x25264.toInt
val x25271 = x25267 * 10
val x25272 = x25271 + x25265
x25238 = x25272
x25239 = false
val x25259 = x25251 + 1
x25240 = x25259
x25244 = x25259
()
} else {
x25243 = false
()
}
x25281
}
x25283
}
val x25286 = x25238
val x25287 = x25239
val x25288 = x25240
val x25419 = if (x25287) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25207
()
} else {
val x25291 = x25288 >= x3954
val x25417 = if (x25291) {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25207
()
} else {
val x25293 = x3943(x25288)
val x25294 = x25293 == '.'
val x25415 = if (x25294) {
var x25310: Int = 0
var x25311: Boolean = false
val x25295 = x25288 + 1
var x25312: Int = x25295
var x25314: Int = -1
var x25315: Boolean = true
var x25316: Int = x25295
val x25357 = while ({val x25317 = x25315
val x25318 = x25314
val x25319 = x25316
val x25320 = x25318 != x25319
val x25321 = x25317 && x25320
x25321}) {
val x25323 = x25316
x25314 = x25323
val x25325 = x25323 >= x3954
val x25355 = if (x25325) {
x25315 = false
()
} else {
val x25327 = x3943(x25323)
val x25328 = x25327 >= '0'
val x25329 = x25327 <= '9'
val x25330 = x25328 && x25329
val x25353 = if (x25330) {
val x25339 = x25310
val x25340 = x25311
val x25341 = x25312
val x25336 = x25327 - '0'
val x25337 = x25336.toInt
val x25343 = x25339 * 10
val x25344 = x25343 + x25337
x25310 = x25344
x25311 = false
val x25331 = x25323 + 1
x25312 = x25331
x25316 = x25331
()
} else {
x25315 = false
()
}
x25353
}
x25355
}
val x25358 = x25310
val x25359 = x25311
val x25360 = x25312
val x25365 = if (x25359) {
true
} else {
false
}
val x25374 = if (x25365) {
false
} else {
false
}
val x25379 = if (x25374) {
true
} else {
false
}
val x25403 = if (x25379) {
x161
} else {
val x25378 = if (x25374) {
x935
} else {
val x25136 = x24765.res
val x25137 = new OptionAnon1863173035(x25136,true)
val x25140 = new Tuple2StringOptionAnon1863173035(x24293,x25137)
x25140
}
val x25384 = x25378._2
val x25385 = x25384.defined
val x25395 = if (x25385) {
val x25386 = x25384.value
val x25388 = x25386.schema
x25388
} else {
""
}
val x25396 = if (x25385) {
val x25386 = x25384.value
val x25389 = x25386.hostName
x25389
} else {
""
}
val x25383 = x25378._1
val x25387 = "/"+x25383
val x25397 = if (x25385) {
x25387
} else {
x25387
}
val x25398 = if (x25385) {
val x25386 = x25384.value
val x25390 = x25386.queryString
x25390
} else {
""
}
val x25399 = if (x25385) {
val x25386 = x25384.value
val x25391 = x25386.fragment
x25391
} else {
""
}
val x25400 = if (x25385) {
val x25386 = x25384.value
val x25392 = x25386.port
x25392
} else {
80
}
val x25401 = new Anon1863173035(x25395,x25396,x25397,x25398,x25399,x25400)
x25401
}
x24231 = x25403
val x25404 = if (x25379) {
true
} else {
false
}
x24232 = x25404
val x25380 = if (x25374) {
x24239
} else {
val x25366 = if (x25359) {
x25207
} else {
x25360
}
val x25375 = if (x25365) {
x25366
} else {
x25366
}
x25375
}
val x25405 = if (x25379) {
x25380
} else {
x25380
}
x24233 = x25405
()
} else {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25207
()
}
x25415
}
x25417
}
x25419
} else {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
}
x25425
}
x25427
} else {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
}
x25433
}
x25435
} else {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
}
x25441
}
x25443
} else {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
}
x25449
}
x25451
} else {
val x25153 = "/"+x24293
val x25136 = x24765.res
val x25154 = x25136.schema
val x25155 = x25136.hostName
val x25156 = x25136.queryString
val x25157 = x25136.fragment
val x25158 = x25136.port
val x25159 = new Anon1863173035(x25154,x25155,x25153,x25156,x25157,x25158)
x24231 = x25159
x24232 = false
x24233 = x25138
()
}
x25457
}
x25459
}
x25461
}
x25463
} else {
x24231 = x161
x24232 = true
x24233 = x24229
()
}
x25469
}
val x25472 = x24231
val x25473 = x24232
val x25474 = x24233
val x25475 = new ParseResultAnon1863173035(x25472,x25473,x25474)
x25475
}
val x25803 = x25477(x15816)
val x25804 = x25803.empty
val x25861 = if (x25804) {
val x25802 = {x25478: (Int) => 
var x25480: Anon1863173035 = x161
var x25481: Boolean = true
var x25482: Int = x25478
val x25484 = x25478 >= x3954
val x25796 = if (x25484) {
x25480 = x161
x25481 = true
x25482 = x25478
()
} else {
val x25486 = x3943(x25478)
val x25487 = x25486 == '?'
val x25794 = if (x25487) {
var x25495: java.lang.String = ""
var x25496: Boolean = false
val x25488 = x25478 + 1
var x25497: Int = x25488
var x25499: Int = -1
var x25500: Boolean = true
var x25501: Int = x25488
val x25535 = while ({val x25502 = x25500
val x25503 = x25499
val x25504 = x25501
val x25505 = x25503 != x25504
val x25506 = x25502 && x25505
x25506}) {
val x25508 = x25501
x25499 = x25508
val x25510 = x25508 >= x3954
val x25533 = if (x25510) {
x25500 = false
()
} else {
val x25512 = x3943(x25508)
val x25513 = x25512 == '?'
val x25531 = if (x25513) {
val x25518 = x25495
val x25519 = x25496
val x25520 = x25497
val x25522 = x25518+x25512
x25495 = x25522
x25496 = false
val x25514 = x25508 + 1
x25497 = x25514
x25501 = x25514
()
} else {
x25500 = false
()
}
x25531
}
x25533
}
val x25536 = x25495
val x25537 = x25496
val x25538 = x25497
val x25788 = if (x25537) {
x25480 = x161
x25481 = true
x25482 = x25488
()
} else {
var x25554: java.lang.String = ""
var x25555: Boolean = false
var x25556: Int = x25538
var x25558: Int = -1
var x25559: Boolean = true
var x25560: Int = x25538
val x25598 = while ({val x25561 = x25559
val x25562 = x25558
val x25563 = x25560
val x25564 = x25562 != x25563
val x25565 = x25561 && x25564
x25565}) {
val x25567 = x25560
x25558 = x25567
val x25569 = x25567 >= x3954
val x25596 = if (x25569) {
x25559 = false
()
} else {
val x25571 = x3943(x25567)
val x25572 = x25571 > ' '
val x25573 = x25571 != '#'
val x25574 = x25572 && x25573
val x25575 = x25571 != ''
val x25576 = x25574 && x25575
val x25594 = if (x25576) {
val x25581 = x25554
val x25582 = x25555
val x25583 = x25556
val x25585 = x25581+x25571
x25554 = x25585
x25555 = false
val x25577 = x25567 + 1
x25556 = x25577
x25560 = x25577
()
} else {
x25559 = false
()
}
x25594
}
x25596
}
val x25599 = x25554
val x25600 = x25555
val x25601 = x25556
val x25786 = if (x25600) {
x25480 = x161
x25481 = true
x25482 = x25488
()
} else {
val x25603 = x25601 >= x3954
val x25784 = if (x25603) {
val x25617 = new Anon1863173035("","","",x25599,"",80)
x25480 = x25617
x25481 = false
x25482 = x25601
()
} else {
val x25605 = x3943(x25601)
val x25606 = x25605 == '#'
val x25782 = if (x25606) {
var x25624: java.lang.String = ""
var x25625: Boolean = false
val x25607 = x25601 + 1
var x25626: Int = x25607
var x25628: Int = -1
var x25629: Boolean = true
var x25630: Int = x25607
val x25664 = while ({val x25631 = x25629
val x25632 = x25628
val x25633 = x25630
val x25634 = x25632 != x25633
val x25635 = x25631 && x25634
x25635}) {
val x25637 = x25630
x25628 = x25637
val x25639 = x25637 >= x3954
val x25662 = if (x25639) {
x25629 = false
()
} else {
val x25641 = x3943(x25637)
val x25642 = x25641 == '#'
val x25660 = if (x25642) {
val x25647 = x25624
val x25648 = x25625
val x25649 = x25626
val x25651 = x25647+x25641
x25624 = x25651
x25625 = false
val x25643 = x25637 + 1
x25626 = x25643
x25630 = x25643
()
} else {
x25629 = false
()
}
x25660
}
x25662
}
val x25665 = x25624
val x25666 = x25625
val x25667 = x25626
val x25776 = if (x25666) {
val x25617 = new Anon1863173035("","","",x25599,"",80)
x25480 = x25617
x25481 = false
x25482 = x25607
()
} else {
var x25679: java.lang.String = ""
var x25680: Boolean = false
var x25681: Int = x25667
var x25683: Int = -1
var x25684: Boolean = true
var x25685: Int = x25667
val x25721 = while ({val x25686 = x25684
val x25687 = x25683
val x25688 = x25685
val x25689 = x25687 != x25688
val x25690 = x25686 && x25689
x25690}) {
val x25692 = x25685
x25683 = x25692
val x25694 = x25692 >= x3954
val x25719 = if (x25694) {
x25684 = false
()
} else {
val x25696 = x3943(x25692)
val x25697 = x25696 > ' '
val x25698 = x25696 != ''
val x25699 = x25697 && x25698
val x25717 = if (x25699) {
val x25704 = x25679
val x25705 = x25680
val x25706 = x25681
val x25708 = x25704+x25696
x25679 = x25708
x25680 = false
val x25700 = x25692 + 1
x25681 = x25700
x25685 = x25700
()
} else {
x25684 = false
()
}
x25717
}
x25719
}
val x25722 = x25679
val x25723 = x25680
val x25724 = x25681
val x25730 = if (x25723) {
true
} else {
false
}
val x25739 = if (x25730) {
false
} else {
false
}
val x25745 = if (x25739) {
true
} else {
false
}
val x25768 = if (x25745) {
x161
} else {
val x25744 = if (x25739) {
x935
} else {
val x25736 = if (x25730) {
x161
} else {
val x25729 = if (x25723) {
x161
} else {
val x25727 = new Anon1863173035("","","","",x25722,80)
x25727
}
x25729
}
val x25737 = if (x25730) {
false
} else {
true
}
val x25738 = new OptionAnon1863173035(x25736,x25737)
val x25742 = new Tuple2StringOptionAnon1863173035(x25599,x25738)
x25742
}
val x25750 = x25744._2
val x25751 = x25750.defined
val x25760 = if (x25751) {
val x25752 = x25750.value
val x25753 = x25752.schema
x25753
} else {
""
}
val x25761 = if (x25751) {
val x25752 = x25750.value
val x25754 = x25752.hostName
x25754
} else {
""
}
val x25762 = if (x25751) {
val x25752 = x25750.value
val x25755 = x25752.path
x25755
} else {
""
}
val x25749 = x25744._1
val x25763 = if (x25751) {
x25749
} else {
x25749
}
val x25764 = if (x25751) {
val x25752 = x25750.value
val x25756 = x25752.fragment
x25756
} else {
""
}
val x25765 = if (x25751) {
val x25752 = x25750.value
val x25757 = x25752.port
x25757
} else {
80
}
val x25766 = new Anon1863173035(x25760,x25761,x25762,x25763,x25764,x25765)
x25766
}
x25480 = x25768
val x25769 = if (x25745) {
true
} else {
false
}
x25481 = x25769
val x25746 = if (x25739) {
x25488
} else {
val x25731 = if (x25723) {
x25724
} else {
x25724
}
val x25740 = if (x25730) {
x25731
} else {
x25731
}
x25740
}
val x25770 = if (x25745) {
x25746
} else {
x25746
}
x25482 = x25770
()
}
x25776
} else {
val x25617 = new Anon1863173035("","","",x25599,"",80)
x25480 = x25617
x25481 = false
x25482 = x25601
()
}
x25782
}
x25784
}
x25786
}
x25788
} else {
x25480 = x161
x25481 = true
x25482 = x25478
()
}
x25794
}
val x25797 = x25480
val x25798 = x25481
val x25799 = x25482
val x25800 = new ParseResultAnon1863173035(x25797,x25798,x25799)
x25800
}
val x25805 = x25802(x15816)
val x25806 = x25805.empty
val x25812 = if (x25806) {
true
} else {
false
}
val x25838 = if (x25812) {
x161
} else {
val x25811 = if (x25806) {
val x4203 = null.asInstanceOf[Tuple2Tuple2StringOptionAnon1863173035Anon1863173035]
x4203
} else {
val x1006 = new OptionAnon1863173035(x161,false)
val x15843 = x4178.res
val x15844 = new Tuple2StringOptionAnon1863173035(x15843,x1006)
val x25807 = x25805.res
val x25808 = new Tuple2Tuple2StringOptionAnon1863173035Anon1863173035(x15844,x25807)
x25808
}
val x25816 = x25811._1
val x25818 = x25816._1
val x25819 = x25816._2
val x25820 = x25819.defined
val x25830 = if (x25820) {
x25818
} else {
x25818
}
val x25817 = x25811._2
val x25831 = if (x25820) {
val x25821 = x25819.value
val x25822 = x25821.hostName
x25822
} else {
val x25828 = x25817.hostName
x25828
}
val x25823 = x25817.path
val x25832 = if (x25820) {
x25823
} else {
x25823
}
val x25824 = x25817.queryString
val x25833 = if (x25820) {
x25824
} else {
x25824
}
val x25825 = x25817.fragment
val x25834 = if (x25820) {
x25825
} else {
x25825
}
val x25826 = x25817.port
val x25835 = if (x25820) {
x25826
} else {
x25826
}
val x25836 = new Anon1863173035(x25830,x25831,x25832,x25833,x25834,x25835)
x25836
}
x3944 = x25838
val x25839 = if (x25812) {
true
} else {
false
}
x3945 = x25839
val x25813 = if (x25806) {
0
} else {
val x25809 = x25805.next
x25809
}
val x25840 = if (x25812) {
x25813
} else {
x25813
}
x3946 = x25840
()
} else {
val x15843 = x4178.res
val x25846 = x25803.res
val x25850 = x25846.hostName
val x25851 = x25846.path
val x25852 = x25846.queryString
val x25853 = x25846.fragment
val x25854 = x25846.port
val x25855 = new Anon1863173035(x15843,x25850,x25851,x25852,x25853,x25854)
x3944 = x25855
x3945 = false
val x25848 = x25803.next
x3946 = x25848
()
}
x25861
}
x25863
}
x25865
}
val x25868 = x3944
val x25869 = x3945
val x25870 = x3946
val x25871 = new ParseResultAnon1863173035(x25868,x25869,x25870)
val x25872 = println(x25871)
x25872
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=26000
nVars=27000
nVars=28000
nVars=29000
nVars=30000
nVars=31000
nVars=32000
nVars=33000
nVars=34000
nVars=35000
nVars=36000
nVars=37000
nVars=38000
nVars=39000
nVars=40000
nVars=41000
nVars=42000
nVars=43000
nVars=44000
nVars=45000
nVars=46000
nVars=47000
compilation: ok
ParseResultAnon1863173035(Anon1863173035(http,en.wikipedia.org,/wiki/URI_scheme,,,80),false,39)
ParseResultAnon1863173035(Anon1863173035(https,developer.mozilla.org,/en-US/docs/Web/JavaScript/Guide/Regular_Expressions,redirectlocale=en-US&redirectslug=JavaScript%2FGuide%2FRegular_Expressions,,80),false,156)
ParseResultAnon1863173035(Anon1863173035(http,en.wikipedia.org,/wiki/List_of_HTTP_headers,,Responses,80),false,59)
ParseResultAnon1863173035(Anon1863173035(ldap,ldap1.example.net,/o=University%20of%20Michigan,,,,80),false,59)
