/*****************************************
  Emitting Generated Code                  
*******************************************/
class keywordParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: java.lang.String = null
var x3: Boolean = true
var x4: Int = -1
val x6 = x0.length
val x7 = 0 >= x6
val x110 = if (x7) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x15 = x0(0)
val x16 = x15 >= 'a'
val x17 = x15 <= 'z'
val x18 = x16 && x17
val x19 = x15 >= 'A'
val x20 = x15 <= 'Z'
val x21 = x19 && x20
val x22 = x18 || x21
val x108 = if (x22) {
var x26: java.lang.String = ""
var x27: Boolean = false
val x23 = 0 + 1
var x28: Int = x23
var x30: Int = -1
var x31: Boolean = true
var x32: Int = x23
val x72 = while ({val x33 = x31
val x34 = x30
val x35 = x32
val x36 = x34 != x35
val x37 = x33 && x36
x37}) {
val x39 = x32
x30 = x39
val x41 = x39 >= x6
val x70 = if (x41) {
x31 = false
()
} else {
val x45 = x0(x39)
val x46 = x45 >= 'a'
val x47 = x45 <= 'z'
val x48 = x46 && x47
val x49 = x45 >= 'A'
val x50 = x45 <= 'Z'
val x51 = x49 && x50
val x52 = x48 || x51
val x68 = if (x52) {
val x55 = x26
val x56 = x27
val x57 = x28
val x59 = x55+x45
x26 = x59
x27 = false
val x53 = x39 + 1
x28 = x53
x32 = x53
()
} else {
x31 = false
()
}
x68
}
x70
}
val x73 = x26
val x74 = x27
val x75 = x28
val x80 = if (x74) {
true
} else {
false
}
val x96 = if (x80) {
null
} else {
val x79 = if (x74) {
null
} else {
val x77 = new Tuple2CharString(x15,x73)
x77
}
val x84 = x79._1
val x85 = x79._2
val x86 = x84+x85
val x87 = x86 == "true"
val x88 = x86 == "null"
val x89 = x87 || x88
val x90 = x86 == "false"
val x91 = x89 || x90
val x94 = if (x91) {
val x92 = "Keyword("+x86
val x93 = x92+")"
x93
} else {
"NoToken"
}
x94
}
x2 = x96
val x97 = if (x80) {
true
} else {
false
}
x3 = x97
val x81 = if (x74) {
0
} else {
x75
}
val x98 = if (x80) {
x81
} else {
x81
}
x4 = x98
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x108
}
val x111 = x2
val x112 = x3
val x113 = x4
val x114 = new ParseResultString(x111,x112,x113)
val x115 = println(x114)
x115
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Keyword(true),false,4)
ParseResultString(NoToken,false,3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class twoWordParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Tuple2StringString = null
var x3: Boolean = true
var x4: Int = -1
val x6 = x0.length
val x7 = 0 >= x6
val x187 = if (x7) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x16 = x0(0)
val x17 = x16 == '"'
val x185 = if (x17) {
val x18 = 0 + 1
var x20: Int = x18
val x29 = while ({val x21 = x20
val x22 = x21 < x6
val x23 = x0(x21)
val x24 = x23 != '"'
val x25 = x22 && x24
x25}) {
val x27 = x20 += 1
()
}
val x30 = x20
val x34 = x30 >= x6
val x179 = if (x34) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x40 = x0(x30)
val x41 = x40 == '"'
val x177 = if (x41) {
var x48: java.lang.String = ""
var x49: Boolean = false
val x42 = x30 + 1
var x50: Int = x42
var x52: Int = -1
var x53: Boolean = true
var x54: Int = x42
val x90 = while ({val x55 = x53
val x56 = x52
val x57 = x54
val x58 = x56 != x57
val x59 = x55 && x58
x59}) {
val x61 = x54
x52 = x61
val x63 = x61 >= x6
val x88 = if (x63) {
x53 = false
()
} else {
val x67 = x0(x61)
val x68 = x67 == ' '
val x69 = x67 == '\n'
val x70 = x68 || x69
val x86 = if (x70) {
val x73 = x48
val x74 = x49
val x75 = x50
val x77 = x73+x67
x48 = x77
x49 = false
val x71 = x61 + 1
x50 = x71
x54 = x71
()
} else {
x53 = false
()
}
x86
}
x88
}
val x91 = x48
val x92 = x49
val x93 = x50
val x98 = if (x92) {
true
} else {
false
}
val x103 = if (x98) {
true
} else {
false
}
val x171 = if (x103) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x104 = if (x98) {
0
} else {
val x99 = if (x92) {
x93
} else {
x93
}
x99
}
val x110 = x104 >= x6
val x169 = if (x110) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x118 = x0(x104)
val x119 = x118 == '"'
val x167 = if (x119) {
val x120 = x104 + 1
var x122: Int = x120
val x131 = while ({val x123 = x122
val x124 = x123 < x6
val x125 = x0(x123)
val x126 = x125 != '"'
val x127 = x124 && x126
x127}) {
val x129 = x122 += 1
()
}
val x132 = x122
val x136 = x132 >= x6
val x161 = if (x136) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x142 = x0(x132)
val x143 = x142 == '"'
val x159 = if (x143) {
val x102 = if (x98) {
null
} else {
val x31 = x30 - x18
val x32 = new Anon1680061013(x0,x18,x31)
val x45 = x32.input.slice(x32.start,x32.start+x32.length).mkString
x45
}
val x133 = x132 - x120
val x134 = new Anon1680061013(x0,x120,x133)
val x147 = x134.input.slice(x134.start,x134.start+x134.length).mkString
val x149 = new Tuple2StringString(x102,x147)
x2 = x149
x3 = false
val x144 = x132 + 1
x4 = x144
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x159
}
x161
} else {
x2 = null
x3 = true
x4 = 0
()
}
x167
}
x169
}
x171
} else {
x2 = null
x3 = true
x4 = 0
()
}
x177
}
x179
} else {
x2 = null
x3 = true
x4 = 0
()
}
x185
}
val x188 = x2
val x189 = x3
val x190 = x4
val x191 = new ParseResultTuple2StringString(x188,x189,x190)
val x192 = println(x191)
x192
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultTuple2StringString(Tuple2StringString(hello,carol),false,15)
ParseResultTuple2StringString(null,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseString extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: java.lang.String = null
var x3: Boolean = true
var x4: Int = -1
val x6 = x0.length
val x7 = 0 >= x6
val x130 = if (x7) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x15 = x0(0)
val x16 = x15 == 'h'
val x128 = if (x16) {
val x17 = 0 + 1
val x19 = x17 >= x6
val x122 = if (x19) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x27 = x0(x17)
val x28 = x27 == 'e'
val x120 = if (x28) {
val x29 = x17 + 1
val x31 = x29 >= x6
val x114 = if (x31) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x39 = x0(x29)
val x40 = x39 == 'l'
val x112 = if (x40) {
val x41 = x29 + 1
val x43 = x41 >= x6
val x106 = if (x43) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x51 = x0(x41)
val x52 = x51 == 'l'
val x104 = if (x52) {
val x53 = x41 + 1
val x55 = x53 >= x6
val x98 = if (x55) {
x2 = null
x3 = true
x4 = 0
()
} else {
val x63 = x0(x53)
val x64 = x63 == 'o'
val x96 = if (x64) {
val x70 = x63+""
val x74 = x51+x70
val x78 = x39+x74
val x82 = x27+x78
val x86 = x15+x82
x2 = x86
x3 = false
val x65 = x53 + 1
x4 = x65
()
} else {
x2 = null
x3 = true
x4 = 0
()
}
x96
}
x98
} else {
x2 = null
x3 = true
x4 = 0
()
}
x104
}
x106
} else {
x2 = null
x3 = true
x4 = 0
()
}
x112
}
x114
} else {
x2 = null
x3 = true
x4 = 0
()
}
x120
}
x122
} else {
x2 = null
x3 = true
x4 = 0
()
}
x128
}
val x131 = x2
val x132 = x3
val x133 = x4
val x134 = new ParseResultString(x131,x132,x133)
val x135 = println(x134)
x135
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(hello,false,5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseWholeNum extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Int = 0
var x3: Boolean = true
var x4: Int = -1
val x6 = x0.length
val x7 = 0 >= x6
val x89 = if (x7) {
x2 = 0
x3 = true
x4 = 0
()
} else {
val x14 = x0(0)
val x15 = x14 >= '0'
val x16 = x14 <= '9'
val x17 = x15 && x16
val x87 = if (x17) {
val x20 = x14 - '0'
val x21 = x20.toInt
var x23: Int = x21
var x24: Boolean = false
val x18 = 0 + 1
var x25: Int = x18
var x27: Int = -1
var x28: Boolean = true
var x29: Int = x18
val x70 = while ({val x30 = x28
val x31 = x27
val x32 = x29
val x33 = x31 != x32
val x34 = x30 && x33
x34}) {
val x36 = x29
x27 = x36
val x38 = x36 >= x6
val x68 = if (x38) {
x28 = false
()
} else {
val x43 = x0(x36)
val x44 = x43 >= '0'
val x45 = x43 <= '9'
val x46 = x44 && x45
val x66 = if (x46) {
val x52 = x23
val x53 = x24
val x54 = x25
val x49 = x43 - '0'
val x50 = x49.toInt
val x56 = x52 * 10
val x57 = x56 + x50
x23 = x57
x24 = false
val x47 = x36 + 1
x25 = x47
x29 = x47
()
} else {
x28 = false
()
}
x66
}
x68
}
val x71 = x23
val x72 = x24
val x73 = x25
val x75 = if (x72) {
0
} else {
x71
}
x2 = x75
val x76 = if (x72) {
true
} else {
x72
}
x3 = x76
val x77 = if (x72) {
0
} else {
x73
}
x4 = x77
()
} else {
x2 = 0
x3 = true
x4 = 0
()
}
x87
}
val x90 = x2
val x91 = x3
val x92 = x4
val x93 = new ParseResultInt(x90,x91,x92)
val x94 = println(x93)
x94
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultInt(1234,false,4)
ParseResultInt(0,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseDoubleLit extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Double = 0.0
var x3: Boolean = true
var x4: Int = -1
val x6 = x0.length
val x7 = 0 >= x6
val x484 = if (x7) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x21 = x0(0)
val x22 = x21 == '-'
val x482 = if (x22) {
val x23 = 0 + 1
val x27 = x23 >= x6
val x259 = if (x27) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x35 = x0(x23)
val x36 = x35 >= '0'
val x37 = x35 <= '9'
val x38 = x36 && x37
val x257 = if (x38) {
var x42: java.lang.String = ""
var x43: Boolean = false
val x39 = x23 + 1
var x44: Int = x39
var x46: Int = -1
var x47: Boolean = true
var x48: Int = x39
val x84 = while ({val x49 = x47
val x50 = x46
val x51 = x48
val x52 = x50 != x51
val x53 = x49 && x52
x53}) {
val x55 = x48
x46 = x55
val x57 = x55 >= x6
val x82 = if (x57) {
x47 = false
()
} else {
val x61 = x0(x55)
val x62 = x61 >= '0'
val x63 = x61 <= '9'
val x64 = x62 && x63
val x80 = if (x64) {
val x67 = x42
val x68 = x43
val x69 = x44
val x71 = x67+x61
x42 = x71
x43 = false
val x65 = x55 + 1
x44 = x65
x48 = x65
()
} else {
x47 = false
()
}
x80
}
x82
}
val x85 = x42
val x86 = x43
val x87 = x44
val x92 = if (x86) {
true
} else {
false
}
val x101 = if (x92) {
true
} else {
false
}
val x107 = if (x101) {
true
} else {
false
}
val x119 = if (x107) {
true
} else {
false
}
val x251 = if (x119) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x108 = if (x101) {
0
} else {
val x93 = if (x86) {
x23
} else {
x87
}
val x102 = if (x92) {
x93
} else {
x93
}
x102
}
val x120 = if (x107) {
x108
} else {
x108
}
val x126 = x120 >= x6
val x249 = if (x126) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x133 = x0(x120)
val x134 = x133 == '.'
val x247 = if (x134) {
val x135 = x120 + 1
val x137 = x135 >= x6
val x241 = if (x137) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x145 = x0(x135)
val x146 = x145 >= '0'
val x147 = x145 <= '9'
val x148 = x146 && x147
val x239 = if (x148) {
var x152: java.lang.String = ""
var x153: Boolean = false
val x149 = x135 + 1
var x154: Int = x149
var x156: Int = -1
var x157: Boolean = true
var x158: Int = x149
val x194 = while ({val x159 = x157
val x160 = x156
val x161 = x158
val x162 = x160 != x161
val x163 = x159 && x162
x163}) {
val x165 = x158
x156 = x165
val x167 = x165 >= x6
val x192 = if (x167) {
x157 = false
()
} else {
val x171 = x0(x165)
val x172 = x171 >= '0'
val x173 = x171 <= '9'
val x174 = x172 && x173
val x190 = if (x174) {
val x177 = x152
val x178 = x153
val x179 = x154
val x181 = x177+x171
x152 = x181
x153 = false
val x175 = x165 + 1
x154 = x175
x158 = x175
()
} else {
x157 = false
()
}
x190
}
x192
}
val x195 = x152
val x196 = x153
val x197 = x154
val x202 = if (x196) {
true
} else {
false
}
val x211 = if (x202) {
true
} else {
false
}
val x217 = if (x211) {
true
} else {
false
}
val x227 = if (x217) {
0.0
} else {
val x216 = if (x211) {
null
} else {
val x118 = if (x107) {
null
} else {
val x106 = if (x101) {
null
} else {
val x25 = new OptionChar(x21,true)
val x100 = if (x92) {
null
} else {
val x91 = if (x86) {
null
} else {
val x89 = new Tuple2CharString(x35,x85)
x89
}
val x96 = x91._1
val x97 = x91._2
val x98 = x96+x97
x98
}
val x104 = new Tuple2OptionCharString(x25,x100)
x104
}
val x111 = x106._1
val x113 = x111.defined
val x116 = if (x113) {
val x112 = x106._2
val x114 = x111.value
val x115 = x114+x112
x115
} else {
val x112 = x106._2
x112
}
x116
}
val x210 = if (x202) {
null
} else {
val x201 = if (x196) {
null
} else {
val x199 = new Tuple2CharString(x145,x195)
x199
}
val x206 = x201._1
val x207 = x201._2
val x208 = x206+x207
x208
}
val x214 = new Tuple2StringString(x118,x210)
x214
}
val x222 = x216._2
val x221 = x216._1
val x223 = x221+"."
val x224 = x223+x222
val x225 = x224.toDouble
x225
}
x2 = x227
val x228 = if (x217) {
true
} else {
false
}
x3 = x228
val x218 = if (x211) {
0
} else {
val x203 = if (x196) {
x135
} else {
x197
}
val x212 = if (x202) {
x203
} else {
x203
}
x212
}
val x229 = if (x217) {
x218
} else {
x218
}
x4 = x229
()
} else {
x2 = 0.0
x3 = true
x4 = 0
()
}
x239
}
x241
} else {
x2 = 0.0
x3 = true
x4 = 0
()
}
x247
}
x249
}
x251
} else {
x2 = 0.0
x3 = true
x4 = 0
()
}
x257
}
x259
} else {
val x261 = x21 >= '0'
val x262 = x21 <= '9'
val x263 = x261 && x262
val x480 = if (x263) {
var x265: java.lang.String = ""
var x266: Boolean = false
val x23 = 0 + 1
var x267: Int = x23
var x269: Int = -1
var x270: Boolean = true
var x271: Int = x23
val x307 = while ({val x272 = x270
val x273 = x269
val x274 = x271
val x275 = x273 != x274
val x276 = x272 && x275
x276}) {
val x278 = x271
x269 = x278
val x280 = x278 >= x6
val x305 = if (x280) {
x270 = false
()
} else {
val x284 = x0(x278)
val x285 = x284 >= '0'
val x286 = x284 <= '9'
val x287 = x285 && x286
val x303 = if (x287) {
val x290 = x265
val x291 = x266
val x292 = x267
val x294 = x290+x284
x265 = x294
x266 = false
val x288 = x278 + 1
x267 = x288
x271 = x288
()
} else {
x270 = false
()
}
x303
}
x305
}
val x308 = x265
val x309 = x266
val x310 = x267
val x315 = if (x309) {
true
} else {
false
}
val x324 = if (x315) {
true
} else {
false
}
val x330 = if (x324) {
true
} else {
false
}
val x342 = if (x330) {
true
} else {
false
}
val x474 = if (x342) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x331 = if (x324) {
0
} else {
val x316 = if (x309) {
0
} else {
x310
}
val x325 = if (x315) {
x316
} else {
x316
}
x325
}
val x343 = if (x330) {
x331
} else {
x331
}
val x349 = x343 >= x6
val x472 = if (x349) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x356 = x0(x343)
val x357 = x356 == '.'
val x470 = if (x357) {
val x358 = x343 + 1
val x360 = x358 >= x6
val x464 = if (x360) {
x2 = 0.0
x3 = true
x4 = 0
()
} else {
val x368 = x0(x358)
val x369 = x368 >= '0'
val x370 = x368 <= '9'
val x371 = x369 && x370
val x462 = if (x371) {
var x375: java.lang.String = ""
var x376: Boolean = false
val x372 = x358 + 1
var x377: Int = x372
var x379: Int = -1
var x380: Boolean = true
var x381: Int = x372
val x417 = while ({val x382 = x380
val x383 = x379
val x384 = x381
val x385 = x383 != x384
val x386 = x382 && x385
x386}) {
val x388 = x381
x379 = x388
val x390 = x388 >= x6
val x415 = if (x390) {
x380 = false
()
} else {
val x394 = x0(x388)
val x395 = x394 >= '0'
val x396 = x394 <= '9'
val x397 = x395 && x396
val x413 = if (x397) {
val x400 = x375
val x401 = x376
val x402 = x377
val x404 = x400+x394
x375 = x404
x376 = false
val x398 = x388 + 1
x377 = x398
x381 = x398
()
} else {
x380 = false
()
}
x413
}
x415
}
val x418 = x375
val x419 = x376
val x420 = x377
val x425 = if (x419) {
true
} else {
false
}
val x434 = if (x425) {
true
} else {
false
}
val x440 = if (x434) {
true
} else {
false
}
val x450 = if (x440) {
0.0
} else {
val x439 = if (x434) {
null
} else {
val x341 = if (x330) {
null
} else {
val x329 = if (x324) {
null
} else {
val x9 = null.asInstanceOf[Char]
val x10 = new OptionChar(x9,false)
val x323 = if (x315) {
null
} else {
val x314 = if (x309) {
null
} else {
val x312 = new Tuple2CharString(x21,x308)
x312
}
val x319 = x314._1
val x320 = x314._2
val x321 = x319+x320
x321
}
val x327 = new Tuple2OptionCharString(x10,x323)
x327
}
val x334 = x329._1
val x336 = x334.defined
val x339 = if (x336) {
val x335 = x329._2
val x337 = x334.value
val x338 = x337+x335
x338
} else {
val x335 = x329._2
x335
}
x339
}
val x433 = if (x425) {
null
} else {
val x424 = if (x419) {
null
} else {
val x422 = new Tuple2CharString(x368,x418)
x422
}
val x429 = x424._1
val x430 = x424._2
val x431 = x429+x430
x431
}
val x437 = new Tuple2StringString(x341,x433)
x437
}
val x445 = x439._2
val x444 = x439._1
val x446 = x444+"."
val x447 = x446+x445
val x448 = x447.toDouble
x448
}
x2 = x450
val x451 = if (x440) {
true
} else {
false
}
x3 = x451
val x441 = if (x434) {
0
} else {
val x426 = if (x419) {
x358
} else {
x420
}
val x435 = if (x425) {
x426
} else {
x426
}
x435
}
val x452 = if (x440) {
x441
} else {
x441
}
x4 = x452
()
} else {
x2 = 0.0
x3 = true
x4 = 0
()
}
x462
}
x464
} else {
x2 = 0.0
x3 = true
x4 = 0
()
}
x470
}
x472
}
x474
} else {
x2 = 0.0
x3 = true
x4 = 0
()
}
x480
}
x482
}
val x485 = x2
val x486 = x3
val x487 = x4
val x488 = new ParseResultDouble(x485,x486,x487)
val x489 = println(x488)
x489
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultDouble(55.932083999999996,false,18)
ParseResultDouble(-55.932083999999996,false,19)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseStringStruct extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Anon1680061013 = null
var x3: Boolean = true
var x4: Int = -1
var x7: Int = 0
var x8: Boolean = false
var x9: Int = 0
var x11: Int = -1
var x12: Boolean = true
var x13: Int = 0
val x22 = x0.length
val x54 = while ({val x14 = x12
val x15 = x11
val x16 = x13
val x17 = x15 != x16
val x18 = x14 && x17
x18}) {
val x20 = x13
x11 = x20
val x23 = x20 >= x22
val x52 = if (x23) {
x12 = false
()
} else {
val x27 = x0(x20)
val x28 = x27 >= 'a'
val x29 = x27 <= 'z'
val x30 = x28 && x29
val x31 = x27 >= 'A'
val x32 = x27 <= 'Z'
val x33 = x31 && x32
val x34 = x30 || x33
val x50 = if (x34) {
val x37 = x7
val x38 = x8
val x39 = x9
val x41 = x37 + 1
x7 = x41
x8 = false
val x35 = x20 + 1
x9 = x35
x13 = x35
()
} else {
x12 = false
()
}
x50
}
x52
}
val x55 = x7
val x56 = x8
val x57 = x9
val x59 = new Anon1680061013(x0,0,x55)
x2 = x59
x3 = false
x4 = x57
val x64 = x2
val x65 = x3
val x66 = x4
val x68 = x64.start
val x69 = x68+", "
val x70 = x64.length
val x71 = x69+x70
val x72 = println(x71)
x72
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
0, 5
0, 8
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseStringStruct2 extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Anon1680061013 = null
var x3: Boolean = true
var x4: Int = -1
var x88: Int = 0
var x89: Boolean = false
var x90: Int = 0
var x92: Int = -1
var x93: Boolean = true
var x94: Int = 0
val x18 = x0.length
val x50 = {x12: (Int) => 
var x14: Int = 0
var x15: Boolean = true
var x16: Int = x12
val x19 = x12 >= x18
val x44 = if (x19) {
x14 = 0
x15 = true
x16 = x12
()
} else {
val x24 = x0(x12)
val x25 = x24 >= 'a'
val x26 = x24 <= 'z'
val x27 = x25 && x26
val x28 = x24 >= 'A'
val x29 = x24 <= 'Z'
val x30 = x28 && x29
val x31 = x27 || x30
val x42 = if (x31) {
x14 = x12
x15 = false
val x32 = x12 + 1
x16 = x32
()
} else {
x14 = 0
x15 = true
x16 = x12
()
}
x42
}
val x45 = x14
val x46 = x15
val x47 = x16
val x48 = new ParseResultInt(x45,x46,x47)
x48: ParseResultInt
}
val x86 = {x6: (Int) => 
var x8: Int = 0
var x9: Boolean = true
var x10: Int = x6
val x51 = x50(x6)
val x52 = x51.empty
val x80 = if (x52) {
val x53 = x6 >= x18
val x72 = if (x53) {
x8 = 0
x9 = true
x10 = x6
()
} else {
val x58 = x0(x6)
val x59 = x58 == '-'
val x70 = if (x59) {
x8 = x6
x9 = false
val x60 = x6 + 1
x10 = x60
()
} else {
x8 = 0
x9 = true
x10 = x6
()
}
x70
}
x72
} else {
val x74 = x51.res
x8 = x74
x9 = x52
val x77 = x51.next
x10 = x77
()
}
val x81 = x8
val x82 = x9
val x83 = x10
val x84 = new ParseResultInt(x81,x82,x83)
x84: ParseResultInt
}
val x121 = while ({val x95 = x93
val x96 = x92
val x97 = x94
val x98 = x96 != x97
val x99 = x95 && x98
x99}) {
val x101 = x94
x92 = x101
val x103 = x86(x101)
val x104 = x103.empty
val x119 = if (x104) {
x93 = false
()
} else {
val x107 = x88
val x108 = x89
val x109 = x90
val x111 = x107 + 1
x88 = x111
x89 = false
val x112 = x103.next
x90 = x112
x94 = x112
()
}
x119
}
val x122 = x88
val x123 = x89
val x124 = x90
val x126 = new Anon1680061013(x0,0,x122)
x2 = x126
x3 = false
x4 = x124
val x131 = x2
val x132 = x3
val x133 = x4
val x135 = x131.start
val x136 = x135+", "
val x137 = x131.length
val x138 = x136+x137
val x139 = println(x138)
x139
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
0, 14
0, 11
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseStringB(px6:Int,px7:Array[Char]) extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
var x2: Boolean = false
var x3: Boolean = true
var x4: Int = -1
val x6 = px6 // static data: 5
val x8 = 0 + x6
val x9 = x0.length
val x10 = x8 > x9
val x48 = if (x10) {
x2 = false
x3 = true
x4 = 0
()
} else {
var x16: Int = 0
var x17: Boolean = true
val x7 = px7 // static data: Array(h,e,l,l,o)
val x35 = while ({val x18 = x17
val x19 = x16
val x20 = x19 < x6
val x21 = x18 && x20
x21}) {
val x23 = x16
val x24 = 0 + x23
val x25 = x0(x24)
val x26 = x7(x23)
val x28 = x25 == x26
val x31 = if (x28) {
()
} else {
x17 = false
()
}
val x32 = x23 + 1
x16 = x32
()
}
val x36 = x17
val x46 = if (x36) {
x2 = true
x3 = false
x4 = x8
()
} else {
x2 = false
x3 = true
x4 = 0
()
}
x46
}
val x49 = x2
val x50 = x3
val x51 = x4
val x52 = new ParseResultBoolean(x49,x50,x51)
val x53 = println(x52)
x53
}
}
/*****************************************
  End of Generated Code                  
*******************************************/

case class ParseResultDouble(res: Double, empty: Boolean, next: Int)

case class OptionChar(value: Char, defined: Boolean)

case class Tuple2StringString(_1: java.lang.String, _2: java.lang.String)

case class ParseResultBoolean(res: Boolean, empty: Boolean, next: Int)

case class ParseResultTuple2StringString(res: Tuple2StringString, empty: Boolean, next: Int)

case class Anon1680061013(input: Array[Char], start: Int, length: Int)

case class ParseResultInt(res: Int, empty: Boolean, next: Int)

case class Tuple2CharString(_1: Char, _2: java.lang.String)

case class Tuple2OptionCharString(_1: OptionChar, _2: java.lang.String)

case class ParseResultString(res: java.lang.String, empty: Boolean, next: Int)
compilation: ok
ParseResultBoolean(true,false,5)
ParseResultBoolean(false,true,0)
ParseResultBoolean(false,true,0)
