/*****************************************
  Emitting Generated Code                  
*******************************************/
class keywordParse extends ((Array[Char])=>(Unit)) {
def apply(x0:Array[Char]): Unit = {
val x1 = null.asInstanceOf[java.lang.String]
var x3: java.lang.String = x1
var x4: Boolean = true
var x5: Int = -1
val x7 = x0.length
val x8 = 0 >= x7
val x113 = if (x8) {
x3 = x1
x4 = true
x5 = 0
()
} else {
val x18 = x0(0)
val x19 = x18 >= 'a'
val x20 = x18 <= 'z'
val x21 = x19 && x20
val x22 = x18 >= 'A'
val x23 = x18 <= 'Z'
val x24 = x22 && x23
val x25 = x21 || x24
val x111 = if (x25) {
var x29: java.lang.String = ""
var x30: Boolean = false
val x26 = 0 + 1
var x31: Int = x26
var x33: Int = -1
var x34: Boolean = true
var x35: Int = x26
val x75 = while ({val x36 = x34
val x37 = x33
val x38 = x35
val x39 = x37 != x38
val x40 = x36 && x39
x40}) {
val x42 = x35
x33 = x42
val x44 = x42 >= x7
val x73 = if (x44) {
x34 = false
()
} else {
val x48 = x0(x42)
val x49 = x48 >= 'a'
val x50 = x48 <= 'z'
val x51 = x49 && x50
val x52 = x48 >= 'A'
val x53 = x48 <= 'Z'
val x54 = x52 && x53
val x55 = x51 || x54
val x71 = if (x55) {
val x58 = x29
val x59 = x30
val x60 = x31
val x62 = x58+x48
x29 = x62
x30 = false
val x56 = x42 + 1
x31 = x56
x35 = x56
()
} else {
x34 = false
()
}
x71
}
x73
}
val x76 = x29
val x77 = x30
val x78 = x31
val x83 = if (x77) {
true
} else {
false
}
val x99 = if (x83) {
x1
} else {
val x82 = if (x77) {
val x11 = null.asInstanceOf[Tuple2CharString]
x11
} else {
val x80 = new Tuple2CharString(x18,x76)
x80
}
val x87 = x82._1
val x88 = x82._2
val x89 = x87+x88
val x90 = x89 == "true"
val x91 = x89 == "null"
val x92 = x90 || x91
val x93 = x89 == "false"
val x94 = x92 || x93
val x97 = if (x94) {
val x95 = "Keyword("+x89
val x96 = x95+")"
x96
} else {
"NoToken"
}
x97
}
x3 = x99
val x100 = if (x83) {
true
} else {
false
}
x4 = x100
val x84 = if (x77) {
0
} else {
x78
}
val x101 = if (x83) {
x84
} else {
x84
}
x5 = x101
()
} else {
x3 = x1
x4 = true
x5 = 0
()
}
x111
}
val x114 = x3
val x115 = x4
val x116 = x5
val x117 = new ParseResultString(x114,x115,x116)
val x118 = println(x117)
x118
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultString(Keyword(true),false,4)
ParseResultString(NoToken,false,3)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class twoWordParse extends ((Array[Char])=>(Unit)) {
def apply(x231:Array[Char]): Unit = {
val x232 = null.asInstanceOf[Tuple2StringString]
var x234: Tuple2StringString = x232
var x235: Boolean = true
var x236: Int = -1
val x238 = x231.length
val x239 = 0 >= x238
val x495 = if (x239) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x245 = x231(0)
val x246 = x245 == '"'
val x493 = if (x246) {
var x248: java.lang.String = ""
var x249: Boolean = false
val x26 = 0 + 1
var x250: Int = x26
var x252: Int = -1
var x253: Boolean = true
var x254: Int = x26
val x289 = while ({val x255 = x253
val x256 = x252
val x257 = x254
val x258 = x256 != x257
val x259 = x255 && x258
x259}) {
val x261 = x254
x252 = x261
val x263 = x261 >= x238
val x287 = if (x263) {
x253 = false
()
} else {
val x267 = x231(x261)
val x269 = x267 == '"'
val x285 = if (x269) {
x253 = false
()
} else {
val x274 = x248
val x275 = x249
val x276 = x250
val x278 = x274+x267
x248 = x278
x249 = false
val x272 = x261 + 1
x250 = x272
x254 = x272
()
}
x285
}
x287
}
val x290 = x248
val x291 = x249
val x292 = x250
val x487 = if (x291) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x299 = x292 >= x238
val x485 = if (x299) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x305 = x231(x292)
val x306 = x305 == '"'
val x483 = if (x306) {
var x314: java.lang.String = ""
var x315: Boolean = false
val x307 = x292 + 1
var x316: Int = x307
var x318: Int = -1
var x319: Boolean = true
var x320: Int = x307
val x356 = while ({val x321 = x319
val x322 = x318
val x323 = x320
val x324 = x322 != x323
val x325 = x321 && x324
x325}) {
val x327 = x320
x318 = x327
val x329 = x327 >= x238
val x354 = if (x329) {
x319 = false
()
} else {
val x333 = x231(x327)
val x334 = x333 == ' '
val x335 = x333 == '
'
val x336 = x334 || x335
val x352 = if (x336) {
val x339 = x314
val x340 = x315
val x341 = x316
val x343 = x339+x333
x314 = x343
x315 = false
val x337 = x327 + 1
x316 = x337
x320 = x337
()
} else {
x319 = false
()
}
x352
}
x354
}
val x357 = x314
val x358 = x315
val x359 = x316
val x364 = if (x358) {
true
} else {
false
}
val x369 = if (x364) {
true
} else {
false
}
val x477 = if (x369) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x370 = if (x364) {
0
} else {
val x365 = if (x358) {
x359
} else {
x359
}
x365
}
val x376 = x370 >= x238
val x475 = if (x376) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x383 = x231(x370)
val x384 = x383 == '"'
val x473 = if (x384) {
var x388: java.lang.String = ""
var x389: Boolean = false
val x385 = x370 + 1
var x390: Int = x385
var x392: Int = -1
var x393: Boolean = true
var x394: Int = x385
val x429 = while ({val x395 = x393
val x396 = x392
val x397 = x394
val x398 = x396 != x397
val x399 = x395 && x398
x399}) {
val x401 = x394
x392 = x401
val x403 = x401 >= x238
val x427 = if (x403) {
x393 = false
()
} else {
val x407 = x231(x401)
val x409 = x407 == '"'
val x425 = if (x409) {
x393 = false
()
} else {
val x414 = x388
val x415 = x389
val x416 = x390
val x418 = x414+x407
x388 = x418
x389 = false
val x412 = x401 + 1
x390 = x412
x394 = x412
()
}
x425
}
x427
}
val x430 = x388
val x431 = x389
val x432 = x390
val x467 = if (x431) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x439 = x432 >= x238
val x465 = if (x439) {
x234 = x232
x235 = true
x236 = 0
()
} else {
val x445 = x231(x432)
val x446 = x445 == '"'
val x463 = if (x446) {
val x368 = if (x364) {
val x1 = null.asInstanceOf[java.lang.String]
x1
} else {
val x310 = "StringLit("+x290
val x311 = x310+")"
x311
}
val x450 = "StringLit("+x430
val x451 = x450+")"
val x453 = new Tuple2StringString(x368,x451)
x234 = x453
x235 = false
val x447 = x432 + 1
x236 = x447
()
} else {
x234 = x232
x235 = true
x236 = 0
()
}
x463
}
x465
}
x467
} else {
x234 = x232
x235 = true
x236 = 0
()
}
x473
}
x475
}
x477
} else {
x234 = x232
x235 = true
x236 = 0
()
}
x483
}
x485
}
x487
} else {
x234 = x232
x235 = true
x236 = 0
()
}
x493
}
val x496 = x234
val x497 = x235
val x498 = x236
val x499 = new ParseResultTuple2StringString(x496,x497,x498)
val x500 = println(x499)
x500
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultTuple2StringString(Tuple2StringString(StringLit(hello),StringLit(carol)),false,15)
ParseResultTuple2StringString(null,true,0)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseString extends ((Array[Char])=>(Unit)) {
def apply(x770:Array[Char]): Unit = {
val x1 = null.asInstanceOf[java.lang.String]
var x771: java.lang.String = x1
var x772: Boolean = true
var x773: Int = -1
val x775 = x770.length
val x776 = 0 >= x775
val x895 = if (x776) {
x771 = x1
x772 = true
x773 = 0
()
} else {
val x781 = x770(0)
val x782 = x781 == 'h'
val x893 = if (x782) {
val x26 = 0 + 1
val x784 = x26 >= x775
val x887 = if (x784) {
x771 = x1
x772 = true
x773 = 0
()
} else {
val x792 = x770(x26)
val x793 = x792 == 'e'
val x885 = if (x793) {
val x794 = x26 + 1
val x796 = x794 >= x775
val x879 = if (x796) {
x771 = x1
x772 = true
x773 = 0
()
} else {
val x804 = x770(x794)
val x805 = x804 == 'l'
val x877 = if (x805) {
val x806 = x794 + 1
val x808 = x806 >= x775
val x871 = if (x808) {
x771 = x1
x772 = true
x773 = 0
()
} else {
val x816 = x770(x806)
val x817 = x816 == 'l'
val x869 = if (x817) {
val x818 = x806 + 1
val x820 = x818 >= x775
val x863 = if (x820) {
x771 = x1
x772 = true
x773 = 0
()
} else {
val x828 = x770(x818)
val x829 = x828 == 'o'
val x861 = if (x829) {
val x835 = x828+""
val x839 = x816+x835
val x843 = x804+x839
val x847 = x792+x843
val x851 = x781+x847
x771 = x851
x772 = false
val x830 = x818 + 1
x773 = x830
()
} else {
x771 = x1
x772 = true
x773 = 0
()
}
x861
}
x863
} else {
x771 = x1
x772 = true
x773 = 0
()
}
x869
}
x871
} else {
x771 = x1
x772 = true
x773 = 0
()
}
x877
}
x879
} else {
x771 = x1
x772 = true
x773 = 0
()
}
x885
}
x887
} else {
x771 = x1
x772 = true
x773 = 0
()
}
x893
}
val x896 = x771
val x897 = x772
val x898 = x773
val x899 = new ParseResultString(x896,x897,x898)
val x900 = println(x899)
x900
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
nVars=1000
compilation: ok
ParseResultString(hello,false,5)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseWholeNum extends ((Array[Char])=>(Unit)) {
def apply(x1017:Array[Char]): Unit = {
val x1018 = null.asInstanceOf[Int]
var x1020: Int = x1018
var x1021: Boolean = true
var x1022: Int = -1
val x1024 = x1017.length
val x1025 = 0 >= x1024
val x1105 = if (x1025) {
x1020 = x1018
x1021 = true
x1022 = 0
()
} else {
val x1031 = x1017(0)
val x1032 = x1031 >= '0'
val x1033 = x1031 <= '9'
val x1034 = x1032 && x1033
val x1103 = if (x1034) {
val x1036 = x1031 - '0'
val x1037 = x1036.toInt
var x1039: Int = x1037
var x1040: Boolean = false
val x26 = 0 + 1
var x1041: Int = x26
var x1043: Int = -1
var x1044: Boolean = true
var x1045: Int = x26
val x1086 = while ({val x1046 = x1044
val x1047 = x1043
val x1048 = x1045
val x1049 = x1047 != x1048
val x1050 = x1046 && x1049
x1050}) {
val x1052 = x1045
x1043 = x1052
val x1054 = x1052 >= x1024
val x1084 = if (x1054) {
x1044 = false
()
} else {
val x1059 = x1017(x1052)
val x1060 = x1059 >= '0'
val x1061 = x1059 <= '9'
val x1062 = x1060 && x1061
val x1082 = if (x1062) {
val x1068 = x1039
val x1069 = x1040
val x1070 = x1041
val x1065 = x1059 - '0'
val x1066 = x1065.toInt
val x1072 = x1068 * 10
val x1073 = x1072 + x1066
x1039 = x1073
x1040 = false
val x1063 = x1052 + 1
x1041 = x1063
x1045 = x1063
()
} else {
x1044 = false
()
}
x1082
}
x1084
}
val x1087 = x1039
val x1088 = x1040
val x1089 = x1041
val x1091 = if (x1088) {
x1018
} else {
x1087
}
x1020 = x1091
val x1092 = if (x1088) {
true
} else {
x1088
}
x1021 = x1092
val x1093 = if (x1088) {
0
} else {
x1089
}
x1022 = x1093
()
} else {
x1020 = x1018
x1021 = true
x1022 = 0
()
}
x1103
}
val x1106 = x1020
val x1107 = x1021
val x1108 = x1022
val x1109 = new ParseResultInt(x1106,x1107,x1108)
val x1110 = println(x1109)
x1110
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
ParseResultInt(1234,false,4)
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseStringStruct extends ((Array[Char])=>(Unit)) {
def apply(x1204:Array[Char]): Unit = {
val x1205 = null.asInstanceOf[Anon1680061013]
var x1207: Anon1680061013 = x1205
var x1208: Boolean = true
var x1209: Int = -1
var x1212: Int = 0
var x1213: Boolean = false
var x1214: Int = 0
var x1216: Int = -1
var x1217: Boolean = true
var x1218: Int = 0
val x1227 = x1204.length
val x1259 = while ({val x1219 = x1217
val x1220 = x1216
val x1221 = x1218
val x1222 = x1220 != x1221
val x1223 = x1219 && x1222
x1223}) {
val x1225 = x1218
x1216 = x1225
val x1228 = x1225 >= x1227
val x1257 = if (x1228) {
x1217 = false
()
} else {
val x1232 = x1204(x1225)
val x1233 = x1232 >= 'a'
val x1234 = x1232 <= 'z'
val x1235 = x1233 && x1234
val x1236 = x1232 >= 'A'
val x1237 = x1232 <= 'Z'
val x1238 = x1236 && x1237
val x1239 = x1235 || x1238
val x1255 = if (x1239) {
val x1242 = x1212
val x1243 = x1213
val x1244 = x1214
val x1246 = x1242 + 1
x1212 = x1246
x1213 = false
val x1240 = x1225 + 1
x1214 = x1240
x1218 = x1240
()
} else {
x1217 = false
()
}
x1255
}
x1257
}
val x1260 = x1212
val x1261 = x1213
val x1262 = x1214
val x1264 = new Anon1680061013(x1204,0,x1260)
x1207 = x1264
x1208 = false
x1209 = x1262
val x1269 = x1207
val x1270 = x1208
val x1271 = x1209
val x1273 = x1269.start
val x1274 = x1273+", "
val x1275 = x1269.length
val x1276 = x1274+x1275
val x1277 = println(x1276)
x1277
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
0, 5
0, 8
/*****************************************
  Emitting Generated Code                  
*******************************************/
class parseStringStruct2 extends ((Array[Char])=>(Unit)) {
def apply(x1351:Array[Char]): Unit = {
val x1205 = null.asInstanceOf[Anon1680061013]
var x1352: Anon1680061013 = x1205
var x1353: Boolean = true
var x1354: Int = -1
var x1437: Int = 0
var x1438: Boolean = false
var x1439: Int = 0
var x1441: Int = -1
var x1442: Boolean = true
var x1443: Int = 0
val x1018 = null.asInstanceOf[Int]
val x1368 = x1351.length
val x1400 = {x1362: (Int) => 
var x1364: Int = x1018
var x1365: Boolean = true
var x1366: Int = x1362
val x1369 = x1362 >= x1368
val x1394 = if (x1369) {
x1364 = x1018
x1365 = true
x1366 = x1362
()
} else {
val x1374 = x1351(x1362)
val x1375 = x1374 >= 'a'
val x1376 = x1374 <= 'z'
val x1377 = x1375 && x1376
val x1378 = x1374 >= 'A'
val x1379 = x1374 <= 'Z'
val x1380 = x1378 && x1379
val x1381 = x1377 || x1380
val x1392 = if (x1381) {
x1364 = x1362
x1365 = false
val x1382 = x1362 + 1
x1366 = x1382
()
} else {
x1364 = x1018
x1365 = true
x1366 = x1362
()
}
x1392
}
val x1395 = x1364
val x1396 = x1365
val x1397 = x1366
val x1398 = new ParseResultInt(x1395,x1396,x1397)
x1398
}
val x1436 = {x1356: (Int) => 
var x1358: Int = x1018
var x1359: Boolean = true
var x1360: Int = x1356
val x1401 = x1400(x1356)
val x1402 = x1401.empty
val x1430 = if (x1402) {
val x1403 = x1356 >= x1368
val x1422 = if (x1403) {
x1358 = x1018
x1359 = true
x1360 = x1356
()
} else {
val x1408 = x1351(x1356)
val x1409 = x1408 == '-'
val x1420 = if (x1409) {
x1358 = x1356
x1359 = false
val x1410 = x1356 + 1
x1360 = x1410
()
} else {
x1358 = x1018
x1359 = true
x1360 = x1356
()
}
x1420
}
x1422
} else {
val x1424 = x1401.res
x1358 = x1424
x1359 = x1402
val x1427 = x1401.next
x1360 = x1427
()
}
val x1431 = x1358
val x1432 = x1359
val x1433 = x1360
val x1434 = new ParseResultInt(x1431,x1432,x1433)
x1434
}
val x1470 = while ({val x1444 = x1442
val x1445 = x1441
val x1446 = x1443
val x1447 = x1445 != x1446
val x1448 = x1444 && x1447
x1448}) {
val x1450 = x1443
x1441 = x1450
val x1452 = x1436(x1450)
val x1453 = x1452.empty
val x1468 = if (x1453) {
x1442 = false
()
} else {
val x1456 = x1437
val x1457 = x1438
val x1458 = x1439
val x1460 = x1456 + 1
x1437 = x1460
x1438 = false
val x1461 = x1452.next
x1439 = x1461
x1443 = x1461
()
}
x1468
}
val x1471 = x1437
val x1472 = x1438
val x1473 = x1439
val x1475 = new Anon1680061013(x1351,0,x1471)
x1352 = x1475
x1353 = false
x1354 = x1473
val x1480 = x1352
val x1481 = x1353
val x1482 = x1354
val x1484 = x1480.start
val x1485 = x1484+", "
val x1486 = x1480.length
val x1487 = x1485+x1486
val x1488 = println(x1487)
x1488
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
0, 14
0, 11
