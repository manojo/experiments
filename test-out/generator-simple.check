/*****************************************
  Emitting Generated Code                  
*******************************************/
class test1 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x10 = if (x2) {
var x5 : Int = x0
val x8 = while (x5 < x1) {
x3 = x5

x5 = x5 + 1
}
x8
} else {
()
}
val x11 = x3
x11
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
10
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test2 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x11 = if (x2) {
var x5 : Int = x0
val x9 = while (x5 < x1) {
val x6 = x5 * 2
x3 = x6

x5 = x5 + 1
}
x9
} else {
()
}
val x12 = x3
x12
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
20
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test3 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x12 = if (x2) {
var x5 : Int = x0
val x10 = while (x5 < x1) {
val x6 = x3
val x7 = x6 + x5
x3 = x7

x5 = x5 + 1
}
x10
} else {
()
}
val x13 = x3
x13
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
55
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test4 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x16 = if (x2) {
var x5 : Int = x0
val x14 = while (x5 < x1) {
val x6 = x5 % 2
val x7 = x6 != 0
val x12 = if (x7) {
val x8 = x3
val x9 = x8 + x5
x3 = x9
()
} else {
()
}

x5 = x5 + 1
}
x14
} else {
()
}
val x17 = x3
x17
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
25
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test5 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x12 = if (x2) {
var x5 : Int = x0
val x10 = while (x5 < x1) {
val x6 = x3
val x7 = x6 + x5
x3 = x7

x5 = x5 + 1
}
x10
} else {
()
}
val x24 = if (x2) {
var x13 : Int = x0
val x22 = while (x13 < x1) {
val x14 = x13 % 2
val x15 = x14 != 0
val x20 = if (x15) {
val x16 = x3
val x17 = x16 + x13
x3 = x17
()
} else {
()
}

x13 = x13 + 1
}
x22
} else {
()
}
val x25 = x3
x25
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
80
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test6 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x19 = if (x2) {
var x5 : Int = x0
val x17 = while (x5 < x1) {
val x6 = x0 < x5
val x15 = if (x6) {
var x8 : Int = x0
val x13 = while (x8 < x5) {
val x9 = x3
val x10 = x9 + x8
x3 = x10

x8 = x8 + 1
}
x13
} else {
()
}

x5 = x5 + 1
}
x17
} else {
()
}
val x20 = x3
x20
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
20
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test7 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x4 = x0 + 1
val x5 = x4 == x1
val x9 = if (x5) {
val x2 = Array(1,2,3)
val x6 = x2(x0)
x3 = x6
()
} else {
()
}
val x10 = x3
x10
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
2
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test8 extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x1: Int = 0
val x2 = x1
val x3 = x2 + 1
x1 = x3
val x5 = x1
val x6 = x5 + 2
x1 = x6
val x8 = x1
val x9 = x8 + 3
x1 = x9
val x11 = x1
x11
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
6
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test9 extends ((Int, Int)=>(Int)) {
def apply(x0:Int, x1:Int): Int = {
var x3: Int = 0
val x2 = x0 < x1
val x15 = if (x2) {
var x5 : Int = x0
val x13 = while (x5 < x1) {
val x9 = x3
val x6 = x5 * 2
val x7 = x6 + 1
val x8 = x7 * 3
val x10 = x9 + x8
x3 = x10

x5 = x5 + 1
}
x13
} else {
()
}
val x16 = x3
x16
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
297
/*****************************************
  Emitting Generated Code                  
*******************************************/
class test10 extends ((Int)=>(Int)) {
def apply(x0:Int): Int = {
var x2: Int = 0
val x1 = 1 < x0
val x19 = if (x1) {
var x4 : Int = 1
val x17 = while (x4 < x0) {
val x5 = 1 < x4
val x15 = if (x5) {
var x7 : Int = 1
val x13 = while (x7 < x4) {
val x9 = x2
val x8 = x4 * x7
val x10 = x9 + x8
x2 = x10

x7 = x7 + 1
}
x13
} else {
()
}

x4 = x4 + 1
}
x17
} else {
()
}
val x20 = x2
x20
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
compilation: ok
870
